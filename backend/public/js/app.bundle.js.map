{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/component/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/component/helper/ValidationHelper.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesViewUsingContext.ts","webpack://template-feo-react-babel/./src/CreatedByPermissionChecker.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesCompositeView.ts","webpack://template-feo-react-babel/./src/component/sidebar/WorkoutSummarySidebar.ts","webpack://template-feo-react-babel/./src/component/renderer/WorkoutSummaryRenderer.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutSummaryView.ts","webpack://template-feo-react-babel/./src/component/sidebar/CurrentWorkoutSidebar.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutExercisesView.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutCompositeView.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutsViewUsingContext.ts","webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    exercises: 'exercises',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary: 'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises: 'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail: \"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone: 'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\n\n","import debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {NotificationManager, NotificationType, SocketListener} from \"ui-framework-jps\";\n\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user});\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.message);\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {\n    AggregateStateManager,\n    AsyncStateManagerWrapper,\n    BasicObjectDefinitionFactory,\n    ChatManager, copyObject,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    FieldDefinition,\n    FieldType,\n    isSameMongo,\n    KeyType,\n    MemoryBufferStateManager,\n    NotificationController,\n    ObjectDefinitionRegistry,\n    RESTApiStateManager,\n    SimpleValueDataSource,\n    SocketManager,\n    StateChangeListener,\n    StateManager\n} from \"ui-framework-jps\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener, DataObjectListener {\n    private static _instance: Controller;\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                serverURL: '',\n                api: API_Config.users,\n                isActive: true,\n                find: false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n            {\n                stateName: STATE_NAMES.exerciseTypes,\n                serverURL: '',\n                api: API_Config.exerciseTypes,\n                isActive: true,\n                idField: '_id',\n                find: false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n            {\n                stateName: STATE_NAMES.workouts,\n                serverURL: '',\n                api: API_Config.workouts,\n                isActive: true,\n                idField: '_id',\n                find: false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            }\n        ]);\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo)\n        let memorySM = new MemoryBufferStateManager(isSameMongo)\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM, isSameMongo);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().addListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n    }\n\n    handleShowChat(roomName: string | null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch (typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName, dataObj, false);\n                break;\n            }\n        }\n    }\n\n    addExerciseToCurrentWorkout(exerciseType: any): void {\n        let copyOfExercise:any = copyObject(exerciseType);\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        copyOfExercise.completed = false;\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout: any): void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise: any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false);\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n\n\n        // create the object definitions for the exercise type and workout\n        let exerciseDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exercises, 'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"completed\", \"Completed\", FieldType.boolean, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"name\", \"Name\", FieldType.text, true);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"duration\", \"Duration\", FieldType.duration, true);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"sets\", \"Sets\", FieldType.integer, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"reps\", \"Repetitions\", FieldType.integer, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"weight\", \"Weight\", FieldType.float, false);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseDefinition, \"distance\", \"Distance\", FieldType.float, false);\n        cLogger(`Exercise data object definition`);\n        cLogger(exerciseDefinition);\n\n\n        let workoutDefinition: DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts, 'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addNumericFieldToObjDefinition(workoutDefinition, \"calories\", \"Calories\", FieldType.integer, false, \"Calories burned during workout\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition: FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.linkedDataObjectId = exerciseDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n\n\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n}\n\n\n","import {SidebarLocation, SidebarPrefs, SidebarViewContainer} from \"ui-framework-jps\";\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'exerciseTypesSidebar',\n        expandedSize: '50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import {\n    ComparisonType,\n    ConditionResponse,\n    Form,\n    ViewMode,\n    MultipleConditionLogic,\n    ValidationManager,\n    ValidationRule\n} from \"ui-framework-jps\";\n\n\nexport class ValidationHelper {\n    private static _instance: ValidationHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): ValidationHelper {\n        if (!(ValidationHelper._instance)) {\n            ValidationHelper._instance = new ValidationHelper();\n        }\n        return ValidationHelper._instance;\n\n    }\n\n    public setupValidationForExerciseTypeDetailsForm(form: Form) {\n        let rule: ValidationRule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        };\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n        rule = {\n            viewMode: ViewMode.any,\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.invalid,\n            multipleConditionLogic: MultipleConditionLogic.failOnlyIfFinalConditionIsAFailAndPreviousConditionsAreNotFails,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                },\n                {\n                    comparison: ComparisonType.greaterThan,\n                    values: '0'\n                }\n\n\n            ]\n        }\n        ValidationManager.getInstance().addRuleToView(form, rule);\n    }\n\n}\n","import {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\n\n\nimport debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextDefinition,\n    ContextualInformationHelper,\n    FIELD_CreatedBy,\n    isSameMongo,\n    KeyType,\n    ListViewRendererUsingContext,\n    StateManager,\n    View\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('exercise-types-view');\n\nexport class ExerciseTypesViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exerciseTypes',\n            dataSourceId: VIEW_NAME.exerciseTypes,\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        sorter: function (item1, item2) {\n            let result = 1;\n            if (item1.name < item2.name) result = -1;\n            return result;\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons: (name: string, item: any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    } else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-trash-alt',\n                attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                    name: 'data-placement',\n                    value: \"right\"\n                }, {name: 'title', value: \"Delete this exercise type.\"}]\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n        extraActions: [{\n            name: 'addToWorkout',\n            button: {\n                classes: 'btn bg-primary text-white btn-circle btn-md mr-1',\n                iconClasses: 'fas fa-arrow-alt-circle-right',\n                attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                    name: 'data-placement',\n                    value: \"right\"\n                }, {name: 'data-html', value: 'true'}, {\n                    name: 'title',\n                    value: \"Add this <strong>exercise</strong> to the current workout.\"\n                }]\n            },\n            confirm:false\n        }]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(ExerciseTypesViewUsingContext.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context: ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.exerciseTypes, 'Exercise Types');\n        ContextualInformationHelper.getInstance().addActionToContext(context, 'addToWorkout', 'Add To Workout', this.eventHandlerDelegate.eventActionClicked, 'fas fa-arrow-alt-circle-right');\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        } else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        logger(selectedItem[FIELD_CreatedBy]);\n        if (selectedItem[FIELD_CreatedBy]) {\n            if (selectedItem[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        logger(item[FIELD_CreatedBy]);\n        if (item[FIELD_CreatedBy]) {\n            if (item[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === ExerciseTypesViewUsingContext.DOMConfig.extraActions[0].name) {\n            // add the exercise type the current workout\n            Controller.getInstance().addExerciseToCurrentWorkout(selectedItem);\n        }\n    }\n\n\n}\n\n","import Controller from \"./Controller\";\nimport {Field, ViewFieldPermissionChecker} from \"ui-framework-jps\";\n\n\nexport class CreatedByPermissionChecker implements ViewFieldPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToEditField(dataObj: any, field: Field): boolean {\n        return true;\n    }\n}\n","import {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\n\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {ExerciseTypesViewUsingContext} from \"./ExerciseTypesViewUsingContext\";\nimport {CreatedByPermissionChecker} from \"../../CreatedByPermissionChecker\";\n\nimport ExerciseTypesSidebar from \"../sidebar/ExerciseTypesSidebar\";\nimport {\n    BasicObjectDefinitionFactory,\n    BootstrapFormConfigHelper,\n    DataObjectDefinition,\n    DetailView,\n    DetailViewImplementation, DetailViewRuntimeConfig, ElementLocation,\n    Form,\n    FormDetailViewRenderer,\n    LinkedCollectionDetailController,\n    ObjectDefinitionRegistry,\n    SidebarViewContainer\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('exercise-types-composite-view');\n\nexport class ExerciseTypesCompositeView {\n    private sideBar: SidebarViewContainer;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const exerciseTypes = new ExerciseTypesViewUsingContext(Controller.getInstance().getStateManager());\n        this.sideBar.addView(exerciseTypes, {containerId: ExerciseTypesSidebar.SidebarContainers.container});\n\n        const exerciseTypeDefinition: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.exerciseTypeDetail, exerciseTypeDefinition, new CreatedByPermissionChecker(), BootstrapFormConfigHelper.getInstance());\n\n            let exerciseTypeDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.exerciseTypeDetail,\n                    dataSourceId: VIEW_NAME.exerciseTypes\n                }, exerciseTypeDetailRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes, exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n\n            let runtimeConfig:DetailViewRuntimeConfig = {\n                fieldDisplayOrders:startingDisplayOrder,\n                hideModifierFields:true,\n                hasExternalControl:false,\n                deleteButton: {\n                    classes: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                    iconClasses: 'fas fa-trash-alt'\n                },\n                cancelButton: {\n                    classes: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                    iconClasses: 'fas fa-ban'\n                },\n                saveButton: {\n                    classes: 'btn-primary rounded p-1 mt-2 w-100',\n                    iconClasses: 'fas fa-save'\n                },\n                buttonLocation:ElementLocation.top\n\n\n            }\n\n\n            exerciseTypeDetailView.initialise(runtimeConfig);\n\n            const detailForm: Form | null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.createNewExerciseType);\n            logger(`Setting up button for creating exercise types`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click', (event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n}\n","import {SidebarLocation, SidebarPrefs, SidebarViewContainer} from \"ui-framework-jps\";\n\n\nexport default class WorkoutSummarySidebar extends SidebarViewContainer {\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'workoutSummarySidebar',\n        expandedSize: '100%',\n        location: SidebarLocation.bottom\n    }\n\n    static SidebarContainers = {\n        container: 'workoutSummary',\n    }\n\n\n    constructor() {\n        super(WorkoutSummarySidebar.SidebarPrefs);\n    }\n}\n","import debug from 'debug';\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\nimport {CollectionView, CollectionViewEventHandler, CollectionViewRenderer} from \"ui-framework-jps\";\n\n\nconst avLogger = debug('workout-summary-renderer');\n\nexport class WorkoutSummaryRenderer implements CollectionViewRenderer {\n\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart: Chart | null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating workout summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        let sevenWorkouts = newState;\n        if (newState.length > 7) {\n            sevenWorkouts = newState.slice(newState.length - 7);\n        }\n\n\n        // go through the workouts and find all the unique exercise names as data series names\n        let exerciseNames: string[] = [];\n        let exerciseBG: string[] = [];\n        let exerciseBR: string[] = [];\n        let exerciseTypes: string[] = [];\n        let labels: string[] = [];\n        sevenWorkouts.forEach((workout: any) => {\n            const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n            labels.push(label);\n            avLogger(`Added label ${label}`);\n\n            if (workout.exercises) {\n                workout.exercises.forEach((exercise: any) => {\n                    const exerciseName = exercise.name;\n                    // do we have this exercise already?\n                    let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n                    if (foundIndex < 0) {\n                        avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n                        exerciseNames.push(exerciseName);\n                        exerciseTypes.push(exercise.type);\n                        const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n                        exerciseBG.push(colours[0]);\n                        exerciseBR.push(colours[1]);\n                    }\n                })\n            }\n        });\n\n        // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n\n        let datasets: any[] = [];\n\n        exerciseNames.forEach((name, index) => {\n            const exerciseType = exerciseTypes[index];\n            const itemBG = exerciseBG[index];\n            const itemBR = exerciseBR[index];\n\n            avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n\n            let data: number[] = [];\n            let bg: string[] = [];\n            let br: string[] = [];\n\n\n            sevenWorkouts.forEach((workout: any) => {\n                bg.push(itemBG);\n                br.push(itemBR);\n\n                // find the exercise name\n                if (workout.exercises) {\n\n                    const didntFindExercise = workout.exercises.every((exercise: any) => {\n                        if (exercise.name == name) {\n                            if (exerciseType === 'strength') {\n                                avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n                                data.push(exercise.weight);\n                            } else {\n                                avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n                                data.push(exercise.distance);\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                    // not found - zero value\n                    if (didntFindExercise) {\n                        data.push(0);\n                    }\n\n                } else {\n                    data.push(0);\n                }\n            });\n            let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order: 1};\n            let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n            avLogger(dataset);\n            datasets.push(dataset);\n            //datasets.push(lineDataSet);\n        });\n\n\n        let chartData = {\n            labels: labels,\n            datasets: datasets,\n        };\n\n        let config = {\n            type: 'bar',\n            data: chartData,\n            options: {\n                responsive: true,\n                animation: true,\n                maintainAspectRatio: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            },\n\n        }\n        avLogger(chartData);\n\n        // @ts-ignore\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n    private generateRandomExerciseColourAndBorder(isStrength: boolean = true): string[] {\n        let red = 0;\n        let blue = 0;\n        let green = 50;\n\n        const newColour = Math.floor(Math.random() * 100) + 155;\n        if (isStrength) red = newColour;\n        if (!isStrength) blue = newColour;\n        const transparency = 0.4;\n\n        const background = `rgba(${red},${green},${blue},${transparency})`;\n        const border = `rgb(${red},${green},${blue})`;\n\n        return [background, border];\n    }\n\n}\n","import {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\n\nimport {WorkoutSummaryRenderer} from \"../renderer/WorkoutSummaryRenderer\";\nimport {\n    AbstractStatefulCollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewListener,\n    isSameMongo,\n    KeyType,\n    View\n} from \"ui-framework-jps\";\n\n\nexport class WorkoutSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'workoutSummaryChart',\n            dataSourceId: VIEW_NAME.workoutSummary,\n        },\n        resultsElement: {\n            type: 'canvas',\n            classes: '',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElement: {\n                type: '',\n                classes: '',\n            },\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(WorkoutSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new WorkoutSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n    }\n\n}\n\n","import {SidebarLocation, SidebarPrefs, SidebarViewContainer} from \"ui-framework-jps\";\n\n\nexport default class CurrentWorkoutSidebar extends SidebarViewContainer {\n    static sidebarPrefs: SidebarPrefs = {\n        id: 'currentWorkoutSidebar',\n        expandedSize: '50%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        list: 'exercises',\n        detail: 'workoutDetail'\n    }\n\n\n    constructor() {\n        super(CurrentWorkoutSidebar.sidebarPrefs);\n    }\n}\n","import {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\n\n\nimport debug from 'debug';\nimport {\n    AbstractStatefulCollectionView,\n    CollectionViewDOMConfig,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextualInformationHelper,\n    isSameMongo,\n    KeyType,\n    ListViewRendererUsingContext,\n    StateManager,\n    View\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('current-workout-exercises-view');\n\nexport class CurrentWorkoutExercisesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exercises',\n            dataSourceId: VIEW_NAME.exercises,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromExerciseTypes],\n                acceptTypes: [DRAGGABLE.typeExerciseType]\n            }\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons: (name: string, item: any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    } else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'fas fa-trash-alt',\n                attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                    name: 'data-placement',\n                    value: \"right\"\n                }, {name: 'title', value: \"Delete this exercise from the workout.\"}]\n            }\n        }\n    };\n\n    constructor(stateManager: StateManager) {\n        super(CurrentWorkoutExercisesView.DOMConfig, stateManager, STATE_NAMES.exercises);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.exercises, 'Exercises');\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        } else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    itemDropped(view: View, droppedItem: any) {\n        Controller.getInstance().addExerciseToCurrentWorkout(droppedItem);\n    }\n\n\n}\n\n","import {BUTTON, INPUT, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\n\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {CurrentWorkoutExercisesView} from \"./CurrentWorkoutExercisesView\";\n\nimport moment from \"moment\";\nimport App from \"../../App\";\nimport {\n    BasicObjectDefinitionFactory,\n    BootstrapFormConfigHelper,\n    DataObjectController,\n    DataObjectDefinition,\n    DataObjectListener,\n    DefaultFieldPermissionChecker,\n    DetailView,\n    DetailViewImplementation,\n    DetailViewRuntimeConfig,\n    ElementLocation,\n    Form,\n    FormDetailViewRenderer,\n    isSameMongo,\n    LinkedCollectionDetailController,\n    MemoryBufferStateManager,\n    ObjectDefinitionRegistry,\n    SidebarViewContainer,\n    StateChangeListener,\n    StateManager\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('current-workout-composite-view');\n\nexport class CurrentWorkoutCompositeView implements StateChangeListener, DataObjectListener {\n    private sideBar: SidebarViewContainer;\n    private currentWorkout: any = {};\n    private workoutDef: DataObjectDefinition | null = null;\n    private readonly stateManager: StateManager;\n    private workoutNameEl: HTMLInputElement | null = null;\n    private workoutCaloriesEl: HTMLInputElement | null = null;\n\n    constructor(sideBar: SidebarViewContainer) {\n        this.sideBar = sideBar;\n        this.stateManager = new MemoryBufferStateManager(isSameMongo);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.exercises, this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.workouts, this);\n    }\n\n    getListenerName(): string {\n        return 'Current Workout Composite View';\n    }\n\n    onDocumentLoaded() {\n        this.workoutNameEl = <HTMLInputElement | null>document.getElementById(INPUT.workoutName);\n        this.workoutNameEl?.addEventListener('blur', (event) => {\n            if (event.target) {\n                // @ts-ignore\n                this.currentWorkout.name = event.target.value;\n                this.saveWorkout();\n            }\n        });\n\n        this.workoutCaloriesEl = <HTMLInputElement | null>document.getElementById('calories');\n        this.workoutCaloriesEl?.addEventListener('blur', (event) => {\n            if (event.target) {\n                // @ts-ignore\n                this.currentWorkout.calories = parseInt(event.target.value);\n                this.saveWorkout();\n            }\n\n        });\n\n\n        this.workoutDef = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.workouts);\n        if (!this.workoutDef) throw new Error('Workout definition not found');\n\n        const exercises = new CurrentWorkoutExercisesView(this.stateManager);\n        this.sideBar.addView(exercises, {containerId: VIEW_CONTAINER.exerciseDropZone});\n\n        const exerciseDefinition: DataObjectDefinition | null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exercises);\n\n        if (exerciseDefinition) {\n            let exerciseTypeDetailRenderer: FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.currentWorkoutDetail, exerciseDefinition, new DefaultFieldPermissionChecker(), BootstrapFormConfigHelper.getInstance());\n\n            let exerciseTypeDetailView: DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.currentWorkoutDetail,\n                    dataSourceId: VIEW_NAME.exercises\n                }, exerciseTypeDetailRenderer);\n            let viewLinker: LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exercises, exercises);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseDefinition);\n\n            let runtimeConfig:DetailViewRuntimeConfig = {\n                fieldDisplayOrders:startingDisplayOrder,\n                hideModifierFields:true,\n                hasExternalControl:false,\n                deleteButton: {\n                    classes: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                    iconClasses: 'fas fa-trash-alt'\n                },\n                cancelButton: {\n                    classes: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                    iconClasses: 'fas fa-ban'\n                },\n                saveButton: {\n                    classes: 'btn-primary rounded p-1 mt-2 w-100',\n                    iconClasses: 'fas fa-save'\n                },\n                buttonLocation:ElementLocation.top\n\n\n            }\n            exerciseTypeDetailView.initialise(runtimeConfig);\n\n            const detailForm: Form | null = exerciseTypeDetailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let completeWorkout = <HTMLButtonElement>document.getElementById(BUTTON.completeWorkout);\n            logger(`Setting up button for completing the workout`);\n            logger(completeWorkout);\n            if (completeWorkout) {\n                completeWorkout.addEventListener('click', (event) => {\n                    logger(`Completing the workout`);\n                    this.currentWorkout.completed = true;\n                    this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n                    if (detailForm) {\n                        detailForm.reset();\n                        detailForm.setReadOnly();\n                    }\n                    this.saveWorkout();\n                    this.createWorkout();\n                    App.getInstance().hideAllSideBars();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`${managerName},${name}`);\n        if (name === STATE_NAMES.workouts) {\n            logger(`Workouts loaded`);\n            // is there a current workout?\n            this.currentWorkout = null;\n\n            newValue.forEach((workout: any) => {\n                if (!workout.completed || (workout.completed === 'false')) {\n                    this.currentWorkout = workout;\n                }\n            });\n\n            if (this.currentWorkout) {\n                logger(`Workouts loaded found existing current workout`);\n                if (this.workoutNameEl && this.currentWorkout.name) this.workoutNameEl.value = this.currentWorkout.name;\n                if (this.workoutCaloriesEl && this.currentWorkout.calories) this.workoutCaloriesEl.value = this.currentWorkout.calories;\n                this.stateManager.setStateByName(STATE_NAMES.exercises, this.currentWorkout.exercises, true);\n            } else {\n                logger(`Workouts loaded no existing current workout, creating and saving`);\n                this.createWorkout();\n            }\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (name === STATE_NAMES.exercises) {\n            logger(`Added a new exercise to workout`);\n            logger(itemAdded);\n\n            this.currentWorkout.exercises.push(itemAdded);\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (name === STATE_NAMES.exercises) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise: any) => exercise._id === itemRemoved._id);\n            logger(`Removing exercise to workout at index ${foundIndex}`);\n            logger(itemRemoved);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex, 1);\n            }\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (name === STATE_NAMES.exercises) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise: any) => exercise._id === itemNewValue._id);\n            logger(`Updating exercise to workout at index ${foundIndex}`);\n            logger(itemNewValue);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex, 1, itemNewValue);\n            }\n            this.saveWorkout();\n        }\n\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Added a new exercise to workout from view`);\n        logger(dataObj);\n        this.stateManager.addNewItemToState(STATE_NAMES.exercises, dataObj, false);\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Updating exercise in workout from view`);\n        logger(dataObj);\n        this.stateManager.updateItemInState(STATE_NAMES.exercises, dataObj, false);\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        logger(`Deleting exercise from workout from view`);\n        logger(dataObj);\n        this.stateManager.removeItemFromState(STATE_NAMES.exercises, dataObj, false);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private createWorkout() {\n        logger(`Creating new current workout`);\n        this.currentWorkout = ObjectDefinitionRegistry.getInstance().createInstance(STATE_NAMES.workouts);\n        logger(this.currentWorkout);\n        this.currentWorkout.name = '';\n        this.currentWorkout.calories = 0;\n        this.currentWorkout.completed = false;\n\n        if (this.workoutNameEl) this.workoutNameEl.value = '';\n        if (this.workoutCaloriesEl) this.workoutCaloriesEl.value = '';\n\n        Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.workouts, this.currentWorkout, false);\n        this.stateManager.setStateByName(STATE_NAMES.exerciseTypes, this.currentWorkout.exercises, true);\n    }\n\n    private saveWorkout() {\n        logger(`Saving current workout`);\n        logger(this.currentWorkout);\n        this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n        this.currentWorkout.modifiedOn = moment().format('YYYYMMDDHHmmss');\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.workouts, this.currentWorkout, false);\n    }\n\n    foundResult(managerName: string, name: string, foundItem: any): void {\n    }\n\n\n}\n","import {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\n\nimport debug from 'debug';\nimport moment from \"moment\";\nimport Chart from 'chart.js/auto';\nimport App from \"../../App\";\nimport {\n    AbstractStatefulCollectionView,\n    addDurations,\n    CarouselDOMConfig,\n    CarouselViewRendererUsingContext,\n    CollectionViewEventHandlerDelegateUsingContext,\n    CollectionViewListener,\n    CollectionViewListenerForwarder,\n    ContextDefinition,\n    ContextualInformationHelper,\n    isSameMongo,\n    KeyType,\n    Modifier,\n    RowPosition,\n    truncateString,\n    View\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('workouts-view');\n\ntype ExerciseSummary = {\n    weight: number,\n    distance: number,\n    duration: string\n}\n\ntype ChartRef = {\n    _id: string,\n    chart: Chart | null\n}\n\n\nexport class WorkoutsViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CarouselDOMConfig = {\n        itemsPerRow: {\n            small: 1,\n            medium: 2,\n            large: 3,\n            xlarge: 4\n        },\n        rowContainer: {\n            classes: \"carousel-item\",\n            type: 'div',\n        },\n        activeRow: {\n            type: '',\n            classes: 'active',\n        },\n        activeRowPosition: RowPosition.last,\n        row: {\n            classes: \"row\",\n            type: 'div',\n        },\n        multipleItemsPerRowContainer: {\n            type: 'div',\n            classes: 'col-sm-12 col-md-4 col-lg-3 mb-2',\n        },\n        actionContainer: {\n            type: 'div',\n            classes: 'card-footer d-flex w-100 justify-content-end'\n        },\n        collectionConfig: {\n            viewConfig: {\n                resultsContainerId: 'workouts',\n                dataSourceId: VIEW_NAME.workouts,\n                drop: {\n                    acceptTypes: [DRAGGABLE.typeExerciseType],\n                    acceptFrom: [DRAGGABLE.fromExerciseTypes]\n                }\n            },\n            resultsElement: {\n                type: 'div',\n                classes: 'card',\n            },\n            keyId: '_id',\n            keyType: KeyType.string,\n            modifiers: {\n                normal: 'bg-light',\n                inactive: 'bg-light',\n                active: 'bg-light',\n                warning: 'bg-light',\n            },\n            detail: {\n                containerClasses: 'card-body',\n                textElement: {\n                    classes: '',\n                    type: 'div'\n                },\n                select: true,\n                delete: {\n                    classes: 'btn btn-danger btn-circle btn-md',\n                    iconClasses: 'fas fa-trash-alt text-white',\n                    attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                        name: 'data-placement',\n                        value: \"top\"\n                    }, {name: 'title', value: \"Delete this workout\"}]\n                },\n                background: {\n                    type: 'div',\n                    classes: '',\n                },\n            },\n            extraActions: [\n                {\n                    name: 'template',\n                    button: {\n                        text: '',\n                        classes: 'btn btn-primary btn-circle btn-md mr-2',\n                        iconClasses: 'fas fa-copy',\n                        attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                            name: 'data-placement',\n                            value: \"top\"\n                        }, {name: 'title', value: \"Add the exercises from this workout to the current workout.\"}]\n                    },\n                    confirm:false\n\n                },\n                {\n                    name: 'continue',\n                    button: {\n                        text: '',\n                        iconClasses: 'text-white fas fa-clipboard-list',\n                        classes: 'btn btn-warning btn-circle btn-md mr-2',\n                        attributes: [{name: 'data-toggle', value: \"tooltip\"}, {\n                            name: 'data-placement',\n                            value: \"top\"\n                        }, {name: 'title', value: \"Continue this current workout\"}]\n                    },\n                    confirm:false\n                }\n            ],\n\n        },\n    }\n    private static bgStrength = 'rgba(255, 0, 0, 0.2)';\n    private static bgCardio = 'rgba(0, 50, 255, 0.2)';\n    private static borderStrength = 'rgb(255, 50, 0)';\n    private static borderCardio = 'rgb(0, 50 , 255)';\n    private chartRefs: ChartRef[];\n\n    constructor() {\n        super(WorkoutsViewUsingContext.DOMConfig.collectionConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new CarouselViewRendererUsingContext(this, this, WorkoutsViewUsingContext.DOMConfig);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this, <CollectionViewListenerForwarder>this.eventForwarder);\n        this.chartRefs = [];\n\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context: ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this, STATE_NAMES.workouts, 'Workouts');\n        ContextualInformationHelper.getInstance().addActionToContext(context, 'template', 'Copy exercises to Current Workout', this.eventHandlerDelegate.eventActionClicked, 'fas fa-copy');\n        ContextualInformationHelper.getInstance().addActionToContext(context, 'continue', 'Continue Current Workout', this.eventHandlerDelegate.eventActionClicked, 'fas fa-clipboard-list');\n\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        if (item.exercises) {\n            item.exercises.forEach((exercise: any) => {\n                buffer += `<strong>${exercise.name}</strong>: `;\n                if (exercise.type === 'cardio') {\n                    buffer += `${exercise.distance} km in ${exercise.duration}`;\n                } else {\n                    buffer += `${exercise.sets} sets of ${exercise.reps} reps in ${exercise.duration}`;\n                }\n                buffer += `<br/>`;\n            });\n        }\n        return buffer;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return (selectedItem.completed);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let summary = this.calculateExerciseSummary(item);\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">`;\n        if (item.name) {\n            buffer += `${item.name}</h5>`;\n            buffer += `<h6 class=\"card-subtitle\">${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h6>`;\n        } else {\n            if (item.completed) {\n                buffer += `${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h5>`;\n            } else {\n                buffer += 'Current</h5>';\n            }\n\n        }\n        buffer += `<ul class=\"list-group list-group-flush\">`;\n        buffer += `<li class=\"list-group-item\"><strong>Duration:</strong> ${summary.duration}</li>`;\n        if (summary.weight > 0) buffer += `<li class=\"list-group-item\"><strong>Total Weight:</strong> ${summary.weight}</li>`;\n        if (summary.distance > 0) buffer += `<li class=\"list-group-item\"><strong>Total Distance: </strong> ${summary.distance}</li>`;\n        buffer += `</ul>`;\n        containerEl.innerHTML = buffer;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return (item.completed);\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        let result = false;\n        if (actionName === 'template') {\n            if ((item.completed) && (item.completed === true)) {\n                result = true;\n            }\n        }\n        if (actionName === 'continue') {\n            if (item.completed === false) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.inactive;\n        if (item.completed) {\n            if (item.completed !== true) {\n                result = Modifier.active;\n            }\n        }\n        return result;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n        /*\n        Remove a previous chart reference\n         */\n        let foundIndex = this.chartRefs.findIndex((ref: any) => ref._id === item._id);\n        if (foundIndex) {\n            //this.chartRefs[foundIndex].chart?.destroy();\n            logger(`Removing old chart reference for workout ${item._id}`);\n            this.chartRefs.splice(foundIndex, 1);\n        }\n\n\n        logger(`Rendering chart for`);\n        logger(item);\n        // we are going to render a chart for the workout\n        if (item.exercises) {\n            const dataSourceKeyId = this.getDataSourceKeyId();\n            const resultDataKeyId = this.getIdForItemInNamedCollection(name, item);\n\n            let canvas = document.createElement('canvas');\n            //browserUtil.addAttributes(canvas,[{name:'style',value:'height:100%; width:100%'}]);\n            canvas.setAttribute(this.collectionUIConfig.keyId, resultDataKeyId);\n            canvas.setAttribute(dataSourceKeyId, this.collectionUIConfig.viewConfig.dataSourceId);\n            // chart labels are the exercise names (shortened to 10 characters)\n\n\n            let labels: string[] = [];\n            let data: any[] = [];\n            let bgColour: string[] = []\n            let brColour: string[] = [];\n\n            item.exercises.forEach((exercise: any) => {\n                labels.push(truncateString(exercise.name, 10));\n                if (exercise.type === 'cardio') {\n                    data.push(exercise.distance);\n                    bgColour.push(WorkoutsViewUsingContext.bgCardio);\n                    brColour.push(WorkoutsViewUsingContext.borderCardio);\n                } else {\n                    data.push(exercise.weight);\n                    bgColour.push(WorkoutsViewUsingContext.bgStrength);\n                    brColour.push(WorkoutsViewUsingContext.borderStrength);\n                }\n            });\n            let chartData = {\n                labels: labels,\n                datasets: [{\n                    label: 'Exercises',\n                    data: data,\n                    backgroundColor: bgColour,\n                    borderColor: brColour,\n                    borderWidth: 1\n                }]\n            };\n\n\n            const config = {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: false,\n                    animation: false,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                },\n            };\n\n            logger(config);\n            try {\n                // @ts-ignore\n                let ref: ChartRef = {_id: item._id, chart: new Chart(canvas, config)};\n                this.chartRefs.push(ref);\n                containerEl.appendChild(canvas);\n            } catch (err) {\n                console.log(err);\n            }\n\n        }\n    }\n\n    public itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[0].name) {\n            // add the current list of exercises to the current workout\n            Controller.getInstance().addWorkoutExercisesToCurrentWorkout(selectedItem);\n\n        }\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[1].name) {\n            // continue the current workout\n            App.getInstance().showCurrentWorkout();\n\n\n        }\n    }\n\n    private calculateExerciseSummary(item: any): ExerciseSummary {\n        let result: ExerciseSummary = {\n            weight: 0,\n            distance: 0,\n            duration: '00:00'\n        };\n\n        if (item.exercises) {\n            for (let index = 0; index < item.exercises.length; index++) {\n                const exercise = item.exercises[index];\n                result.weight += exercise.weight;\n                result.distance += exercise.distance;\n                result.duration = addDurations(result.duration, exercise.duration);\n            }\n        }\n        return result;\n    }\n\n\n}\n\n","//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\n\n\nimport debug from 'debug';\n\nimport Controller from './Controller';\nimport {API_Config, NAVIGATION, STATE_NAMES} from \"./AppTypes\";\nimport ExerciseTypesSidebar from \"./component/sidebar/ExerciseTypesSidebar\";\nimport {ExerciseTypesCompositeView} from \"./component/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./component/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./component/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./component/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./component/view/CurrentWorkoutCompositeView\";\nimport {WorkoutsViewUsingContext} from \"./component/view/WorkoutsViewUsingContext\";\nimport {\n    ChatLogsView,\n    ChatRoomsSidebar,\n    ContextualInformationHelper,\n    UnreadMessageCountListener,\n    UserSearchSidebar\n} from \"ui-framework-jps\";\n\n\nconst logger = debug('app');\n\nexport default class App implements UnreadMessageCountListener {\n\n    private static _instance: App;\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private workoutSummarySidebar: WorkoutSummarySidebar;\n    // @ts-ignore\n    private currentWorkoutSidebar: CurrentWorkoutSidebar;\n    // @ts-ignore\n    private currentWorkoutView: CurrentWorkoutCompositeView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    private constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowWorkoutSummary = this.handleShowWorkoutSummary.bind(this);\n        this.handleShowCurrentWorkout = this.handleShowCurrentWorkout.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        new ExerciseTypesCompositeView(this.exerciseTypesSidebar).onDocumentLoaded();\n\n        //new WorkoutsView().onDocumentLoaded(); // carousel view\n        new WorkoutsViewUsingContext().onDocumentLoaded();\n\n        this.workoutSummarySidebar = new WorkoutSummarySidebar();\n        this.workoutSummarySidebar.addView(new WorkoutSummaryView(), {containerId: WorkoutSummarySidebar.SidebarContainers.container});\n        this.workoutSummarySidebar.onDocumentLoaded();\n\n        this.currentWorkoutSidebar = new CurrentWorkoutSidebar();\n        this.currentWorkoutView = new CurrentWorkoutCompositeView(this.currentWorkoutSidebar);\n        this.currentWorkoutView.onDocumentLoaded();\n\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowWorkoutSummary(event: Event) {\n        logger('Handling Show Workout Summary');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.hideAllSideBars();\n        this.workoutSummarySidebar.eventShow(event);\n    }\n\n    handleShowCurrentWorkout(event: Event) {\n        logger('Handling Show Current Workout');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.currentWorkoutSidebar.eventShow(event);\n    }\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    addingExerciseToCurrentWorkout(exerciseType: any) {\n        //this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventShow(null);\n        this.currentWorkoutView.getStateManager().addNewItemToState(STATE_NAMES.exercises, exerciseType, false);\n    }\n\n    showCurrentWorkout() {\n        this.currentWorkoutSidebar.eventShow(null);\n    }\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.workoutSummary).addEventListener('click', this.handleShowWorkoutSummary);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.currentWorkout).addEventListener('click', this.handleShowCurrentWorkout);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = UserSearchSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = ChatRoomsSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.chatSidebar.onDocumentLoaded();\n    }\n}\n\n/*\nconst flogger = debug('validation-manager-rule-failure');\nconst erLogger = debug('validation-manager-execute-rule');\nconst merLogger = debug('validation-manager-multiple-condition-rule-results');\n */\n$(function () {\n    localStorage.debug = 'api-ts-results controller-ts current-workout-composite-view validation-manager-rule-failure validation-manager-execute-rule validation-manager-multiple-condition-rule-results';\n    debug.log = console.info.bind(console);\n    App.getInstance().onDocumentLoad();\n});\n","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 7207,\n\t\"./en-il.js\": 7207,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(9959)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Decorator","STATE_NAMES","API_Config","DRAGGABLE","VIEW_NAME","VIEW_CONTAINER","slLogger","debug","SocketListenerDelegate","constructor","handleDataChangedByAnotherUser","message","type","stateName","user","changeUser","Controller","getInstance","getStateManager","findItemInState","_id","username","stateObj","NotificationManager","NotificationType","err","handleMessage","getCurrentUser","cLogger","cLoggerDetail","connectToApplication","applicationView","this","restSM","RESTApiStateManager","serverURL","api","isActive","find","findAll","create","update","destroy","idField","aggregateSM","memorySM","asyncSM","stateChanged","bind","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","onDocumentLoaded","socketListerDelegate","SocketManager","getLoggedInUserId","getLoggedInUsername","trim","length","chatManager","ChatManager","NotificationController","getListenerName","isLoggedIn","error","result","loggedInUser","managerName","handleShowChat","roomName","controller","delete","addExerciseToCurrentWorkout","exerciseType","copyOfExercise","copyObject","v4","addWorkoutExercisesToCurrentWorkout","workout","exercise","filterResults","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","exerciseDefinition","workoutDefinition","exercisesFieldDefinition","KeyType","getServerAPIURL","window","foundResult","ExerciseTypesSidebar","id","expandedSize","location","SidebarLocation","container","super","ValidationHelper","setupValidationForExerciseTypeDetailsForm","form","rule","viewMode","ViewMode","targetDataFieldId","response","ConditionResponse","conditions","sourceDataFieldId","comparison","ComparisonType","values","ValidationManager","multipleConditionLogic","MultipleConditionLogic","logger","ExerciseTypesViewUsingContext","viewConfig","resultsContainerId","dataSourceId","resultsElement","attributes","classes","keyId","keyType","modifiers","normal","inactive","active","warning","icons","sorter","item1","item2","detail","containerClasses","textElement","select","item","iconClasses","drag","from","extraActions","button","confirm","stateManager","getIdForItemInNamedCollection","getItemId","context","ContextualInformationHelper","eventHandlerDelegate","getItemDescription","buffer","canDeleteItem","view","selectedItem","compareItemsForEquality","isSameMongo","renderDisplayForItemInNamedCollection","containerEl","hasPermissionToDeleteItemInNamedCollection","itemAction","actionName","CreatedByPermissionChecker","hasPermissionToUpdateItem","hasPermissionToDeleteItem","hasPermissionToEditField","dataObj","ExerciseTypesCompositeView","sideBar","exerciseTypes","containerId","SidebarContainers","exerciseTypeDetailRenderer","BootstrapFormConfigHelper","exerciseTypeDetailView","viewLinker","runtimeConfig","fieldDisplayOrders","hideModifierFields","hasExternalControl","deleteButton","cancelButton","saveButton","buttonLocation","ElementLocation","detailForm","createExerciseType","document","event","WorkoutSummarySidebar","avLogger","WorkoutSummaryRenderer","currentChart","createDisplayElementForCollectionItem","collectionName","setDisplayElementsForCollectionInContainer","getName","sevenWorkouts","newState","exerciseNames","exerciseBG","exerciseBR","labels","label","moment","exerciseName","colours","generateRandomExerciseColourAndBorder","datasets","index","itemBG","itemBR","data","bg","br","weight","distance","dataset","backgroundColor","borderColor","borderWidth","order","chartData","config","options","responsive","animation","maintainAspectRatio","scales","y","beginAtZero","isStrength","red","blue","newColour","Math","WorkoutSummaryView","hasPermissionToActionItemInNamedCollection","renderBackgroundForItemInNamedCollection","CurrentWorkoutSidebar","list","CurrentWorkoutExercisesView","drop","acceptFrom","acceptTypes","itemDropped","CurrentWorkoutCompositeView","currentWorkout","workoutDef","workoutNameEl","workoutCaloriesEl","parseInt","Error","exercises","completeWorkout","App","newValue","foundIndex","findIndex","itemRemoved","itemNewValue","createWorkout","saveWorkout","WorkoutsViewUsingContext","itemsPerRow","small","medium","large","xlarge","rowContainer","activeRow","activeRowPosition","RowPosition","row","multipleItemsPerRowContainer","actionContainer","collectionConfig","background","text","duration","sets","reps","summary","calculateExerciseSummary","getModifierForItemInNamedCollection","Modifier","chartRefs","ref","dataSourceKeyId","resultDataKeyId","canvas","collectionUIConfig","bgColour","brColour","truncateString","chart","console","addDurations","handleShowUserSearch","handleShowExerciseTypes","handleShowWorkoutSummary","handleShowCurrentWorkout","onDocumentLoad","hideAllSideBars","countChanged","newCount","chatNavigationItem","innerHTML","addingExerciseToCurrentWorkout","showCurrentWorkout","setupNavigationItemHandling","setupUserSearchViews","UserSearchSidebar","setupChatViews","ChatRoomsSidebar","$","localStorage","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","loaded","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","key","splice","r","n","getter","__esModule","d","a","definition","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","nmd","paths","children","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","push","__webpack_exports__"],"sourceRoot":""}