{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/component/controller/CallManager.ts","webpack://template-feo-react-babel/./src/component/controller/ScoreSheetController.ts","webpack://template-feo-react-babel/./src/component/sidebar/BoardGameSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ScoreSheetsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/view/BGGSearchView.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/ScoreSheetDetailView.ts","webpack://template-feo-react-babel/./src/component/view/ScoreSheetsView.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/state/GraphQLApiStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/template/TemplateManager.ts","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/ui-framework/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/ui-framework/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/ui-framework/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/ui-framework/form/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/InputField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/App.tsx","webpack://template-feo-react-babel/./src/component/view/BoardGameView.tsx","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/handsontable/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/global","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any | null;\n    timer: number,\n    data: any[] | null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\nexport const STATE_NAMES = {\n    users: 'users',\n    boardGames: 'boardGames',\n    scores: 'scores',\n    selectedEntry: 'selectedEntry',\n    recentUserSearches: 'recentUserSearches',\n    bggSearchResults: 'bggSearchResults',\n    scoreSheet: 'scoreSheet',\n    chatLogs: 'chatLogs'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphql',\n    bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n    bggSearchCallById: {\n        queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n        resultName: 'getBoardGameDetails',\n    },\n    findUsers: {\n        queryString: 'query {findUsers {id, username}}',\n        resultName: 'findUsers',\n    },\n    addToMyCollection: {\n        queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n        resultName: 'addToMyCollection',\n    },\n    removeFromMyCollection: {\n        queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n        resultName: 'removeFromMyCollection'\n    },\n    getMyBoardGameCollection: {\n        queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scoresheets {id, player1, score1, player2, score2, player3, score3, player4, score4, player5, score5, player6, score6, player7, score7, createdOn}}}',\n        resultName: 'getMyBoardGameCollection',\n    },\n    addScoreSheetToBoardGame: {\n        queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}}',\n        resultName: 'addScoreSheetToBoardGame'\n    },\n    removeScoreSheet: {\n        queryString: 'mutation removeSheet($sheetId: String!) {removeScoreSheet(sheetId: $sheetId) {result}}',\n        resultName: 'removeFromMyCollection'\n    },\n};\n\nexport const NAVIGATION = {\n    showMyCollection: 'navigationItemMyCollection',\n    boardGameSearchId: 'navigationItemBoardGameSearch',\n    userSearchId: 'navigationItemUserSearch',\n    chatId: 'navigationItemChat',\n    showScoreSheet: 'navigationItemScoreSheet',\n\n}\n\nexport const ALERT = {\n    modalId: \"alert\",\n    titleId: \"alert-title\",\n    contentId: \"alert-content\",\n    cancelButtonId: \"alert-cancel\",\n    confirmButtonId: \"alert-confirm\",\n    closeButtonId: \"alert-close\",\n    hideClass: \"d-none\",\n    showClass: \"d-block\",\n}\n\nexport const DRAGGABLE = {\n    typeBoardGame: 'boardGame',\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites'\n}\n\nexport const VIEW_NAME = {\n    bggSearch: 'bggSearch',\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    scoreSheets: 'scoreSheets',\n    userSearch: 'userSearch'\n}\n\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {API_Config, Decorator, STATE_NAMES} from \"./AppTypes\";\nimport Downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {ScoreSheetController} from \"./component/controller/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n    public static eventDataKeyId:string =  'board-game-id';\n\n\n    constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                apiURL: this.getServerAPIURL() + API_Config.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: API_Config.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: API_Config.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [STATE_NAMES.recentUserSearches, STATE_NAMES.boardGames, STATE_NAMES.scores], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n        }\n        let currentGameList: any[] = this.displayedBoardGamesStateManager.getStateByName(STATE_NAMES.boardGames);\n        currentGameList = this.cleanupBoardGameState(currentGameList);\n\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: currentGameList});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.bggSearchCallById.queryString, {gameId: boardGame.gameId}, this.callbackBoardGameDetails, STATE_NAMES.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[API_Config.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[API_Config.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game: any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n\n                if (updatingBoardGame.scoresheets) {\n                    const cb = (data: any, status: number, associatedStateName: string) => {\n                    };\n\n                    // add the scoresheets to database\n                    updatingBoardGame.scoresheets.forEach((scoreSheet: any) => {\n                        this.convertScoreSheetToApiCallFormat(scoreSheet);\n                        Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                            {userId: this.getCurrentUser(), boardGameId: updatingBoardGame.id, sheet: scoreSheet},\n                            cb,\n                            STATE_NAMES.scoreSheet,\n                            false);\n                        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n                        scoreSheet.decorator = Decorator.Persisted;\n\n                    });\n\n                }\n\n                this.applicationView.setState({boardGames: currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(STATE_NAMES.boardGames, updatingBoardGame, isSameGame, false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[API_Config.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[API_Config.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame: any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n\n                this.decorateScoreSheets(boardGame);\n\n                let index = currentGameList.findIndex((game: any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >= 0}`);\n                if (index >= 0) {\n                    const locallySaveBoardGame = currentGameList[index];\n\n                    cLoggerDetail(`in current state, replacing`);\n                    // copy any locally saved score sheets to the database object\n                    this.copyLocallySavedScoreSheetsToBoardGame(boardGame, locallySaveBoardGame);\n\n                    // replace the current entry\n                    currentGameList.splice(index, 1, boardGame);\n                } else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            currentGameList = this.cleanupBoardGameState(currentGameList);\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames: currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentGameList, false);\n        }\n    }\n\n    scoreSheetAddedToBoardGame(boardGame: any, scoreSheet: any) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                {userId: this.getCurrentUser(), boardGameId: boardGame.id, sheet: scoreSheet},\n                cb,\n                STATE_NAMES.scoreSheet,\n                false);\n            scoreSheet.decorator = Decorator.Persisted;\n        } else {\n            scoreSheet.decorator = Decorator.PersistedLocally;\n        }\n        // convert the scoresheet into the usual received format from the database\n        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    scoreSheetRemovedFromBoardGame(boardGame: any, scoreSheetId: string) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.removeScoreSheet.queryString,\n                {sheetId: scoreSheetId},\n                cb,\n                STATE_NAMES.scoreSheet,\n                false);\n        }\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(STATE_NAMES.boardGames, boardGame, true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            let scoreSheets = boardGame.scoresheets;\n                            delete boardGame.scoresheets;\n\n                            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                STATE_NAMES.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                            boardGame.scoresheets = scoreSheets;\n\n\n                        } else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                STATE_NAMES.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private cleanupBoardGameState(boardGames: any[]): any[] { // lets tidy up any duplicates, keeping Persisted ones by preference\n        let cleanedUpList: any[] = [];\n        boardGames.forEach((boardGame) => {\n            // is already in the list?\n            let index = cleanedUpList.findIndex((game) => game.gameId === boardGame.gameId);\n            if (index >= 0) { // found in the list\n                // is this a persisted board game?\n                let existingListGame = cleanedUpList[index]\n                if (existingListGame.decorator && existingListGame.decorator === Decorator.Persisted) {\n                    // leave the persisted version in the cleaned up list\n                } else {\n                    // do we have persisted game to replace the one in the list\n                    if (boardGame.decorator && boardGame.decorator === Decorator.Persisted) {\n                        // replace the existing one with this one\n                        cleanedUpList.splice(index, 1, boardGame);\n                    } else {\n                        // just leave the one there, neither are persisted to a database\n                    }\n                }\n            } else {\n                // not found yet, add to list\n                cleanedUpList.push(boardGame);\n            }\n\n        });\n        return cleanedUpList;\n\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.getMyBoardGameCollection.queryString, {userId: this.getLoggedInUserId()}, this.callbackGetCollection, STATE_NAMES.boardGames, false);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    private removeBoardGameFromState(boardGame: any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index, 1);\n            this.applicationView.setState({boardGames: currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentBoardGamesOnDisplay, false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n    private decorateScoreSheets(boardGame: any) {\n        if (boardGame) {\n            if (boardGame.scoresheets) {\n                boardGame.scoresheets.forEach((sheet: any) => {\n                    sheet.decorator = Decorator.Persisted;\n                })\n            } else {\n                boardGame.scoresheets = [];\n            }\n        }\n    }\n\n    private copyLocallySavedScoreSheetsToBoardGame(target: any, source: any) {\n        if (source.scoresheets) {\n            let toSave: any[] = [];\n            source.scoresheets.forEach((sheet: any) => {\n                // is the scoresheet already in the target?\n                let index = target.scoresheets.findIndex((item: any) => item.id === sheet.id);\n                if (index < 0) {\n                    sheet.decorator = Decorator.PersistedLocally;\n                    target.scoresheets.push(sheet);\n                    toSave.push(sheet);\n                }\n            });\n\n            // do we have any sheets to save?\n            if (toSave.length > 0) {\n                const cb = (data: any, status: number, associatedStateName: string) => {\n                };\n\n                toSave.forEach((sheetToSave: any) => {\n                    this.convertScoreSheetToApiCallFormat(sheetToSave);\n\n\n                    Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                        {userId: this.getCurrentUser(), boardGameId: target.id, sheet: sheetToSave},\n                        cb,\n                        this.config.stateNames.scoreSheet,\n                        false);\n\n                    this.convertScoreSheetToDatabaseFormat(sheetToSave);\n                    sheetToSave.decorator = Decorator.Persisted;\n                });\n            }\n        }\n    }\n\n    private convertScoreSheetToDatabaseFormat(scoreSheet: any) {\n        if (scoreSheet.players) {\n            if (scoreSheet.players.length >= 1) {\n                scoreSheet.player1 = scoreSheet.players[0];\n                scoreSheet.score1 = scoreSheet.scores[0];\n            }\n            if (scoreSheet.players.length >= 2) {\n                scoreSheet.player2 = scoreSheet.players[1];\n                scoreSheet.score2 = scoreSheet.scores[1];\n            }\n            if (scoreSheet.players.length >= 3) {\n                scoreSheet.player3 = scoreSheet.players[2];\n                scoreSheet.score3 = scoreSheet.scores[2];\n            }\n            if (scoreSheet.players.length >= 4) {\n                scoreSheet.player4 = scoreSheet.players[3];\n                scoreSheet.score4 = scoreSheet.scores[3];\n            }\n            if (scoreSheet.players.length >= 5) {\n                scoreSheet.player5 = scoreSheet.players[4];\n                scoreSheet.score5 = scoreSheet.scores[4];\n            }\n            if (scoreSheet.players.length >= 6) {\n                scoreSheet.player6 = scoreSheet.players[5];\n                scoreSheet.score6 = scoreSheet.scores[5];\n            }\n            if (scoreSheet.players.length >= 7) {\n                scoreSheet.player7 = scoreSheet.players[6];\n                scoreSheet.score7 = scoreSheet.scores[6];\n            }\n\n        }\n    }\n\n    private convertScoreSheetToApiCallFormat(scoreSheet: any) {\n        delete scoreSheet.decorator;\n        delete scoreSheet.player1;\n        delete scoreSheet.score1;\n        delete scoreSheet.player2;\n        delete scoreSheet.score2;\n        delete scoreSheet.player3;\n        delete scoreSheet.score3;\n        delete scoreSheet.player4;\n        delete scoreSheet.score4;\n        delete scoreSheet.player5;\n        delete scoreSheet.score5;\n        delete scoreSheet.player6;\n        delete scoreSheet.score6;\n        delete scoreSheet.player7;\n        delete scoreSheet.score7;\n    }\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n}\n\nexport default Controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport Controller from \"../../Controller\";\nimport {ScoreSheetDetailView} from \"../view/ScoreSheetDetailView\";\n\nconst callLogger = debug('call-manager');\n\nexport class CallManager {\n    private static _instance: CallManager;\n    \n\n    public static getInstance(): CallManager {\n        if (!(CallManager._instance)) {\n            CallManager._instance = new CallManager();\n        }\n        return CallManager._instance;\n    }\n\n    private peer: any | null = null;\n    private webrtcDiv: HTMLElement | null = null;\n    private myVideoStream: MediaStream | null = null;\n    private myVideo: HTMLVideoElement | null = null;\n    private currentUserList:string[];\n    \n    private constructor() {\n        this.callUser = this.callUser.bind(this);\n        this.currentUserList = [];\n    }\n\n    private startPeerConnection() {\n        if (Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore  - is for the WebRTC peer via Nodejs\n            this.peer = new Peer(Controller.getInstance().getLoggedInUsername(), {path: '/peerjs', host: '/', debug: 2, secure:true});\n            //this.peer = new Peer(Controller.getInstance().getLoggedInUsername(), {path: '/peerjs', host: '/', port: '3000', debug:1, secure:false});\n            this.peer.on('open', (id:any) => {\n                callLogger('My peer ID is: ' + id);\n            });\n        }\n    }\n    \n    public initialise() {\n        this.startPeerConnection();\n        // @ts-ignore\n        this.webrtcDiv = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.webrtc);\n        //this.reset();\n    }\n\n    public startScoreSheet() {\n        try {\n            if (Controller.getInstance().isLoggedIn()) {\n                if (navigator.mediaDevices.getUserMedia) {\n                    callLogger('Starting scoresheet stream');\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        callLogger('Scoresheet stream started - adding video element');\n                        this.myVideoStream = stream;\n                        this.addVideoStream(Controller.getInstance().getLoggedInUsername(), this.myVideoStream, true);\n                    });\n\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Non-secure context or no camera capability`);\n        }\n    }\n    \n    public reset() {\n        callLogger('Reset');\n        if (this.currentUserList && this.currentUserList.length > 0) {\n            callLogger('Removing previous users');\n            this.currentUserList.forEach((user) => {\n                callLogger('Removing previous user ${user}');\n                this.removeUser(user);\n            })\n        }\n        if (this.webrtcDiv) browserUtil.removeAllChildren(this.webrtcDiv);\n        this.currentUserList = [];\n        if (this.peer) {\n            callLogger('Stopping video stream');\n            //this.peer.disconnect();\n            if (this.myVideoStream) {\n                this.myVideoStream.getTracks().forEach((track) => track.stop());\n            }\n            if (this.myVideo) this.myVideo.srcObject = null;\n            this.myVideoStream = null;\n        }\n    }\n\n    private addVideoStream(username: string, stream: MediaStream, isCurrentUser = false) {\n        // check to see if they are already there\n        let index = this.currentUserList.findIndex((user) => user === username);\n        if (index >= 0) return;\n\n        this.currentUserList.push(username);\n\n        const videoCardHolder = document.createElement('div');\n        videoCardHolder.setAttribute(\"id\", username);\n        browserUtil.addRemoveClasses(videoCardHolder, 'col-sm-12 col-md-4 col-lg-3');\n        const videoCard = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCard,'card');\n        const videoCardTitle = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardTitle, 'card-header');\n        videoCardTitle.innerHTML = `<h5 class=\"card-title\">${username}</h5>`;\n        const videoCardBody = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardBody, 'card-body p-0 text-center');\n        const video = document.createElement('video');\n        browserUtil.addRemoveClasses(video, 'video ');\n\n        videoCard.appendChild(videoCardTitle);\n        videoCard.appendChild(videoCardBody);\n        videoCardBody.appendChild(video);\n\n        if (isCurrentUser) {\n            const videoCardFooter = document.createElement('div');\n            browserUtil.addRemoveClasses(videoCardFooter, 'card-footer');\n            const footerContent = document.createElement('div');\n            browserUtil.addRemoveClasses(footerContent,'d-flex w-100 justify-content-between mt-2');\n            const stopVideoButton = document.createElement('button');\n            stopVideoButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(stopVideoButton,'btn btn-circle btn-warning');\n            stopVideoButton.innerHTML = '<i class=\"fas fa-video-slash\"></i>';\n            const muteMicButton = document.createElement('button');\n            muteMicButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(muteMicButton,'btn btn-circle btn-warning');\n            muteMicButton.innerHTML = '<i class=\"fa fa-microphone\"></i>';\n\n            footerContent.appendChild(stopVideoButton);\n            footerContent.appendChild(muteMicButton);\n\n            videoCardFooter.appendChild(footerContent);\n\n            videoCard.appendChild(videoCardFooter);\n\n            stopVideoButton.addEventListener('click',() => {\n                const isPaused = video.paused;\n                if (isPaused) {\n                    try {\n                        video.play();\n                    }\n                    catch (error) { }// account for user with no video\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',true);\n\n                }\n                else {\n                    try {\n                        video.pause();\n                    } catch (error) {}// account for user with no video\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',false);\n                }\n\n            });\n            muteMicButton.addEventListener('click',() => {\n                const isMuted = video.muted;\n                if (isMuted) {\n                    video.muted = false;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',true);\n\n                }\n                else {\n                    video.muted = true;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',false);\n                }\n\n            });\n\n            this.myVideo = video;\n        }\n\n        videoCardHolder.appendChild(videoCard);\n        video.srcObject = stream;\n        video.addEventListener(\"loadedmetadata\", () => {\n            try {\n                video.play();\n            }\n            catch (error) {} // account for user with no video\n            if (this.webrtcDiv) this.webrtcDiv.append(videoCardHolder);\n        });\n    };\n\n    public callUser(userId: string) {\n        callLogger(`Asked to call user ${userId}`);\n        if (userId === Controller.getInstance().getLoggedInUsername()) return; // don't call ourself\n        let numberOfAttempts:number = 0;\n\n        let index = this.currentUserList.findIndex((user) => user === userId); // don't call the same users\n        if (index >= 0) return;\n        // wait a small time for the sockets and peer to sync\n        const interval = setInterval(() => {\n            callLogger(`Calling user ${userId}`);\n            if (this.myVideoStream) {\n                const call = this.peer.call(userId, this.myVideoStream);\n                if (call) {\n                    call.on('stream', (userVideoStream: any) => {\n                        callLogger(`User ${userId} answered, showing stream`);\n                        this.addVideoStream(userId, userVideoStream, false);\n                    });\n                    clearInterval(interval);\n                }\n                else {\n                    // try again shortly\n                    numberOfAttempts ++;\n                    if (numberOfAttempts > 3) clearInterval(interval);\n                }\n            }\n        },5000);\n    };\n\n    public removeUser(userId:string) {\n        callLogger(`Asked to remove user ${userId}`);\n        let index = this.currentUserList.findIndex((user) => user === userId);\n        if (index >= 0) {\n            this.currentUserList.splice(index,1);\n        }\n        const userVideoCard = document.getElementById(userId);\n        if (userVideoCard) {\n            callLogger(`Asked to remove user ${userId} - removing video element`);\n            const videoEl:HTMLVideoElement|null = userVideoCard.querySelector(\".video\");\n            if (videoEl) {\n                videoEl.srcObject = null;\n            }\n\n            browserUtil.removeAllChildren(userVideoCard);\n            const parentNode = userVideoCard.parentNode;\n            if (parentNode) parentNode.removeChild(userVideoCard);\n        }\n    }\n\n    prepareToAnswerCallFrom(userId: string) {\n        try {\n            if (Controller.getInstance().isLoggedIn()) {\n                callLogger(`Preparing to answer call from ${userId}`);\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        this.myVideoStream = stream;\n                        this.addVideoStream(Controller.getInstance().getLoggedInUsername(), this.myVideoStream, true);\n                        callLogger(`Awaiting call from ${userId}`);\n                        this.peer.on('call', (call: any) => {\n                            callLogger(`Answering call from ${userId}`);\n                            call.answer(this.myVideoStream);\n                            call.on('stream', (userVideoStream: any) => {\n                                alert(\"Answered\");\n                                callLogger(`Have answered, showing stream`);\n                                this.addVideoStream(userId, userVideoStream, false);\n                            });\n                        });\n                    });\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Insecure context or no video capability`);\n        }\n\n    }\n}","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../../socket/Types\";\nimport {ChatReceiver} from \"../../socket/ChatReceiver\";\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport {ScoreSheetDetailView} from \"../view/ScoreSheetDetailView\";\nimport {ScoreSheet, STATE_NAMES} from \"../../AppTypes\";\nimport {v4} from 'uuid';\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {StateManager} from \"../../state/StateManager\";\nimport moment from \"moment\";\nimport Controller from \"../../Controller\";\nimport {TemplateManager} from \"../../template/TemplateManager\";\nimport {CallManager} from \"./CallManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport SocketManager from \"../../socket/SocketManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    private static _instance: ScoreSheetController;\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n    public static SOURCE_View: string = 'ssv';\n\n    private applicationView: any | null = null;\n    private currentScoreRoom: string | null = null;\n    private currentlySelectedBoardGame: any | null = null;\n    private currentScoreSheet: ScoreSheet | null = null;\n    private currentUsername: string = '';\n    private isRoomCreator: boolean = false;\n    private stateManager: StateManager;\n    private currentUsersInScoreSheet: string[] = [];\n    private intervalTimer: number = -1;\n\n\n\n    private constructor() {\n        this.stateManager = new MemoryBufferStateManager();\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n        this.isSheetOwner = this.isSheetOwner.bind(this);\n        this.inviteUser = this.inviteUser.bind(this);\n        this.getCurrentRoom = this.getCurrentRoom.bind(this);\n        this.getSelectedBoardGame = this.getSelectedBoardGame.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimerStoppedByAnotherUser = this.stopTimerStoppedByAnotherUser.bind(this);\n        this.isTimerGoing = this.isTimerGoing.bind(this);\n        this.reset = this.reset.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    public getCurrentRoom(): string | null {\n        return this.currentScoreRoom;\n    }\n\n    receiveLogin(username: string): void {\n    }\n\n    receiveLogout(username: string): void {\n    }\n\n    public setCurrentUser(username: string): void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView: any) {\n        this.applicationView = applicationView;\n        CallManager.getInstance().initialise();\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreSheet) {\n            sscLogger(`Received invite - already in score sheet - declining`);\n            // are we already in this score sheet?\n            if (this.currentScoreSheet.room !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                SocketManager.getInstance().sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`)) {\n                SocketManager.getInstance().sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n\n        }\n\n        // prepare to receive a call\n        CallManager.getInstance().prepareToAnswerCallFrom(invite.from);\n\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Score Sheet', `Joining score sheet`, 'info', 7000);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ScoreSheet);\n        this.currentScoreRoom = invite.room;\n        this.currentlySelectedBoardGame = invite.attachment.boardGame;\n        this.currentScoreSheet = invite.attachment.scoreSheet;\n\n        Controller.getInstance().addBoardGameToDisplay(invite.attachment.boardGame);\n\n        // check to see if the timer should be going\n        if (this.isTimerGoing()) {\n            this.stopTimerStoppedByAnotherUser();\n            this.startTimer();\n        }\n        // ask the view to initialise with these values\n        ScoreSheetDetailView.getInstance().stateChanged(\"\", \"\", this.currentScoreSheet);\n\n\n\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n    public getSelectedBoardGame(): any | null {\n        return this.currentlySelectedBoardGame;\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message: Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        invites.forEach((invite: Invitation) => {\n            if (invite.type === InviteType.ScoreSheet) {  // only process offline invites to scoresheet\n                this.receiveInvitation(invite);\n            }\n        });\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        sscLogger(`Receive decline for room ${room} from ${username}`);\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                NotificationManager.getInstance().show('Score Sheet', `User ${username} declined the invitation.`, 'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.addUserToScoreSheet(users.username);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `User ${users.username} joined the scoresheet.`, 'message', 120000);\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index, 1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `User ${users.username} left the scoresheet.`, 'warning', 100000);\n    }\n\n    receiveUserList(users: string[]): void {\n    } // will be managed in the transfer of sheet data\n\n    public endScoreSheet(): void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet, true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    public startScoreSheet(boardGame: any): void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = v4();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: TemplateManager.getInstance().getScoreSheetTemplate(boardGame),\n                timer: 0,\n                timerGoing: false,\n                data: TemplateManager.getInstance().getScoreSheetStartingData(boardGame),\n                isFinished: false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            CallManager.getInstance().startScoreSheet();\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(STATE_NAMES.scoreSheet, this.currentScoreSheet, true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) SocketManager.getInstance().joinChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n\n        }\n    }\n\n    public hasActiveScoreSheet(): boolean {\n        let result = false;\n        if (this.currentScoreRoom && (this.currentScoreRoom !== null)) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username: string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.isRoomCreator) {\n                NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `You have invited user ${username} to the scoresheet`, 'message');\n                SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, this.currentScoreRoom, InviteType.ScoreSheet, true, this.currentlySelectedBoardGame.name, {\n                    scoreSheet: this.currentScoreSheet,\n                    boardGame: this.currentlySelectedBoardGame\n                });\n            } else {\n                alert(\"Only the score sheet creator can invite other users.\");\n            }\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        sscLogger(`'Handling receive message`);\n        sscLogger(message);\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet: ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n\n                    // @ts-ignore\n                    if (this.currentScoreSheet) {\n                        let timerWasGoing = this.currentScoreSheet.timerGoing;\n                        this.currentScoreSheet.room = message.room;\n                        this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                        this.currentScoreSheet.data = scoreSheet.data;\n                        this.currentScoreSheet.timer = (scoreSheet.timer > this.currentScoreSheet.timer) ? scoreSheet.timer : this.currentScoreSheet.timer;\n                        this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                        this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                        this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n\n                        // has the timer changed?\n                        if (scoreSheet.timerGoing) {\n                            if (timerWasGoing) {\n                                // both timers going, no need to do anything\n                            } else {\n                                // timer is going with another user, but we aren't going - start timer\n                                this.stopTimerStoppedByAnotherUser();\n                                this.startTimer();\n                            }\n                        } else { // timer not going at the other users end\n                            if (timerWasGoing) {\n                                // our timer is active - pause it\n                                this.stopTimerStoppedByAnotherUser();\n                            } else {\n                                // neither timer going\n                            }\n                        }\n\n\n                    }\n                    sscLogger('Updated score sheet');\n                    sscLogger(this.currentScoreSheet);\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet, true);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        // reset the view\n                        ScoreSheetDetailView.getInstance().resetDisplay();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner(): boolean {\n        return this.isRoomCreator;\n    }\n\n    public createScoreSheetFromTable(): ScoreSheet | null {\n        let scoreSheet: ScoreSheet | null = null;\n        let tableData = ScoreSheetDetailView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: (this.currentlySelectedBoardGame) ? TemplateManager.getInstance().getScoreSheetTemplate(this.currentlySelectedBoardGame) : null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet: ScoreSheet, isFinished: boolean = false): void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            SocketManager.getInstance().sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        // @ts-ignore\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer++;\n                ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n            } else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n                }\n            }\n        }, 1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            this.intervalTimer = -1;\n\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet, false);\n            }\n        }\n    }\n\n    public userChangedValue(value: any, source: string) {\n        sscLogger(`Handling user changed value ${source}`)\n        if (source === ScoreSheetController.SOURCE_View) return;\n\n        // is the source an edit?\n        if (source !== 'edit') return;\n\n        let scoreSheet: ScoreSheet | null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            sscLogger(`Letting the template manager change any values`);\n            const changedByTM: boolean = TemplateManager.getInstance().transformDataAfterUserChange(this.currentlySelectedBoardGame, scoreSheet);\n            if (changedByTM) {\n                sscLogger(scoreSheet);\n            }\n\n            this.saveCurrentScoreSheet(scoreSheet, changedByTM);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet, false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                SocketManager.getInstance().leaveChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n            }\n            this.reset();\n            this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n        }\n    }\n\n    protected addUserToScoreSheet(username: string): void {\n        if (Controller.getInstance().isLoggedIn()) {\n            sscLogger(`Calling user ${username}`);\n            CallManager.getInstance().callUser(username);\n        }\n    }\n\n    protected removeUserFromScoreSheet(username: string): void {\n        sscLogger(`Removing user ${username}`);\n        CallManager.getInstance().removeUser(username);\n    }\n\n    private reset(): void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n        this.stopTimerStoppedByAnotherUser();\n        CallManager.getInstance().reset();\n    }\n\n    private isLoggedIn(): boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet: ScoreSheet) {\n        sscLogger('Handling save');\n\n        // add the data to the selected board game\n        if (this.currentlySelectedBoardGame) {\n            const saveData = TemplateManager.getInstance().getSaveData(this.currentlySelectedBoardGame, scoreSheet);\n            sscLogger(saveData);\n            if (!this.currentlySelectedBoardGame.scoresheets) {\n                this.currentlySelectedBoardGame.scoresheets = [];\n            }\n            this.currentlySelectedBoardGame.scoresheets.push(saveData);\n            Controller.getInstance().scoreSheetAddedToBoardGame(this.currentlySelectedBoardGame, saveData);\n        }\n    }\n\n    private saveCurrentScoreSheet(scoreSheet: ScoreSheet, informListeners: boolean = true) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(STATE_NAMES.scoreSheet, this.currentScoreSheet, informListeners);\n    }\n\n    private stopTimerStoppedByAnotherUser() {\n        sscLogger(`Handling timer stopped by another user`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, true);\n        }\n        this.intervalTimer = -1;\n    }\n\n}\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass BoardGameSearchSidebar extends SidebarViewContainer {\n    private static BGGSEARCH_SidebarPrefs:SidebarPrefs = {\n        id:'boardGameSearchSidebar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    public static bggSearchResults = 'bggSearchResults';\n\n    constructor() {\n        super(BoardGameSearchSidebar.BGGSEARCH_SidebarPrefs);\n    }\n}\n\nexport default BoardGameSearchSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'chatSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ScoreSheetsSidebar extends SidebarViewContainer {\n    private static SidebarPrefs:SidebarPrefs = {\n        id:'scoreSheetSidebar',\n        expandedSize:'40%',\n        location: SidebarLocation.bottom\n    }\n\n    public static scoreSheets = 'scoreSheets';\n\n    constructor() {\n        super(ScoreSheetsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ScoreSheetsSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport DownloadManager from \"../../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {API_Config, DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BGGSearchView extends AbstractStatefulCollectionView implements CollectionViewListener{\n    // @ts-ignore\n    private formEl: HTMLElement;\n    // @ts-ignore\n    private queryEl: HTMLInputElement;\n    // @ts-ignore\n    private buttonEl: HTMLButtonElement;\n\n    private static BGGSEARCH_ViewConfig:CollectionViewDOMConfig = {\n        resultsContainerId:'bggSearchResults',\n        resultsElementType:'a',\n        resultsElementAttributes:[{name:'href',value:'#'}],\n        resultsClasses:'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId:'gameId',\n        keyType:KeyType.number,\n        dataSourceId:VIEW_NAME.bggSearch,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active:'list-group-item-info',\n            warning:'list-group-item-danger'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType:'span',\n            textElementClasses:'mb-1',\n            select: true,\n            drag: {\n                type: DRAGGABLE.typeBoardGame,\n                from: 'boardGameSearch'\n            }\n        },\n    }\n\n    static BGGSEARCH_Form:string = 'bggSearch';\n    static BGGSEARCH_Query:string = 'queryText';\n    static BGGSEARCH_Search:string = 'bggSearchButton';\n\n    constructor() {\n        super(BGGSearchView.BGGSEARCH_ViewConfig,new MemoryBufferStateManager(),STATE_NAMES.bggSearchResults);\n\n        // handler binding\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this,this);\n\n    }\n\n    public handleSearchResultsCB(data: any, status: number, associatedStateName: string): void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            if (this.stateManager && this.collectionName) this.stateManager.setStateByName(this.collectionName, data.data.findBoardGames, true);\n        }\n    }\n\n    onDocumentLoaded() {\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = document.getElementById(BGGSearchView.BGGSEARCH_Form);\n        // @ts-ignore\n        this.buttonEl = document.getElementById(BGGSearchView.BGGSEARCH_Search);\n        // @ts-ignore\n        this.queryEl = document.getElementById(BGGSearchView.BGGSEARCH_Query);\n\n        this.formEl.addEventListener('submit', this.handleSearch);\n\n        this.addEventListener(this);\n\n        super.onDocumentLoaded();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        let result = false;\n        if (item1.gameId && item2.gameId) {\n            const parsed1 = parseInt(item1.gameId);\n            const parsed2 = parseInt(item2.gameId);\n            if (!isNaN(parsed1) && !isNaN(parsed2)) {\n                item1.gameId = parsed1;\n                item2.gameId = parsed2;\n                result = (item1.gameId === item2.gameId);\n            }\n        }\n        return result;\n    }\n\n\n    eventClickItem(event: MouseEvent) {\n        super.eventClickItem(event);\n        //this.applicationView.addBoardGameToDisplay(boardGame);\n        this.eventForwarder.hideRequested(this);\n    }\n\n\n    private changeSearchButton(enable: boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        } else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\", \"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event: Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = API_Config.bggSearchCall;\n        DownloadManager.getInstance().addQLApiRequest(API_Config.graphQL, query, {queryString: queryText}, this.handleSearchResultsCB, STATE_NAMES.bggSearchResults);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {    }\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        /* listen for our own deletes as we are expected to implement them */\n        vLoggerDetail(`Handling delete of board game search result for game ${selectedItem.gameId}`);\n        this.stateManager?.removeItemFromState(STATE_NAMES.bggSearchResults,selectedItem,this.compareItemsForEquality,true);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default BGGSearchView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'blockedUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.blockedUsers,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item.id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default BlockedUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport { CollectionView } from '../../ui-framework/view/interface/CollectionView';\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasChanged(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: CollectionViewListener): void {}\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): CollectionViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {}\n\n    show(): void {\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {isSame, isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener,CollectionViewListener {\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'chatLogs',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        dataSourceId: VIEW_NAME.chatLogs,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,new MemoryBufferStateManager(), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameRoom(item1,item2);\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs,newState,true);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n}\n\nexport default ChatLogsView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'favouriteUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.favouriteUsers,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.id;\n    }\n\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\nexport default FavouriteUserView;\n","import StateChangeListener from \"../../state/StateChangeListener\";\nimport {ScoreSheetController} from \"../controller/ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {DRAGGABLE, ScoreSheet, STATE_NAMES} from \"../../AppTypes\";\nimport {TemplateManager} from \"../../template/TemplateManager\";\nimport {StateManager} from \"../../state/StateManager\";\nimport Controller from \"../../Controller\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE} from \"../../ui-framework/ConfigurationTypes\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetDetailView implements StateChangeListener {\n    private static _instance: ScoreSheetDetailView;\n\n    public static ScoreSheetDom = {\n            dropZone: \"scoreSheetZone\",\n            boardGame: \"selectedBoardGame\",\n            startStopTimer: \"startStopTimer\",\n            timer: \"timerDisplay\",\n            end: \"leaveScoreSheet\",\n            scoreSheet: \"scoreSheet\",\n            iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n            iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n            iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n            iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n            ssFastSearchUserNames: 'ssFastSearchUserNames',\n            webrtc: 'webrtc'\n        }\n\n\n\n\n    // @ts-ignore\n    protected ssFastSearchUserNames: HTMLElement;\n    private stateManager: StateManager;\n\n    private thisEl: HTMLDivElement | null = null;\n    private boardGameTitleEl: HTMLHeadingElement | null = null;\n    private startStopTimer: HTMLButtonElement | null = null;\n    private timerEl: HTMLDivElement | null = null;\n    private endOrLeaveEl: HTMLButtonElement | null = null;\n    private scoreSheetEl: HTMLDivElement | null = null;\n\n\n\n    private table: Handsontable | null = null;\n    private controller: ScoreSheetController;\n    private config: any;\n\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n        this.stateManager = Controller.getInstance().getStateManager();\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    public static getInstance(): ScoreSheetDetailView {\n        if (!(ScoreSheetDetailView._instance)) {\n            ScoreSheetDetailView._instance = new ScoreSheetDetailView();\n        }\n        return ScoreSheetDetailView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.resetDisplay();\n\n        // @ts-ignore\n        this.ssFastSearchUserNames = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames);\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.scoreSheet, this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click', this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click', this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {\n                event.preventDefault()\n            });\n            this.thisEl.addEventListener('drop', this.handleUserDrop);\n        }\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        ssvLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected, and is scoresheet owner\n        if (ScoreSheetController.getInstance().isSheetOwner()) {\n            ScoreSheetController.getInstance().inviteUser(ui.item.label);\n        }\n        else {\n            alert (\"Only the score sheet creator can invite users.\");\n        }\n    }\n\n\n    handleEndOrLeave(event: MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        } else {\n            // leaving the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event: MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        } else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event: Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    public resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) {\n            this.startStopTimer.innerHTML = 'Start ' + ScoreSheetDetailView.ScoreSheetDom.iconStart;\n            this.startStopTimer.setAttribute(\"disabled\", \"true\");\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = ScoreSheetDetailView.ScoreSheetDom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n\n\n    }\n\n    public updateTimer(time: number, isPaused: boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + ScoreSheetDetailView.ScoreSheetDom.iconStart;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n            } else {\n                this.startStopTimer.innerHTML = 'Pause   ' + ScoreSheetDetailView.ScoreSheetDom.iconInProgress;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', true);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', false);\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n\n        } else {\n            let scoreSheet: ScoreSheet = newValue;\n            ssvLogger(`Processing new state`);\n            ssvLogger(scoreSheet);\n            if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n            // update the board game name\n            if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n            // update the table\n            if (this.table) {\n                // process the data in the state change, will be array of array (rows) into what the table wants\n                let tableData: any = [];\n                // @ts-ignore\n                scoreSheet.data.forEach((row: any[], rowIndex: number) => {\n                    row.forEach((column: any, columnIndex: number) => {\n                        tableData.push([rowIndex, columnIndex, column]);\n                    });\n                });\n                ssvLogger(`Table data is `);\n                ssvLogger(tableData);\n                // @ts-ignore\n                this.table.setDataAtCell(tableData, ScoreSheetController.SOURCE_View);\n\n            } else {\n                // create a new table\n\n                if (this.scoreSheetEl) {\n                    const boardGame = this.controller.getSelectedBoardGame();\n                    if (boardGame) {\n                        scoreSheet.sheetLayoutOptions = TemplateManager.getInstance().getScoreSheetTemplate(boardGame);\n                    }\n                    scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                    this.table = new Handsontable(\n                        this.scoreSheetEl,\n                        scoreSheet.sheetLayoutOptions);\n                    // @ts-ignore\n                    this.table.addHook('afterChange', this.controller.userChangedValue);\n                }\n            }\n\n\n            // update the timer\n            if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n        }\n\n    }\n\n    public getTableData(): any[] {\n        if (this.table) {\n            return this.table.getData();\n        } else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n\n    private createTimerDisplay(timer: number): string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        } else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer / 3600);\n                let minutes = Math.floor(timer / 60);\n                let seconds = timer - (hours * 3600) - (minutes * 60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    } else {\n                        result += `${minutes}:`\n                    }\n                } else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    } else {\n                        result += `${seconds}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            } else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    } else {\n                        result += `${timer}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            }\n        }\n        return result;\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n}","import debug from 'debug';\nimport moment from \"moment\";\nimport Controller from \"../../Controller\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\n\nconst csLogger = debug('score-sheet-sidebar');\nconst csLoggerDetail = debug('score-sheet-sidebar:detail');\n\nclass ScoreSheetsView extends AbstractStatefulCollectionView implements CollectionViewListener{\n    protected selectedBoardGame: any | null = null;\n    static SCORESHEETS_ViewConfig:CollectionViewDOMConfig = {\n        resultsContainerId:'scoreSheets',\n        resultsElementType:'div',\n        resultsClasses:'text-white bg-info col-sm-6 col-md-3 col-lg-2 score-card',\n        keyId:'id',\n        keyType: KeyType.string,\n        dataSourceId:VIEW_NAME.scoreSheets,\n        detail: {\n            containerClasses: 'card-img-overlay',\n            textElementType:'div',\n            textElementClasses:'ml-2',\n            select: true,\n            delete: {\n                buttonClasses: 'btn btn-rounded btn-warning ml-6 mt-4',\n                buttonText:'Delete&nbsp;',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            background: {\n                elementType: 'img',\n                elementClasses: 'score-card-img'\n            }\n        },\n    }\n\n\n    constructor() {\n        super(ScoreSheetsView.SCORESHEETS_ViewConfig,new MemoryBufferStateManager(),STATE_NAMES.scores);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n        this.stateManager.setStateByName(STATE_NAMES.scores,[],true);\n    }\n\n\n    public setSelectedBoardGame(boardGame: any) {\n        csLogger(`setting selected board game to`);\n        csLoggerDetail(boardGame);\n        if (boardGame) {\n            this.selectedBoardGame = boardGame;\n            this.stateManager.setStateByName(STATE_NAMES.scores,this.selectedBoardGame.scoresheets,true);\n        }\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">${this.selectedBoardGame.name} (${this.selectedBoardGame.year})</h5>`;\n        buffer += `<p class=\"card-text\">Played On: ${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</p>`;\n        buffer += `<p class=\"card-text\">Scores: `;\n        if (item.player1) {\n            if (item.score1 > 0) {\n                buffer += `${item.player1}:${item.score1} `;\n            }\n        }\n        if (item.player2) {\n            if (item.score2 > 0) {\n                buffer += `${item.player2}:${item.score2} `;\n            }\n        }\n        if (item.player3) {\n            if (item.score3 > 0) {\n                buffer += `${item.player3}:${item.score3} `;\n            }\n        }\n        if (item.player4) {\n            if (item.score4 > 0) {\n                buffer += `${item.player4}:${item.score4} `;\n            }\n        }\n        if (item.player5) {\n            if (item.score5 > 0) {\n                buffer += `${item.player5}:${item.score5} `;\n            }\n        }\n        if (item.player6) {\n            if (item.score6 > 0) {\n                buffer += `${item.player6}:${item.score6} `;\n            }\n        }\n        if (item.player7) {\n            if (item.score7 > 0) {\n                buffer += `${item.player7}:${item.score7} `;\n            }\n        }\n        buffer += `</p>`;\n        return buffer;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return './img/scorecard-vertical.jpg';\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item.id;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true;\n        if (this.selectedBoardGame) {\n            if (!confirm(\"Are you sure you want to delete this Score Sheet?\")) {\n                result = false;\n            }\n        }\n        return result;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Handling delete ${selectedItem}`);\n        // remove the sheet from the selected board game\n        if (this.selectedBoardGame.scoresheets) {\n            let index = this.selectedBoardGame.scoresheets.findIndex((sheet: any) => sheet.id === selectedItem.id);\n            if (index >= 0) {\n                this.selectedBoardGame.scoresheets.splice(index, 1);\n                // let the controller know to remove from the database if the user is logged in\n                this.stateManager.setStateByName(STATE_NAMES.scores,this.selectedBoardGame.scoresheets,true);\n                Controller.getInstance().scoreSheetRemovedFromBoardGame(this.selectedBoardGame, selectedItem.id);\n            }\n        }\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default ScoreSheetsView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'recentUserSearches',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.userSearch,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        this.addEventListener(this);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.id;\n    }\n\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            this.renderer?.createDisplayElementForCollectionItem(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, isSame, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n\n}\n\nexport default UserSearchView;\n","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"../ui-framework/helper/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../ui-framework/form/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../ui-framework/form/CommonTypes\";\n\nexport const FIELD_ID:string = 'id';\nexport const FIELD_CreatedBy:string = 'createdBy';\nexport const FIELD_ModifiedBy:string = 'modifiedBy';\nexport const FIELD_CreatedOn:string = 'createdOn';\nexport const FIELD_ModifiedOn:string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc:string = 'Created By';\nexport const FIELD_ModifiedBy_Desc:string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc:string = 'Created On';\nexport const FIELD_ModifiedOn_Desc:string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    private constructor() {}\n\n    public createBasicObjectDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean):DataObjectDefinition {\n        let objDef:DataObjectDefinition = {\n            id:id,\n            displayName:displayName,\n            fields:[]\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef:FieldDefinition = {\n                id:'id',\n                isKey:true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName:'Id',\n                mandatory:true,\n                generator: {\n                    generator:ops,\n                    onModify:false,\n                    onCreation:true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        this.addCreatedDateToArray(objDef.fields);\n        this.addCreatedByToArray(objDef.fields);\n        this.addModifiedByToArray(objDef.fields);\n        this.addModifiedDateToArray(objDef.fields);\n\n        return objDef;\n    }\n\n    private addCreatedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_CreatedOn,FIELD_CreatedOn_Desc,FieldType.datetime,true,FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedOn,FIELD_ModifiedOn_Desc,FieldType.datetime,true,FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields,FIELD_CreatedBy,FIELD_CreatedBy_Desc,FieldType.userId,true,FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedBy,FIELD_ModifiedBy_Desc,FieldType.userId,true,FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields:FieldDefinition[],keyType:KeyType, id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        let fieldDef:FieldDefinition = {\n            id:id,\n            isKey:false,\n            idType: keyType,\n            type: type,\n            displayName:displayName,\n            mandatory:isMandatory,\n            displayOnly:false,\n        }\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    private addNumericFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addStringFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):void {\n        this.addStringFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):void {\n        this.addNumericFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import moment from \"moment\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport debug from 'debug';\n\nconst templateLogger = debug('template-manager');\n\nexport class TemplateManager {\n    private static _instance: TemplateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): TemplateManager {\n        if (!(TemplateManager._instance)) {\n            TemplateManager._instance = new TemplateManager();\n        }\n        return TemplateManager._instance;\n    }\n\n    public getScoreSheetTemplate(boardGame: any): any | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiTemplate();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingTemplate();\n        }\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    public getScoreSheetStartingData(boardGame: any): any[] | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiStartingData();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingStartingData();\n        }\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    public getSaveData(boardGame: any, scoreSheet: ScoreSheet): any {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiSaveData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingSaveData(scoreSheet);\n        }\n        return this.getDefaultSaveData(scoreSheet);\n    }\n\n    public transformDataAfterUserChange(boardGame: any, scoreSheet: ScoreSheet): boolean {\n        let result = false;\n        if (boardGame.gameId === 270314) {\n            result = true;\n            this.transformOhanamiData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            result = true;\n            this.transformSkullKingData(scoreSheet);\n        }\n        return result; // do nothing unless for a specific game\n    }\n\n    private getOhanamiTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 8)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column > 1) {\n                    if ((row === 1) || (row === 2) || (row === 4)) {\n                        return {\n                            className: 'bg-ohanami-blue',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 3) || (row === 5)) {\n                        return {\n                            className: 'bg-ohanami-green',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 6)) {\n                        return {\n                            className: 'bg-ohanami-grey',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 7)) {\n                        return {\n                            className: 'bg-ohanami-pink',\n                            forceNumeric: true,\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 21)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column % 2 === 0) {\n                    if (row % 2 === 0) {\n                        return {\n                            className: 'bg-readonly',\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingStartingData(): any[] {\n        return [\n            ['Round', '', 'P 1', '', 'P 2', '', 'P 3', '', 'P 4', ''],\n            ['1', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['2', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['3', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['4', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['5', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['6', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['7', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['8', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['9', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['10', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['Total', '', '', '', '', '', '', '', '', '']\n        ];\n    }\n\n    private getOhanamiStartingData(): any[] {\n        return [\n            ['Round', 'Mult.', 'P 1', 'P 2', 'P 3', 'P 4'],\n            ['1', 'x3', '0', '0', '0', '0'],\n            ['2', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['3', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['', 'x7', '0', '0', '0', '0'],\n            ['', 'var', '0', '0', '0', '0'],\n            ['Total', '', '0', '0', '0', '0']\n        ];\n    }\n\n    private getDefaultScoreSheetTemplate(boardGame: any): any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn: 0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame: any): any[] {\n        return [\n            ['P 1', 'P 2', 'P 3', 'P 4', 'P 5', 'P 6', 'P 7'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n        ];\n    }\n\n    private getDefaultSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        // ensure the scores are numbers\n        scores.forEach((score,index) => {\n            const parsed = parseInt(score);\n            if (isNaN(parsed)) {\n                scores[index] = 0;\n            }\n            else {\n                scores[index] = parsed;\n            }\n        })\n\n        // @ts-ignore\n        saveData.players = playerNames;\n        // @ts-ignore\n        saveData.scores = scores;\n        return saveData;\n    }\n\n    private getOhanamiSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first two columns\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 2; index < playerNames.length; index++) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for ohanami is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private getSkullKingSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first three columns, every second column\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // last row is the scores, following the same pattern as the playr names\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 3; index < playerNames.length; index += 2) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for skull king is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private calculateOhanamiPinkScore(numOfCards: number): number {\n        let score = 0;\n        if (numOfCards > 0) {\n            if (numOfCards > 15) numOfCards = 15;\n            while (numOfCards > 0) {\n                score += numOfCards;\n                numOfCards--;\n            }\n        }\n        return score;\n    }\n\n    private transformOhanamiData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 0; index < 4; index++) {\n            /*\n             *  for each player the score is the sum of\n             *  3 x row 1, 2, and 4\n             *  4 x row 3 and 5\n             *  7 x row 6\n             *  row 7 is complicated\n             */\n            let score: number = 0;\n            // @ts-ignore\n            let parsed = parseInt(scoreSheet.data[1][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[2][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[4][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[3][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[5][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[6][index + 2]);\n            if (!isNaN(parsed)) score += (7 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[7][index + 2]);\n            if (!isNaN(parsed)) score += this.calculateOhanamiPinkScore(parsed);\n\n            // @ts-ignore\n            scoreSheet.data[8][index + 2] = score;\n        }\n    }\n\n    private transformSkullKingData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 2; index < 10; index += 2) {\n            /*\n             *  for each player the score is the sum of\n             *  each bid score plus a bonus\n             *  if bid is 0, and actual is 0, score is 10 x round\n             *  if bid is x, and actual is x, score is 20 x bid\n             *  if bid ix x, and actual is y (x != y), score is 10 x abs(x-y)\n             */\n            let score: number = 0;\n\n\n            for (let round = 1; round <= 10; round++) {\n                let row = 2 * round - 1;\n                // @ts-ignore\n                let parsedBid = parseInt(scoreSheet.data[row][index]);\n                // @ts-ignore\n                let parsedActual = parseInt(scoreSheet.data[row][index + 1])\n                // @ts-ignore\n                let parsedBonus = parseInt(scoreSheet.data[row + 1][index + 1]);\n                // @ts-ignore\n                if (!isNaN(parsedBid) && !isNaN(parsedActual)) {\n                    if ((parsedBid === 0) && (parsedActual === 0)) {\n                        score += round * 10;\n                    }\n                    if (parsedBid === parsedActual) {\n                        score += 20 * parsedBid;\n                    }\n                    if ((parsedBid > 0) && (parsedBid !== parsedActual)) {\n                        score -= 10 * Math.abs(parsedBid - parsedActual);\n                    }\n                    if (!isNaN(parsedBonus)) score += parsedBonus;\n                }\n            }\n\n            // @ts-ignore\n            scoreSheet.data[21][index + 1] = score;\n        }\n\n    }\n}","export type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string\n}\n\nexport type BasicElement = {\n    elementType:string,\n    elementAttributes?:Attribute[],\n    elementClasses:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    badge?:BasicElement,\n    delete?:BasicButtonElement,\n    drag?:Draggable,\n    background?:BasicElement,\n    drop?:Droppable\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean\n}\n\nexport type CollectionViewDOMConfig = {\n    resultsContainerId:string,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    keyType: KeyType,\n    dataSourceId:string,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event:AlertEvent):void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    private alertDiv:HTMLDivElement;\n    private alertTitle:HTMLHeadingElement;\n    private alertContent:HTMLParagraphElement;\n    private cancelButton:HTMLButtonElement;\n    private confirmButton:HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public startAlert(listener:AlertListener, title:string, content:string, context?:any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event:MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            event.target.removeEventListener('click',confirmHandler);\n        }\n\n        const cancelHandler = (event:MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            event.target.removeEventListener('click',cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click',confirmHandler);\n        this.cancelButton.addEventListener('click',cancelHandler);\n    }\n\n}","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements CollectionViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View, config:SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"./DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\n\n\nexport abstract class AbstractForm implements Form,FormListener,AlertListener,FieldListener{\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement|null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields:Field[] = [];\n    protected map:AttributeFieldMapItem[];\n    protected isInitialised:boolean = false;\n    protected hasChangedBoolean:boolean = false;\n    protected isDisplayOnly:boolean = false;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error (`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged():boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return  this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate():void;\n    protected abstract _startCreate():void;\n    protected abstract _reset():void;\n    protected abstract _visible():void;\n    protected abstract _hidden():void;\n    protected abstract _initialise():void;\n    protected abstract _displayOnly():void;\n    protected abstract _isSameObjectAsDisplayed(dataObj:any):boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj:any,field:Field,currentValue:string|null):void;\n    public abstract getFormattedDataObject(): any;\n\n    public initialise(): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise();\n    }\n\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef:FieldDefinition):FieldUIConfig|null|undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result:FieldUIConfig|null|undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index ++;\n            }\n        }\n        return result;\n    }\n\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            }\n            else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n        this.fields.forEach((field) => {\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.uiDef.id, field.getFieldDefinition(),null);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    logger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n    public startCreateNew(): any {\n        logger(`Starting create new`);\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n\n    public startUpdate(objectToEdit: any): void {\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                }\n                else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.reset(); // reset the form state\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName,`Are you sure you want to delete this information?`,FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            logger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.uiDef.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                logger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n\n    getId(): string {\n        let result = '';\n        if (this.uiDef) {\n            result = this.uiDef.id;\n        }\n        return result;\n    }\n\n    getFieldFromDataFieldId(dataFieldId:string): Field | undefined {\n        let result:Field|undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n           result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event:AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch(event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n           field.clearReadOnly();\n        });\n    }\n\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n\n\n}","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"./DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport {AbstractField} from \"./field/AbstractField\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\nimport {isSame} from \"../../util/EqualityFunctions\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.uiDef.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.uiDef.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.uiDef.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.uiDef.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n\n    }\n\n    protected _initialise(): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result:string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n\n    protected _startCreate(): void {\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId)||(currentObjId && !suppliedObjId)){\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n\n}","import {KeyType} from \"../ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"./validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea'\n}\n\nexport interface FieldValueGenerator {\n    generate(field:FieldDefinition,isCreate:boolean):string;\n}\n\n\n\n\nexport type FieldDefinition = {\n    id:string,\n    isKey:boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName:string,\n    mandatory:boolean,\n    displayOnly?:boolean,\n    description?:string,\n    generator?:{\n        onCreation:boolean,\n        onModify:boolean,\n        generator:FieldValueGenerator\n    },\n    dataSource?:FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id:string,\n    displayName:string,\n    fields:FieldDefinition[],\n    rules?:ValidationRule\n}\n\n\n\n","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target:Form,\n    formId:string,\n    eventType:FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event:FormEvent,formValues?:any):boolean; // return true to cancel the action\n}","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid:boolean,\n    message?:string,\n    resetOnFailure:boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field:FieldDefinition, currentValue:string|null):ValidationResponse;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field:FieldDefinition, currentValue:string):any;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field:FieldDefinition, currentValue:string):string|null;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field:FieldDefinition, currentValue:string):string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field:FieldDefinition, formValues:string[]):boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup\n}\n\nexport type FieldLabel = {\n    label:string,\n    attributes?:Attribute[],\n    classes?:string\n}\n\nexport type DescriptionText = {\n    message:string,\n    elementType:string,\n    elementClasses:string,\n}\n\n\n\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?:{\n        container?:BasicElement,\n        label?: FieldLabel,\n        element:BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions\n}\n\nexport type FieldGroup = {\n    containedBy?:BasicElement,\n    fields:FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id:string,\n    displayName:string,\n    classes?:string,\n    fieldGroups:FieldGroup[],\n    buttonsContainedBy?:BasicElement\n    deleteButton:BasicButtonElement,// should be clickable\n    cancelButton:BasicButtonElement,// should be clickable\n    submitButton:BasicButtonElement  // should be clickable\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId:string,\n    attributeId:string\n}\n\nexport const DATA_ID_ATTRIBUTE:string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {FieldDefinition} from \"../DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId,field, newValue));\n\n            }\n        }\n    }\n}","import {FieldDefinition} from \"../DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string, fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement:HTMLInputElement):string{\n        let newValue:string|null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        }\n        else {\n            return '';\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {FieldDefinition, FieldType} from \"../DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {isValidElement} from \"react\";\n\nexport class ValidationEventHandler {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement:HTMLElement,isValid:boolean, value:string, message:string|undefined = undefined,resetOnFailure:boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId,field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement:HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement,validationResp.isValid,value,validationResp.message,validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../CommonTypes\";\nimport {FieldType} from \"../DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    private constructor() {\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements:HTMLInputElement[]|null = null):void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners,subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                   subElement.addEventListener('blur',eventHandler);\n                });\n\n            }\n            else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker( );\n            $(fieldElement).datepicker( \"option\", \"dateFormat\",'dd/mm/yy' );\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n        }\n    {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements:HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners,subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container:radioGroupElement,\n            radioButtons:subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    fields: HTMLInputElement[],\n    textFields:HTMLTextAreaElement[],\n    selectFields:HTMLSelectElement[],\n    radioButtonGroups: {\n        container:HTMLElement,\n        radioButtons:HTMLInputElement[]\n    }[],\n    deleteButton: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    private constructor() {}\n\n    private createFormButton(form:Form,formConfig:FormUIDefinition,formListeners:FormListener[],buttonDef:BasicButtonElement,eventType:FormEventType):HTMLButtonElement {\n        let buttonEl:HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl,buttonDef.buttonClasses);\n        buttonEl.setAttribute('id',`${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl,buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click',(event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent:FormEvent = {\n                target:form,\n                formId:formConfig.id,\n                eventType:eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n\n    public createFormElements(form:Form, formListeners:FormListener[],formConfig:FormUIDefinition,fieldListeners:FieldListener[]):FormFactoryResponse {\n        let formEl:HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id',formConfig.id);\n        formEl.setAttribute('name',formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl,formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements:HTMLInputElement[] = [];\n        let formTAElements:HTMLTextAreaElement[] = [];\n        let formRBGElements:{\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n            }[] = [];\n        let formSelectElements:HTMLSelectElement[] = [];\n\n        formConfig.fieldGroups.forEach((group:FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl,group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl,group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field:FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer:HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer,formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer,formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            }\n            else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.deleteButton,FormEventType.DELETING);\n        buttonContainer.appendChild(deleteButtonEl);\n\n        let cancelButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.cancelButton,FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.submitButton,FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result:FormFactoryResponse = {\n            form: formEl,\n            fields: formInputElements,\n            selectFields:formSelectElements,\n            radioButtonGroups:formRBGElements,\n            textFields:formTAElements,\n            deleteButton:deleteButtonEl,\n            cancelButton:cancelButtonEl,\n            submitButton:submitButtonEl\n        }\n\n        return result;\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden:boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        }\n        else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId,this.definition, value));\n        }\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        }\n        else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,false,'',message,false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId,this.definition,this.getValue(),message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = ''+newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    console.log(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl:HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0;index < selectEl.options.length;index++) {\n                        // @ts-ignore\n                        const option:HTMLOptionElement = selectEl.options.item(index);\n                        console.log(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            console.log(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    console.log(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue():void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId:string, field: FieldDefinition, currentValue: string, message: string): void {}\n    valueChanged(formId:string, field: FieldDefinition, newValue: string | null): void {}\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style','display:none');\n                }\n\n            }\n            else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,true,'');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            }\n            else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly','true');\n        this.element.setAttribute('disabled','true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly','true');\n                subElement.setAttribute('disabled','true');\n            });\n        }\n    }\n}\n\n","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../DataObjectTypeDefs\";\n\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../DataObjectTypeDefs\";\n\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {ComparisonType, ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if (condition.values) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if (condition.sourceDataFieldId) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: [convertedRule]\n            }\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${field.getValue()}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits:string[] = values.split(',');\n            let foundInValue:boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${field.getValue()} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed:false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesTargetFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field,values);\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field,values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                response.message = ruleCheck.message;\n                return false;\n            }\n            logger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                logger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string,includeSourceFields:boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    }\n                    else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId:string, field:FieldDefinition,onlyRulesOfType:ConditionResponse|null) : RuleCheck {\n        logger(`Checking invalidation only rules for form ${formId}, data field ${field.id}`);\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,false);\n\n        let result:RuleCheck = {\n            ruleFailed:false\n        }\n\n        rules.every((rule) => { // we only want rules that make a field invalid\n            if ((onlyRulesOfType && rule.response === onlyRulesOfType) || !onlyRulesOfType) {\n                let response: RuleResponse = this.executeRule(rule);\n                if (response.ruleFailed) {\n                    flogger(`Rule failed with message ${response.message}`);\n                    result.ruleFailed = true;\n                    result.message = response.message;\n                    return false;\n                }\n            }\n            return true;\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n\n}","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n};\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?:string,\n    values?:string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId:string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"../form/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private previousFieldValues: FieldNameValue[];\n\n    private static dateRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {}\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n}","import {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../form/DataObjectTypeDefs\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    private constructor() {\n    }\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation:RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.datetime):\n                case (FieldType.date):\n                case (FieldType.shortTime):{\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-sm-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-sm-9 offset-sm-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                            validator: fieldOperations,\n                            messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-sm-9 offset-sm-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            deleteButton: {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            }\n        }\n        logger(formConfig);\n        return formConfig;\n    }\n}","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../Controller\";\nimport {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"../form/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons:HTMLInputElement[] = [];\n\n    public constructor() {}\n\n\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        }\n        else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../form/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options:ValueOption[];\n    private listeners:FieldValueOptionsListener[];\n\n    constructor(options:ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name:string,value:string) {\n        this.options.push({name,value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../form/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport { CollectionViewListener } from \"../interface/CollectionViewListener\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"./DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer,FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem:boolean;\n    protected containerId: string;\n    protected forwarder:DetailViewListenerForwarder|null;\n    protected view:DetailView|null;\n\n    constructor(containerId: string, objDef: DataObjectDefinition) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view:DetailView):void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(): void {\n        if (this.form) this.form.initialise();\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: CollectionViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): CollectionViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly():boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateCurrentItem()) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteCurrentItem(): boolean {\n        return true;\n    }\n\n    public hasPermissionToUpdateCurrentItem(): boolean {\n        return true;\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n        throw new Error(`Handle action item not implemented for ${actionName}`);\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view,this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view,this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view,this.currentItem);\n                    }\n                    else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view,this.currentItem);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {EXTRA_ACTION_ATTRIBUTE_NAME, Modifier, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {View} from \"../interface/View\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    let action: HTMLElement = document.createElement('button');\n                    action.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                    if (extraAction.buttonText) {\n                        action.innerHTML = extraAction.buttonText;\n                    }\n                    if (extraAction.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n                        action.appendChild(iconEl);\n                    }\n                    action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    action.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                    action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n\n                    action.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventActionClicked(event);\n                    });\n                    buttonsEl.appendChild(action);\n                });\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n        const displayText = this.view.getDisplayValueForItemInNamedCollection(collectionName, item);\n        textEl.innerHTML = displayText;\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`, 10);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n        });\n    }\n\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {\n    CollectionViewDOMConfig,\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier\n} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport {AlertEvent, AlertListener} from \"../../alert/AlertListener\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView,CollectionViewEventHandler,AlertListener{\n    protected collectionName: string;\n    protected renderer:CollectionViewRenderer|null;\n    protected selectedItem:any|null;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName:string) {\n        super(uiConfig);\n        this.collectionName = collectionName;\n        this.renderer = null;\n        this.selectedItem = null;\n        this.eventForwarder = new CollectionViewListenerForwarder();\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n    }\n\n    addEventListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.detail.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    protected getDragData(event: DragEvent): any {\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractListView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.getItemInNamedCollection(this.collectionName,compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.uiConfig.detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.uiConfig.detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n    abstract getItemInNamedCollection(name:string, compareWith:any):any;\n    abstract getDisplayValueForItemInNamedCollection(name: string, item: any): string;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (this.selectedItem) {\n            if (this.compareItemsForEquality(item,this.selectedItem)) {\n                return Modifier.active;\n            }\n        }\n        return Modifier.inactive;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl,name,newState);\n        }\n    }\n\n    public eventStartDrag(event: DragEvent):void {\n        avLogger(`view ${this.getName()}: drag start`);\n        avLoggerDetails(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        avLoggerDetails(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this, data);\n    }\n\n    public eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractListView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        console.log(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                avLoggerDetails(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this, selectedItem);\n            }\n        }\n    }\n\n    public eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractListView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n               AlertManager.getInstance().startAlert(this, this.getName(),`Are you sure you want to delete this information?`,selectedItem);\n            }\n        }\n    }\n\n\n\n    public eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractListView.DATA_SOURCE);\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                avLoggerDetails(selectedItem);\n                this.eventForwarder.itemAction(this, actionName, selectedItem);\n            }\n        }\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer:CollectionViewRenderer):void {\n        this.renderer = renderer;\n    }\n\n    completed(event: AlertEvent): void {\n        avLoggerDetails(event.context);\n        this.selectedItem = null;\n        this.eventForwarder.itemDeleted(this, event.context);\n    }\n\n}","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName:string) {\n        super(uiConfig,stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName,this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render():void {\n        this.updateViewForNamedCollection(this.collectionName,this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show():void {}\n    hidden():void{}\n\n\n}\n","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: CollectionViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl:HTMLElement|null;\n\n\n    protected constructor(uiConfig: CollectionViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getUIConfig(): CollectionViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n    abstract show(): void;\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.detail.drop) {\n            const acceptType = (this.uiConfig.detail.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.detail.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.detail.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n}\n","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem:any|null = null;\n    protected renderer:DetailViewRenderer;\n\n    constructor(uiConfig: CollectionViewDOMConfig, renderer:DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateCurrentItem()) {\n            this.renderer.displayItem(dataObj);\n        }\n        else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        this.renderer.initialise();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteCurrentItem(): boolean {\n        return this.renderer.hasPermissionToDeleteCurrentItem();\n    }\n    public hasPermissionToUpdateCurrentItem(): boolean {\n        return this.renderer.hasPermissionToUpdateCurrentItem();\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName,selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n\n}","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1: any, item2: any): boolean {\n    return (item1.gameId === item2.gameId);\n}\n\nexport function isSameRoom(item1:any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport BoardGameView from \"./component/view/BoardGameView\";\nimport {ALERT, API_Config, Decorator, DRAGGABLE, NAVIGATION} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/controller/ScoreSheetController\";\nimport {ScoreSheetDetailView} from \"./component/view/ScoreSheetDetailView\";\nimport ScoreSheetsView from \"./component/view/ScoreSheetsView\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ScoreSheetsSidebar from \"./component/sidebar/ScoreSheetsSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport BoardGameSearchSidebar from \"./component/sidebar/BoardGameSearchSidebar\";\nimport BGGSearchView from \"./component/view/BGGSearchView\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE} from \"./ui-framework/ConfigurationTypes\";\nimport {View} from \"./ui-framework/view/interface/View\";\nimport {DataObjectDefinition, FieldType} from \"./ui-framework/form/DataObjectTypeDefs\";\nimport {\n    BasicObjectDefinitionFactory,\n    FIELD_CreatedBy,\n    FIELD_CreatedOn,\n    FIELD_ID\n} from \"./model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"./ui-framework/helper/SimpleValueDataSource\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"./ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"./ui-framework/form/validation/ValidationManager\";\nimport {DetailViewImplementation} from \"./ui-framework/view/implementation/DetailViewImplementation\";\nimport {FormDetailViewRenderer} from \"./ui-framework/view/delegate/FormDetailViewRenderer\";\nimport {ViewListener} from \"./ui-framework/view/interface/ViewListener\";\nimport {CollectionViewListener} from \"./ui-framework/view/interface/CollectionViewListener\";\nimport {CollectionView} from \"./ui-framework/view/interface/CollectionView\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component implements UnreadMessageCountListener, CollectionViewListener {\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private bggSearchSidebar: BoardGameSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private scoreSheetSidebar: ScoreSheetsSidebar;\n    // @ts-ignore\n    private scoresView: ScoreSheetsView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            boardGames: [],\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n        this.handleShowScores = this.handleShowScores.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public addBoardGameToDisplay(draggedObject: any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        Controller.getInstance().addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    alert(title: string, content: string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames: any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index: number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={this.handleShowScores}\n                addToCollectionHandler={Controller.getInstance().addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.hideClass);\n        event.preventDefault();\n        let id = this.modalEl.getAttribute(Controller.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            Controller.getInstance().removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event: MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            } else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n    handleDeleteBoardGame(event: MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (Controller.getInstance().isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(Controller.eventDataKeyId, id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    } else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        Controller.getInstance().removeBoardGameFromDisplay(boardGame);\n\n                    }\n                } else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    Controller.getInstance().removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatSidebar = new ChatRoomsSidebar();\n        // add the views to the chat side bar\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n\n        this.chatSidebar.onDocumentLoaded();\n\n\n        this.userSearchSidebar = new UserSearchSidebar();\n        // add the subviews for the user search\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n\n\n        this.bggSearchSidebar = new BoardGameSearchSidebar();\n        const bggSearch = new BGGSearchView();\n        this.bggSearchSidebar.addView(bggSearch, {containerId: BoardGameSearchSidebar.bggSearchResults})\n        this.bggSearchSidebar.onDocumentLoaded();\n        bggSearch.addEventListener(this);\n\n        this.scoreSheetSidebar = new ScoreSheetsSidebar();\n        this.scoresView = new ScoreSheetsView();\n        this.scoreSheetSidebar.addView(this.scoresView, {containerId: ScoreSheetsSidebar.scoreSheets});\n        this.scoreSheetSidebar.onDocumentLoaded();\n\n\n        ScoreSheetDetailView.getInstance().onDocumentLoaded();\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(NAVIGATION.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(ALERT.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(ALERT.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(ALERT.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(ALERT.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(ALERT.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(ALERT.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click', this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click', this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click', this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        Controller.getInstance().initialise();\n\n        // now lets break things with a new form\n        let dataObjDef: DataObjectDefinition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(\"test\", \"Test\", true, true);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"email\", \"Email\", FieldType.email, true, \"We totally won't message with this...\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"float1\", \"Float\", FieldType.float, true, \"A number yo....\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"float2\", \"Float2\", FieldType.float, true, \"A number 2\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"checkbox\", \"Checkbox?\", FieldType.boolean, true, \"Yes or No?\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"date\", \"Date\", FieldType.date, true, \"Date yep\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"time\", \"Time\", FieldType.shortTime, true, \"How long till we get there?\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"textarea\", \"TextArea\", FieldType.largeText, true, \"An essay\");\n\n        let dataSource: SimpleValueDataSource = new SimpleValueDataSource([\n            {name: ' ', value: ' '},\n            {name: 'Justice League', value: 'jl'},\n            {name: 'Marvel', value: 'marvel'},\n            {name: 'Other', value: 'other'},\n\n        ]);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"select\", \"Select\", FieldType.choice, true, \"Some choices\", dataSource);\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(dataObjDef, \"rbg\", \"RBG\", FieldType.limitedChoice, true, \"Some similar choices\",\n            new SimpleValueDataSource([\n                {name: 'Justice League', value: 'jl'},\n                {name: 'Marvel', value: 'marvel'},\n                {name: 'Other', value: 'other'},\n\n            ]));\n        // okay lets make a form\n        let renderer = new FormDetailViewRenderer(\"testForm\",dataObjDef);\n        let view = new DetailViewImplementation({},renderer);\n\n        // create a test object\n        let dataObj = {\n            email: 'jamie.sharples@gmail.com',\n            float1: 3.1,\n            float2: 2.3,\n            checkbox: true,\n            date: '20210910',\n            time: '12:32',\n            textarea: 'Test',\n            select: 'jl',\n            rbg: 'marvel'\n        };\n        // @ts-ignore\n        dataObj[FIELD_ID] = '2';\n        // @ts-ignore\n        dataObj[FIELD_CreatedOn] = '20201009000000';\n        // @ts-ignore\n        dataObj[FIELD_CreatedBy] = 'Jim';\n\n        view.onDocumentLoaded();\n        const form = renderer.getForm();\n\n\n\n        // change the select options\n        dataSource.addValueOption('X-Men', 'xmen');\n\n        // add a simple validation rule to the two numbers\n        let rule: ValidationRule = {\n            targetDataFieldId: 'float1',\n            response: ConditionResponse.invalid,\n            conditions: [\n                {\n                    sourceDataFieldId: 'float2',\n                    comparison: ComparisonType.lessThanEqual,\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'select',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'rbg',\n                    comparison: ComparisonType.hasValue,\n                    values: 'other'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'select',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'rbg',\n                    comparison: ComparisonType.hasValue,\n                    values: 'jl,marvel'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        view.displayItem(dataObj);\n        view.show();\n\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.bggSearchSidebar.eventHide(null);\n    }\n\n    handleShowCollection(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowScores(event: Event) {\n        logger(`Handling show board game scores`);\n        event.preventDefault();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling Show board game scores ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                this.scoresView.setSelectedBoardGame(boardGame);\n                this.scoreSheetSidebar.eventShow(null);\n            }\n        }\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    handleShowBGGSearch(event: Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchSidebar.eventShow(event);\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    private handleDrop(event: Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeBoardGame) {\n            draggedObject.gameId = parseInt(draggedObject.gameId);\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection: boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', false);\n        } else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        // add a new board game to the display\n        selectedItem.gameId = parseInt(selectedItem.gameId);\n        this.addBoardGameToDisplay(selectedItem);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\n//localStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts abstract-form bootstrap-form-config-helper basic-form basic-form-detail chat-sidebar chat-sidebar:detail socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts view-ts-detail user-search user-search-detail template-manager sidebar-container' ;\n//localStorage.debug = 'basic-field-operations-generator basic-field-operations-renderer basic-field-operations-validator basic-field-operations-formatter' ;\n//localStorage.debug = 'basic-form basic-form-detail validation-manager abstract-field';\nlocalStorage.debug = 'validation-manager-rule-failure abstract-form';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","import React from \"react\";\nimport debug from 'debug';\n\nimport Controller from \"../../Controller\";\nimport {Decorator} from \"../../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler, startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!Controller.getInstance().isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!Controller.getInstance().isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-2 w-100\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"fas fa-list-alt\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scoresheets) {\n            scoreCount = boardGame.scoresheets.length;\n        }\n\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-info ml-1'\n                               onClick={showScoresHandler}>Scores: {scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n            const bggURL = `https://boardgamegeek.com/boardgame/${boardGame.gameId}`;\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <a href={bggURL} target=\"_blank\"><img className=\"card-img-top\" src={boardGame.image}\n                                                              alt=\"Card image cap\"></img></a>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? favouriteIcon : ''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? scoreBadge : ''}<br/> {(Controller.getInstance().isLoggedIn()) ? ((boardGame.decorator === Decorator.Persisted) ? deleteButton : addButton) : deleteButton}\n                            </h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                            <p className=\"card-text\">Loading...</p>\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Loading...\n                                </small>\n                            </p>\n                        </div>\n                        <div className={\"card-footer text-right text-muted\"}>\n                            Loading...\n                        </div>\n                    </div>\n                </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","var map = {\n\t\"./af\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/handsontable/node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","boardGames","scores","selectedEntry","recentUserSearches","bggSearchResults","scoreSheet","chatLogs","API_Config","login","graphQL","bggSearchCall","bggSearchCallById","queryString","resultName","findUsers","addToMyCollection","removeFromMyCollection","getMyBoardGameCollection","addScoreSheetToBoardGame","removeScoreSheet","NAVIGATION","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","ALERT","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","DRAGGABLE","typeBoardGame","typeUser","fromUserSearch","fromFavourites","VIEW_NAME","bggSearch","blockedUsers","chatLog","favouriteUsers","scoreSheets","userSearch","cLogger","debug","cLoggerDetail","Controller","getInstance","eventDataKeyId","connectToApplication","graphSM","stateName","apiURL","apis","find","create","destroy","update","findAll","data","isActive","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","initialise","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","ScoreSheetController","currentGameList","getStateManager","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","getCurrentUser","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","addBoardGameToDisplay","currentListOfGames","index","value","boardGame","Downloader","gameId","callbackBoardGameDetails","status","boardGameDetails","regex","callbackAddToCollection","id","game","updatingBoardGame","cb","userId","boardGameId","sheet","callbackRemoveFromCollection","callbackGetCollection","collectionData","locallySaveBoardGame","scoreSheetAddedToBoardGame","oldBoardGame","scoreSheetRemovedFromBoardGame","sheetId","scoreSheetId","addBoardGameToCollection","removeBoardGameFromCollection","removeBoardGameFromDisplay","cleanupBoardGameState","cleanedUpList","existingListGame","downloadAndSyncSavedBoardGameCollection","getServerAPIURL","window","removeBoardGameFromState","currentBoardGamesOnDisplay","findBoardGameInStateFromEvent","event","parseInt","decorateScoreSheets","copyLocallySavedScoreSheetsToBoardGame","source","toSave","item","target","sheetToSave","convertScoreSheetToDatabaseFormat","convertScoreSheetToApiCallFormat","handleShowChat","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","user","username","stateObj","NotificationManager","callLogger","CallManager","peer","webrtcDiv","myVideoStream","myVideo","path","host","secure","document","ScoreSheetDetailView","navigator","audio","video","browserUtil","track","isCurrentUser","videoCardHolder","videoCard","videoCardTitle","videoCardBody","videoCardFooter","footerContent","stopVideoButton","muteMicButton","isPaused","isMuted","numberOfAttempts","interval","setInterval","call","clearInterval","userVideoCard","videoEl","parentNode","prepareToAnswerCallFrom","alert","sscLogger","SOURCE_View","applicationView","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","currentUsername","isRoomCreator","currentUsersInScoreSheet","intervalTimer","receiveLogin","receiveLogout","receiveInvitation","invite","InviteType","confirm","receiveQueuedMessages","messages","receiveQueuedInvites","invites","receiveDecline","type","receiveJoinedRoom","receivedLeftRoom","receiveUserList","v4","room","boardGameName","sheetLayoutOptions","TemplateManager","timer","timerGoing","isFinished","timerWasGoing","tableData","created","moment","Priority","changedByTM","saveData","informListeners","BoardGameSearchSidebar","SidebarViewContainer","BGGSEARCH_SidebarPrefs","expandedSize","location","SidebarLocation","left","ChatRoomsSidebar","SidebarPrefs","right","SidebarContainers","ScoreSheetsSidebar","bottom","UserSearchSidebar","recentSearches","favourites","blocked","vLogger","vLoggerDetail","BGGSearchView","AbstractStatefulCollectionView","BGGSEARCH_ViewConfig","resultsContainerId","resultsElementType","resultsElementAttributes","name","resultsClasses","keyId","keyType","KeyType","dataSourceId","modifiers","normal","inactive","active","warning","detail","containerClasses","textElementType","textElementClasses","select","drag","from","BGGSEARCH_Form","BGGSEARCH_Query","BGGSEARCH_Search","handleSearchResultsCB","onDocumentLoaded","getIdForItemInNamedCollection","getDisplayValueForItemInNamedCollection","compareItemsForEquality","item1","item2","parsed1","parsed2","isNaN","eventClickItem","changeSearchButton","enable","handleSearch","queryText","query","DownloadManager","documentLoaded","hideRequested","itemAction","canDeleteItem","itemDeleted","selectedItem","itemDragStarted","itemSelected","showRequested","itemDropped","itemDeselected","canSelectItem","BlockedUserView","DOMConfig","icons","delete","buttonClasses","iconClasses","drop","acceptFrom","acceptTypes","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","getSecondaryModifierForItemInNamedCollection","Modifier","updateViewForNamedCollection","droppedItem","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","handleUserDrop","draggedObjectJSON","draggedObject","JSON","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","messageEl","fastSearchEl","$","eventUserSelected","ui","addChatMessage","chatMessageEl","messageSenderEl","contentEl","reRenderChatMessages","renderChatLog","handleChatLogsUpdated","handleChatStarted","leaveChat","checkCanComment","clearChatLog","myUsername","fastSearchValues","newValue","searchValue","label","disabled","minLength","handleOfflineMessagesReceived","handleInvitationDeclined","handleNewInviteReceived","getName","hidden","getDataSourceKeyId","getUIConfig","render","show","csLogger","ChatLogsView","selectedChatLog","badge","elementType","elementClasses","isSameRoom","updateStateManager","newState","selectChatRoom","FavouriteUserView","extraActions","favUsers","actionName","roomName","ssvLogger","ScoreSheetDom","dropZone","startStopTimer","end","iconStart","iconInProgress","iconEnd","iconLeave","ssFastSearchUserNames","webrtc","thisEl","boardGameTitleEl","timerEl","endOrLeaveEl","scoreSheetEl","table","handleEndOrLeave","handleStartStopTimer","row","hours","Math","minutes","seconds","ScoreSheetsView","selectedBoardGame","SCORESHEETS_ViewConfig","buttonText","background","setSelectedBoardGame","buffer","UserSearchView","fastSearchInputId","dataLimit","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","BasicObjectDefinitionFactory","objDef","displayName","fields","ops","fieldType","FieldType","fieldDef","isKey","idType","mandatory","generator","onModify","onCreation","isMandatory","description","datasource","displayOnly","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","response","fetch","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","dlLogger","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","requestId","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","element","initiateFetchForQueueItem","BootstrapNotification","Notification","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","NotificationFactory","createNotification","notificationFactory","notification","notificationNode","parentEl","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","unreadListener","listener","favourite","savedLogs","log","joinDateTime","priority","didChatAlreadyExist","happyToProceed","receiveMessage","wasOffline","joinChat","logout","declineInvite","sendInvite","ChatRoom","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","lastViewed","numOfNewMessages","foundLog","unreadCount","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","stateManager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","configuration","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","graphSMLogger","GraphQLApiStateManager","results","config","setCompletedRun","runsComplete","jsonRequest","Error","dataAttribute","msManager","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","templateLogger","template","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","cells","column","readOnly","className","forceNumeric","columnSummary","destinationRow","destinationColumn","reversedRowCoords","jsonData","createdOn","players","playerNames","parsed","score","numOfCards","round","parsedBid","parsedActual","parsedBonus","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","logger","AlertManager","confirmHandler","outcome","cancelHandler","sbvcLogger","addView","viewContainer","view","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","dataObjDef","valueChanged","failedValidation","fieldGroup","uiConfig","formEvent","formId","FormEventType","RESETTING","field","currentValue","ValidationManager","shouldCancelChange","CANCELLED","allFieldsValid","ConditionResponse","SAVE_ABORTED","formattedDataObject","SAVED","getId","getFieldFromDataFieldId","mapItem","completed","CANCELLING_ABORTED","DELETED","DELETE_ABORTED","clearReadOnly","setReadOnly","isDisplayingItem","isReadOnly","BasicFormImplementation","factoryElements","subElements","dataId","fieldEl","fieldId","fieldUIConfig","UIFieldType","attributeId","BootstrapFormConfigHelper","FormElementFactory","rbg","fieldValue","getFormattedDataObject","formattedResult","isSameObject","currentObjId","suppliedObjId","FormMode","DATA_ID_ATTRIBUTE","EditingEventListener","handleEvent","fieldElement","RenderingEventListener","processRendering","ValidationEventHandler","undefined","resetOnFailure","validationElementTarget","errorMessageDiv","errorMessageEl","processValidation","subElement","validationResp","DefaultFieldOptionsListener","optionsChanged","subEls","FieldInputElementFactory","fieldConfig","eventHandler","errorMessageDivEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","container","radioButtons","buttonEl","buttonDef","formConfig","iconEl","formEl","formInputElements","formTAElements","formRBGElements","formSelectElements","group","buttonContainer","deleteButtonEl","cancelButtonEl","submitButtonEl","form","selectFields","radioButtonGroups","textFields","deleteButton","cancelButton","submitButton","AbstractField","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","isValid","validator","setValue","console","selectEl","selectedIndex","option","reset","clearValue","validate","hide","setValid","InputField","RadioButtonGroupField","SelectField","TextAreaField","flogger","rule","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","comparison","values","sourceType","targetType","formRule","formRuleSet","rules","ruleFailed","targetValue","sourceValue","ComparisonType","check","splits","foundInValue","ruleCheck","ruleSet","onlyRulesOfType","failedResponses","vlogger","glogger","rlogger","BasicFieldOperations","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","setSubElements","formatValue","parseFloat","isValidValue","renderValue","generate","fieldOperations","rbgFieldOperation","fieldUIConfigs","renderer","formatter","classes","messageDisplay","validClasses","invalidClasses","rows","cols","elementAttributes","containedBy","fieldGroups","buttonsContainedBy","RBGFieldOperations","radioButton","SimpleValueDataSource","addListener","getOptions","CollectionViewListenerForwarder","DetailViewListenerForwarder","saveNewItem","updateItem","deletedItem","cancelled","FormDetailViewRenderer","setEventForwarder","displayItemReadonly","handleActionItem","formattedObj","avLogger","ListViewRenderer","dataSourceKeyId","resultDataKeyId","childEl","textEl","imgEl","buttonsEl","badgeValue","badgeEl","action","extraAction","displayText","modifier","secondModifier","ViewListenerForwarder","avLoggerDetails","AbstractCollectionView","itemId","dataSource","AbstractListView","compareWith","isSame","shouldSelect","shouldDelete","setRenderer","getItemInNamedCollection","AbstractView","DATA_SOURCE","droppedObjectType","droppedObjectFrom","acceptType","objectType","DetailViewImplementation","currentItem","forwarder","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classValue","addAttributes","attributes","attribute","removeAttributes","React","ReactDOM","BoardGameView","Root","cancelDelete","bind","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowBGGSearch","handleDrop","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","handleShowScores","localStorage","title","content","titleEl","textContent","modalEl","classList","remove","add","games","map","entry","preventDefault","getAttribute","findIndex","hasActiveScoreSheet","endScoreSheet","hideAllSideBars","startScoreSheet","switchBetweenCollectionAndScoreSheet","decorator","Persisted","setAttribute","year","componentDidMount","chatSidebar","chatView","chatLogView","userSearchSidebar","bggSearchSidebar","scoreSheetSidebar","scoresView","getElementById","chatNavigationItem","cancelBtnEl","confirmBtnEl","closeBtnEl","createBasicObjectDefinition","addStringFieldToObjDefinition","email","float","boolean","date","shortTime","largeText","choice","limitedChoice","float1","float2","checkbox","time","textarea","getForm","addValueOption","targetDataFieldId","invalid","conditions","sourceDataFieldId","lessThanEqual","addRuleToForm","hasValue","displayItem","href","countChanged","newCount","innerHTML","dataTransfer","getData","parse","showCollection","Component","info","beLogger","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","startScoreSheetButton","scoreCount","scoresheets","length","favouriteIcon","scoreBadge","Incomplete","bggURL","image","PersistedLocally","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters"],"sourceRoot":""}