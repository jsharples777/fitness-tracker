{"version":3,"file":"app.bundle.js","mappings":"UAAIA,E,qDCOJ,E,6BAAYC,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,aAAAA,GAAAA,e,CAAAA,IAAAA,EAAAA,KCFZ,IAAMC,EAAWC,GAAAA,CAAjB,0BA2FA,QAzFMC,WAKF,cAAwC,KAH9BC,oBAA8B,EAIpCC,KAAA,cACAA,KAAA,wB,2BAGGC,eAAP,WACID,KAAA,uB,EAGGE,WAAP,WACIF,KAAA,uB,EAGJG,sCAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAsK,WAElK,QAFkK,IAA9FC,IAAAA,EAA4BT,EAAeU,mBAAmD,IAArCC,IAAAA,EAA+B,MAC5JV,EAAS,+CAATA,GACII,KAAJ,mBACIJ,EAAAA,wCADJ,CAIA,IAAMW,EAAaP,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAC1DH,GAAJ,IACIX,EAAS,2CAAD,sBAARA,GAE+BI,KAAKQ,qBAApC,GACAG,UAAAA,SAAyC,YACrCf,EAAS,0CAAD,gBAA6DgB,EAA7D,kBAARhB,gBACA,IACI,UACI,KAAMD,EAAeU,aACjBO,EAAAA,aAAsB,EAAtBA,YAAAA,EAAAA,GACA,MAEJ,KAAMjB,EAAekB,UACjBD,EAAAA,sBAA+B,EAA/BA,YAAAA,EAAAA,GACA,MAEJ,KAAMjB,EAAemB,YACjBF,EAAAA,wBAAiC,EAAjCA,YAAAA,EAAAA,EAAAA,GACA,MAEJ,KAAMjB,EAAeoB,YACjBH,EAAAA,wBAAiC,EAAjCA,YAAAA,EAAAA,IAKZ,MAAOI,GACHC,QAAAA,IAAAA,U,EAahBC,yBAAAA,SAAAA,EAAAA,GACIlB,KAAA,8BACAJ,EAAS,4CAAD,gBAA+DgB,EAAvEhB,mBACA,IAAMW,EAAaP,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAC1DH,GAAJ,IACIX,EAAS,4CAAD,gBAA+DgB,EAA/D,iCAARhB,GAC6BI,KAAKQ,qBAAlC,GACAG,UAAAA,KAAAA,K,EAIAQ,2BAAR,YAEI,GADmBnB,KAAKQ,qBAAqBC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAC9D,EAAoB,CAChB,IAAMU,EAAyB,CAC3BC,KAD2B,EAE3BC,UAAW,IAEftB,KAAA,+B,EAnFNF,GCAN,IAAMF,EAAWC,GAAAA,CAAjB,oBAGsB0B,EAAtB,WAMI,cAA2C,KAJjCC,YAAsB,EAIW,KAHjCC,YAAsB,GAI5BzB,KAAA,SAAgB,IAAI,EAApB,GACAA,KAAA,cACAA,KAAA,aACAA,KAAA,cAVR,0CAaIC,WACID,KAAA,2BAdR,aAiBIE,WACIF,KAAA,uBAlBR,kCAsBI,WACIA,KAAA,eAvBR,8BA0BI,WACIA,KAAA,eA3BR,wCA8BIG,SAAAA,EAAAA,EAAAA,EAAAA,QAAsK,IAA9FC,IAAAA,EAA4BT,EAAeU,mBAAmD,IAArCC,IAAAA,EAA+B,MAC5JN,KAAA,yDA/BR,2BAmCIkB,SAAAA,EAAAA,GACIlB,KAAA,wCApCR,iBAuDI,cACIA,KAAA,uBAEA,IAAM0B,EAAoB,CACtBL,KADsB,EAEtBM,MAAOC,GAKX,OAFA5B,KAAA,+BACAA,KAAA,0CAAkEL,EAAeU,cACjF,GAjER,iBAoEIwB,SAAAA,GAGI,IAAIC,EAMJ,OARA9B,KAAA,uBACAJ,EAAS,oCAATA,GAIAkC,EAD0B9B,KAAK+B,UAA/B,GACAD,MACAlC,EAAS,2CAATA,GACAA,EAAAA,GACA,GA7ER,iBAgFIoC,SAAAA,EAAAA,EAAAA,GASI,YATyF,IAAvCC,IAAAA,GAA2B,GAC7EjC,KAAA,uBACAJ,EAAS,oCAATA,GACAA,EAHyF,GAK/DI,KAAK+B,UAA/B,GACAL,MAAAA,EACI1B,KAAJ,YAAqBA,KAAKkC,WAAWb,EAAMc,GAC3C,GAAqBnC,KAAKG,sCAAsCkB,EAAMc,GACtE,GAzFR,oBA4FIC,SAAAA,EAAAA,EAAAA,QAA+E,IAApCC,IAAAA,GAAuB,GAC9DrC,KAAA,uBACAJ,EAAS,uCAFkE,GAM3EI,KAAA,uBACAA,KAAA,0CAAuDL,EAAekB,YAnG9E,kBAsGIyB,SAAAA,EAAAA,EAAAA,GACItC,KAAA,uBACA,IAAIuC,EAAJ,GACMb,EAAQ1B,KAAK6B,eAAnB,GACMtB,EAAamB,EAAA,WAAgB,mBAAkBc,EAAwB9B,EAA1C,MAMnC,OALAd,EAAS,yBAAD,oBAARA,GACAA,EAAAA,GACIW,GAAJ,IACIgC,EAASb,EAATa,IAEJ,GAhHR,gBAmHIE,SAAAA,EAAAA,EAAAA,GACIzC,KAAA,uBACA,IAAIuC,GAAJ,EAMA,OALcvC,KAAK6B,eAAnB,GACmB,WAAgB,mBAAkBW,EAAwB9B,EAA1C,OACnC,IACI6B,GAAAA,GAEJ,GA3HR,sBA8HIG,SAAAA,EAAAA,EAAAA,EAAAA,GACI1C,KAAA,uBACA,IACI2C,EAAU3C,KAAKsC,gBAAgBjB,EAAMuB,EAH0E,GASnH,OAJAhD,EAAS,sDAATA,GACAI,KAAA,2BANmH,GAQnHA,KAAA,0CAA0DL,EAAeoB,cANzE,GAhIR,oBA0II8B,SAAAA,EAAAA,EAAAA,EAAAA,GACI7C,KAAA,uBACA,IACI2C,EAAe3C,KAAKsC,gBAAgBjB,EAAMuB,EAA9C,GAKA,OAJAhD,EAAAA,0CACAI,KAAA,yBALiH,GAOjHA,KAAA,0CAAuDL,EAAemB,YAAtE,IALA,GA5IR,K,4FCLA,IAAMgC,EAAYjD,GAAAA,CAAlB,oBAyGA,QAtGMkD,SAAAA,G,QAIF,aAAqB,aACjB,+BACA,oBACA,gBAHiB,E,kFAMPC,YAAd,WAII,OAHMD,EAAN,YACIA,EAAAA,UAAqC,IAArCA,GAEGA,EAAP,W,2BAGGE,oBAAP,YAEI,GADiBjD,KAAKkD,iBAAiBzC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KACxD,EAAoB,CAChB,IAAIgB,EAAoB,CACpBL,KADoB,EAEpBM,MAAO,IAEX3B,KAAA,2B,EAIDmD,2BAAP,YACIL,EAAU,6BAAVA,MACAA,EAAUpB,EAAVoB,OACA9C,KAAA,0B,EAGGoD,4BAAP,YACI,IAAI7C,EAAqBP,KAAKkD,iBAAiBzC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAiBgB,EAArB,QAC5DnB,GAAJ,IACIuC,EAAU,4BAAVA,MACAA,EAAUpB,EAAVoB,OACA9C,KAAA,iC,EAID+B,UAAP,YAEI,IAAIL,EAAoB1B,KAAKkD,iBAAiBG,MAAK,SAAA3C,GAAO,OAAIA,EAAAA,OAAJ,KAG1D,OAFAoC,EAAU,0BAAVA,GACAA,EAAUpB,EAAVoB,OACA,G,EAGGZ,WAAP,cACI,IAAI3B,EAAqBP,KAAKkD,iBAAiBzC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAImB,EAAoB1B,KAAKkD,iBAA7B,GACAJ,EAAU,yBAAVA,GACAA,EAAUpB,EAAVoB,OACApB,EAAAA,MAAAA,I,EAIR4B,gBAAAA,SAAAA,EAAAA,EAAAA,GACI,QAD6E,IAApCjB,IAAAA,GAAuB,GAChE,GACA,IAAI9B,EAAqBP,KAAKkD,iBAAiBzC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAImB,EAAoB1B,KAAKkD,iBAA7B,GACAJ,EAAU,wBAAVA,GACAA,EAAAA,GACApB,EAAAA,MAAAA,KAAAA,M,EAIR6B,qBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACI,IAAIhD,EAAqBP,KAAKkD,iBAAiBzC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAImB,EAAoB1B,KAAKkD,iBAA7B,GACMM,EAAa9B,EAAA,iBAAsB,mBAAkBc,EAAwB9B,EAA1C,MACrC8C,GAAJ,IACIV,EAAU,4BAAVA,GACAA,EAAAA,GACApB,EAAAA,MAAAA,OAAAA,EAAAA,M,EAKZ+B,mBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACI,IAAIlD,EAAqBP,KAAKkD,iBAAiBzC,WAAU,SAAAC,GAAO,OAAIA,EAAAA,OAAJ,KAChE,GAAIH,GAAJ,EAAqB,CACjB,IAAImB,EAAoB1B,KAAKkD,iBAA7B,GACMM,EAAa9B,EAAA,iBAAsB,mBAAkBc,EAAwB9B,EAA1C,MACrC8C,GAAJ,IACI9B,EAAAA,MAAAA,OAAAA,EAAAA,EAAAA,GACAoB,EAAU,0BAAVA,GACAA,EAAAA,SAGJ9C,KAAA,yB,EAhGN+C,CAAiCxB,GCqBvC,MAMA,G,SANYmC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,IAAAA,EAAAA,K,SAMAC,GAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,IAAAA,EAAAA,KC9BZ,IAAMC,EAAS/D,GAAAA,CAAf,aAiPA,QA/OMgE,WAcF,aAAc,KAFJC,cAAgC,GAGtC9D,KAAA,mBAA0BA,KAAK+D,mBAAmBC,KAAlDhE,MACAA,KAAA,gBAAuBA,KAAKiE,gBAAgBD,KAA5ChE,MACAA,KAAA,cACAA,KAAA,YACAA,KAAA,iBACAA,KAAA,mBAA0BA,KAAK+D,mBAAmBC,KAAlDhE,MACAA,KAAA,iBAAwBA,KAAKkE,iBAAiBF,KAA9ChE,MACAA,KAAA,kBAAyBA,KAAKmE,kBAAkBH,KAAhDhE,MACAA,KAAA,oBAA2BA,KAAKoE,oBAAoBJ,KAApDhE,MACAA,KAAA,oBAA2BA,KAAKqE,oBAAoBL,KAApDhE,MACAA,KAAA,kBAAyBA,KAAKsE,kBAAkBN,KAAhDhE,MACAA,KAAA,gBAAuBA,KAAKuE,gBAAgBP,KAA5ChE,MACAA,KAAA,iBAAwBA,KAAKwE,iBAAiBR,KAA9ChE,MACAA,KAAA,oBAA2BA,KAAKyE,oBAAoBT,KAApDhE,MACAA,KAAA,yBAAgCA,KAAK0E,yBAAyBV,KAA9DhE,M,EA1BUgD,YAAd,WAII,OAHMa,EAAN,YACIA,EAAAA,UAA0B,IAA1BA,GAEGA,EAAP,W,2BAyBGc,gBAAP,YACI3E,KAAA,uB,EAGG4E,YAAP,YACIhB,EAAAA,oBACA5D,KAAA,WACA4D,EAHyC,8BAKzC5D,KAAA,OAAc6E,KACdjB,EAAAA,wBACA5D,KAAA,oBAA0BA,KAA1B,oBACAA,KAAA,iBAAuBA,KAAvB,iBACAA,KAAA,kBAAwBA,KAAxB,kBACAA,KAAA,mBAAyBA,KAAzB,mBACAA,KAAA,qBAA2BA,KAA3B,qBACAA,KAAA,qBAA2BA,KAA3B,qBACAA,KAAA,mBAAyBA,KAAzB,mBACAA,KAAA,0BAAgCA,KAAhC,0BACAA,KAAA,iBAAuBA,KAAvB,iBACAA,KAAA,kBAAwBA,KAAxB,kBACAA,KAAA,qBAA2BA,KAA3B,sB,EAGG8E,MAAP,YACI9E,KAAA,oBAA0B,CAAC+E,SAAAA,K,EAGxBC,OAAP,YACIhF,KAAA,qBAA2B,CAAC+E,SAAAA,K,EAGzBE,SAAP,gBACIjF,KAAA,uBAA6B,CAAC+E,SAAD,EAAWG,KAAX,EAAiBC,KAAAA,K,EAG3CC,UAAP,gBACIpF,KAAA,uBAA6B,CAAC+E,SAAD,EAAWG,KAAX,EAAiBC,KAAAA,K,EAG3CE,WAAP,6BAAsL,IAA5HF,IAAAA,EAAmBxB,EAAW2B,eAA8F,IAApFC,IAAAA,GAAiC,QAAmD,IAA5CC,IAAAA,EAAkB,SAA0B,IAAtBC,IAAAA,EAAkB,IAC9K,IAAIC,EAAiB,CACjBC,KADiB,EAEjBC,GAFiB,EAGjBV,KAHiB,EAIjBC,KAJiB,EAKjBI,sBALiB,EAMjBC,QANiB,EAOjBC,WAAYA,GAEhB7B,EAAAA,kBACAA,EAAAA,GACA5D,KAAA,yB,EAGG6F,YAAP,6BAA2J,IAA5DC,IAAAA,EAAqBpC,EAASqC,aAA8B,IAAtBN,IAAAA,EAAkB,IACnJ,IAAIO,EAAsB,CACtBL,KADsB,EAEtBT,KAFsB,EAGtBe,QAHsB,EAItBC,QAJsB,EAKtBJ,SALsB,EAMtBX,KANsB,EAOtBM,WAAYA,GAEhBzF,KAAA,uB,EAGGmG,YAAP,WACInG,KAAA,yB,EAGGoG,kBAAP,gBACIpG,KAAA,4BAAkC,CAACkF,KAAD,EAAOS,KAAP,EAAaR,KAAAA,K,EAG3CpB,mBAAR,YACIH,EAAO,sBAAPA,GACA,IACIA,EADA,GAGA,IAAMyC,EAAUC,KAAAA,MAAhB,GACAtG,KAAA,uBAA2B,mBAAcuG,EAAAA,eAAd,MAC7B,MAAOvF,GACL4C,EAAAA,GACAA,EAAAA,mB,EAIAM,iBAAR,YACIN,EAAO,oBAAPA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,aAAd,O,EAGvB9B,oBAAR,YACIb,EAAO,wBAAPA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,gBAAd,O,EAGvBpC,kBAAR,YACIP,EAAO,qBAAPA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,cAAd,O,EAGvBnC,oBAAR,YACIR,EAAO,0BAAPA,GACA,IACI,IAAMyC,EAAUC,KAAAA,MAAhB,GACA1C,EAAAA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,kBAAd,MAC7B,MAAOvF,GACL4C,EAAAA,mB,EAIAS,oBAAR,YACIT,EAAO,wBAAPA,GACA,IACI,IAAMyC,EAAUC,KAAAA,MAAhB,GACA1C,EAAAA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,iBAAd,MAC7B,MAAOvF,GACL4C,EAAAA,mB,EAIAU,kBAAR,YACIV,EAAO,qBAAPA,GACA,IACI,IAAMyC,EAAUC,KAAAA,MAAhB,GACA1C,EAAAA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,kBAAd,MAC7B,MAAOvF,GACL4C,EAAAA,mB,EAIAc,yBAAR,YACId,EAAO,8BAAPA,GACA,IACI,IAAMyC,EAAUC,KAAAA,MAAhB,GACA1C,EAAAA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,eAAwBF,EAAxBE,KAAsCF,EAAtCE,SAAwDF,EAAtE,SAC7B,MAAOrF,GACL4C,EAAAA,GACAA,EAAAA,mB,EAIAW,gBAAR,YACIX,EAAO,mBAAPA,GACA,IAEI,IAAMyC,EAAUC,KAAAA,MAAhB,GACA1C,EAAAA,GACA5D,KAAA,uBAA2B,mBAAcuG,EAAAA,eAAd,MAC7B,MAAOvF,GACL4C,EAAAA,mB,EAIAY,iBAAR,YACIZ,EAAO,2BAAPA,GACA,IACI,IAAMyC,EAAUC,KAAAA,MAAhB,GACA1C,EAFA,GAIIyC,EAAAA,SAAoBA,EAAAA,QAAAA,OAAxB,GACIrG,KAAA,uBAA2B,mBAAcuG,EAAAA,qBAA8BF,EAA5C,YAE3BA,EAAAA,UAAqBA,EAAAA,SAAAA,OAAzB,GACIrG,KAAA,uBAA2B,mBAAcuG,EAAAA,sBAA+BF,EAA7C,aAEjC,MAAOrF,GACL4C,EAAAA,mB,EAcAK,gBAAR,YACIL,EAAAA,iBACA,IACI,IAAMyC,EAAUC,KAAAA,MAAhB,GAEA,GADA1C,EAAAA,GACA,OAAI5D,KAAKY,SAAmB,OACxByF,EAAAA,OAAiBrG,KAAKY,SAA1B,iBACIgD,EAAAA,uCAEAA,EAAAA,+DACA5D,KAAA,4CAGN,MAAOgB,GACL4C,EAAAA,mB,EA1ONC,G,uNCEN,IAAM2C,EAAc3G,GAAAA,CAApB,uBAEqB4G,EAAAA,SAAAA,G,QAIjB,gBAA0F,OACtF,8BACA,aACA,cACA,gBAEA,yBACA,IAAIC,EAAsB,YAA1B,0BAPsF,OAStF,eAAoB,sBAApB,IACA,wBAA6B,+BAA7B,IACA,0BAA+B,iCAA/B,IACA,0BAA+B,iCAA/B,IAGAA,EAAAA,SAA4B,YACxB,gDAhBkF,E,2GAoB1FpD,gBAAAA,SAAAA,EAAAA,EAAAA,QAAiF,IAApCjB,IAAAA,GAAuB,GAChEmE,EAAY,wBAAD,qBAAXA,GACAxG,KAAA,oC,EAIJ+B,UAAAA,SAAAA,GAKI,OAFAyE,EAAY,iBAAZA,GACAxG,KAAA,4BACO,CAACqB,KAAD,EAAaM,MAAO,K,EAI/B4B,qBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACIiD,EAAY,4BAAD,mBAAXA,GACAxG,KAAA,wC,EAGJyD,mBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACI+C,EAAY,0BAAZA,GACAxG,KAAA,sC,EAGJiD,oBAAAA,SAAAA,K,EAEAE,2BAAAA,SAAAA,K,EAEAC,4BAAAA,SAAAA,K,EAEAlB,WAAAA,SAAAA,EAAAA,K,EAEAyE,wBAAAA,SAAAA,EAAAA,EAAAA,K,EAEAC,wBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,K,EAIAC,aAAAA,SAAAA,EAAAA,EAAAA,GAGIL,EAAY,qCAAD,EAAXA,4BACAA,EAAAA,GACAxG,KAAA,gC,EAGJ8G,sBAAAA,SAAAA,EAAAA,EAAAA,GACIN,EAAY,wDAAD,EAAXA,4BACAxG,KAAA,sC,EAGJ+G,gBAAAA,WACI,uB,EA7EaN,CAAiClF,G,4FCJtD,ICPA,EDOMyF,EAAYnH,GAAAA,CAAlB,2BAOaoH,EAAb,Y,QAII,aAAsB,aAClB,kCACA,iBACA,eAHkB,E,EAJ1B,G,EAAA,G,sEAAA,cAWI,WAII,OAHMA,EAAN,YACIA,EAAAA,UAAkC,IAAlCA,GAEGA,EAAP,WAfR,2CAkBI,qBAAwG,IAA7CC,IAAAA,EAAoB,IAC3E,IAAIC,EAA0B,CAC1BC,QAD0B,EAE1BF,QAASA,GAEblH,KAAA,sBACA,GAAiBqH,EAAAA,iBACjBL,EAAAA,8CAzBR,6BA4BI,YAA2D,WACvDhH,KAAA,uBAA2B,YAClB,qBAAwB0B,EAAxB,KAAoC4F,EAAzC,UACIA,EAAAA,QAAAA,2BAAAA,OA/BhB,YAoCI,YAA2C,WACnC5F,EAAoB,CACpBL,KADoB,EAEpBM,MAAO,IAcX,OAZA3B,KAAA,uBAA2B,YAClB,qBAAwB0B,EAAxB,KAAoC6F,EAAzC,WACIP,EAAU,0CAAVA,GACAA,EAAUO,EAAVP,SACAO,EAAAA,QAAAA,UAAAA,OAKJvH,KAAKwH,cAAcC,OAAvB,IACI/F,EAAQ1B,KAAKwH,cAAc,GAAGJ,QAAQrF,UAAtCL,IAEJ,GArDR,sBAwDI,YAA+C,WAC3C1B,KAAA,uBAA2B,YAClB,uBAA8BsH,EAAnC,UACIA,EAAAA,QAAAA,oBAAAA,OA3DhB,8BAgEI,YAA4D,WACxDtH,KAAA,uBAA2B,YAClB,qBAAwB0B,EAAxB,KAAoC4F,EAAzC,UACIA,EAAAA,QAAAA,4BAAAA,OAnEhB,aAwEI,cAAqD,WACjDtH,KAAA,uBAA2B,YAClB,uBAA8BsH,EAAnC,WACIN,EAAU,2CAAVA,GACAA,EAAUM,EAAVN,SACAA,EAAAA,GACAM,EAAAA,QAAAA,WAAAA,EAAAA,QA9EhB,kBAmFIhE,SAAAA,EAAAA,EAAAA,GAAiF,oBAApCjB,IAAAA,GAAuB,GAChErC,KAAA,uBAA2B,YAClB,uBAA8BsH,EAAnC,WACIN,EAAU,oDAAD,sBAATA,GACAA,EAAUM,EAAVN,SACAA,EAAAA,GACAM,EAAAA,QAAAA,gBAAAA,EAAAA,EAAAA,QAzFhB,uBA8FI/D,SAAAA,EAAAA,EAAAA,EAAAA,GAAyH,WACrHvD,KAAA,uBAA2B,YAClB,uBAA8BsH,EAAnC,WACIN,EAAU,uDAAD,sBAATA,GACAA,EAAUM,EAAVN,SACAA,EAAAA,GACAM,EAAAA,QAAAA,qBAAAA,EAAAA,EAAAA,EAAAA,QApGhB,qBAyGI7D,SAAAA,EAAAA,EAAAA,EAAAA,GAAuH,WACnHzD,KAAA,uBAA2B,YAClB,uBAA8BsH,EAAnC,WACIN,EAAU,sDAAVA,GACAA,EAAUM,EAAVN,SACAA,EAAAA,GACAM,EAAAA,QAAAA,mBAAAA,EAAAA,EAAAA,EAAAA,QA/GhB,qBAoHI,cAEI,OADiBJ,EAAA,WAAkB,mBAAYQ,IAAZ,MACnC,GAtHR,MEZO,SAASC,EAAOC,EAAhB,GACH,OAAQA,EAAAA,KAAaC,EAArB,GAGG,SAASC,EAAYF,EAArB,GACH,OAAQA,EAAAA,MAAcC,EAAtB,K,SDPQE,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,iBAAAA,GAAAA,mB,CAAAA,IAAAA,EAAAA,KAOL,IAAMC,EAAc,OAAdA,EAAc,UAAdA,EAAc,eAAdA,EAAc,UAAdA,EAKW,mBAGXC,EAAa,SAgBbC,EAAY,OAAZA,EAAY,eAAZA,EAAY,aAAZA,EAAY,aAAZA,EAKU,gBAGVC,EAAY,gBAAZA,EASC,YAGDC,EAAiB,qBAAjBA,EAAiB,gB,gGEhDTC,EAAAA,SAAAA,G,QACjB,cAAsD,OAClD,YADkD,S,mGAK/CC,KAAP,oBAAmI,oBAAvFC,IAAAA,EAAoB,QAAmE,IAAhEC,IAAAA,EAAkB,aAA8C,IAAtCC,IAAAA,EAAmB,KAC5G,IAAIC,EAAc1I,KAAK2I,oBADwG,iBAG3HC,EAAJ,GACA,UACI,WACIA,EAAAA,UACA,MAEJ,cACIA,EAAAA,aACA,MAEJ,cACIA,EAAAA,aACA,MAEJ,eACIA,EAAAA,YACA,MAEJ,QACIA,EAAAA,UAKR,IAAMC,EAAgBC,SAAAA,cAAtB,OACAD,EAAAA,UAAAA,qBACAA,EAAAA,MAAAA,IAA6BN,EAA7BM,KACAA,EAAAA,aAAAA,OAAAA,SACAA,EAAAA,aAAAA,gBA/B+H,SAkC/H,IAAME,EAAYD,SAAAA,cAAlB,OACAC,EAAAA,UAAAA,2BAAAA,EAEA,IAAMC,EAAgBF,SAAAA,cAAtB,UACAE,EAAAA,UAAAA,UACAA,EAAAA,YAvC+H,EA0C/H,IAAMC,EAAkBH,SAAAA,cAAxB,UACAG,EAAAA,UAAAA,kBACAA,EAAAA,YAAAA,IACAA,EAAAA,iBAAAA,SAA0C,WACtC,mCAKJ,IAAMC,EAA2BJ,SAAAA,cAAjC,OACAI,EAAAA,UAAAA,aACAA,EAAAA,YArD+H,EAyD/HH,EAAAA,YAAAA,GACAA,EAAAA,YAAAA,GACAF,EAAAA,YAAAA,GACAA,EAAAA,YAAAA,GACAA,EAAAA,UAAAA,IAAAA,MA7D+H,GAgE/H,IAAMM,EAAkCL,SAAAA,eAAxC,GAcA,OAbA,GAAiBK,EAAAA,YAjE8G,GAqE/HC,EAAAA,iBAAAA,MArE+H,QAwE3HX,GAAJ,IACIA,EAAAA,KAEJY,YAAW,WACP,kCADJA,GAGA,G,EApFahB,ECIjB,YACIrI,KAAA,KAAYA,KAAKsI,KAAKtE,KAAtBhE,MAEAA,KAAA,oBAH4D,EAM5DA,KAAA,YAAmBA,KAAK2I,oBAAxB,oBCCR,QAF4B,IATtBW,WACF,c,mBAGAC,mBAAAA,SAAAA,GACI,OAAO,IAAIlB,EAAX,I,EALFiB,ICmDN,EApDA,WAeI,aACItJ,KAAA,iBACAA,KAAA,eACAA,KAAA,0BACAA,KAAA,4BAEAA,KAAA,KAAYA,KAAKsI,KAAKtE,KAAtBhE,MArBR,cAGI,WAII,OAHMwJ,EAAN,YACIA,EAAAA,UAAgC,IAAhCA,GAEGA,EAAP,WAPR,0CAwBI,WACI,OAAOxJ,KAAP,aAzBR,OA4BI,uBAA+F,IAAnDwI,IAAAA,EAAkB,aAAiC,IAAzBC,IAAAA,EAAmB,KACrF,IACMgB,EADeC,EAAAA,mBAArB,MACyBC,KAAAA,EAAAA,EAAkC3J,KAAK4J,aAAe5J,KAAtD2J,sBAAAA,EAAzB,GACA3J,KAAA,eACAA,KAAA,uBAhCR,SAmCI,YAA6C,WACnCO,EAAaP,KAAK6J,cAAcpJ,WAAU,SAAAC,GAAO,OAAIA,IAAJ,KACnDH,GAAJ,IACIP,KAAA,uBADiB,GAGjBA,KAAA,mBAAuB,cAEnByJ,EAAAA,MAAAA,IAAgC,wBAAhCA,EAAAA,SAGR,IAAMK,EAAWL,EAAjB,cACA,OAAIK,GAAmBA,EAAAA,YAAAA,GACvB9J,KAAA,eACIA,KAAK4J,aAAT,IAA2B5J,KAAK4J,aAAe,IAhDvD,KCOA,IAAMG,EAAWlK,GAAAA,CAAjB,mBAEqBmK,EAAAA,WAEjB,c,2BAEOC,+BAAP,YACIF,EAAS,wBAAwB9D,EAAzB,wBAAwDA,EAAxD,2BAA0FA,EAAlG8D,MACA,IAAMG,EAAaC,GAAWnH,cAAcoH,kBAAkB9H,gBAAgB0F,EAAmB,CAACqC,IAAKpE,EAAQqE,MAA/G,GACIvF,EAAJ,UACA,IACIA,EAAWmF,EAAXnF,UAEJgF,EAAS,wBAAwB9D,EAAzB,wBAAwDA,EAAxD,2BAAR8D,GAEA,IAAIQ,EAAWtE,EAAf,KACA8D,EAVgD,GAYhD,IACI,OAAQ9D,EAAR,MACI,aACI,OAAQA,EAAR,WACI,KAAK+B,EACDmC,GAAWnH,cAAXmH,kBAAAA,kBAA6DnC,EAA7DmC,GAAAA,GACAX,EAAAA,cAAAA,KAAuCe,EAAvCf,SAA6De,EAA7Df,SAAAA,wBAAAA,WACA,MAEJ,KAAKxB,EACDmC,GAAWnH,cAAXmH,kBAAAA,kBAA6DnC,EAA7DmC,GAAAA,GAIR,MAEJ,aACI,OAAQlE,EAAR,WACI,KAAK+B,EACDmC,GAAWnH,cAAXmH,kBAAAA,kBAA6DnC,EAA7DmC,EAAAA,GAAAA,GAIR,MAEJ,aACI,OAAQlE,EAAR,WACI,KAAK+B,EACDmC,GAAWnH,cAAXmH,kBAAAA,oBAA+DnC,EAA/DmC,EAAAA,GAAAA,KAOlB,MAAOnJ,GACL+I,EAAAA,K,EAKRS,cAAAA,SAAAA,GACIT,EAAS,qBAATA,I,EAGJU,eAAAA,WACI,OAAON,GAAWnH,cAAlB,qB,EA9DagH,G,8GCJrB,ICSKU,EDTCC,EAAW9K,GAAAA,CAAjB,iBAEqB+K,GAAAA,SAAAA,G,QAMjB,cAAqD,sBAAlCC,IAAAA,GAA2B,IAC1C,gCAHIC,cAA0B,GAI9B,UAAeC,OAAf,eACA,IAAqB,UAAeA,OAAf,cACrB,gBAJiD,E,kFAOvC/H,YAAd,YAII,YAJwD,IAAlC6H,IAAAA,GAA2B,GAC3CD,EAAN,YACIA,EAAAA,UAAuC,IAAIA,EAA3CA,IAEGA,EAAP,W,2BAGG3H,oBAAP,YACI,OAAIjD,KAAKgL,QAAQC,QAAQ5J,IACrBrB,KAAA,2BAAgC,CAACqB,KAAD,EAAaM,MAAO,M,EAIrDwB,2BAAP,YACIwH,EAAS,kCAAkCjJ,EAA3CiJ,MACAA,EAAAA,GACA,IAAMO,EAA8B5E,KAAAA,UAAe5E,EAAnD,OACAiJ,EAAAA,GACA3K,KAAA,gBAAqB0B,EAArB,S,EAIG0B,4BAAP,YACIpD,KAAA,+B,EAGG+B,UAAP,YACI,IAAIoJ,EAAJ,GACAR,EAAS,mCAATA,GACA,IAAMS,EAAmBpL,KAAKgL,QAAQC,QAAtC,GAKA,OAJAN,EAAAA,GACA,OAAIS,IACAD,EAAe7E,KAAAA,MAAf6E,IAEG,CAAC9J,KAAD,EAAaM,MAAOwJ,I,EAGxBjJ,WAAP,cACIlC,KAAA,2BAAgC,CAACqB,KAAD,EAAaM,MAAO0J,K,EAGxD/H,gBAAAA,SAAAA,EAAAA,EAAAA,GACI,QAD6E,IAApCjB,IAAAA,GAAuB,GAChE,GAEA,IAAIX,EAAoB1B,KAAK+B,UAA7B,GACA4I,EAAS,wBAATA,GACAA,EAAAA,GACAjJ,EAAAA,MAAAA,KAAAA,GACA1B,KAAA,iC,EAGJuD,qBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACI,IAAI7B,EAAoB1B,KAAK+B,UAA7B,GACMyB,EAAa9B,EAAA,iBAAsB,mBAAkBc,EAAwB9B,EAA1C,MACrC8C,GAAJ,IACImH,EAAS,4BAATA,GACAA,EAAAA,GACAjJ,EAAAA,MAAAA,OAAAA,EAAAA,IAEJ1B,KAAA,gC,EAGJyD,mBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACI,IAAI/B,EAAoB1B,KAAK+B,UAA7B,GACMyB,EAAa9B,EAAA,iBAAsB,mBAAkBc,EAAwB9B,EAA1C,MACrC8C,GAAJ,IACI9B,EAAAA,MAAAA,OAAAA,EAAAA,EAAAA,GACAiJ,EAAS,0BAATA,GACAA,EAAAA,IAEJ3K,KAAA,gC,EAGJsL,iBAAAA,SAAAA,K,EAGAC,wBAAAA,WACI,OAAOvL,KAAP,e,EAGJwL,gBAAAA,SAAAA,GACI,U,EAGGC,WAAP,YACIzL,KAAA,iB,EAlGa4K,CAAmCrJ,G,qBCOnDmJ,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,IAAAA,EAAAA,KAKL,IAAMgB,GAAW7L,GAAAA,CAAjB,gBAEa8L,GAAb,WAgBI,aAAsB,KARZC,YAAwB,GAQZ,KAPZC,cAA0B,GAOd,KANZC,cAA0B,GAMd,KAHdC,gBAAkB,GAGJ,KAFdC,eAAoD,KAGxDN,GAAAA,sDAEA1L,KAAA,YACAA,KAAA,iBACAA,KAAA,qBACAA,KAAA,aAAoB,IAAI4K,IANN,GASlB/G,EAAAA,cAAAA,gBATkB,MAYlB7D,KAAA,aAAoBA,KAAKiM,aAAajI,KAAtChE,MACAA,KAAA,cAAqBA,KAAKkM,cAAclI,KAAxChE,MACAA,KAAA,kBAAyBA,KAAKmM,kBAAkBnI,KAAhDhE,MACAA,KAAA,eAAsBA,KAAKoM,eAAepI,KAA1ChE,MACAA,KAAA,sBAA6BA,KAAKqM,sBAAsBrI,KAAxDhE,MACAA,KAAA,qBAA4BA,KAAKsM,qBAAqBtI,KAAtDhE,MACAA,KAAA,kBAAyBA,KAAKuM,kBAAkBvI,KAAhDhE,MACAA,KAAA,iBAAwBA,KAAKwM,iBAAiBxI,KAA9ChE,MAnCR,cAsCI,WAII,OAHM2L,EAAN,YACIA,EAAAA,UAAwB,IAAxBA,GAEGA,EAAP,WA1CR,+CA6CI,YACI3L,KAAA,uBA9CR,0BAiDI,YACIA,KAAA,2BAlDR,iBAqDI,YACI,OAAQA,KAAK8L,cAAcrL,WAAU,mBAAUY,IAAV,MAArC,GAtDR,kBAyDIoL,SAAAA,GACIzM,KAAA,gBACAA,KAAA,2BAA+B,mBAAcY,EAAAA,2BAAd,OA3DvC,uBA8DI,YAAoD,WACpCZ,KAAK4L,YAAYnL,WAAU,mBAAaiM,IAAb,KACvC,IACI1M,KAAA,oBACAA,KAAA,kBACAA,KAAA,2BAA+B,mBAAcY,EAAAA,0BAAmC,EAAjD,oBAnE3C,4BAuEI,YAAyD,WACjD+L,EAAQ3M,KAAK4L,YAAYnL,WAAU,mBAAaiM,IAAb,KACnCC,GAAJ,IACI3M,KAAA,wBACAA,KAAA,kBACAA,KAAA,2BAA+B,mBAAcY,EAAAA,0BAAmC,EAAjD,oBA5E3C,sBAiFI,YACI,OAAQZ,KAAK4L,YAAYnL,WAAU,mBAAaiM,IAAb,MAAnC,GAlFR,yBAqFI,YAAsD,WACtC1M,KAAK6L,cAAcpL,WAAU,mBAAemM,IAAf,KACzC,IACI5M,KAAA,sBACAA,KAAA,oBACAA,KAAA,2BAA+B,mBAAcY,EAAAA,4BAAqC,EAAnD,oBA1F3C,8BA8FI,YAA2D,WACnD+L,EAAQ3M,KAAK6L,cAAcpL,WAAU,mBAAaiM,IAAb,KACrCC,GAAJ,IACI3M,KAAA,0BACAA,KAAA,oBACAA,KAAA,2BAA+B,mBAAcY,EAAAA,4BAAqC,EAAnD,oBAnG3C,wBAwGI,YACI,OAAQZ,KAAK6L,cAAcpL,WAAU,mBAAU6J,IAAV,MAArC,GAzGR,uBA4GI,WACI,gBAAWtK,KAAX,gBA7GR,qBAgHI,WACI,gBAAWA,KAAX,cAjHR,iBAoHI,YACI0L,GAAS,wBAATA,GACA1L,KAAA,gBAF0C,EAI1C,IAAI6M,EAAY7M,KAAK8M,aAAajL,eAAe8J,EAAAA,WAAyB3L,KAA1E,iBACA0L,GAAAA,GACA,IACI1L,KAAA,YAIJ,IAAI4L,EAAc5L,KAAK8M,aAAajL,eAAe8J,EAAAA,eAA6B3L,KAAhF,iBACA0L,GAAAA,GACA,IACI1L,KAAA,eAIJ,IAAI6L,EAAgB7L,KAAK8M,aAAajL,eAAe8J,EAAAA,iBAA+B3L,KAApF,iBACA0L,GAAAA,GACA,IACI1L,KAAA,iBAGJA,KAAA,uBAA2B,mBAAcY,EAAd,4BA5InC,iBAiJI,WACI,OAAOZ,KAAP,iBAlJR,oBAqJIuM,SAAAA,GAGI,GAAIQ,EAAAA,OAAepJ,EAAW2B,SAA9B,CAEA,IAAI0H,EAAehN,KAAKiN,oBAAoBF,EAA5C,MAEArB,GAAS,sBAAsBqB,EAAvB,WAAuCA,EAAAA,SAAAA,KAA/CrB,MACAsB,EAAAA,MAAYD,EARyB,SAUrC,IAAI7G,EAAUgH,SAASC,GAAAA,GAAAA,OAAvB,mBACMC,EAAeD,GAAAA,GAAAA,OAArB,oBACIlH,EAAmB,CACnBN,KADmB,GAEnBO,QAFmB,EAGnBhB,KAAM6H,EAHa,KAInBjH,SAJmB,EAKnBX,KAAMxB,EAAW2B,SACjBW,QAAY8G,EAAL,gCAA0CK,GAErDJ,EAAAA,SAAAA,KAAAA,GACAhN,KAAA,WAEAA,KAAA,uBAA2B,mBAAcY,EAAAA,qBAAAA,GAAd,QA5KnC,mBA+KI4L,SAAAA,GAEI,GAAIO,EAAAA,OAAepJ,EAAW2B,UAC1ByH,EAAAA,WAAmB/M,KAAvB,iBAEA,IAAIgN,EAAehN,KAAKiN,oBAAoBF,EAA5C,MAEArB,GAAS,sBAAsBqB,EAAvB,WAAuCA,EAAAA,SAAAA,KAA/CrB,MACAsB,EAAAA,MAAYD,EARwB,SAUpC,IAAI7G,EAAUgH,SAASC,GAAAA,GAAAA,OAAvB,mBACMC,EAAeD,GAAAA,GAAAA,OAArB,oBACIlH,EAAmB,CACnBN,KADmB,GAEnBO,QAFmB,EAGnBhB,KAAM6H,EAHa,KAInBjH,SAJmB,EAKnBX,KAAMxB,EAAW2B,SACjBW,QAAY8G,EAAL,8BAAwCK,GAEnDJ,EAAAA,SAAAA,KAAAA,GACAhN,KAAA,WAEAA,KAAA,uBAA2B,mBAAcY,EAAAA,qBAAAA,GAAd,QAtMnC,oBAyMIuL,SAAAA,GACI,GAAIkB,EAAAA,OAAgB1J,EAAW2B,SAG/B,GAAKtF,KAAKsN,oBAAoBD,EAA9B,MAqCI3B,GAAS,QAAQ2B,EAAT,KAAR3B,gBArCwC,CACxCA,GAAS,mBAAmB2B,EAA5B3B,MACA,IAAM6B,EAAsBvN,KAAKwN,kBAAkBH,EAAnD,MACA3B,GAAAA,GACAA,GAAAA,0FAEA,IAAI+B,GAAJ,EASA,GAPA,GACIzN,KAAA,uBAA2B,YAClBY,EAAAA,wBAAL,KACI6M,GAAAA,MAIZ,EAAoB,CAEhB,IAAIC,EAAmB1N,KAAKiN,oBAAoBI,EAFhC,MAIhBK,EAAAA,KAAeL,EAJC,KAOZA,EAAJ,UACIA,EAAAA,SAAAA,SAAwB,YACfK,EAAA,iBAAwB,mBAAUpD,IAAV,KAA7B,GAAgEoD,EAAAA,MAAAA,KAAmBL,EAAnBK,SAInEA,EAAA,iBAAwB,mBAAUpD,IAAS+C,EAAnB,QAA7B,GAAmEK,EAAAA,MAAAA,KAAmBL,EAAnBK,MAEnE1N,KAAA,WACA0L,GAAS,gBAAgB2B,EAAzB3B,MACA7H,EAAAA,cAAAA,SAAqC7D,KAArC6D,iBAA4DwJ,EAA5DxJ,KAAyEF,EAAW2B,UACpFtF,KAAA,uBAA2B,mBAAcY,EAAAA,qBAAAA,GAAd,SA9O3C,eAsPIqL,SAAAA,GAAqC,WACjCP,GAAS,6BADwB,GAGrB1L,KAAK8L,cAAcrL,WAAU,mBAAU6J,IAAV,KACzC,GAAetK,KAAK8L,cAAc6B,KAAK5I,GACvC2G,GAAS1L,KAAT0L,eAEA1L,KAAA,2BAA+B,mBAAcY,EAAAA,2BAAoC,EAAlD,mBAG1BZ,KAAKsN,oBAAN,IAAuCtN,KAAK4N,sBAAhD,KACIlC,GAAS,QAAD,EAARA,eACA1L,KAAA,2BAA+B,mBAAcY,EAAAA,4BAAd,QAlQ3C,gBAsQIsL,SAAAA,GAAsC,WAC9BS,EAAQ3M,KAAK8L,cAAcrL,WAAU,mBAAU6J,IAAV,KACrCqC,GAAJ,GAAgB3M,KAAK8L,cAAc+B,OAAOlB,EAAO,GAEjD3M,KAAA,2BAA+B,mBAAcY,EAAAA,2BAAoC,EAAlD,mBAG1BZ,KAAKsN,oBAAN,IAAuCtN,KAAK4N,sBAAhD,KACIlC,GAAS,QAAD,EAARA,gBACA1L,KAAA,2BAA+B,mBAAcY,EAAAA,6BAAd,QA/Q3C,iBAmRIkN,SAAAA,EAAAA,EAAAA,GACQ3I,IAASxB,EAAW2B,UAEpBP,IAAa/E,KAAjB,kBAGKA,KAAKsN,oBAAV,KACI5B,GAAS,QAAD,EAARA,gCACA1L,KAAA,uBAA2B,mBAAcY,EAAAA,yBAAAA,EAAd,SA3RvC,yBAgSI,YACIZ,KAAA,kBAjSR,eAoSI,YACI,IAAI0N,EAAU1N,KAAKiN,oBAAnB,GACAS,EAAAA,iBAAAA,EACAA,EAAAA,WAAqBR,SAASC,GAAAA,GAAAA,OAA9BO,mBAEA1N,KAAA,gCAEAA,KAAA,YA3SR,aA8SI,YACI,IAAIgN,EAAJ,KACIL,EAAQ3M,KAAK+N,SAAStN,WAAU,mBAASuM,EAAAA,WAAT,KAEpC,OADIL,GAAJ,IAAgBK,EAAMhN,KAAK+N,SAAXf,IAChB,GAlTR,iBAqTIZ,SAAAA,EAAAA,GACI,QADgE,IAAnC4B,IAAAA,GAAsB,GAC/C/H,EAAAA,OAAiBtC,EAAW2B,UAE5BW,EAAAA,OAAiBjG,KAArB,iBAEA,GAAKA,KAAKsN,oBAAoBrH,EAA9B,MAWIyF,GAAS,8BAA8BzF,EAA/B,KAARyF,6CAXyC,CAGzC,IAAIgC,EAAU1N,KAAKiN,oBAAoBhH,EAAvC,MACAjG,KAAA,qCAAiDiG,EAAjD,MACAjG,KAAA,yBACA0L,GAAAA,oBACAA,GAAAA,GAEA1L,KAAA,uBAA2B,mBAAcY,EAAAA,qBAAAA,EAAd,QAnUvC,uBA0UI0L,SAAAA,GAAyC,WAErC2B,EAAAA,SAAgB,YACZ,2BA7UZ,wBAiVI5B,SAAAA,GAA2C,WAEvC6B,EAAAA,SAAiB,YACb,0BAEJlO,KAAA,uBAA2B,mBAAcY,EAAAA,8BAAd,OAtVnC,WAyVIqE,SAAAA,GACI,IAAIjF,KAAKyK,iBAAiB0D,OAAO1G,SACjCzH,KAAA,uBACA6D,EAAAA,cAAAA,SAAqC7D,KAArC6D,iBAAAA,EAAkEF,EAAW2B,YA5VrF,YA+VIF,SAAAA,GACI,IAAIpF,KAAKyK,iBAAiB0D,OAAO1G,SACjCzH,KAAA,iBACA6D,EAAAA,cAAAA,UAAsC7D,KAAtC6D,iBAAAA,EAAmEF,EAAW2B,UAC9EtF,KAAA,kCAnWR,QAsWI8E,WAAc,WACV,IAAI9E,KAAKyK,iBAAiB0D,OAAO1G,SACjC5D,EAAAA,cAAAA,MAAkC7D,KAFxB,kBAIV6D,EAAAA,cAJU,cAMV7D,KAAA,kBAAsB,YACdgN,EAAAA,OAAarJ,EAAW2B,UACxBzB,EAAAA,cAAAA,SAAqC,EAArCA,gBAA2DmJ,EAA3DnJ,SAAyEF,EAAW2B,eA9WpG,SAmXIN,WACI,IAAIhF,KAAKyK,iBAAiB0D,OAAO1G,QACjC5D,EAAAA,cAAAA,OAAmC7D,KAAnC6D,mBArXR,gBAwXIuK,SAAAA,GACI,IAAIpO,KAAKyK,iBAAiB0D,OAAO1G,QACjC5D,EAAAA,cAAAA,kBAAAA,EAAoD7D,KAApD6D,iBAA2EF,EAAW2B,WA1X9F,aA8XID,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAAiJ,IAA5GF,IAAAA,EAAmBxB,EAAW2B,eAA8E,IAApEC,IAAAA,GAAiC,QAAmC,IAA5BC,IAAAA,EAAkB,IACnI,IAAIxF,KAAKyK,iBAAiB0D,OAAO1G,SAE7BzH,KAAKsN,oBAAT,IAEqBtN,KAAKiN,oBAA1B,GACI,iBAAoB,mBAAU3C,IAAV,KAAxB,GACIzG,EAAAA,cAAAA,WAAuC7D,KAAvC6D,iBAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KArYZ,cAyYIgC,SAAAA,EAAAA,EAAAA,EAAAA,GACI,QAD0H,IAAnFC,IAAAA,EAAqBpC,EAASqC,QACrE,IAAI/F,KAAKyK,iBAAiB0D,OAAO1G,OAAc,OAD2E,KAE1H,IAAIuF,EAAMhN,KAAKiN,oBAF2G,GAItH/G,EAAUgH,SAASC,GAAAA,GAAAA,OAAvB,mBACAtJ,EAAAA,cAAAA,YAAwC7D,KAAxC6D,iBAAAA,EAAAA,EAAAA,EAAuFF,EAAW2B,SAAU5B,EAASqC,OALK,IAQ1H,IAAiBN,EAAAA,IACjB,IAAI4I,EAAgB,CAChB1I,KAAM3F,KADU,iBAEhBkF,KAFgB,EAGhBe,QAHgB,EAIhBC,QAJgB,EAKhBJ,SALgB,EAMhBX,KAAMxB,EAAW2B,SACjBG,WAAYA,GAGhB,OADAzF,KAAA,yBACA,GA5ZR,cA+ZI,WACI,gBAAWA,KAAX,WAhaR,oBAmaI,YACI,IAAIsO,EAAJ,KACA,KAAc,CACV5C,GAAS,sBADC,GAGV,IAAIgC,EAAmB1N,KAAKuO,4BAA5B,GACAvO,KAAA,uBAA2B,mBAAcY,EAAAA,qBAAAA,GAAd,MAI3BiD,EAAAA,cAAAA,WAAuC7D,KAAvC6D,iBAAAA,EAAwE6J,EAAxE7J,SAA0FF,EAAW2B,UAArGzB,EARU,IAUVA,EAAAA,cAAAA,SAAqC7D,KAArC6D,iBAA4D6J,EAA5D7J,SAA8EF,EAAW2B,UACzFgJ,EAAWZ,EAAXY,SAEJ,UAlbR,WAqbI,WACItO,KAAA,4BAAiC2L,EAAAA,WAAyB3L,KAA1D,gBAAgFA,KAAhF,cAtbR,kBAybI,WACIA,KAAA,4BAAiC2L,EAAAA,eAA6B3L,KAA9D,gBAAoFA,KAApF,iBA1bR,oBA6bI,WACIA,KAAA,4BAAiC2L,EAAAA,iBAA+B3L,KAAhE,gBAAsFA,KAAtF,mBA9bR,sBAicI,YACI,MACI2M,EAAQ3M,KAAK+N,SAAStN,WAAU,mBAASuM,EAAAA,WAAT,KAepC,OAdIL,EAAJ,GACIK,EAAM,CACFsB,SADE,EAEFvB,MAAO,CAAC/M,KAFN,kBAGFkO,SAHE,GAIFM,WAAYtB,SAASC,GAAAA,GAAAA,OAJnB,mBAKFsB,iBALE,EAMFtJ,KAAMxB,EAAW2B,UAErBtF,KAAA,iBACAA,KAAA,YAEAgN,EAAMhN,KAAK+N,SAAXf,GAEJ,GAldR,8BAqdI,YAGI,IAFA,IAAI0B,EAAJ,KACI/B,EAAJ,EACOA,EAAQ3M,KAAK+N,SAApB,QAAqC,CACjC,IAAIf,EAAMhN,KAAK+N,SAAf,GACA,IAAIf,EAAAA,MAAAA,QAEIA,EAAA,iBAAoB,mBAAWrL,IAAX,MAAxB,IACI+M,EAAAA,EACA/B,EAAQ3M,KAAK+N,SAAbpB,QAGRA,IAcJ,OAZA,IACI+B,EAAW,CACPJ,UAAUK,EAAAA,GAAAA,KACV5B,MAAO,CAAC/M,KAAD,iBAFA,GAGPkO,SAHO,GAIPM,WAAYtB,SAASC,GAAAA,GAAAA,OAJd,mBAKPsB,iBALO,EAMPtJ,KAAMxB,EAAW2B,UAErBtF,KAAA,iBACAA,KAAA,YAEJ,GA/eR,oBAkfI,YAEI,OADYA,KAAK+N,SAAStN,WAAU,mBAAkBuM,EAAAA,WAAlB,MACpC,GApfR,gCAufI,WAAwC,MAChC4B,EAAJ,EACA5O,KAAA,kBAAsB,YAClB4O,GAAe5B,EAAf4B,oBAEJ,SAAA5O,KAAA,oCA5fR,sBA+fI,cACIgN,EAAAA,mBACAA,EAAAA,SAAAA,KAAAA,GAEAhN,KAAA,gCAEIiG,EAAAA,OAAiBjG,KAArB,iBACIA,KAAA,aAAkBgN,EADsB,UAGxChN,KAAA,YAxgBZ,qCA4gBI,cACgB0N,EAAA,iBAAwB,mBAAUpD,IAAV,KACpC,GACIoD,EAAAA,MAAAA,KAAAA,IA/gBZ,gBAmhBI,YACI,IAAIf,EAAQ3M,KAAK+N,SAAStN,WAAU,mBAASuM,EAAAA,WAAT,KACpC,GAAIL,GAAJ,EAAgB,CACZjB,GAAS,8BAATA,GACA,IAAInJ,EAASvC,KAAK+N,SAASF,OAAOlB,EAAlC,GACAjB,GAASnJ,EAATmJ,QACA1L,KAAA,aAzhBZ,KAAa2L,GAEMkD,WAAa,qBAFnBlD,GAGMmD,eAAiB,wBAHvBnD,GAIMoD,iBAAmB,0BCpBtC,ICPA,GAOA,GDAMC,GAAYnP,GAAAA,CAAlB,2BAEaoP,GAAb,WAOI,aAAsB,KALdC,cAAwB,EAM5BlP,KAAA,YAAmB2L,GAAY3I,cAC/BhD,KAAA,gBACAA,KAAA,iBACAA,KAAA,kBAJkB,GAQlBA,KAAA,qBAA4BA,KAAKmP,qBAAqBnL,KAAtDhE,MACAA,KAAA,2BAAkCA,KAAKoP,2BAA2BpL,KAAlEhE,MACAA,KAAA,4BAAmCA,KAAKqP,4BAA4BrL,KAApEhE,MACAA,KAAA,6BAAoCA,KAAKsP,6BAA6BtL,KAAtEhE,MAEAA,KAAA,gCAAAA,MACAA,KAAA,oCAAAA,MArBR,cAwBI,WAII,OAHMiP,EAAN,YACIA,EAAAA,UAAmC,IAAnCA,GAEGA,EAAP,WA5BR,oDA+BIM,SAAAA,EAAAA,GACSvP,KAAL,cAGAwJ,EAAAA,cAAAA,KAAAA,OAAAA,QAAAA,EAAAA,4CAAAA,OAAAA,MAnCR,0BAuCIgG,SAAAA,GAII,OAAInC,EAAAA,OAAgB1J,EAAW8L,aAE1BzP,KAAD,eAAyBqN,EAA7B,uBAEIA,EAAJ,uBAMI7D,EAAAA,cAAAA,KAAAA,YAAAA,QAA4D6D,EAA5D7D,KAAAA,oBAAAA,OAAAA,MAd6C,IAvCzD,cA2DI,YACIxJ,KAAA,uBA5DR,kBA+DI,YACIA,KAAA,2BAhER,kBAmEI,iBAA6C,IAAtB0P,IAAAA,GAAgB,GACnC1P,KAAA,gBApER,gBAuEI,mBAAwE,IAAjC2P,IAAAA,GAA2B,GAC9D,EACI3P,KAAA,oCAEAA,KAAA,0CA3EZ,gBA+EI,mBAAqE,IAA9B4P,IAAAA,GAAwB,GAC3D,EACI5P,KAAA,sCAEAA,KAAA,4CAnFZ,kBAuFI,YACI,OAAOA,KAAK6P,YAAYjC,sBAAxB,IAxFR,gBA2FI,YACI,OAAO5N,KAAK6P,YAAYvC,oBAAxB,IA5FR,wBA+FIwC,WACI9P,KAAA,uBAA2B,mBAAcY,EAAd,4BAhGnC,uBAmGIuO,SAAAA,EAAAA,GAOI,QAPyD,IAA1BnB,IAAAA,GAAa,GAC5CgB,GAAAA,2BACAA,GAFyD,GAIzDhP,KAAA,uBAA2B,mBAAcY,EAAAA,qBAAAA,EAAd,OAGvBZ,KAAJ,eAEA,GAEQgN,EAAAA,SAAAA,OAAJ,EAA6B,CACzB,IAAM+C,EAAiB/C,EAAAA,SAAaA,EAAAA,SAAAA,OAApC,GACAxD,EAAAA,cAAAA,KAAuCuG,EAAvCvG,KAA4DuG,EAA5DvG,QAAAA,UAAAA,OAhHhB,6BAqHI4F,SAAAA,GACIJ,GAAAA,kCACAA,GAFkD,GAKlDhP,KAAA,2BAA+B,mBAAcY,EAAAA,2BAAd,OA1HvC,8BA6HIyO,SAAAA,GACIL,GAAU,yBAAD,EADuC,cAGhDhP,KAAA,2BAA+B,mBAAcY,EAAAA,4BAAd,MAG3BZ,KAAJ,cACAwJ,EAAAA,cAAAA,KAAAA,EAAAA,QAAAA,EAAAA,kBAAAA,UAAAA,MApIR,+BAuII8F,SAAAA,GACIN,GAAU,yBAAD,EADwC,eAGjDhP,KAAA,2BAA+B,mBAAcY,EAAAA,6BAAd,MAG3BZ,KAAJ,cACAwJ,EAAAA,cAAAA,KAAAA,EAAAA,QAAAA,EAAAA,mBAAAA,WAAAA,MA9IR,4BAkJIwG,SAAAA,GACIhB,GAAU,mCAAVA,GACAhP,KAAA,2BAA+B,mBAAcY,EAAAA,0BAAd,OApJvC,8BAuJIqP,SAAAA,GACIjB,GAAU,qCAAVA,GACAhP,KAAA,2BAA+B,mBAAcY,EAAAA,4BAAd,OAzJvC,oBA4JI,YACI,OAAO+K,GAAY3I,cAAZ2I,kBAAP,IA7JR,oBAiKIuE,SAAAA,GACIlQ,KAAA,uBAA2B,mBAAcY,EAAAA,kBAAd,OAlKnC,gCAqKIuP,SAAAA,GAEQnQ,KAAJ,cACA,IAAIkO,EAAAA,QAEJ1E,EAAAA,cAAAA,KAAAA,4BAAAA,qBAAyF0E,EAAzF1E,OAAAA,yCA1KR,K,qVCTY4G,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,GAAAA,MAAAA,EAAAA,EAAAA,IAAAA,GAAAA,MAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,KAAAA,GAAAA,K,SAOAC,GAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KCJZ,IAAMC,GAAYzQ,GAAAA,CAAlB,UAwGA,SAFgB,IAnGV0Q,W,yCAEWC,cAAAA,W,oCAAb,+GACUC,EAAiB,CACnBC,OADmB,OAEnBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMtK,KAAA,UAAe,CAACuK,MAAAA,KAJ9B,SAO2BC,MAAMC,EAPjC,iBAOUC,EAPV,yBAQWA,EARX,kD,sOAAaR,G,EAuBNS,qBAAP,YACIX,GAAU,4BAA4BY,EAAAA,gBAA7B,kBAAsEA,EAAAA,gBAA/EZ,QACA,IACIhK,KAAAA,UAAe4K,EAAAA,gBAAf5K,QACF,MAAO6K,GACLb,GAAAA,wCACAA,GAAUY,EAAAA,gBAAD,OAATZ,KACAY,EAAAA,SAAAA,KAAAA,IAA4BA,EAA5BA,UAA+CA,EAA/CA,WAEJ,IAAMT,EAAiB,CACnBC,OADmB,OAEnBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMtK,KAAAA,UAAAA,GAAAA,GAAmB4K,EAAAA,gBAAnB5K,UAGVtG,KAAA,UAAekR,EAAAA,gBAAf,MAA4DA,EAA5D,SAA8EA,EAA9E,UAAiGA,EAAjG,Y,EAGGE,oBAAP,YACId,GAAU,gCAAgCY,EAAAA,gBAAjC,gBAAwEA,EAAAA,gBAAAA,OAAjFZ,IAKIY,EAAAA,gBAAAA,OAAJ,KAAuCA,EAAAA,gBAAAA,KAAAA,IAAmCA,EAAAA,gBAAAA,OAAnCA,IAEvClR,KAAA,UAAekR,EAAAA,gBAAf,IANsB,CAClBR,OADkB,MAElBC,QAAS,CAAC,eAAgB,qBAI6BO,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGGG,uBAAP,YACIf,GAAU,mCAAmCY,EAAAA,gBAApC,gBAA2EA,EAAAA,gBAAAA,OAApFZ,IAKIY,EAAAA,gBAAAA,OAAJ,KAAuCA,EAAAA,gBAAAA,KAAAA,IAAmCA,EAAAA,gBAAAA,OAAnCA,IAEvClR,KAAA,UAAekR,EAAAA,gBAAf,IANsB,CAClBR,OADkB,SAElBC,QAAS,CAAC,eAAgB,qBAI6BO,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGGI,oBAAP,YACIhB,GAAU,gCAAgCY,EAAAA,gBAAjC,gBAAwEA,EAAAA,gBAAAA,OAAjFZ,IACA,IAAMiB,EAAgB,CAClBb,OADkB,MAElBC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMtK,KAAAA,UAAAA,GAAAA,GAAmB4K,EAAAA,gBAAnB5K,UAEN4K,EAAAA,gBAAAA,OAAJ,KAAuCA,EAAAA,gBAAAA,KAAAA,IAAmCA,EAAAA,gBAAAA,OAAnCA,IAEvClR,KAAA,UAAekR,EAAAA,gBAAf,MAA2DA,EAA3D,SAA6EA,EAA7E,UAAgGA,EAAhG,Y,EAGIM,UAAR,oBACIV,MAAMC,EAAND,GAAAA,MACU,YAEF,GADAR,GAAU,qBAAqBU,EAA/BV,QACIU,EAAAA,QAAAA,KAA0BA,EAAAA,QAA9B,IACI,OAAOA,EAAP,OAEJ,MAAIA,EAAAA,QACAV,GAAUU,EAAVV,WAPZQ,MAUU,YACFR,GAAAA,GACAmB,EAASC,EAAM,IAAKrB,EAApBoB,MAZRX,OAcW,YACHR,GAAAA,GACAmB,EAAS,KAAM,IAAKpB,EAApBoB,O,EA9FVlB,I,gUCCN,IAAMoB,GAAW9R,GAAAA,CAAjB,UAuKA,SArKM+R,WAeF,aACI5R,KAAA,mBACAA,KAAA,iBACAA,KAAA,cACAA,KAAA,8BACAA,KAAA,4BAEAA,KAAA,wBAA+BA,KAAK6R,wBAAwB7N,KAA5DhE,M,EAnBUgD,YAAd,WAII,OAHM4O,EAAN,YACIA,EAAAA,UAA4B,IAA5BA,GAEGA,EAAP,W,2BAkBGE,4BAAP,YACI9R,KAAA,4B,EAGG+R,0BAAP,YACI/R,KAAA,0B,EAGGgS,sBAAP,WACI,OAAOhS,KAAKiS,cAAZ,Q,EAGGC,wBAAP,WACI,OAAOlS,KAAKmS,gBAAZ,Q,EAGGC,gBAAP,2BAAyI,IAApBC,IAAAA,GAAa,GAC9H,IAAInB,EAAuB,CACvBH,IADuB,EAEvB5L,KAAMiL,GAAYkC,KAClBC,OAAQ,CAAC1B,MAAD,EAAe2B,UAAWA,GAClCf,SAJuB,EAKvBgB,oBAAqB/Q,GAGzB1B,KAAA,oB,EAGG0S,qBAAP,2BAAiJ,IAApBL,IAAAA,GAAa,GACtI,IAAInB,EAAuB,CACvBH,IADuB,EAEvB5L,KAAMiL,GAAYkC,KAClBC,OAAQ,CAACI,SAAD,EAAqBH,UAAWA,GACxCf,SAJuB,EAKvBgB,oBAAqB/Q,GAGzB1B,KAAA,oB,EAGG4S,cAAP,mBAAmE,IAApBP,IAAAA,GAAa,GAExD,IAAMQ,GAAYlE,EAAAA,GAAAA,KAIlB,GAHAgD,GAAS,yCAATA,GACAA,GAASmB,EAATnB,KAEA,EAAgB,CACZ,IAAIoB,EAAiC,CACjCC,gBADiC,EAEjCH,UAFiC,EAGjCxC,UAAWA,GAAU4C,SACrBxB,SAAUzR,KAAK6R,yBAEnB7R,KAAA,sBACIA,KAAJ,wBAAiCA,KAAKkT,uBAAuBC,4BAC1D,CACH,IAAIJ,EAAiC,CACjCC,gBADiC,EAEjCH,UAFiC,EAGjCxC,UAAWA,GAAU+C,WACrB3B,SAAUzR,KAAK6R,yBAEnB7R,KAAA,wBACIA,KAAJ,0BAAmCA,KAAKqT,yBAAyBF,wBAErEnT,KAAA,iB,EAGUsT,qBAAAA,W,kCAAd,wGAEI,KADMC,EAAwCvT,KAAKiS,cADvD,UAEiCjS,KAAKwT,WAAW7F,KAAK4F,QAClD,IAAIA,GAAyBvT,KAAKyT,0BAA0BF,GAHhE,gD,kDAAcD,G,EAMAI,uBAAAA,W,kCAAd,wGAEI,KADMH,EAAwCvT,KAAKmS,gBADvD,UAEiCnS,KAAKwT,WAAW7F,KAAK4F,QAClD,IAAIA,GAAyBvT,KAAKyT,0BAA0BF,GAHhE,gD,kDAAcG,G,EAMAC,cAAAA,W,kCAAd,mGACQC,EAAmB5T,KAAKiS,cAAcxK,OAASzH,KAAKmS,gBAD5D,mBAEWyB,EAFX,uBAGQjC,GAAS,uDAHjB,KAKY3R,KAAKiS,cAAcxK,OAL/B,mCAMkBzH,KANlB,0DAOmBA,KAAKmS,gBAAgB1K,OAPxC,qCAQkBzH,KARlB,iCAUQ4T,EAAmB5T,KAAKiS,cAAcxK,OAASzH,KAAKmS,gBAApDyB,OAVR,gE,kDAAcD,G,EAcN9B,wBAAR,kBAEQgC,IAAYxD,GAAU4C,SAClBjT,KAAJ,wBAAiCA,KAAKkT,uBAAuBY,6BACtD9T,KAAJ,0BAAmCA,KAAKqT,yBAAyBS,6BAExEnC,GAAS,iDAAD,gCAN2F,GAQnG,IAAMpR,EAAaP,KAAKwT,WAAW/S,WAAU,SAAAC,GAAO,OAAIA,EAAAA,YAAJ,KACpD,GAAIH,GAAJ,EAAqB,CAEjB,IAAMgT,EAAYvT,KAAKwT,WAAvB,GACAxT,KAAA,uBACA2R,GAAAA,GACAA,GAAS,6CAA6C4B,EALrC,WAOjBA,EAAAA,gBAAAA,SAAAA,EAAAA,EAAyDA,EAAAA,gBAAzDA,uB,EAIAE,0BAAR,YAGI,GAFA9B,GAAS,qDAAqD/O,EAA9D+O,WACAA,GAAAA,GACI,OAAC/O,EAAAA,gBAAAA,KAAD,MAAwCA,EAAAA,gBAAAA,QAA5C,MAAqFA,EAAAA,gBAAAA,SACjF,OAAQA,EAAAA,gBAAR,MACI,KAAKwN,GAAYkC,KACbyB,GAAAA,qBAAAA,GACA,MAEJ,KAAK3D,GAAY4D,IACbD,GAAAA,oBAAAA,GACA,MAEJ,KAAK3D,GAAY6D,OACbF,GAAAA,uBAAAA,GACA,MAEJ,KAAK3D,GAAY8D,IACbH,GAAAA,oBAAAA,K,EA7JdnC,GCEN,ICPA,GDOMuC,GAActU,GAAAA,CAApB,qBAWauU,GAAb,WAMI,aAAwB,KAJdtJ,cAA6B,GAKnC9K,KAAA,SAAgB,IAAI,EAApB,WACAA,KAAA,aACAA,KAAA,oBAGAA,KAAA,mBAA0BA,KAAKqU,mBAAmBrQ,KAAlDhE,MACAA,KAAA,sBAA6BA,KAAKsU,sBAAsBtQ,KAAxDhE,MACAA,KAAA,sBAA6BA,KAAKuU,sBAAsBvQ,KAAxDhE,MACAA,KAAA,oBAA2BA,KAAKwU,oBAAoBxQ,KAApDhE,MAfR,cAkBI,WAII,OAHMoU,EAAN,YACIA,EAAAA,UAAgC,IAAhCA,GAEGA,EAAP,WAtBR,mDAyBI7I,WACI,IAAIkJ,EAAJ,GAIA,OAHAzU,KAAA,uBAA2B,YACvByU,EAAAA,KAAaC,EAAbD,cAEJ,GA9BR,kBAiCIjJ,SAAAA,GACI,IAAIjJ,GAAJ,EACIhC,EAAaP,KAAK8K,cAAcrK,WAAU,mBAAYiU,EAAAA,YAAZ,KAI9C,OAHInU,GAAJ,IACIgC,EAASvC,KAAK2U,iBAAdpS,IAEJ,GAvCR,kBA0CIqS,SAAAA,GACI,IAAIrU,EAAaP,KAAK8K,cAAcrK,WAAU,mBAAYiU,EAAAA,YAAZ,KAC1CnU,GAAJ,IACIP,KAAA,yBA7CZ,mBAiDIsL,SAAAA,GACI,IAAI/K,EAAaP,KAAK8K,cAAcrK,WAAU,mBAAYiU,EAAAA,YAAZ,KAC1CnU,GAAJ,IACIP,KAAA,yBApDZ,aAwDI,YACIA,KAAA,gBACA,IAAI6U,EAAJ,GACA7U,KAAA,uBAA2B,YACvB6U,EAAAA,MAAAA,MAEJ7U,KAAA,oBA9DR,6BAiEImD,SAAAA,KAjEJ,YAoEIpB,SAAAA,GAEI,GADAoS,GAAY,eAAZA,GACInU,KAAKwL,gBAAT,GACI2I,GAAY,eAAD,EAAXA,0CACG,CACH,IAAIO,EAAoB1U,KAAK8U,6BAA7B,GACA,GAAIJ,EAAJ,SAAqB,CACjB,IAAM5B,EAA2B,CAC7B/B,IAAK2D,EAAAA,UAAmBA,EADK,IAE7BvP,KAAMiL,GAAY4D,IAClBzB,OAH6B,GAI7Bd,SAAUzR,KAJmB,oBAK7ByS,oBAAqBpR,GAEzBuQ,GAAAA,cAAAA,cAAAA,GAAAA,QAGAuC,GAAY,8BAAZA,GAIR,MADwB,CAAC9S,KAAD,EAAaM,MAAO,KAxFpD,sBA4FIsB,SAAAA,KA5FJ,8BA+FIG,SAAAA,KA/FJ,aAkGIlB,SAAAA,EAAAA,KAlGJ,kBAqGIoB,SAAAA,EAAAA,EAAAA,GACI,QAD6E,IAApCjB,IAAAA,GAAuB,IAChE,GACA8R,GAAY,kBAAZA,GACAA,GAAAA,GACA,IAAIO,EAAoB1U,KAAK8U,6BAA7B,GACA,GAAIJ,EAAJ,SAAqB,CACjB,IAAM5B,EAA2B,CAC7B/B,IAAK2D,EAAAA,UAAmBA,EADK,IAE7BvP,KAAMiL,GAAYkC,KAClBC,OAH6B,EAI7Bd,SAAUzR,KAJmB,mBAK7ByS,oBAAqBpR,GAEzBuQ,GAAAA,cAAAA,cAAAA,GAAAA,QAGAuC,GAAY,8BAAZA,KArHZ,uBAyHI5Q,SAAAA,EAAAA,EAAAA,EAAAA,GACI,OACA4Q,GAAY,sBAAZA,GACAA,GAAAA,GACA,IAAIO,EAAoB1U,KAAK8U,6BAA7B,GACIC,EAAaxK,EAAjB,GAKA,GAJImK,EAAJ,UACIK,EAAaxK,EAASmK,EAAtBK,UAGAL,EAAJ,SAAqB,CACjB,IAAM5B,EAA2B,CAC7B/B,IAAK2D,EAAAA,UAAmBA,EADK,IAE7BvP,KAAMiL,GAAY6D,OAClB1B,OAAQ,CACJyC,GAAID,GAERtD,SAAUzR,KANmB,sBAO7ByS,oBAAqBpR,GAEzBuQ,GAAAA,cAAAA,cAAAA,GAAAA,QAGAuC,GAAY,8BAAZA,KAhJZ,qBAoJI1Q,SAAAA,EAAAA,EAAAA,EAAAA,GACI,OACA0Q,GAAY,oBAAZA,GACAA,GAAAA,GACA,IAAIO,EAAoB1U,KAAK8U,6BAA7B,GACA,GAAIJ,EAAJ,SAAqB,CACjB,IAAM5B,EAA2B,CAC7B/B,IAAK2D,EAAAA,UAAmBA,EADK,IAE7BvP,KAAMiL,GAAY8D,IAClB3B,OAH6B,EAI7Bd,SAAUzR,KAJmB,sBAK7ByS,oBAAqBpR,GAEzBuQ,GAAAA,cAAAA,cAAAA,GAAAA,QAGAuC,GAAY,8BAAZA,KApKZ,2BAwKIjT,SAAAA,EAAAA,GACIlB,KAAA,wCAzKR,oBA4KIoC,SAAAA,EAAAA,EAAAA,GACIpC,KAAA,wBA7KR,aAgLIE,WACIF,KAAA,uBAjLR,kBAoLIsC,SAAAA,EAAAA,EAAAA,GACI,MAAM2S,MAAN,oBArLR,iBAwLIpT,SAAAA,GACI7B,KAAA,cAzLR,wCA4LIG,SAAAA,EAAAA,EAAAA,EAAAA,GACIH,KAAA,yDA7LR,gBAgMIyC,SAAAA,EAAAA,EAAAA,GACI,UAjMR,sBAoMIC,SAAAA,EAAAA,EAAAA,EAAAA,GAII,OAHAyR,GAAY,4BAAD,mBAAXA,GACAA,GAAAA,GACAnU,KAAA,+BACA,GAxMR,iBA2MIgC,SAAAA,EAAAA,EAAAA,KA3MJ,iBA8MI/B,WACID,KAAA,2BA/MR,oBAkNI6C,SAAAA,EAAAA,EAAAA,EAAAA,GAEI,OADA7C,KAAA,6BACA,GApNR,+BAuNI,YACI,IAAI0U,EAAoB,CACpBQ,UADoB,EAEpBC,UAFoB,GAGpBC,IAHoB,GAIpBC,UAAU,GAEV9U,EAAaP,KAAK8K,cAAcrK,WAAU,mBAAYiU,EAAAA,YAAZ,KAI9C,OAHInU,GAAJ,IACImU,EAAS1U,KAAK8K,cAAd4J,IAEJ,GAlOR,wBAqOI,gBACIP,GAAY,sCAAD,oBAAXA,oBACImB,GAAAA,KAAiBA,GAArB,KACInB,GAAAA,IAxOZ,wBA4OI,gBACIA,GAAY,sCAAD,oBAAXA,oBACImB,GAAAA,KAAiBA,GAArB,KACInB,GAAAA,IA/OZ,sBAmPI,gBACIA,GAAY,oCAAD,oBAAXA,iBACImB,GAAAA,KAAiBA,GAArB,MACInB,GAAAA,GACAnU,KAAA,mBACAA,KAAA,mDAA+EL,EAAeU,aAA9F,QAxPZ,qBA4PI,gBACI8T,GAAY,mCAAD,oBAAXA,iBACImB,GAAAA,KAAiBA,GAArB,MACInB,GAAAA,GACAnU,KAAA,mDAA+EL,EAAekB,UAA9F,QAhQZ,M,SClBY0U,GAAAA,EAAAA,GAAAA,KAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,QAAAA,UAAAA,EAAAA,MAAAA,SAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,UAAAA,aAAAA,EAAAA,SAAAA,WAAAA,EAAAA,MAAAA,QAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,aAAAA,EAAAA,OAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,cAAAA,iBAAAA,EAAAA,UAAAA,WAAAA,EAAAA,WAAAA,aAAAA,EAAAA,SAAAA,W,CAAAA,KAAAA,GAAAA,KCgCL,IAuCP,GAOA,GA2BA,GAoBA,GA7FaC,GAAN,aA6BMC,GAAN,qB,SAUKC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,QAAAA,GAAAA,U,CAAAA,KAAAA,GAAAA,K,SAOAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,K,SA2BAC,GAAAA,EAAAA,EAAAA,IAAAA,GAAAA,MAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,KAAAA,GAAAA,K,SAoBAC,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAqBL,IAAMC,GAAN,IACMC,GAAN,IACMC,GAAN,IChJDC,GAAUpW,GAAAA,CAAhB,oCACMqW,GAAUrW,GAAAA,CAAhB,oCACMsW,GAAUtW,GAAAA,CAAhB,oCACMuW,GAAUvW,GAAAA,CAAhB,mCAOawW,GAAb,WAeI,aACIrW,KAAA,uBAhBR,0CAmBIsW,SAAAA,KAnBJ,cAuBIC,SAAAA,EAAAA,GACIN,GAAQ,mCAAmCO,EAApC,2BAAPP,GACA,IAAI1T,EAAJ,EACA,OAAQiU,EAAR,MACI,KAAMjB,GAAUkB,KAEZlU,EAAS4K,GAAAA,CAAOuJ,EAAPvJ,cAAAA,OAAT5K,YACA,MAEJ,KAAMgT,GAAUoB,SAEZpU,EAAS4K,GAAAA,CAAOuJ,EAAPvJ,uBAAAA,OAAT5K,kBACA,MAEJ,KAAMgT,GAAUqB,QACZrU,EAAAA,SAAUmU,EAAAA,cACV,MAEJ,KAAMnB,GAAUP,GACRwB,EAAAA,SAAiBb,GAAQkB,SACzBtU,EAAS2K,SAAT3K,IAEJ,MAEJ,KAAMgT,GAAUuB,MACZ,IAAIC,EAASC,WAAb,GACKC,MAAL,KACI1U,EAAAA,GAEJ,MAEJ,KAAMgT,GAAU2B,QACZ,IAAIH,EAASC,WAAb,GACKC,MAAL,KACI1U,EAAAA,GAOZ,OADA0T,GAAQ,mCAAmCO,EAApC,6CAAPP,GACA,GAhER,eAmEIkB,SAAAA,EAAAA,GACIjB,GAAQ,qCAAqCM,EAAtC,2BAAPN,GACA,IAAIlF,EAA+B,CAC/BoG,SAD+B,EAE/BC,gBAAgB,GAIpB,GAAIb,EAAJ,UAAqB,CAEjB,IAAI,GAAJ,IAAwBE,EAAAA,OAAAA,OAIpB,OAHA1F,EAAAA,SAAAA,EACAA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,4CACAkF,GAAQ,qCAAqCM,EAAtC,+CAAoGxF,EAApG,yBAAqIA,EAA5IkF,SACA,EAGJ,GAAIM,EAAAA,OAAejB,GAAUqB,SACzB,SAAIF,EAAAA,OAAAA,cAIA,OAHA1F,EAAAA,SAAAA,EACAA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,qCACAkF,GAAQ,qCAAqCM,EAAtC,+CAAoGxF,EAApG,yBAAqIA,EAA5IkF,SACA,EAMZ,KACI,OAAQM,EAAR,MACI,KAAMjB,GAAUoB,SACZ3F,EAAAA,QAAmBqF,EAAAA,cAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,6BAGJ,MAEJ,KAAMuE,GAAUkB,KACZzF,EAAAA,QAAmBqF,EAAAA,UAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,uBAGJ,MAEJ,KAAMuE,GAAUuB,MACZ9F,EAAAA,QAAmBqF,EAAAA,YAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,kBAEJ,MAEJ,KAAMuE,GAAUP,GACZhE,EAAAA,QAAmBqF,EAAAA,aAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,uBAEJ,MAEJ,KAAMuE,GAAU+B,MACZtG,EAAAA,QAAmBqF,EAAAA,WAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,6BAEJ,MAEJ,KAAMuE,GAAU2B,QACZlG,EAAAA,QAAmBqF,EAAAA,aAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,uBAEJ,MAEJ,KAAMuE,GAAUgC,KACZ,MAEJ,KAAMhC,GAAUiC,SACZxG,EAAAA,QAAmBqF,EAAAA,mBAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,4CAEJ,MAEJ,KAAMuE,GAAUkC,KACZzG,EAAAA,QAAmBqF,EAAAA,UAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,yCAEJ,MAEJ,KAAMuE,GAAUmC,UACZ1G,EAAAA,QAAmBqF,EAAAA,eAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,sCAEJ,MAEJ,KAAMuE,GAAU9M,SACZuI,EAAAA,QAAmBqF,EAAAA,eAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,6CAEJ,MAEJ,KAAMuE,GAAUqB,QACZ5F,EAAAA,QAAmBqF,EAAAA,cAAAA,KAAnBrF,GACKA,EAAL,UACIA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,0BAQhB,OADAkF,GAAQ,qCAAqCM,EAAtC,+CAAoGxF,EAApG,yBAAqIA,EAA5IkF,SACA,GAvLR,mBA0LI,cAEI,MADAE,GAAQ,oCAAoCI,EAArC,gCAAPJ,GAGA,IAAIzJ,EAAQ3M,KAAK2X,oBAAoBlX,WAAU,mBAAgBmX,EAAAA,KAAkBpB,EAAlC,MAC3C7J,GAAJ,GAEIiL,EAAa5X,KAAK2X,oBAAlBC,GACAxB,GAAQ,oCAAoCI,EAArC,qDAAPJ,GACAwB,EAAAA,MAAAA,IAGAA,EAAa,CACT5C,GAAIwB,EADK,GAET7U,MAAO0J,GAEX+K,GAAQ,oCAAoCI,EAArC,iCAAPJ,kBACApW,KAAA,8BA3MZ,cA+MI6X,SAAAA,EAAAA,GAYI,GAXAzB,GAAQ,6BAA6BI,EAA9B,+BAD8D,GAYrE,EAAkB,CACd,IAAInL,EAAJ,EAEA,OAAQmL,EAAR,MACI,KAAMjB,GAAUkB,KACZpL,EAAW8B,GAAAA,CAAOuJ,EAAPvJ,YAAAA,OAAX9B,cACA,MAEJ,KAAMkK,GAAUoB,SACZtL,EAAW8B,GAAAA,CAAOuJ,EAAPvJ,kBAAAA,OAAX9B,uBAQR,OAFArL,KAAA,sBACAoW,GAAQ,6BAA6BI,EAA9B,mDAAPJ,GACA,EAKA,OAFAA,GAAQ,6BAA6BI,EAA9B,YAAPJ,oDAEA,MAjPZ,gBAqPI,YACI,IAAI7T,EAAJ,GACA,OAAQiU,EAAR,MACI,KAAMjB,GAAUoB,SACZpU,EAAS4K,GAAAA,GAAAA,OAAT5K,kBACA,MAEJ,KAAMgT,GAAUkB,KACZlU,EAAS4K,GAAAA,GAAAA,OAAT5K,YACA,MAEJ,KAAMgT,GAAUuB,MACZvU,EAAAA,MACA,MAEJ,KAAMgT,GAAUP,GACZzS,EAAAA,KACA,MAEJ,KAAMgT,GAAU+B,MACZ/U,EAAAA,YACA,MAEJ,KAAMgT,GAAU2B,QACZ3U,EAAAA,IACA,MAEJ,KAAMgT,GAAUgC,KAIhB,KAAMhC,GAAUiC,SACZjV,EAAAA,GACA,MAEJ,KAAMgT,GAAUkC,KACZlV,EAAAA,WACA,MAEJ,KAAMgT,GAAUmC,UAIhB,KAAMnC,GAAU9M,SACZlG,EAAAA,QACA,MAEJ,KAAMgT,GAAUqB,QACZrU,EAAAA,QACA,MAEJ,KAAMgT,GAAUuC,KACZvV,GAASoM,EAAAA,GAAAA,KACT,MAEJ,KAAM4G,GAAUwC,OACZxV,EAAS,GAAG4H,GAAWnH,cAAvBT,sBAIR,UAjTR,WAoTIyV,SAAAA,EAAAA,GACI,IAAIzV,EADoD,GAexD,OAZIiU,EAAJ,YAEQA,EAAAA,UAAAA,YAAJ,IACIjU,EAASvC,KAAKiY,cAAd1V,GACA4T,GAAQ,8BAA8BK,EAA/B,iCAAPL,IAGAK,EAAAA,UAAAA,WAAJ,IACIjU,EAASvC,KAAKiY,cAAd1V,GACA4T,GAAQ,8BAA8BK,EAA/B,+BAAPL,KAGR,GAnUR,KAAaE,GAGM6B,UAAoB,0DAH1B7B,GAIM8B,WAAqB,gIAJ3B9B,GAKM+B,eAAyB,+BAL/B/B,GAMMgC,UAAoB,0CAN1BhC,GAOMiC,cAAwB,iGAP9BjC,GAQMkC,mBAA6B,sBARnClC,GASMmC,aAAuB,aAT7BnC,GAUMoC,YAAsB,qBAV5BpC,GAWMqC,cAAwB,eAX9BrC,GAYMsC,eAAyB,4BCxBrC,IAGMC,GAAN,YACMC,GAAN,aAEMC,GAAN,aACMC,GAAN,mBACMC,GAAN,aACMC,GAAN,mBAEMC,GAAb,WAWI,cAXJ,cAII,WAII,OAHMA,EAAN,YACIA,EAAAA,UAAyC,IAAzCA,GAEGA,EAAP,WARR,wDAaI,YACI,IAAI3W,EAAJ,GAmBA,OAjBA4W,EAAAA,OAAAA,SAA0B,cACtB,IAAIC,EAAsB,CACtBC,QAASC,EADa,GAEtBC,aAAc5M,GAGd2M,EAAAA,KAAJ,KACIF,EAAAA,cAAAA,KAEAE,EAAAA,KAAJ,KACIF,EAAAA,cAAAA,KAEAE,EAAAA,OAAkB/D,GAAUwC,SAC5BqB,EAAAA,cAAAA,KAEJ7W,EAAAA,KAAAA,MAEJ,GAjCR,8BAoCI,2BAAkM,IAAxFiX,IAAAA,GAA+B,QAAyD,IAApDC,IAAAA,EA/C3I,MAgDC,IAAIC,EAA8B,CAC9B1E,GAD8B,EAE9B2E,YAF8B,EAG9BC,OAAO,IAEPC,EAAM,IANoL,GAS9L,KAAe,CACX,IAAIC,EAAYvE,GAAUP,GAC1B,IACI8E,EAAYvE,GAAUuC,MAE1B,IAAIwB,EAA2B,CAC3BtE,GAD2B,EAE3B+E,OAF2B,EAG3BC,OAAQrE,GAAQkB,OAChB1R,KAJ2B,EAK3BwU,YAL2B,KAM3BM,WAN2B,EAO3BC,UAAW,CACPA,UADO,EAEPC,UAFO,EAGPC,YAAW,IAGnBV,EAAAA,OAAAA,KAAAA,GAWJ,OAPA,IACI1Z,KAAA,sBAA2B0Z,EAA3B,QACA1Z,KAAA,oBAAyB0Z,EAAzB,QACA1Z,KAAA,qBAA0B0Z,EAA1B,QACA1Z,KAAA,uBAA4B0Z,EAA5B,SAGJ,GA1ER,wBA6EI,YACI,IAAIJ,EAAWtZ,KAAKqa,sBAAsBT,EAA3B,MAAuErE,GAAUoB,UAAjF,EADqC,IAGpD2C,EAAAA,UAAqB,CACjBY,UAAW,IADM,GAEjBE,YAFiB,EAGjBD,UAAS,GAEbb,EAAAA,aAAAA,GArFR,yBAuFI,YACI,IAAIA,EAAWtZ,KAAKqa,sBAAsBT,EAA3B,MAAyErE,GAAUoB,UAAnF,EADsC,IAGrD2C,EAAAA,UAAqB,CACjBY,UAAW,IADM,GAEjBE,YAFiB,EAGjBD,UAAS,GAEbb,EAAAA,aAAAA,GA/FR,sBAkGI,YACI,IAAIA,EAAWtZ,KAAKsa,uBAAuBV,EA7G5C,YA6GgB,GAAwErE,GAAUwC,QAAlF,EADmC,IAGlDuB,EAAAA,UAAqB,CACjBY,UAAW,IADM,GAEjBE,YAFiB,EAGjBD,UAAS,GAEbb,EAAAA,aAAAA,GA1GR,uBA4GI,YACI,IAAIA,EAAWtZ,KAAKqa,sBAAsBT,EAtH3C,aAsHgB,GAAyErE,GAAUwC,QAAnF,EADoC,IAGnDuB,EAAAA,UAAqB,CACjBY,UAAW,IADM,GAEjBE,YAFiB,EAGjBD,UAAS,GAEbb,EAAAA,aAAAA,GApHR,kBAuHI,+BAAsO,IAArHiB,IAAAA,GAAsB,QAA+F,IAAzFC,IAAAA,EAA0B,WAA+D,IAA1DC,IAAAA,EAAoC,MAC5M,IAAInB,EAA2B,CAC3BtE,GAD2B,EAE3B+E,OAF2B,EAG3BC,OAH2B,EAI3B7U,KAJ2B,EAK3BwU,YAL2B,EAM3BM,UAN2B,EAO3BS,aAAY,GAiBhB,OAdA,IAEIpB,EAAAA,UAAqB,CACjBY,UAAW,IADM,GAEjBE,YAFiB,EAGjBD,UAAS,IAKjB,IAAiBb,EAAAA,YAAAA,GACjB,IAAgBA,EAAAA,WAAAA,GAEhBM,EAAAA,KAAAA,GACA,GAhJR,wBAmJI,wBACI,YADuN,IAArHW,IAAAA,GAAsB,QAA+F,IAAzFC,IAAAA,EAA0B,WAA+D,IAA1DC,IAAAA,EAAoC,MAC1Lza,KAAK2a,gBAAgBf,EAAOjE,GAAQiF,OAApC,UAAP,IApJR,yBAuJI,wBACI,YADwN,IAArHL,IAAAA,GAAsB,QAA+F,IAAzFC,IAAAA,EAA0B,WAA+D,IAA1DC,IAAAA,EAAoC,MAC3Lza,KAAK2a,gBAAgBf,EAAOjE,GAAQiF,OAApC,UAAP,IAxJR,gCA2JI,wBACI,YADiO,IAArHL,IAAAA,GAAsB,QAA+F,IAAzFC,IAAAA,EAA0B,WAA+D,IAA1DC,IAAAA,EAAoC,MACpMza,KAAKqa,sBAAsBX,EAA3B,iBAAP,IA5JR,iCA+JI,wBACI,YADkO,IAArHa,IAAAA,GAAsB,QAA+F,IAAzFC,IAAAA,EAA0B,WAA+D,IAA1DC,IAAAA,EAAoC,MACrMza,KAAKsa,uBAAuBZ,EAA5B,iBAAP,IAhKR,KCXMmB,GAAShb,GAAAA,CAAf,8BAEaib,GAAb,WAYI,aACI9a,KAAA,eAbR,cAGI,WAII,OAHM8a,EAAN,YACIA,EAAAA,UAAqC,IAArCA,GAEGA,EAAP,WAPR,0CAgBI,YACI,IAAIvY,EAAJ,KACMoK,EAAQ3M,KAAK+a,YAAYta,WAAU,mBAAgBua,EAAAA,KAAhB,KAIzC,OAHIrO,GAAJ,IACIpK,EAASvC,KAAK+a,YAAdxY,IAEJ,GAtBR,gBAyBI,2BAAoL,IAAxFiX,IAAAA,GAA+B,QAAyD,IAApDC,IAAAA,ED3B7H,MC4BCoB,GAAO,yBAAD,gBAANA,GACA,IAAItY,EAAmCvC,KAAKib,eAA5C,GACA,KACI,SAGA,IAAID,EAAa9B,GAA6BlW,cAA7BkW,4BAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAjB,GAEA,OADAlZ,KAAA,oBACA,GAlCZ,wBAsCI,YACI6a,GAAO,oCAAoCG,EAA3CH,aACA,IAAItY,EAAJ,GACM2Y,EAAW,IAAjB,GAwBA,OAtBAF,EAAAA,OAAAA,SAA0B,YACtB,GAAI1B,EAAAA,WAAsBA,EAAAA,UAA1B,WAAyD,CACrD,IAAI1B,EAAa0B,EAAAA,UAAAA,UAAAA,SAAAA,GAAjB,GAEA,OAAOA,EAAP,MACI,KAAM/D,GAAUkB,KAChB,KAAMlB,GAAUoB,SACZ,MAEJ,QACIiB,EAAasD,EAAAA,YAAAA,EAAbtD,GAKRiD,GAAO,8BAA8BvB,EAA/B,mBAANuB,GACAtY,EAAO+W,EAAP/W,IAAAA,EAEA+W,EAAAA,OAAkB/D,GAAU4F,aAC5B5Y,EAAO+W,EAAP/W,IAAAA,OAGR,GAjER,iBAqEI,YACIsY,GAAO,oCAAPA,GACA,IAAItY,EAAJ,GAEMyY,EAAwChb,KAAKib,eAAnD,GAKA,OAHA,IACI1Y,EAASvC,KAAKob,sBAAd7Y,IAEJ,GA9ER,KCNa8Y,GAAb,WAII,cACIrb,KAAA,UACAA,KAAA,aANR,0CASI,cAAgD,WAC5CA,KAAA,aAAkB,CAACqB,KAAD,EAAMM,MAAAA,IACxB3B,KAAA,mBAAuB,mBAAcY,EAAAA,eAAwB,EAAtC,aAX/B,cAcI0a,SAAAA,GACItb,KAAA,mBAfR,aAkBIub,WACI,OAAOvb,KAAP,SAnBR,K,iNCoBA,IAAMwb,GAAU3b,GAAAA,CAAhB,iBACM4b,GAAgB5b,GAAAA,CAAtB,wBAEqBsK,GAAAA,WAiBjB,c,EAdcnH,YAAd,WAII,OAHMmH,EAAN,YACIA,EAAAA,UAAuB,IAAvBA,GAEGA,EAAP,W,2BAYJuR,qBAAAA,SAAAA,EAAAA,GACI1b,KAAA,kBACAA,KAAA,kBAF+D,EAI/D,IAAI2b,EAASvH,GAAoBpR,cACjC2Y,EAAAA,WAAkB,CACd,CACIzG,UAAUlN,EACVmN,UAFJ,GAGIC,IpBtCU,aoBuCVC,UAAS,GAEb,CACIH,UAAUlN,EACVmN,UAFJ,GAGIC,IpB5CU,sBoB6CVC,UAJJ,EAKIuG,QAAS,OAEb,CACI1G,UAAUlN,EACVmN,UAFJ,GAGIC,IpB/CF,gBoBgDEC,UAJJ,EAKIuG,QAAS,SAKjB,IAAIC,EAAc5U,EAAsBjE,cACpC8Y,EAAW/Y,EAAAA,cAEXgZ,EAAU,IAAItV,EAAyBoV,EAA3C,GAiBA,OAdAA,EAAAA,gBAAAA,EAAAA,IAAAA,GACAA,EAAAA,gBAAAA,EAAAA,IAAAA,GAEA7b,KAAA,aAtC+D,EAyC/DA,KAAA,aAAoBA,KAAK6G,aAAa7C,KAAtChE,MACAA,KAAA,sBAA6BA,KAAK8G,sBAAsB9C,KAAxDhE,MACAA,KAAA,wBAA+BA,KAAK2G,wBAAwB3C,KAA5DhE,MACAA,KAAA,wBAA+BA,KAAK4G,wBAAwB5C,KA5CG,MA+C/DhE,KAAA,6BAEA,M,EAGIgc,2BAAR,WAEI,IAAIC,EAA8CnB,GAAyB9X,cAAzB8X,cAAqD9S,EAArD8S,YAAAA,GAAAA,GAAAA,EAAlD,OACA5B,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,OAAAA,OAAiH3D,GAAUgC,MAA3H2B,EAAAA,iBACAA,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,OAAAA,OAAiH3D,GAAU2G,eAA3HhD,EAAAA,4BACI,IAAImC,GAAsB,CACtB,CAACha,KAAD,SAAiBM,MAAO,UACxB,CAACN,KAAD,WAAmBM,MAAO,eAElCuX,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,WAAAA,WAAyH3D,GAAU9M,UAAnIyQ,EAAAA,iBACAA,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,OAAAA,OAAiH3D,GAAU2B,SAA3HgC,EAAAA,kBACAA,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,OAAAA,cAAwH3D,GAAU2B,SAAlIgC,EAAAA,kBACAA,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,SAAAA,SAAqH3D,GAAUuB,OAA/HoC,EAAAA,eACAA,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,WAAAA,WAAyH3D,GAAUuB,OAAnIoC,EAAAA,sBAEAsC,GAAAA,wCACAA,GAAAA,GACAC,GAAcX,GAAyB9X,cAAzB8X,eAAdW,iBAEA,IAAIU,EAAyCrB,GAAyB9X,cAAzB8X,cAAqD9S,EAArD8S,WAAAA,GAAAA,GAAAA,EAA7C,OACA5B,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,YAAAA,YAAsH3D,GAAUqB,SAAhIsC,EAAAA,8BACA,IAAIkD,EAA2ClD,GAA6BlW,cAA7BkW,8BAAAA,EAAAA,YAAAA,YAAsH3D,GAAU4F,YAAhIjC,EAA/C,6BACAkD,EAAAA,OAAkCzG,GAAQwF,WAC1CiB,EAAAA,yBAAoDH,EAApDG,GAEAZ,GAAAA,kCACAA,GAAAA,GACAC,GAAcX,GAAyB9X,cAAzB8X,eAAdW,a,EAQGhQ,WAAP,WACI+P,GADsB,2BAGtB,IAAIa,EAAuB,IAA3B,EAKA,GAJAxY,EAAAA,cAAAA,YAJsB,GAOtB2X,GAAQ,mCAAmCxb,KAApC,yBAAiEA,KAAxEwb,uBACIxb,KAAKsc,oBAAoBnO,OAAO1G,OAApC,EAAgD,CAE5C,IAAIoI,EAAclE,GAAY3I,cAG9BiM,GAAuBjM,cACvB6M,EAAAA,eAA2B7P,KANiB,uBAS5C6P,EAAAA,uBAAmC7P,KAAnC6P,iBAEAA,EAX4C,QAa5C7P,KAAA,iCAAsCgI,GACtChI,KAAA,iCAAsCgI,GACtChI,KAAA,iCAAsCgI,K,EAKvCoC,gBAAP,WACI,OAAOpK,KAAP,c,EAGG+G,gBAAP,WACI,oB,EAGGwV,WAAP,WACI,IAAIA,GAAJ,EACA,IAEI,eACIA,GAAAA,GAEN,MAAOpL,IAET,U,EAGGmL,kBAAP,WACI,IAAI/Z,EAAJ,GACA,IAEI,eAEIA,EAASia,aAATja,KAEN,MAAO4O,IAGT,OADAsK,GAAc,wBAAdA,GACA,G,EAGGgB,oBAAP,WACI,IAAIla,EAAJ,GACA,IAEI,eAEIA,EAASia,aAATja,UAEN,MAAO4O,IAGT,OADAsK,GAAc,qBAAdA,GACA,G,EAGGjR,cAAP,YACIgR,GAAAA,I,EAGG/Q,eAAP,WACI,OAAOzK,KAAP,qB,EAGJ8G,sBAAAA,SAAAA,EAAAA,EAAAA,K,EACAH,wBAAAA,SAAAA,EAAAA,EAAAA,K,EACAC,wBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,K,EACAC,aAAAA,SAAAA,EAAAA,EAAAA,K,EAQQ6V,gBAAR,WACI,IAAIna,EAD0B,GAO9B,OAJKwI,OAAD,KAAiBA,OAAAA,IAArB,YAEIxI,EAASwI,OAAAA,IAATxI,WAEJ,G,EAIJoa,eAAAA,SAAAA,GACI3c,KAAA,mC,EAGJ4c,OAAAA,SAAAA,EAAAA,EAAAA,GACI,UACI,KAAK5U,EACDwT,GAAAA,qCACAC,GAAAA,GACAzb,KAAA,yC,EAMZ6c,OAAAA,SAAAA,EAAAA,EAAAA,GACI,UACI,KAAK7U,EACDwT,GAAAA,+EACAC,GAAAA,K,EAMZqB,OAAAA,SAAAA,EAAAA,EAAAA,GACI,UACI,KAAK9U,EACDwT,GAAAA,iCACAC,GAAAA,GACAzb,KAAA,2C,EAOZ+c,4BAAAA,SAAAA,GACI,IAAIC,EAAiB,GAAH,GAAlB,GACAA,EAAAA,KAAqBrO,EAAAA,GAAAA,KACrB3O,KAAA,mD,EAGJid,oCAAAA,SAAAA,GAAsD,WAC9CC,EAAJ,WACIA,EAAAA,UAAAA,SAA0B,YACtB,qC,EAlQK/S,GCtBRgT,GAAb,WAII,aAAqB,KAFXpd,oBAA8B,EAGpCC,KAAA,iBALR,uCAQI,YACIA,KAAA,uBATR,iBAYI,WACIA,KAAA,uBAbR,aAgBI,WACIA,KAAA,uBAjBR,cAmBIod,SAAAA,EAAAA,GACSpd,KAAL,oBACIA,KAAA,uBAA2B,mBAAcY,EAAAA,YAAAA,EAAd,OArBvC,iBAwBIyc,SAAAA,GACSrd,KAAL,oBACIA,KAAA,uBAA2B,mBAAcY,EAAAA,eAAd,OA1BvC,aA6BI0c,SAAAA,EAAAA,EAAAA,GACStd,KAAL,oBACIA,KAAA,uBAA2B,mBAAcY,EAAAA,WAAAA,EAAAA,EAAd,OA/BvC,gBAkCI2c,SAAAA,EAAAA,GACI,IAAIhb,GAD8C,EASlD,OAPKvC,KAAL,oBACIA,KAAA,uBAA2B,YACjBY,EAAAA,cAAAA,EAAN,KACI2B,GAAAA,MAIZ,GA3CR,gBA8CIib,SAAAA,GACSxd,KAAL,oBACIA,KAAA,uBAA2B,mBAAcY,EAAAA,cAAd,OAhDvC,gBAoDI6c,SAAAA,GACSzd,KAAL,oBACIA,KAAA,uBAA2B,mBAAcY,EAAAA,cAAd,OAtDvC,cA0DI8c,SAAAA,EAAAA,GACS1d,KAAL,oBACIA,KAAA,uBAA2B,mBAAcY,EAAAA,YAAAA,EAAd,OA5DvC,KCQM+c,GAAW9d,GAAAA,CAAjB,oBACM+d,GAAkB/d,GAAAA,CAAxB,2BAGsBge,GAAtB,WAYI,cAA+C,KAJrC1U,YAAkC,KAKxCnJ,KAAA,WACAA,KAAA,YACAA,KAAA,eAAsB,IAAtB,GAEAA,KAAA,WAAkBA,KAAK8d,WAAW9Z,KAAlChE,MAjBR,uCAqBI+d,WACI,OAAO/d,KAAP,UAtBR,mBA0BIge,SAAAA,GACIhe,KAAA,+BA3BR,mBA8BIie,WACIje,KAAA,OAAc8I,SAAAA,eAAwB9I,KAAKke,SAA3C,oBACAle,KAAA,8BAAAA,OAhCR,iBAoCIme,SAAAA,GACIne,KAAA,eArCR,UAyCIoe,WACI,OAAOpe,KAAKke,SAAZ,cA1CR,aA8CIG,WACI,UA/CR,qBAkDIC,WACI,OAAOT,EAAP,aAnDR,aA0DI,YACIF,GAAS,QAAQ3d,KAAT,UAAR2d,gBACAC,GAAgBW,EAFkB,QAIlC,IAAMC,EAAoBD,EAAAA,aAAAA,QAA1B,IACME,EAAgBnY,KAAAA,MAAtB,GACAsX,GANkC,GASlC,IAAMc,EAAoBD,EAAa,YACjCE,EAAoBF,EAAa,YAEvC,GADAd,GAAS,QAAQ3d,KAAT,+CAAR2d,GACI3d,KAAKke,SAAT,KAAwB,CACpB,IAAMU,EAAc5e,KAAKke,SAASW,KAAKC,YAAYre,WAAU,mBAAgBse,IAAhB,MAA7D,EACIC,GAAJ,EACA,IACQhf,KAAKke,SAASW,KAAlB,aACIG,EAAchf,KAAKke,SAASW,KAAKG,WAAWve,WAAU,mBAAUkF,IAAV,MAAtDqZ,GAEJpB,GAAgB,QAAQ5d,KAAT,8CAAf4d,GACIgB,GAAJ,GACI5e,KAAA,2BAAAA,KAAA,MA/EpB,K,8FAAsB6d,GAEJoB,YAAc,cCbhC,ICJA,GAAYC,GDICC,GAAb,Y,QAII,aAAqB,aACjB,sBACA,2BAFiB,E,EAJzB,G,EAAA,G,uEAAA,uCASI,YACI,qCACAnf,KAAA,iCAXR,kBAiBIof,SAAAA,EAAAA,GACSpf,KAAL,oBACIA,KAAA,iCAAqC,mBAAcY,EAAAA,gBAAAA,EAAd,OAnBjD,eAuBIye,SAAAA,EAAAA,GACSrf,KAAL,oBACIA,KAAA,iCAAqC,mBAAcY,EAAAA,aAAAA,EAAd,OAzBjD,iBA6BI0e,SAAAA,EAAAA,GACStf,KAAL,oBACIA,KAAA,iCAAqC,mBAAcY,EAAAA,eAAAA,EAAd,OA/BjD,gBAmCI2e,SAAAA,EAAAA,GACI,IAAIhd,GADwD,EAS5D,OAPKvC,KAAL,oBACIA,KAAA,iCAAqC,YAC3BY,EAAAA,cAAAA,EAAN,KACI2B,GAAAA,MAIZ,GA5CR,QCJY2c,GAAAA,KAAAA,GAAAA,KAAAA,GAAAA,UAAAA,GAAAA,YAAAA,GAAAA,GAAAA,UAAAA,GAAAA,YCGZ,IAMMM,GAAN,SACMC,GAAN,UAEM5E,GAAShb,GAAAA,CAAf,SAEa6f,GAAb,WAgBI,aACI1f,KAAA,SAAgC8I,SAAAA,eA5BxC,SA6BQ9I,KAAA,WAAsC8I,SAAAA,eA5B9C,eA6BQ9I,KAAA,aAA0C8I,SAAAA,eA5BlD,iBA6BQ9I,KAAA,aAAuC8I,SAAAA,eA5B/C,gBA6BQ9I,KAAA,cAAwC8I,SAAAA,eA5BhD,iBAOA,qBAGI,WAII,OAHM4W,EAAN,YACIA,EAAAA,UAAyB,IAAzBA,GAEGA,EAAP,WAPR,uBAwBI,kBAAsF,WAClF1f,KAAA,uBACAA,KAAA,uBAFkF,EAIlFA,KAAA,0BAJkF,IAMlFA,KAAA,2BAwBAA,KAAA,wCAtBuB,SAAjB2f,EAAkBpB,GACpB1D,GAAAA,qCACAja,EAAAA,UAAmB,CAACgf,QAASV,GAAAA,UAAqB1W,QAASA,IAE3D,yBAJyC,IAMzC,4BANyC,IAQzC+V,EAAAA,OAAAA,oBAAAA,QAAAA,MAeJve,KAAA,uCAZsB,SAAhB6f,EAAiBtB,GACnB1D,GAAAA,oCACAja,EAAAA,UAAmB,CAACgf,QAASV,GAAAA,UAAqB1W,QAASA,IAE3D,yBAJwC,IAMxC,4BANwC,IAQxC+V,EAAAA,OAAAA,oBAAAA,QAAAA,OAnDZ,K,0NCMA,IAAMZ,GAAW9d,GAAAA,CAAjB,sBACM+d,GAAkB/d,GAAAA,CAAxB,6BAGsBigB,GAAtB,Y,QAMI,gBAAiF,aAC7E,cAAM5B,EAAN,mBACA,qBACA,mBACA,gBACA,oBACA,iBAAsB,IANuD,GAS7E,iBAAsB,yBAAtB,IACA,qBAA0B,6BAA1B,IACA,iBAAsB,yBAAtB,IACA,uBAA4B,+BAA5B,IACA,+BAAoC,uCAApC,IAb6E,E,EANrF,G,EAAA,G,uEAAA,iDAuBI6B,WACI,OAAO/f,KAAP,oBAxBR,6BA2BIggB,SAAAA,GACIhgB,KAAA,+BA5BR,iBAgCIme,SAAAA,GACI,wCACIne,KAAKke,SAAT,OACIN,GAAgB,QAAQ5d,KAAT,yCAAsDA,KAAKke,SAA1EN,cACAA,GAAAA,GACAqC,EAAAA,iBAAAA,YAAuC,YACnC1B,EAAAA,oBAEJ0B,EAAAA,iBAAAA,OAAmCjgB,KAAnCigB,cAxCZ,mBA8CIhC,WACI,wCACIje,KAAJ,UAAmBA,KAAKkgB,SAASjC,oBAhDzC,cAmDI,YAEI,IAAIkC,EAAS5B,EAAAA,OAAAA,aAA0Bve,KAAKogB,mBAFH,OAInCC,EAAa9B,EAAAA,OAAAA,aAA0BV,GAAaoB,aAEtDjf,KAAKogB,mBAAmBE,UAAY3K,GAAQkB,SAAQsJ,EAASjT,SANxB,IAQzC0Q,GAAgB,QAAQ5d,KAAT,yDAAf4d,GAEA,IAAI2C,EAVqC,GAYzCA,EAAYvgB,KAAKogB,mBAAjBG,OAAAA,EAEA,IAIkB,IAJdC,EAAJ,GAUA,OARAA,EAAexgB,KAAKygB,yBAAyBzgB,KAA9B,eAAfwgB,MAIIA,EAAY,YAAZA,OAAAA,EAA+BxgB,KAAKogB,mBAAmBM,OAAvDF,WAAAA,EAA+B,EAFjB,KAIdA,EAAY,YAAZA,OAAAA,EAA+BxgB,KAAKogB,mBAAmBM,OAAvDF,WAAAA,EAA+B,EAA/BA,MAEJ,GA3ER,2CA8EIG,SAAAA,EAAAA,EAAAA,KA9EJ,0BAoFIC,SAAAA,EAAAA,GACI,OAAOjZ,EAAOC,EAAd,IArFR,sCAwFIiZ,SAAAA,EAAAA,GACI,OAAOnL,GAASoL,QAzFxB,+CA4FI,cACI,OAAOpL,GAASoL,QA7FxB,wCAgGIC,SAAAA,EAAAA,GACI,UAjGR,6CAoGIC,SAAAA,EAAAA,GACI,UArGR,+BAwGIC,SAAAA,EAAAA,GACQjhB,KAAKkhB,QAAUlhB,KAAnB,UACIA,KAAA,oDAAyDA,KAAzD,aA1GZ,iBA8GI,YACI2d,GAAS,QAAQ3d,KAAT,UAAR2d,gBACAC,GAAgBW,EAAhBX,QACA,IAAMlM,EAAOpL,KAAAA,UAAetG,KAAKmhB,YAAjC,IACAvD,GAJ0C,GAM1CW,EAAAA,aAAAA,QAAAA,GAAAA,GACmCve,KAAnC,wCArHR,iBAwHI,YACIue,EAAAA,iBACAA,EAF2C,kBAI3C,IAAI4B,EAAS5B,EAAAA,OAAAA,aAA0Bve,KAAKogB,mBAJD,OAMrCC,EAAa9B,EAAAA,OAAAA,aAA0BV,GAAaoB,aAEtDjf,KAAKogB,mBAAmBE,UAAY3K,GAAQkB,SAAQsJ,EAASjT,SARtB,IAU3C0Q,GAAgB,QAAQ5d,KAAT,+CAAf4d,GACA,IAAI2C,EAXuC,GAa3CA,EAAYvgB,KAAKogB,mBAAjBG,OAAAA,EACA3C,GAAAA,GAEA,IAAI4C,EAAexgB,KAAKygB,yBAAyBzgB,KAA9B,eAAnB,GAEA,GADAiB,QAAAA,IAAAA,GACA,EAAkB,CACd,IAAMmgB,EAAkDphB,KAAnC,kCAArB,GACA4d,GAAgB,QAAQ5d,KAAT,mEAAf4d,GACA,IACI5d,KAAA,eACA4d,GAAAA,GACmC5d,KAAnC,uCAhJhB,uBAqJI,YACIue,EAAAA,iBACAA,EAFiD,kBAIjD,IAAI4B,EAAS5B,EAAAA,OAAAA,aAA0Bve,KAAKogB,mBAJK,OAM3CC,EAAa9B,EAAAA,OAAAA,aAA0BV,GAAaoB,aAEtDjf,KAAKogB,mBAAmBE,UAAY3K,GAAQkB,SAAQsJ,EAASjT,SARhB,IAUjD0Q,GAAgB,QAAQ5d,KAAT,yDAAf4d,GACA,IAAI2C,EAX6C,GAajDA,EAAYvgB,KAAKogB,mBAAjBG,OAAAA,EACA3C,GAAAA,GAEA,IAAI4C,EAAexgB,KAAKygB,yBAAyBzgB,KAA9B,eAAnB,GACA,KAAkB,CACd,IAAMqhB,EAAerhB,KAAKshB,eAAe/D,cAAcvd,KAAvD,GACA4d,GAAgB,QAAQ5d,KAAT,iEAAf4d,GACA,IAEQ5d,KAAKogB,mBAAmBM,OAA5B,aACI1gB,KAAA,kBACAA,KAAA,2BAAAA,KAAA,IAEA0f,GAAAA,cAAAA,WAAAA,KAA4C1f,KAA5C0f,UAAAA,oDAAAA,MA/KpB,qBAuLI,YACInB,EAAAA,iBACAA,EAF+C,kBAI/C,IAAI4B,EAAS5B,EAAAA,OAAAA,aAA0Bve,KAAKogB,mBAJG,OAMzCC,EAAa9B,EAAAA,OAAAA,aAA0BV,GAAaoB,aAEpDsC,EAAahD,EAAAA,OAAAA,aAAnB,IAEIve,KAAKogB,mBAAmBE,UAAY3K,GAAQkB,SAAQsJ,EAASjT,SAVlB,IAY/C0Q,GAAgB,QAAQ5d,KAAT,yDAAf4d,GACA,IAAI2C,EAb2C,GAe/CA,EAAYvgB,KAAKogB,mBAAjBG,OAAAA,EACA3C,GAAAA,GAEA,IAAI4C,EAAexgB,KAAKygB,yBAAyBzgB,KAA9B,eAAnB,GACA,KAAkB,CACd,IAAMohB,EAAkDphB,KAAnC,kCAArB,GACA4d,GAAgB,QAAQ5d,KAAT,uEAAf4d,GACA,IACI5d,KAAA,eACA4d,GAAAA,GACA5d,KAAA,0BAAAA,KAAA,QAhNhB,6CAqNIwhB,SAAAA,EAAAA,GACI,UAtNR,6CAyNIC,SAAAA,EAAAA,GACI,UA1NR,6CA6NIC,SAAAA,EAAAA,EAAAA,GACI,UA9NR,cAiOIC,SAAAA,GACI3hB,KAAA,YAlOR,YAqOI4hB,SAAAA,GACIhE,GAAgBW,EAAhBX,SACIW,EAAAA,UAAkBW,GAAAA,YAClBlf,KAAA,kBACAA,KAAA,2BAAAA,KAAsCue,EAAtC,WAzOZ,O,0NCdA,IAAM1D,GAAShb,GAAAA,CAAf,+BAE8BgiB,GAAAA,SAAAA,G,QAI1B,kBAAuG,aACnG,0BACA,aAFmG,EAKnG,eAAoB,uBAL+E,IAQnG,wCAA2C,EAA3C,sBARmG,E,4GAWhG5D,iBAAP,WACI,wCACAje,KAAA,2BAAAA,O,EAGGygB,yBAAP,cACI,OAAOzgB,KAAKqH,aAAa/E,gBAAgBjB,EAAMkf,EAAavgB,KAA5D,0B,EAGG6G,aAAP,gBACIgU,GAAO,kBAAD,EAANA,YACAA,GAAAA,GACA7a,KAAA,mC,EAGJ8G,sBAAAA,SAAAA,EAAAA,EAAAA,GACI+T,GAAO,kBAAD,EAANA,mBACAA,GAAAA,GACI7a,KAAKqH,cAAgBrH,KAAzB,gBAA8CA,KAAKihB,6BAA6B5f,EAAMrB,KAAKqH,aAAaxF,eAA1D,K,EAGlD8E,wBAAAA,SAAAA,EAAAA,EAAAA,GACIkU,GAAO,kBAAD,EAANA,qBACAA,GAAAA,GACI7a,KAAKqH,cAAgBrH,KAAzB,gBAA8CA,KAAKihB,6BAA6B5f,EAAMrB,KAAKqH,aAAaxF,eAA1D,K,EAGlD+E,wBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GACIiU,GAAO,kBAAD,EAANA,qBACAA,GAAAA,GACI7a,KAAKqH,cAAgBrH,KAAzB,gBAA8CA,KAAKihB,6BAA6B5f,EAAMrB,KAAKqH,aAAaxF,eAA1D,K,EAGlDigB,OAAAA,WACI9hB,KAAA,6BAAkCA,KAAlC,eAAsDA,KAAKqH,aAAaxF,eAAe7B,KAAvF,kB,EAGJsI,KAAAA,a,EACAyZ,OAAAA,a,EAEA1E,eAAAA,SAAAA,K,EACAG,cAAAA,SAAAA,K,EACA4B,gBAAAA,SAAAA,EAAAA,K,EACA1B,YAAAA,SAAAA,EAAAA,K,EACAD,cAAAA,SAAAA,K,EACA6B,eAAAA,SAAAA,EAAAA,K,EACAD,aAAAA,SAAAA,EAAAA,K,EACA/B,WAAAA,SAAAA,EAAAA,EAAAA,K,EAEAF,YAAAA,SAAAA,EAAAA,GACIpd,KAAA,iCAAsCA,KAAtC,iBAAyEA,KAAzE,6B,EAIJuf,cAAAA,SAAAA,EAAAA,GACI,U,EAGJhC,cAAAA,SAAAA,EAAAA,GACI,U,EAGJxW,gBAAAA,WACI,OAAO/G,KAAP,W,EA9EsB6hB,CAAuC/B,ICwErE,SAFoB,IAhFdkC,WACF,c,2BAGAC,iBAAAA,SAAAA,GACI,IAAMvhB,EAA8BoI,SAAAA,eAApC,GACA,OAAIpI,GACAA,EAAAA,eAAuB,CACnBwhB,MADmB,QAEnBC,SAAU,Y,EAKtBC,kBAAAA,SAAAA,GACI,IACI1hB,EAAAA,UAAoBA,EAAAA,aAAuBA,EAAvBA,aAApBA,M,EAIR2hB,qBAAAA,SAAAA,GACI,IACI3hB,EAAAA,eAAuB,CACnByhB,SAAU,WAEdzhB,EAAAA,UAAoBA,EAAAA,aAAuBA,EAAvBA,aAApBA,M,EAIR4hB,eAAAA,SAAAA,GACI5hB,EAAAA,eAAuB,CACnBwhB,MADmB,QAEnBC,SAAU,Y,EAIlBI,SAAAA,SAAAA,GACI7hB,EAAAA,eAAuB,CACnBwhB,MAAO,W,EAIfM,kBAAAA,SAAAA,GACI,GAAI9hB,GAAWA,EAAf,WACI,KAAOA,EAAP,YAA2B,CACvB,IAAM+hB,EAA8B/hB,EAApC,UACA,GAAeA,EAAAA,YAAAA,K,EAK3BgiB,iBAAAA,SAAAA,EAAAA,EAAAA,QAA4F,IAAhCC,IAAAA,GAAoB,GAC5DC,EAAAA,MAAhB,KACAC,SAAgB,YACRC,EAAAA,OAAAA,OAAJ,IACI,EACIpiB,EAAAA,UAAAA,IAAAA,GAEAA,EAAAA,UAAAA,OAAAA,Q,EAMhBqiB,cAAAA,SAAAA,EAAAA,GACI,GACIC,EAAAA,SAAmB,YACftiB,EAAAA,aAAqBuiB,EAArBviB,KAAqCuiB,EAArCviB,W,EAKZwiB,iBAAAA,SAAAA,EAAAA,GACIF,EAAAA,SAAmB,YACftiB,EAAAA,gBAAAA,O,EA1ENshB,ICKN,IAAMrE,GAAW9d,GAAAA,CAAjB,sBAEasjB,GAAb,WAII,gBACInjB,KAAA,OACAA,KAAA,eANR,iEASI,cAA4F,WAClFud,EAAwBvd,KAAKojB,KAAK5B,2CAA2C6B,EAAnF,GACMnF,EAAmCle,KAAKojB,KAA9C,wBACME,EAAkBtjB,KAAKojB,KAA7B,qBAEAzF,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,wBACAA,GAAAA,GAEA,IAAM4F,EAAkBvjB,KAAKojB,KAAKI,8BAA8BH,EAAhE,GAEII,EAAuB3a,SAAAA,cAAuBoV,EAAlD,oBACAwF,GAAAA,iBAAAA,EAAsCxF,EAAtCwF,gBACAA,GAAAA,cAAAA,EAAmCxF,EAAnCwF,0BACAD,EAAAA,aAAqBvF,EAArBuF,MAAAA,GACAA,EAAAA,aAAAA,EAAqCvF,EAAAA,WAdmD,cAgBxF,IAAIyF,EAAJ,EACA,GAAIzF,EAAAA,OAAJ,iBAAsC,CAClC,IAAI0F,EAAyB9a,SAAAA,cAA7B,OAaA,GAZA4a,GAAAA,iBAAAA,EAAwCxF,EAAAA,OAAxCwF,kBACAE,EAAAA,aAAuB1F,EAAvB0F,MAAAA,GACAA,EAAAA,aAAAA,EAAuC1F,EAAAA,WAAvC0F,cAGAD,EAAS7a,SAAAA,cAAuBoV,EAAAA,OAAhCyF,iBACAD,GAAAA,iBAAAA,EAAoCxF,EAAAA,OAApCwF,oBACAC,EAAAA,aAAoBzF,EAApByF,MAAAA,GACAA,EAAAA,aAAAA,EAAoCzF,EAAAA,WAApCyF,cAEAC,EAAAA,YAAAA,GAEI1F,EAAAA,OAAJ,WAAgC,CAC5B,IAAI2F,EAAQ/a,SAAAA,cAAuBoV,EAAAA,OAAAA,WAAnC,aACAwF,GAAAA,iBAAAA,EAAoCxF,EAAAA,OAAAA,WAApCwF,gBACAG,EAAAA,aAAAA,MAA0B7jB,KAAKojB,KAAKpC,2CAA2CqC,EAA/EQ,IACAJ,EAAAA,YAAAA,GAGJ,IAAIK,EAAYhb,SAAAA,cAAhB,OAGA,GAFA8a,EAAAA,YAAAA,GAEI1F,EAAAA,OAAJ,MAA2B,CACvB,IAAM6F,EAAa/jB,KAAKojB,KAAKrC,sCAAsCsC,EAAnE,GACA,GAAIU,EAAJ,EAAoB,CAChB,IAAIC,EAAuBlb,SAAAA,cAAuBoV,EAAAA,OAAAA,MAAlD,aACAwF,GAAAA,iBAAAA,EAAsCxF,EAAAA,OAAAA,MAAtCwF,gBACAA,GAAAA,cAAAA,EAAmCxF,EAAAA,OAAAA,MAAnCwF,mBACAM,EAAAA,aAAqB9F,EAArB8F,MAAAA,GACAA,EAAAA,aAAAA,EAAqC9F,EAAAA,WAArC8F,cACAF,EAAAA,YAAAA,GACAE,EAAAA,UAAAA,qBAAAA,EAAAA,sBAqCR,GAjCI9F,EAAJ,cACIA,EAAAA,aAAAA,SAA8B,YAE1B,GAD+B,kDAAqD+F,EAArD,OAA/B,GAC4B,CACxB,IAAIC,EAAsBpb,SAAAA,cAA1B,UAOA,GANAob,EAAAA,aAAAA,OAAAA,UACAR,GAAAA,iBAAAA,EAAqCO,EAArCP,eACAA,GAAAA,cAAAA,EAAiCO,EAAjCP,YACIO,EAAJ,aACIC,EAAAA,UAAmBD,EAAnBC,YAEAD,EAAJ,YAA6B,CACzB,IAAIE,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCO,EAArCP,aACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAqCjG,EAAAA,WAArCiG,cACAA,EAAAA,aAAAA,GAAiDF,EAAjDE,MACAD,EAAAA,YAAAA,GAEJA,EAAAA,aAAoBhG,EAApBgG,MAAAA,GACAA,EAAAA,aAAAA,EAAqChG,EAAAA,WAArCgG,cACAA,EAAAA,aAAAA,GAAiDD,EAAjDC,MAEAA,EAAAA,iBAAAA,SAAiC,YAC7B3F,EAAAA,iBACAA,EAAAA,kBACA,wCAEJuF,EAAAA,YAAAA,OAKR5F,EAAAA,OAAAA,QAAJ,EAA6C,CACzC,IAAIkG,EAA8Btb,SAAAA,cAAlC,UAOA,GANAsb,EAAAA,aAAAA,OAAAA,UACAV,GAAAA,iBAAAA,EAA6CxF,EAAAA,OAAAA,OAA7CwF,eACAA,GAAAA,cAAAA,EAAyCxF,EAAAA,OAAAA,OAAzCwF,YACIxF,EAAAA,OAAAA,OAAJ,aACIkG,EAAAA,UAA2BlG,EAAAA,OAAAA,OAA3BkG,YAEAlG,EAAAA,OAAAA,OAAJ,YAAwC,CACpC,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,OAAAA,OAArCwF,aACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAC,EAAAA,YAAAA,GAEJA,EAAAA,aAA4BlG,EAA5BkG,MAAAA,GACAA,EAAAA,aAAAA,EAA4ClG,EAAAA,WAA5CkG,cACAA,EAAAA,iBAAAA,SAAyC,YACrC7F,EAAAA,iBACAA,EAAAA,kBACA,0CAEJuF,EAAAA,YAAAA,GAEJL,EAAAA,YAAAA,GAEIvF,EAAAA,OAAJ,OACIuF,EAAAA,aAAAA,YAAAA,QACAA,EAAAA,iBAAAA,YAAsCzjB,KAAKqkB,aAA3CZ,iBAGAvF,EAAAA,OAAJ,QACIuF,EAAAA,iBAAAA,QAAkCzjB,KAAKqkB,aAAvCZ,gBAuBR,GAjBAE,EAAAA,aAAoBzF,EAApByF,MAAAA,GACAA,EAAAA,aAAAA,EAAoCzF,EAAAA,WAApCyF,cACA3jB,KAAA,+CA/HwF,GAkIpFke,EAAAA,OAAJ,OAC2BA,EAAAA,OAAAA,MAAAA,EAAvB,GACAoG,SAAc,YACV,IAAIH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAAA,GACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,MAKJzF,EAAJ,UAAwB,CACpB,IAAMqG,EAAWvkB,KAAKojB,KAAKvC,oCAAoCwC,EAA/D,GACMmB,EAAiBxkB,KAAKojB,KAAKqB,6CAA6CpB,EAA9E,GACA,UACI,KAAK3N,GAASoL,OAGV,GAFAnD,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,iBACA+F,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,QACIxF,EAAAA,OAAkBA,EAAAA,MAAtB,OAA6C,CACzC,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,QACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,GAGJ,UACI,KAAKjO,GAASgP,QAGV,GAFAhB,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,QAAAA,GACAA,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,SAAAA,GACIxF,EAAAA,OAAkBA,EAAAA,MAAtB,QAA8C,CAC1C,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,SACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,GAEJ,MAEJ,KAAKjO,GAASiP,OACV,GAAIzG,EAAAA,OAAkBA,EAAAA,MAAtB,OAA6C,CACzC,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,QACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,IAKZ,MAEJ,KAAKjO,GAASiP,OAGV,GAFAhH,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,iBACA+F,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,QACIxF,EAAAA,OAAkBA,EAAAA,MAAtB,OAA6C,CACzC,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,QACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,GAGJ,UACI,KAAKjO,GAASgP,QAGV,GAFAhB,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,QAAAA,GACAA,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,SAAAA,GACIxF,EAAAA,OAAkBA,EAAAA,MAAtB,QAA8C,CAC1C,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,SACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,IAKZ,MAEJ,KAAKjO,GAASkP,SAGV,GAFAjH,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,mBACA+F,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,UACIxF,EAAAA,OAAkBA,EAAAA,MAAtB,SAA+C,CAC3C,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,UACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,GAGJ,UACI,KAAKjO,GAASgP,QACV,GAAIxG,EAAAA,OAAkBA,EAAAA,MAAtB,QAA8C,CAC1CwF,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,UAAAA,GACAA,GAAAA,iBAAAA,EAAsCxF,EAAAA,UAAtCwF,SAAAA,GACA,IAAIS,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,SACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,GAEJ,MAEJ,KAAKjO,GAASiP,OACV,GAAIzG,EAAAA,OAAkBA,EAAAA,MAAtB,OAA6C,CACzC,IAAIiG,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCxF,EAAAA,MAArCwF,QACAS,EAAAA,aAAoBjG,EAApBiG,MAAAA,GACAA,EAAAA,aAAAA,EAAoCjG,EAAAA,WAApCiG,cACAR,EAAAA,YAAAA,MASxB,UAlQR,6CAqQI,gBAAoH,WAChHhG,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,sBACAA,GAFgH,GAIhH+F,GAAAA,kBAJgH,GAOhHmB,EAAAA,KAAa,cACT,IAAMpB,EAAU,0CADuB,GAGvC9F,GAAS,QAAQ,OAAT,6BAA+C,uCAAvDA,IACAxU,EAAAA,YAAAA,MAEJC,EAAAA,2BAAAA,WAlRR,mBAqRI6U,aArRJ,K,0NCMA,IAAM6G,GAAUjlB,GAAAA,CAAhB,eACMklB,GAAgBllB,GAAAA,CAAtB,sBAEMmlB,GAAAA,SAAAA,G,QA2DF,cAAwC,aACpC,cAAMA,EAAN,YAA6Chd,IAA7C,MAEA,iBAEA,WAAgB,IAAImb,GAAiB,GAArB,MALoB,IASpC,+BAAoC,uCAApC,IACA,oBAAyB,4BAAzB,IACA,6BAAkC,qCAAlC,IACA,8BAAmC,sCAAnC,IACA,+BAAoC,uCAApC,IACA,8BAAmC,sCAAnC,IACA,4BAAiC,oCAAjC,IACA,6BAAkC,qCAAlC,IAEA,cAAmB,sBAlBiB,IAqBpC,cAAmB,IAAIvY,IAAvB,GACA,uCAA0C5C,EAA1C,OACAiH,GAAuBjM,cAAvBiM,gBAAAA,GAAAA,IAEA6V,GAAQ,6BAAgC9c,IAzBJ,E,4GA8BxCoH,2BAAAA,SAAAA,GACI0V,GAAAA,iDACAA,GAAAA,GACA9kB,KAAA,gBACAA,KAAA,6BAAkCgI,EAAlC,K,EAGJqH,4BAAAA,SAAAA,GACIyV,GAAQ,yBAAD,EAAPA,cACA9kB,KAAA,6BAAkCgI,EAAlC,K,EAGJsH,6BAAAA,SAAAA,GACIwV,GAAQ,yBAAD,EAAPA,cACA9kB,KAAA,6BAAkCgI,EAAlC,K,EAGJiI,4BAAAA,SAAAA,GACI6U,GAAQ,qCAARA,GACA9kB,KAAA,6BAAkCgI,EAAlC,K,EAGJgI,0BAAAA,SAAAA,GACI8U,GAAQ,mCAARA,GACA9kB,KAAA,6BAAkCgI,EAAlC,K,EAGJiW,iBAAAA,WACI,kCADe,MAGM7U,EAAE,IAAI4b,EAHZ,mBAKfC,GAAAA,qBAAsCjlB,KAAtCilB,oB,EAIJzB,8BAAAA,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,K,EAIJsiB,sCAAAA,SAAAA,EAAAA,EAAAA,GACI/b,EAAAA,UAAyBvG,EAAzBuG,U,EAGJ0X,oCAAAA,SAAAA,EAAAA,GACI,IAAIte,EAASmT,GAASoL,OAOtB,OANAiE,GAAAA,+BACAA,GAHyD,GAKpDpZ,GAAY3I,cAAZ2I,eAAyC/I,EAA9C,YACIL,EAASmT,GAASkP,UAEtB,G,EAGJH,6CAAAA,SAAAA,EAAAA,GACI,IAAIliB,EAASmT,GAASoL,OAWtB,OAVAiE,GAAc,yCAAyCniB,EAFW,UAI9DqM,GAAuBjM,cAAvBiM,gBAAqDrM,EAAzD,YACImiB,GAAAA,gBACAxiB,EAASmT,GAASiP,QAElB1V,GAAuBjM,cAAvBiM,cAAmDrM,EAAvD,YACImiB,GAAAA,cACAxiB,EAASmT,GAASgP,SAEtB,G,EAIJS,kBAAAA,SAAAA,EAAAA,GAQI,GAPA5G,EAAAA,iBACAA,EAAAA,kBACAuG,GAAQ,QAAQM,EAAAA,KAAT,kBAAkCA,EAAAA,KAAlC,MAH8B,aAKrC7G,EAAAA,OAAAA,UALqC,IAQjCve,KAAKqlB,YAAY5iB,cAAcuF,EAAgC,CAACqC,IAAK+a,EAAAA,KAAQzjB,OAAjF,IAEA,IAAM2jB,EAAqBtlB,KAAKqlB,YAAYxjB,eAAemG,GAE3D,GADA8c,GAAQ,6CACJQ,EAAAA,QAA6BN,EAAjC,UAA2D,CACvDF,GADuD,4CAGvD,IAAMliB,EAAO0iB,EAAb,QACAtlB,KAAA,gCAAqCgI,EAArC,QAGJhI,KAAA,8BAAmCgI,EAAgC,CAC/DqC,IAAK+a,EAAAA,KAD0D,MAE/DrgB,SAAUqgB,EAAAA,KAAQG,QAFtB,K,EAOJtE,6BAAAA,SAAAA,EAAAA,GAOI,GANI5f,IAAS2G,IACT8c,GAAAA,gCACAD,EAAW7kB,KAAKqlB,YAAYxjB,eAAemG,GAC3C8c,GAAAA,GACA,yDAEAzjB,IAAS2G,EAAmB,CAG5B,IAAIwd,EAAarb,GAAWnH,cAHA,sBAKtBiiB,EAAe7b,EAAE,IAAI4b,EALC,mBAOtBS,EAAN,GACAZ,EAAAA,SAAiB,YACb,IAAMa,EAAc,CAChBH,MAAO3iB,EADS,SAEhBjB,MAAOiB,EAAKyH,KAEZmb,IAAe5iB,EAAnB,UAAkC6iB,EAAAA,KALN,MAOhCR,EAAAA,aAA0B,CAACU,OAAQF,IACnCR,EAAAA,aAAAA,SAAoC,CAACW,UAAD,EAAkBC,UAAW,M,EAMzEvI,WAAAA,SAAAA,EAAAA,EAAAA,GAEI,GAAIiE,IAAevhB,KAAKogB,mBAAmB0F,aAAa,GAAxD,KAAiE,CAC7D,GAAIna,GAAY3I,cAAZ2I,sBAAgD6U,EAApD,UAEI,YADAsE,GAAWtE,EAAJ,SAAPsE,kCAGJnZ,GAAY3I,cAAZ2I,uBAAiD6U,EAAjD7U,UAGJ,GAAI4V,IAAevhB,KAAKogB,mBAAmB0F,aAAa,GAAxD,KAAiE,CAC7D,GAAIna,GAAY3I,cAAZ2I,oBAA8C6U,EAAlD,UAEI,YADAsE,GAAWtE,EAAJ,SAAPsE,sCAGJnZ,GAAY3I,cAAZ2I,qBAA+C6U,EAA/C7U,Y,EAIRiV,wBAAAA,SAAAA,EAAAA,GACI,OAAOjZ,EAAOC,EAAd,I,EAGJwV,YAAAA,SAAAA,EAAAA,GACI2H,GAAAA,GACAD,GAAQ,sBAAsBtE,EAAvB,qBAAwDA,EAAxD,GAAPsE,uBACA9kB,KAAA,gCAAqCgI,EAArC,EAAmFhI,KAAnF,6B,EAIJqf,aAAAA,SAAAA,EAAAA,GACI,IAAM/Q,EAAWW,GAAuBjM,cAAvBiM,kBAAuDuR,EAAxE,UACArW,GAAWnH,cAAXmH,eAAAA,I,EAxPF6a,CAAuBnD,IAAvBmD,GAIKe,kBAA2B,sBAJhCf,GAKKgB,UAAmB,GALxBhB,GAOKiB,UAAqC,CACxCC,WAAY,CACRC,mBADQ,qBAERC,a9BWa,c8BTjBC,mBALwC,IAMxCC,yBAA0B,CAAC,CAACjlB,KAAD,OAAeM,MAAO,MACjD4kB,eAPwC,4EAQxCC,MARwC,MASxClG,QAAS3K,GAAQkB,OACjB4P,UAAW,CACP3F,OADO,0BAEP8D,SAFO,wBAGPD,OAHO,uBAIPD,QAAS,0BAEbJ,MAAO,CACHxD,OADG,iBAEH8D,SAFG,iBAGHD,OAHG,eAIHD,QAAS,6BAEbhE,OAAQ,CACJgG,iBADI,uCAEJC,gBAFI,OAGJC,mBAHI,OAIJC,QAJI,EAKJC,aALI,EAMJjK,OAAQ,CACJkK,cADI,6CAEJC,YAAa,oBAEjBC,KAAM,CACF9hB,KAAM+C,EACNvC,KAAMuC,IAGd4d,aAAc,CACV,CACIzkB,KADJ,YAEI0lB,cAFJ,gDAGIC,YAAa,oBAEjB,CACI3lB,KADJ,QAEI0lB,cAFJ,mDAGIC,YAAa,uBA2M7B,Y,0NCjQA,IAAME,GAAWrnB,GAAAA,CAAjB,gBAEMsnB,GAAAA,SAAAA,G,QAmCF,aAAc,aACV,cAAMA,EAAN,UAA6B,IAA7B,EAA6Dnf,IAA7D,MAnCMof,gBAA+B,KAqCrC,WAAgB,IAAIjE,GAAiB,GAArB,MAHN,IAOV,wBAA6B,gCAA7B,IACA,uBAA4B,+BAA5B,IACA,oBAAyB,4BAAzB,IAEAlU,GAAuBjM,cAAvBiM,YAAAA,GAAAA,IAXU,E,4GAcd2R,wBAAAA,SAAAA,EAAAA,GACI,O9BtDD,SAAoBhZ,EAApB,GACH,OAAQA,EAAAA,WAAmBC,EAA3B,S8BqDWwf,CAAWzf,EAAlB,I,EAGI0f,mBAAR,WACIJ,GAAAA,oCACA,IAAIrC,EAAWlZ,GAAY3I,cAA3B,cACAkkB,GAAAA,GACAlnB,KAAA,4BAAiCgI,EAAjC,O,EAGJwH,wBAAAA,SAAAA,GAAuD,U,EAEvDL,qBAAAA,SAAAA,GACI+X,GAAAA,6BACAlnB,KAAA,sB,EAIJie,iBAAAA,WACI,wCACAje,KAAA,2BAAAA,MACAA,KAAA,sB,EAGJwjB,8BAAAA,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,U,EAGJsiB,sCAAAA,SAAAA,EAAAA,EAAAA,GACI/b,EAAAA,UAAyBvG,EAAAA,MAAAA,KAAzBuG,M,EAGJ0X,oCAAAA,SAAAA,EAAAA,GACI,IAAIte,EAASmT,GAASkP,SAOtB,OANI5kB,KAAJ,iBACQA,KAAKonB,gBAAgB9Y,WAAa1L,EAAtC,WACIL,EAASmT,GAASiP,QAI1B,G,EAGJF,6CAAAA,SAAAA,EAAAA,GACI,OAAOzkB,KAAK6gB,oCAAoCxf,EAAhD,I,EAIJkmB,eAAAA,SAAAA,GACI,IAAIriB,EAAOyG,GAAY3I,cAAZ2I,WAAX,GACA3L,KAAA,kBACkCA,KAAlC,iCAAyEA,KAAzE,iBACAA,KAAA,sB,EAIJ8P,sBAAAA,WACQ9P,KAAJ,iBACI2L,GAAY3I,cAAZ2I,aAAuC3L,KAAKonB,gBAA5Czb,UAEJ3L,KAAA,sB,EAGJkQ,kBAAAA,SAAAA,GACIlQ,KAAA,kBACkCA,KAAlC,iCAAyEA,KAAzE,iBACAA,KAAA,sB,EAGJ+gB,sCAAAA,SAAAA,EAAAA,GACI,OAAOne,EAAP,kB,EAGJ2a,cAAAA,SAAAA,EAAAA,GACI,U,EAGJH,YAAAA,SAAAA,EAAAA,GACI8J,GAAS,iBAAiB1G,EAA1B0G,UACAvb,GAAY3I,cAAZ2I,UAAoC6U,EAApC7U,UACI3L,KAAKonB,iBAAoBpnB,KAAKonB,gBAAgB9Y,WAAakS,EAA/D,WACsCxgB,KAAlC,mCAA2EA,KAA3E,iBACAA,KAAA,sBAEJA,KAAA,sB,EAIJwd,cAAAA,SAAAA,GACQxd,KAAJ,kBACsCA,KAAlC,mCAA2EA,KAA3E,iBACAA,KAAA,uB,EAIR+hB,OAAAA,WACI/hB,KAAA,cAAAA,O,EAGJqd,eAAAA,SAAAA,K,EACAC,WAAAA,SAAAA,EAAAA,EAAAA,K,EACA8B,gBAAAA,SAAAA,EAAAA,K,EACA1B,YAAAA,SAAAA,EAAAA,K,EACA2B,aAAAA,SAAAA,EAAAA,GACIrf,KAAA,kBACAA,KAAA,sB,EAGJsf,eAAAA,SAAAA,EAAAA,GACItf,KAAA,qBACAA,KAAA,sB,EAEJyd,cAAAA,SAAAA,K,EAEAtN,8BAAAA,SAAAA,K,EACAZ,yBAAAA,SAAAA,EAAAA,K,EAEAgQ,cAAAA,SAAAA,EAAAA,GACI,U,EAxKF4H,CAAqBtF,IAArBsF,GAGalB,UAAqC,CAChDC,WAAY,CACRC,mBADQ,WAERC,a/Bca,Y+BZjBC,mBALgD,IAMhDC,yBAA0B,CAAC,CAACjlB,KAAD,OAAeM,MAAO,MACjD4kB,eAPgD,4EAQhDC,MARgD,WAShDlG,QAAS3K,GAAQiF,OACjB6L,UAAW,CACP3F,OADO,GAEP8D,SAFO,uBAGPD,OAHO,0BAIPD,QAAS,IAEbhE,OAAQ,CACJgG,iBADI,uCAEJC,gBAFI,OAGJC,mBAHI,OAIJC,QAJI,EAKJhK,OAAQ,CACJkK,cADI,6CAEJC,YAAa,kCAEjBQ,MAAO,CACHC,YADG,OAEHC,eAAgB,yCA8IhC,YCzLA,IAAMC,GAAa9nB,GAAAA,CAAnB,qBAkHA,SAhHM+nB,WAIF,cACI5nB,KAAA,QACAA,KAAA,MAFsC,GAItCA,KAAA,UAAiBA,KAAK6nB,UAAU7jB,KAAhChE,MACAA,KAAA,UAAiBA,KAAK8nB,UAAU9jB,KAAhChE,M,2BAGG+nB,QAAP,cACIJ,GAAW,oDAAoDjT,EAA/DiT,aACA,IAAMK,EAAgBlf,SAAAA,eAAwB4L,EAA9C,aACA,IACIiT,GAAW,oDAAoDjT,EAArD,YAAViT,YACAvE,EAAAA,eAAAA,IAEJpjB,KAAA,cACAojB,EAAAA,iBAAAA,O,EAIGnF,iBAAP,WAEIje,KAAA,UAFsB,MAKtB,IAAMioB,EAAcnf,SAAAA,eAAwB9I,KAAKkoB,MAAjD,IACA,UAAID,EAAJ,CAEA,IAAME,EAAgBF,EAAAA,cAAtB,UACA,GACIE,EAAAA,iBAAAA,QAAwCnoB,KAAxCmoB,WAGJnoB,KAAA,eAAmB,YACfojB,EAAAA,wB,EAIDyE,UAAP,YACI,GAAWtJ,EAAAA,iBACXve,KAAA,eACAA,KAAA,eAAmB,YACfojB,EAAAA,a,EAID0E,UAAP,YACI,IAAIM,EAAOpoB,KAAKkoB,MAAhB,aACInd,OAAAA,WAAJ,MACIqd,EAAAA,OAEArd,OAAAA,WAAJ,MACIqd,EAAAA,QAEJpoB,KAAA,a,EAGIqoB,SAAR,YACI,IAAMJ,EAAcnf,SAAAA,eAAwB9I,KAAKkoB,MAAjD,IACA,UAAID,EAEJ,OAAQjoB,KAAKkoB,MAAb,UACI,KAAKtS,GAAgB0S,KAIrB,KAAK1S,GAAgB2S,MACjBN,EAAAA,MAAAA,MAAAA,EACA,MAEJ,KAAKrS,GAAgB4S,OAIrB,KAAK5S,GAAgB6S,IACjBR,EAAAA,MAAAA,OAAAA,I,EAMZ5K,eAAAA,SAAAA,K,EACAC,WAAAA,SAAAA,EAAAA,EAAAA,K,EACAC,cAAAA,SAAAA,EAAAA,GAAuD,U,EACvDH,YAAAA,SAAAA,EAAAA,K,EACAgC,gBAAAA,SAAAA,EAAAA,K,EACAC,aAAAA,SAAAA,EAAAA,K,EACAC,eAAAA,SAAAA,EAAAA,K,EACA5B,YAAAA,SAAAA,EAAAA,K,EAMAD,cAAAA,SAAAA,GACIzd,KAAA,iB,EAEJwd,cAAAA,SAAAA,GACIxd,KAAA,iB,EAGJuf,cAAAA,SAAAA,EAAAA,GACI,U,EA1GFqI,G,kGCLAc,GAAAA,SAAAA,G,QAaF,aAAc,OACV,YAAMA,EADI,oB,0FAbZA,CAA0Bd,IAA1Bc,GACKC,aAA4B,CAC/B3T,GAD+B,oBAE/B4T,aAF+B,MAG/BC,SAAUjT,GAAgB0S,MAJ5BI,GAOKI,kBAAoB,CACvBC,eADuB,iBAEvBC,WAFuB,yBAGvBtc,QAAS,wBAQjB,Y,kGClBMuc,GAAAA,SAAAA,G,QAYF,aAAc,OACV,YAAMA,EADI,oB,0FAZZA,CAAyBrB,IAAzBqB,GACKN,aAA4B,CAC/B3T,GAD+B,cAE/B4T,aAF+B,MAG/BC,SAAUjT,GAAgB2S,OAJ5BU,GAOKH,kBAAoB,CACvB/a,SADuB,WAEvBL,QAAS,eAQjB,Y,kGCjBqBwb,GAAAA,SAAAA,G,QAYjB,aAAc,OACV,YAAMA,EADI,oB,0FAZGA,CAA6BtB,IAA7BsB,GACVP,aAA4B,CAC/B3T,GAD+B,uBAE/B4T,aAF+B,MAG/BC,SAAUjT,GAAgB0S,MAJbY,GAOVJ,kBAAoB,CACvB7I,UAAW,0BCYnB,IAAMkJ,GAAiBtpB,GAAAA,CAAvB,uBAEMupB,GAAAA,WA8BF,cACIppB,KAAA,eACAA,KAAA,gBAFoC,KAKpCA,KAAA,iBAAwBA,KAAKqpB,iBAAiBrlB,KAA9ChE,MACAA,KAAA,sBAA6BA,KAAK8P,sBAAsB9L,KAAxDhE,MACAA,KAAA,qBAA4BA,KAAKmP,qBAAqBnL,KAAtDhE,MACAA,KAAA,kBAAyBA,KAAKkQ,kBAAkBlM,KAAhDhE,MACAA,KAAA,eAAsBA,KAAKspB,eAAetlB,KAA1ChE,MACAA,KAAA,UAAiBA,KAAKoF,UAAUpB,KAAhChE,MACAA,KAAA,kBAAyBA,KAAKmlB,kBAAkBnhB,KAAhDhE,MAEAiP,GAAuBjM,cAAvBiM,YAAAA,MACAjP,KAAA,sCAA2CgI,EAA3ChI,M,2BAGJ+G,gBAAAA,WACI,0B,EAGJwY,cAAAA,SAAAA,EAAAA,GACI,U,EAGJiC,2CAAAA,SAAAA,EAAAA,GACI,MAAM,IAAIvM,MAAV,4B,EAEJwM,2CAAAA,SAAAA,EAAAA,GACI,MAAM,IAAIxM,MAAV,4B,EAEJoJ,WAAAA,WACI,MAAM,IAAIpJ,MAAV,4B,EAGJkJ,eAAAA,SAAAA,K,EACAH,iBAAAA,SAAAA,K,EAEAwF,8BAAAA,SAAAA,EAAAA,GACI,MAAM,IAAIvO,MAAV,4B,EAEJsU,wCAAAA,SAAAA,EAAAA,GACI,MAAM,IAAItU,MAAV,4B,EAEJ2L,wBAAAA,SAAAA,EAAAA,GACI,MAAM,IAAI3L,MAAV,4B,EAEJ4L,oCAAAA,SAAAA,EAAAA,GACI,MAAM,IAAI5L,MAAV,4B,EAEJwP,6CAAAA,SAAAA,EAAAA,GACI,MAAM,IAAIxP,MAAV,4B,EAEJ8L,sCAAAA,SAAAA,EAAAA,GACI,MAAM,IAAI9L,MAAV,4B,EAEJ+L,2CAAAA,SAAAA,EAAAA,GACI,MAAM,IAAI/L,MAAV,4B,EAEJgM,6BAAAA,SAAAA,EAAAA,GACI,MAAM,IAAIhM,MAAV,4B,EAGJqK,eAAAA,SAAAA,EAAAA,GACI6J,GAAe,oBAAoB3I,EAArB,SAAd2I,eACInpB,KAAKonB,iBAAoB5G,EAAAA,WAA0BxgB,KAAKonB,gBAA5D,WACIpnB,KAAA,qBACAA,KAAA,kBACAA,KAAA,iB,EAKRqf,aAAAA,SAAAA,EAAAA,GACIrf,KAAA,kBACIA,KAAJ,kBACImpB,GAAe,oBAAoB3I,EAArB,SAAd2I,aACAnpB,KAAA,kBACAA,KAAA,cAAmBA,KAAnB,mB,EAIRud,cAAAA,SAAAA,EAAAA,GACI,U,EAGJH,YAAAA,SAAAA,EAAAA,GACI+L,GAAe,iBAAiB3I,EAAlB,SAAd2I,aACInpB,KAAKonB,iBAAoBpnB,KAAKonB,gBAAgB9Y,WAAakS,EAA/D,WACIxgB,KAAA,kBACAA,KAAA,cAAmBA,KAAnB,mB,EAIRwd,cAAAA,SAAAA,GACIxd,KAAA,qBACAA,KAAA,kBACAA,KAAA,gB,EAGJspB,eAAAA,SAAAA,GAEI,GADAH,GAAAA,mCACInpB,KAAJ,gBAA0B,CAEtB,IAAMwe,EAAoBD,EAAAA,aAAAA,QAA1B,IACME,EAAgBnY,KAAAA,MAAtB,GACA6iB,GAAAA,GAEI1K,EAAa,cAAqBvW,IAElCyD,GAAY3I,cAAZ2I,WAAqC8S,EAArC9S,SAA6D3L,KAAKonB,gBAAlEzb,UACAnC,EAAAA,cAAAA,KAAAA,OAAAA,WAA0DiV,EAA1DjV,SAAAA,oB,EAMZ2F,qBAAAA,SAAAA,GACIga,GAAAA,6BACAnpB,KAAA,kBACAA,KAAA,kB,EAGJqpB,iBAAAA,SAAAA,GAII,GAHA9K,EAAAA,iBACAA,EAAAA,kBACA4K,GAAAA,0BACInpB,KAAJ,gBAA0B,CAEtB,GAAIA,KAAKwpB,WAAT,IAAsBxpB,KAAKwpB,UAAU7nB,MAAMwM,OAAO1G,OAF5B,OAItB,IAAMgiB,EAAiBzpB,KAAKwpB,UAAU7nB,MAJhB,OAMtB3B,KAAA,mBAEA,IAAI0pB,EAA8B/d,GAAY3I,cAAZ2I,YAAsC3L,KAAKonB,gBAA3Czb,SAAAA,EAAqFjI,EAASqC,OAAhI,IACA,KAAiB,CAEb,IAAI4jB,EAAY3pB,KAAK4pB,eAFR,GAIblG,GAAAA,eAAAA,M,EAKZzF,iBAAAA,WAAmB,WAEfje,KAAA,WAAkB8I,SAAAA,eAAwBsgB,EAF3B,WAIfppB,KAAA,UAAiB8I,SAAAA,eAAwBsgB,EAJ1B,WAMfppB,KAAA,SAAgB8I,SAAAA,eAAwBsgB,EANzB,WAQfppB,KAAA,kBAAyB8I,SAAAA,eAAwBsgB,EARlC,iBAUfppB,KAAA,gBAAuB8I,SAAAA,eAAwBsgB,EAVhC,aAYfppB,KAAA,YAAmB8I,SAAAA,eAAwBsgB,EAZ5B,eAcfppB,KAAA,eAAsB8I,SAAAA,eAAwBsgB,EAA9C,yBAEAppB,KAAA,yCAA8C,YAC1CmpB,GAAAA,gBACI,EAAJ,iBAA0B5K,EAAAA,oBAE9Bve,KAAA,oCAA0CA,KAA1C,gBAGAA,KAAA,mCAAyCA,KAAzC,kBACAA,KAAA,yCAA+CA,KAA/C,WAEAA,KA1Be,kBA8BMoJ,EAAE,IAAIggB,EA9BZ,yBAgCfnE,GAAAA,qBAAsCjlB,KAAtCilB,oB,EAGJE,kBAAAA,SAAAA,EAAAA,GACI5G,EAAAA,iBACAA,EAAAA,kBACA4K,GAAe,QAAQ/D,EAAAA,KAAT,kBAAkCA,EAAAA,KAAlC,MAHuB,aAKrC7G,EAAAA,OAAAA,UALqC,GAQjCve,KAAJ,iBAA0B2L,GAAY3I,cAAZ2I,WAAqCyZ,EAAAA,KAArCzZ,MAAoD3L,KAAKonB,gBAAzDzb,UAC1BnC,EAAAA,cAAAA,KAAAA,OAAAA,WAA0D4b,EAAAA,KAA1D5b,MAAAA,kB,EAGJogB,eAAAA,SAAAA,GACI,IAAIC,EAAgB/gB,SAAAA,cAApB,OAGA,GAFA4a,GAAAA,iBAAAA,EAF0C,WAI1C,IAAIzd,EAAAA,KAAAA,OAAAA,OAAkC,CAClC,IAAI6jB,EAAkBhhB,SAAAA,cAAtB,OACA4a,GAAAA,iBAAAA,EAAAA,kBACAoG,EAAAA,UAA4B7jB,EAA5B6jB,QACAD,EAAAA,YAAAA,OACG,CAEH,GAAI5jB,EAAAA,OAAiB0F,GAAY3I,cAAjC,iBACI0gB,GAAAA,iBAAAA,EAAAA,kBACG,CACH,IAAIoG,EAAkBhhB,SAAAA,cAAtB,OACA4a,GAAAA,iBAAAA,EAAAA,kBACAoG,EAAAA,UAA4B7jB,EAAAA,KAAAA,MAAuBkH,GAAAA,CAAOlH,EAAD,QAANkH,kBAAAA,OAAnD2c,eACAD,EAAAA,YAAAA,GAGJ,IAAIjG,EAAY9a,SAAAA,cAAhB,OACI7C,EAAAA,OAAiB0F,GAAY3I,cAAjC,iBACI0gB,GAAAA,iBAAAA,EAAAA,sBAEAA,GAAAA,iBAAAA,EAAAA,mBAEJE,EAAAA,UAAsB3d,EAAtB2d,QACAiG,EAAAA,YAAAA,GAIJ,OADA7pB,KAAA,0BACA,G,EAGJ+pB,qBAAAA,SAAAA,GAAuC,WACnCrG,GAAAA,kBAA8B1jB,KAA9B0jB,YACA,IAAIiG,EAAJ,KACAjc,EAAAA,SAAAA,SAAyB,YACrBic,EAAY,iBAAZA,MAGJ,GAAejG,GAAAA,SAAAA,I,EAGnBsG,cAAAA,SAAAA,GACIb,GAAe,YAAYzb,EAAb,SAAdyb,cACInpB,KAAJ,iBACQA,KAAKonB,gBAAgB9Y,WAAaZ,EAAtC,WACI1N,KAAA,kBACA2L,GAAY3I,cAAZ2I,aAAuC+B,EAFa,UAIpD1N,KAAA,0B,EAMZ8P,sBAAAA,WACQ9P,KAAJ,kBACI2L,GAAY3I,cAAZ2I,aAAuC3L,KAAKonB,gBADtB,UAGtBpnB,KAAA,qBAA0BA,KAA1B,kBAEJA,KAAA,mB,EAGJkQ,kBAAAA,SAAAA,GACIlQ,KAAA,kBACAA,KAAA,kB,EAGIoF,UAAR,YACImZ,EAAAA,iBACAA,EAAAA,kBACIve,KAAJ,kBACI2L,GAAY3I,cAAZ2I,UAAoC3L,KAAKonB,gBAAzCzb,UACA3L,KAAA,qBACAA,KAAA,eACAA,KAAA,oB,EAIAiqB,gBAAR,WACQjqB,KAAJ,iBACQA,KAAJ,WAAoBA,KAAKwpB,UAAUU,gBAAgB,YAC/ClqB,KAAJ,WAAoBA,KAAKwpB,UAAUU,gBAAgB,YAC/ClqB,KAAJ,mBAA4BA,KAAKmqB,kBAAkBD,gBAAgB,YAC/DlqB,KAAJ,iBAA0BA,KAAKoqB,gBAAgBF,gBAAgB,YAC3DlqB,KAAJ,gBAAyBA,KAAKqqB,eAAeH,gBAAgB,cAEzDlqB,KAAJ,WAAoBA,KAAKwpB,UAAUc,aAAa,WAAY,QACxDtqB,KAAJ,WAAoBA,KAAKwpB,UAAUc,aAAa,WAAY,QACxDtqB,KAAJ,mBAA4BA,KAAKmqB,kBAAkBG,aAAa,WAAY,QACxEtqB,KAAJ,iBAA0BA,KAAKoqB,gBAAgBE,aAAa,WAAY,QACpEtqB,KAAJ,gBAAyBA,KAAKqqB,eAAeC,aAAa,WAAY,U,EAKtEC,aAAR,WACI7G,GAAAA,kBAA8B1jB,KAA9B0jB,a,EAGJ7c,aAAAA,SAAAA,EAAAA,EAAAA,GACI,GAAIxF,IAAS2G,EAAmB,CAE5B,IAAMid,EAAe7b,EAAE,IAAIggB,EAFC,uBAIxB5D,EAAarb,GAAWnH,cAJA,sBAMtByiB,EAAN,GACApa,EAAAA,SAAiB,YACb,IAAMqa,EAAc,CAChBH,MAAO3iB,EADS,SAEhBjB,MAAOiB,EAAKyH,KAGZmb,IAAe5iB,EAAnB,UAAkC6iB,EAAAA,KANN,MAQhCR,EAAAA,aAA0B,CAACU,OAAQF,IACnCR,EAAAA,aAAAA,SAAoC,CAACW,UAAD,EAAkBC,UAAW,M,EAOzE/e,sBAAAA,SAAAA,EAAAA,EAAAA,GACI9G,KAAA,iBAAqCA,KAAKqH,aAAaxF,eAAvD,K,EAGJ8E,wBAAAA,SAAAA,EAAAA,EAAAA,K,EACAC,wBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,K,EAEAuJ,8BAAAA,SAAAA,K,EACAZ,yBAAAA,SAAAA,EAAAA,K,EACAC,wBAAAA,SAAAA,GAAsD,U,EAEtD4P,gBAAAA,SAAAA,EAAAA,K,EACA9B,WAAAA,SAAAA,EAAAA,EAAAA,K,EACAD,eAAAA,SAAAA,K,EACAI,cAAAA,SAAAA,K,EACAC,YAAAA,SAAAA,EAAAA,K,EAEAU,QAAAA,WACI,MpCjWiB,W,EoCoWrB2D,OAAAA,WACI/hB,KAAA,cAAAA,O,EAGJse,mBAAAA,WACI,U,EAGJP,YAAAA,a,EAKA+D,OAAAA,a,EAEAxZ,KAAAA,a,EAjYE8gB,GAAAA,GACaoB,UAAoB,aADjCpB,GAEaqB,UAAoB,UAFjCrB,GAGasB,gBAA0B,gBAHvCtB,GAIauB,UAAoB,UAJjCvB,GAKawB,cAAwB,cALrCxB,GAMayB,YAAsB,YANnCzB,GAOa0B,wBAAkC,0BA+XrD,Y,0NCjZA,IAAMhG,GAAUjlB,GAAAA,CAAhB,uBACMklB,GAAgBllB,GAAAA,CAAtB,8BAEMkrB,GAAAA,SAAAA,G,QAmDF,cAAwC,aACpC,cAAMA,EAAN,YAAiD/iB,IAAjD,MAEA,SAAgB,IAAImb,GAAiB,GAArB,MAHoB,IAMpC,6BAAkC,qCAAlC,IACA,8BAAmC,sCAAnC,IACA,+BAAoC,uCAApC,IACA,8BAAmC,sCAAnC,IACA,4BAAiC,oCAAjC,IACA,6BAAkC,qCAAlC,IAEAlU,GAAuBjM,cAAvBiM,gBAAAA,GAAAA,IAboC,E,4GAgBxCgP,iBAAAA,WACI,wCACAje,KAAA,2BAAAA,O,EAKJoP,2BAAAA,SAAAA,GACI0V,GAAAA,iDACA9kB,KAAA,qC,EAGJqP,4BAAAA,SAAAA,GACIyV,GAAQ,yBAAD,EAAPA,cACA9kB,KAAA,qC,EAGJsP,6BAAAA,SAAAA,GACIwV,GAAQ,yBAAD,EAAPA,cACA9kB,KAAA,qC,EAGJiQ,4BAAAA,SAAAA,GACI6U,GAAQ,qCAARA,GACA9kB,KAAA,qC,EAIJwjB,8BAAAA,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,K,EAIJsiB,sCAAAA,SAAAA,EAAAA,EAAAA,GACI/b,EAAAA,UAAyBvG,EAAzBuG,U,EAGJ0X,oCAAAA,SAAAA,EAAAA,GACI,IAAIte,EAASmT,GAASoL,OAKtB,OAHKnV,GAAY3I,cAAZ2I,eAAyC/I,EAA9C,YACIL,EAASmT,GAASkP,UAEtB,G,EAGJH,6CAAAA,SAAAA,EAAAA,GACI,IAAIliB,EAASmT,GAASoL,OAWtB,OAVAiE,GAAc,yCAAyCniB,EAFW,UAI9DqM,GAAuBjM,cAAvBiM,gBAAqDrM,EAAzD,YACImiB,GAAAA,gBACAxiB,EAASmT,GAASiP,QAElB1V,GAAuBjM,cAAvBiM,cAAmDrM,EAAvD,YACImiB,GAAAA,cACAxiB,EAASmT,GAASgP,SAEtB,G,EAMJzD,6BAAAA,SAAAA,EAAAA,GAA0D,MAElD+J,EAAJ,GACMje,EAAW,SAAG/M,KAAH,qBAAG,iBAAkCgI,GACtD,GACI+E,EAAAA,SAAc,YACNpB,GAAY3I,cAAZ2I,sBAAgDrB,EAApD,WACI0gB,EAAAA,KAAAA,MAKZ,yD,EAKJ3N,eAAAA,SAAAA,K,EAEArN,0BAAAA,SAAAA,GACIhQ,KAAA,qC,EAGJwd,cAAAA,SAAAA,K,EACAF,WAAAA,SAAAA,EAAAA,EAAAA,GAEI,GAAIiE,IAAevhB,KAAKogB,mBAAmB0F,aAAa,GAAxD,KAAiE,CAC7D,GAAIna,GAAY3I,cAAZ2I,oBAA8C6U,EAAlD,UAEI,YADAsE,GAAWtE,EAAJ,SAAPsE,kCAGJnZ,GAAY3I,cAAZ2I,qBAA+C6U,EAA/C7U,Y,EAIR4R,cAAAA,SAAAA,EAAAA,GACI,U,EAGJH,YAAAA,SAAAA,EAAAA,GACI0H,GAAQ,kBAAkBtE,EAAnB,qBAAoDA,EAApD,GAAPsE,uBACAnZ,GAAY3I,cAAZ2I,4BAAsD6U,EAAtD7U,W,EAGJyT,gBAAAA,SAAAA,EAAAA,K,EACAE,eAAAA,SAAAA,EAAAA,K,EAGA5B,YAAAA,SAAAA,EAAAA,GACIoH,GAAQ,yBAAyBmG,EAAjCnG,UACInZ,GAAY3I,cAAZ2I,sBAAgDsf,EAApD,UACInG,GAAWmG,EAAJ,SAAPnG,kCAIJnZ,GAAY3I,cAAZ2I,uBAAiDsf,EAAjDtf,W,EAGJ0T,aAAAA,SAAAA,EAAAA,GACI,IAAM/Q,EAAWW,GAAuBjM,cAAvBiM,kBAAuDuR,EAAxE,UACArW,GAAWnH,cAAXmH,eAAAA,I,EAGJsT,cAAAA,SAAAA,K,EAEA8B,cAAAA,SAAAA,EAAAA,GACI,U,EArMFwL,CAA0BlJ,IAA1BkJ,GACK9E,UAAqC,CACxCC,WAAY,CACRC,mBADQ,iBAERtH,KAAM,CACFG,WAAW,CAAC9W,GACZ4W,YAAY,CAAC5W,IAEjBke,arCca,kBqCZjBC,mBATwC,IAUxCC,yBAA0B,CAAC,CAACjlB,KAAD,OAAeM,MAAO,MACjD4kB,eAXwC,4EAYxCC,MAZwC,MAaxClG,QAAS3K,GAAQiF,OACjB6L,UAAW,CACP3F,OADO,0BAEP8D,SAFO,wBAGPD,OAHO,uBAIPD,QAAS,0BAEbJ,MAAO,CACHxD,OADG,iBAEH8D,SAFG,iBAGHD,OAHG,eAIHD,QAAS,6BAEbhE,OAAQ,CACJgG,iBADI,uCAEJC,gBAFI,OAGJC,mBAHI,OAIJC,QAJI,EAKJC,aALI,EAMJjK,OAAQ,CACJkK,cADI,6CAEJC,YAAa,oBAEjBC,KAAM,CACF9hB,KAAM+C,EACNvC,KAAMuC,IAGd4d,aAAc,CACV,CACIzkB,KADJ,QAEI0lB,cAFJ,mDAGIC,YAAa,uBA4J7B,Y,0NC9MA,IAAMlC,GAAUjlB,GAAAA,CAAhB,uBAEMqrB,GAAAA,SAAAA,G,QAyCF,cAAwC,aACpC,cAAMA,EAAN,YAA+CljB,IADX,MAIpC,SAAgB,IAAImb,GAAiB,GAArB,MAJoB,IAQpC,6BAAkC,qCAAlC,IACA,8BAAmC,sCAAnC,IACA,+BAAoC,uCAApC,IACA,8BAAmC,sCAAnC,IACA,4BAAiC,oCAAjC,IACA,6BAAkC,qCAAlC,IAEAlU,GAAuBjM,cAAvBiM,gBAAAA,GAAAA,IAfoC,E,4GAkBxCgP,iBAAAA,WACI,wCACAje,KAAA,iBAAAA,O,EAGJud,cAAAA,SAAAA,EAAAA,GAAuD,U,EACvDF,eAAAA,SAAAA,K,EAEAD,YAAAA,SAAAA,EAAAA,GAEI0H,GAAQ,gBAAgBtE,EAAjB,qBAAkDA,EAAlD,GAAPsE,uBACAnZ,GAAY3I,cAAZ2I,0BAAoD6U,EAApD7U,W,EAGJ0T,aAAAA,SAAAA,EAAAA,GACI,MAAM,IAAIpK,MAAV,4B,EAGJmK,gBAAAA,SAAAA,EAAAA,GACI,MAAM,IAAInK,MAAV,4B,EAGJqI,WAAAA,SAAAA,EAAAA,EAAAA,GACI,MAAM,IAAIrI,MAAV,4B,EAGJuI,cAAAA,SAAAA,GACI,MAAM,IAAIvI,MAAV,4B,EAGJwI,cAAAA,SAAAA,GACI,MAAM,IAAIxI,MAAV,4B,EAIJ7F,2BAAAA,SAAAA,K,EACAC,4BAAAA,SAAAA,K,EACAC,6BAAAA,SAAAA,K,EACAW,4BAAAA,SAAAA,K,EAEAD,0BAAAA,SAAAA,GACI8U,GAAQ,mCAARA,GACA9kB,KAAA,qC,EAGJklB,sCAAAA,SAAAA,EAAAA,EAAAA,GACI/b,EAAAA,UAAyBvG,EAAzBuG,U,EAGJsb,6CAAAA,SAAAA,EAAAA,GACI,OAAO/O,GAASgP,S,EAIpBlB,8BAAAA,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,K,EAGJqe,6BAAAA,SAAAA,EAAAA,GAA0D,MAElDkK,EAAJ,GACMpe,EAAW,SAAG/M,KAAH,qBAAG,iBAAkCgI,GACtD,GACI+E,EAAAA,SAAc,YACNpB,GAAY3I,cAAZ2I,oBAA8CrB,EAAlD,WACI6gB,EAAAA,KAAAA,MAKZ,yD,EAGJzN,YAAAA,SAAAA,EAAAA,GACQ/R,GAAY3I,cAAZ2I,oBAA8Csf,EAAlD,UACInG,GAAWmG,EAAJ,SAAPnG,sCAIJnZ,GAAY3I,cAAZ2I,qBAA+Csf,EAA/Ctf,W,EAGJ2T,eAAAA,SAAAA,EAAAA,K,EAEAC,cAAAA,SAAAA,EAAAA,GACI,U,EAhJF2L,CAAwBrJ,IAAxBqJ,GACajF,UAAqC,CAChDC,WAAY,CACRC,mBADQ,eAERC,atCoBa,esCnBbvH,KAAM,CACFG,WAAW,CAAC9W,EAA0BA,GACtC4W,YAAY,CAAC5W,KAGrBme,mBATgD,IAUhDC,yBAA0B,CAAC,CAACjlB,KAAD,OAAeM,MAAO,MACjD4kB,eAXgD,4EAYhDC,MAZgD,MAahDlG,QAAS3K,GAAQiF,OACjB6L,UAAW,CACP3F,OADO,0BAEP8D,SAFO,wBAGPD,OAHO,uBAIPD,QAAS,0BAEbJ,MAAO,CACHxD,OADG,iBAEH8D,SAFG,iBAGHD,OAHG,eAIHD,QAAS,6BAEbhE,OAAQ,CACJgG,iBADI,uCAEJC,gBAFI,OAGJC,mBAHI,OAIJC,QAJI,EAKJC,aALI,EAMJjK,OAAQ,CACJkK,cADI,6CAEJC,YAAa,sBAmH7B,YCxJA,IAAMrJ,GAAW9d,GAAAA,CAAjB,qBAEaurB,GAAb,WAUI,kBAAuG,KAL/FC,sBAAyC,KAKsD,KAJ/FC,2BAAyC,KAIsD,KAH/FC,uBAAkC,KAG6D,KAF/FC,oBAA6B,EAGjCxrB,KAAA,OACAA,KAAA,eACAA,KAAA,SAbR,4CAgBIie,WAAyB,WAErBje,KAAA,oBAA2B+K,OAA3B,WAEAA,OAAAA,iBAAAA,UAAiC,YAC7B,IAAM0gB,EAAiB1gB,OAAvB,WACI2gB,GAAJ,EACID,EAAiB,EAArB,qBACQ,sBAAJ,IACQA,GAAJ,KAEIC,GAAAA,EACA/N,GAAAA,wDAGJ,sBAAJ,IACQ8N,GAAJ,KAEIC,GAAAA,EACA/N,GAAAA,yDAGJ,sBAAJ,IACQ8N,GAAJ,KAEIC,GAAAA,EACA/N,GAAAA,0DAKJ,uBAAJ,IACQ8N,EAAJ,KAEI9N,GAAAA,iDACA+N,GAAAA,GAGJ,uBAAJ,IACQD,EAAJ,KACI9N,GADsC,kDAGtC+N,GAAAA,GAGJ,uBAAJ,IACQD,EAAJ,KACI9N,GADqC,iDAGrC+N,GAAAA,IAIZ,wBACI,yBAA8B,EAA9B,wBAA6D,EAA7D,4BAAJ,GACI,6CAAgD,EAAhD,sBAA2E,EAA3E,2BAA2G,EAA3G,4BAvEhB,wCA8EI,cAA6F,WACnFpI,EAAkBtjB,KAAKojB,KAA7B,qBACMG,EAAkBvjB,KAAKojB,KAAKI,8BAA8BH,EAAhE,GACM9F,EAAgBvd,KAAKojB,KAAK5B,2CAA2C6B,EAA3E,GAEA1F,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,4BACAA,GAAAA,GAEA,IAAMgO,EAAmB3rB,KAAKojB,KAA9B,wBAGIK,EAAuB3a,SAAAA,cAAuB6iB,EAAlD,oBAOA,GANAjI,GAAAA,iBAAAA,EAAsCiI,EAAtCjI,gBACAA,GAAAA,cAAAA,EAAmCiI,EAAnCjI,0BACAD,EAAAA,aAAqBkI,EAArBlI,MAAAA,GACAA,EAAAA,aAAAA,EAAsCkI,EAAAA,WAAtClI,cAGIkI,EAAAA,OAAJ,WAAwC,CACpC,IAAIC,EAAe9iB,SAAAA,cAAuB6iB,EAAAA,OAAAA,WAA1C,aACAjI,GAAAA,iBAAAA,EAA2CiI,EAAAA,OAAAA,WAA3CjI,gBACAA,GAAAA,cAAAA,EAAwCiI,EAAAA,OAAAA,WAAxCjI,mBACAkI,EAAAA,aAA0BD,EAA1BC,MAAAA,GACAA,EAAAA,aAAAA,EAA2CD,EAAAA,WAA3CC,cACAnI,EAAAA,YAAAA,GACAzjB,KAAA,qDAKJ,IAAI2jB,EAAJ,EACA,GAAIgI,EAAAA,OAAJ,iBAA8C,CAC1C,IAAI/H,EAAyB9a,SAAAA,cAA7B,OAaA,GAZA4a,GAAAA,iBAAAA,EAAwCiI,EAAAA,OAAxCjI,kBACAE,EAAAA,aAAuB+H,EAAvB/H,MAAAA,GACAA,EAAAA,aAAAA,EAAwC+H,EAAAA,WAAxC/H,cAGAD,EAAS7a,SAAAA,cAAuB6iB,EAAAA,OAAhChI,iBACAD,GAAAA,iBAAAA,EAAqCiI,EAAAA,OAArCjI,oBACAC,EAAAA,aAAoBgI,EAApBhI,MAAAA,GACAA,EAAAA,aAAAA,EAAqCgI,EAAAA,WAArChI,cAEAC,EAAAA,YAAAA,GAEI+H,EAAAA,cAAiCA,EAAAA,OAArC,OAAqE,CACjE,IAAI7H,EAAYhb,SAAAA,cAAuB9I,KAAK0U,OAAOmX,gBAAnD,aAuCA,GAtCAnI,GAAAA,iBAAAA,EAAwC1jB,KAAK0U,OAAOmX,gBAApDnI,gBAEAE,EAAAA,YAAAA,GAGI+H,EAAJ,cACIA,EAAAA,aAAAA,SAAsC,YAElC,GAD+B,kDAAqD1H,EAArD,OAA/B,GAC4B,CAExB,IAAIC,EAAsBpb,SAAAA,cAA1B,UAOA,GANAob,EAAAA,aAAAA,OAAAA,UACAR,GAAAA,iBAAAA,EAAqCO,EAArCP,eACAA,GAAAA,cAAAA,EAAiCO,EAAjCP,YACIO,EAAJ,aACIC,EAAAA,UAAmBD,EAAnBC,YAEAD,EAAJ,YAA6B,CACzB,IAAIE,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCO,EAArCP,aACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAA,EAAAA,aAAAA,GAAiDF,EAAjDE,MACAD,EAAAA,YAAAA,GAEJA,EAAAA,aAAoByH,EAApBzH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCyH,EAAAA,WAArCzH,cACAA,EAAAA,aAAAA,GAAiDD,EAAjDC,MAEAA,EAAAA,iBAAAA,SAAiC,YAC7B3F,EAAAA,iBACAA,EAAAA,kBACA,wCAEJuF,EAAAA,YAAAA,OAIR6H,EAAAA,OAAAA,QAAAA,GAAJ,EAAyE,CACrE,IAAIvH,EAA8Btb,SAAAA,cAAlC,UAOA,GANAsb,EAAAA,aAAAA,OAAAA,UACAV,GAAAA,iBAAAA,EAA6CiI,EAAAA,OAAAA,OAA7CjI,eACAA,GAAAA,cAAAA,EAA0CiI,EAAAA,OAAAA,OAA1CjI,YACIiI,EAAAA,OAAAA,OAAJ,aACIvH,EAAAA,UAA2BuH,EAAAA,OAAAA,OAA3BvH,YAEAuH,EAAAA,OAAAA,OAAJ,YAAgD,CAC5C,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,OAAAA,OAArCjI,aACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAC,EAAAA,YAAAA,GAEJA,EAAAA,aAA4BuH,EAA5BvH,MAAAA,GACAA,EAAAA,aAAAA,EAA6CuH,EAAAA,WAA7CvH,cACAA,EAAAA,iBAAAA,SAAyC,YACrC7F,EAAAA,iBACAA,EAAAA,kBACA,0CAEJuF,EAAAA,YAAAA,IAKRL,EAAAA,YAAAA,GAEIkI,EAAAA,OAAJ,OACIlI,EAAAA,aAAAA,YAAAA,QACAA,EAAAA,iBAAAA,YAAsCzjB,KAAKqkB,aAA3CZ,iBAGAkI,EAAAA,OAAJ,QACIlI,EAAAA,iBAAAA,QAAkCzjB,KAAKqkB,aAAvCZ,gBAaR,GAPAE,EAAAA,aAAoBgI,EAApBhI,MAAAA,GACAA,EAAAA,aAAAA,EAAqCgI,EAAAA,WAArChI,cACoB3jB,KAAKojB,KAAK8B,sCAAsCvB,EAAQN,EAhIa,GAqIrFsI,EAAJ,UAAgC,CAC5B,IAAMpH,EAAWvkB,KAAKojB,KAAKvC,oCAAoCwC,EAA/D,GACMmB,EAAiBxkB,KAAKojB,KAAKqB,6CAA6CpB,EAA9E,GACA,UACI,KAAK3N,GAASoL,OAGV,GAFAnD,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,iBACA+F,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,QACIiI,EAAAA,OAA0BA,EAAAA,MAA9B,OAA6D,CACzD,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,QACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,GAGJ,UACI,KAAKjO,GAASgP,QAGV,GAFAhB,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,QAAAA,GACAA,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,SAAAA,GACIiI,EAAAA,OAA0BA,EAAAA,MAA9B,QAA8D,CAC1D,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,SACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,GAEJ,MAEJ,KAAKjO,GAASiP,OACV,GAAIgH,EAAAA,OAA0BA,EAAAA,MAA9B,OAA6D,CACzD,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,QACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,IAKZ,MAEJ,KAAKjO,GAASiP,OAGV,GAFAhH,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,iBACA+F,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,QACIiI,EAAAA,OAA0BA,EAAAA,MAA9B,OAA6D,CACzD,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,QACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,GAGJ,UACI,KAAKjO,GAASgP,QAGV,GAFAhB,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,QAAAA,GACAA,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,SAAAA,GACIiI,EAAAA,OAA0BA,EAAAA,MAA9B,QAA8D,CAC1D,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,SACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,IAKZ,MAEJ,KAAKjO,GAASkP,SAGV,GAFAjH,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,mBACA+F,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,UACIiI,EAAAA,OAA0BA,EAAAA,MAA9B,SAA+D,CAC3D,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,UACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,GAGJ,UACI,KAAKjO,GAASgP,QACV,GAAIiH,EAAAA,OAA0BA,EAAAA,MAA9B,QAA8D,CAC1DjI,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,UAAAA,GACAA,GAAAA,iBAAAA,EAAsCiI,EAAAA,UAAtCjI,SAAAA,GACA,IAAIS,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,SACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,GAEJ,MAEJ,KAAKjO,GAASiP,OACV,GAAIgH,EAAAA,OAA0BA,EAAAA,MAA9B,OAA6D,CACzD,IAAIxH,EAASrb,SAAAA,cAAb,KACA4a,GAAAA,iBAAAA,EAAqCiI,EAAAA,MAArCjI,QACAS,EAAAA,aAAoBwH,EAApBxH,MAAAA,GACAA,EAAAA,aAAAA,EAAqCwH,EAAAA,WAArCxH,cACAR,EAAAA,YAAAA,MASxB,UA9TR,6CAiUI,gBACIhG,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,+BACAA,GAFqH,GAIrH+F,GAAAA,kBAJqH,GAOrH,IAAMoI,EAAkBjH,EAP6F,OAUjHkH,EAAc/rB,KAAK0U,OAAOqX,YAA9B,OACIhhB,OAAAA,YAAJ,KACIghB,EAAc/rB,KAAK0U,OAAOqX,YAA1BA,OAEAhhB,OAAAA,YAAJ,KACGghB,EAAc/rB,KAAK0U,OAAOqX,YAA1BA,QAEChhB,OAAAA,YAAJ,KACIghB,EAAc/rB,KAAK0U,OAAOqX,YAA1BA,OAKJ,IAAMC,EAAeC,KAAAA,KAAUH,EAA/B,GACAnO,GAAS,QAAQ3d,KAAKojB,KAAd,mFAARzF,GACA,IAAK,IAAIuO,EAAT,EAAuBA,EAAvB,EAAgDA,IAAY,CAExD,IAAIC,EAAiBrjB,SAAAA,cAAuB9I,KAAK0U,OAAO0X,aAAxD,aACA1I,GAAAA,iBAAAA,EAA6C1jB,KAAK0U,OAAO0X,aAAzD1I,gBACAA,GAAAA,cAAAA,EAA0C1jB,KAAK0U,OAAO0X,aAJE,mBAOxD,IAAIC,EAAQvjB,SAAAA,cAAuB9I,KAAK0U,OAAO4X,IAA/C,aACA5I,GAAAA,iBAAAA,EAAoC1jB,KAAK0U,OAAO4X,IAAhD5I,gBACAA,GAAAA,cAAAA,EAAiC1jB,KAAK0U,OAAO4X,IAA7C5I,mBACAyI,EAAAA,YAVwD,IAanD,IAACD,GAAmBlsB,KAAK0U,OAAO6X,oBAAsB1W,GAAY2W,OACjEN,IAAcF,EAAf,GAAqChsB,KAAK0U,OAAO6X,oBAAsB1W,GAAY4W,QACpF/I,GAAAA,iBAAAA,EAA6C1jB,KAAK0U,OAAOgY,UAAzDhJ,gBACAA,GAAAA,cAAAA,EAA0C1jB,KAAK0U,OAAOgY,UAAtDhJ,oBAKJ,IAFA,IAAIiJ,EAAYT,EAAhB,EAEOS,GAAcT,EAAD,GAAbS,GAA+CA,EAAtD,GAAoF,CAChFhP,GAAS,YAAD,iBAARA,GACA,IAAM/a,EAAOiiB,EAAb,GAGI+H,EAAJ,EACI5sB,KAAK0U,OAAT,+BACIkY,EAAkB9jB,SAAAA,cAAuB9I,KAAK0U,OAAOmY,6BAArDD,aACAlJ,GAAAA,iBAAAA,EAA8C1jB,KAAK0U,OAAOmY,6BAA1DnJ,gBACAA,GAAAA,cAAAA,EAA2C1jB,KAAK0U,OAAOmY,6BAAvDnJ,mBACA2I,EAAAA,YAAAA,IAGJ,IAAMS,EAAS9sB,KAAK+sB,sCAAsC1J,EAA1D,GACAuJ,EAAAA,YAAAA,GACAD,IAIJxjB,EAAAA,YAAAA,GAGJC,EAAAA,2BAAAA,UAEApJ,KAAA,wBACAA,KAAA,6BACAA,KAAA,0BAzYR,KCfO,SAASgtB,GAAaC,EAAtB,GACH,IAAMtU,EAD8D,4BAI9DuU,EAAyBvU,EAAAA,KAA/B,GACMwU,EAAyBxU,EAAAA,KAA/B,GAEA,GAAIuU,GAAJ,EAAsC,CAGlC,IAAME,EAA+BH,EAAAA,MAArC,KACMI,EAA+BC,EAAAA,MAArC,KAGIC,EAP8B,EAc9BC,EALqBtgB,SAASkgB,EAAoBA,EAAAA,OAAtD,IACyBlgB,SAASmgB,EAAoBA,EAAAA,OAAtD,IAKIG,GAAJ,KACID,EAAAA,EACAC,GAAAA,IAGJ,IAGIC,EAHqBvgB,SAASkgB,EAAoBA,EAAAA,OAAtD,IACyBlgB,SAASmgB,EAAoBA,EAAAA,OAAtD,IAEA,EACII,GAAJ,KACIF,EAAAA,EACAE,GAAAA,IAIJ,IAAIC,EAAJ,EACA,GAAIN,EAAAA,SACAM,EAAiBxgB,SAASkgB,EAA1BM,KAEJ,IAAIC,EAAJ,EACA,GAAIN,EAAAA,SACAM,EAAiBzgB,SAASmgB,EAA1BM,KAIJ,IAAIC,EAAWF,EAAAA,EAAf,EAEA,OAAWE,EAAD,EAAeA,EAAf,IAAV,KAA8CH,EAAD,GAAkB,IAAlB,EAA7C,QAA6FD,EAAD,GAAkB,IAAlB,EAA5F,GAGA,c,yOC/BR,IAAM3S,GAAShb,GAAAA,CAAf,iBAQaguB,GAAb,Y,QA0FI,aAAc,aACV,cAAMA,EAAAA,UAAN,iBAA+C1jB,GAAWnH,cAA1D,kBAA2FgF,IAA3F,MAJI8lB,aAA0B,KAK9B,WAAgB,IAAI1C,GAAqB,GAAzB,SAAoCyC,EAApD,WACA,oCAHU,E,EA1FlB,G,EAAA,G,uEAAA,yCAgGItQ,SAAAA,EAAAA,GACI,OAAQiD,EAAR,WAjGR,0BAoGII,SAAAA,EAAAA,GACI,OAAO9Y,EAAYF,EAAnB,IArGR,gCAwGI4b,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,KAzGR,2BA+GI,YACI,IAAIL,EAAyB,CACzBwrB,OADyB,EAEzBC,SAFyB,EAGzBvlB,SAAS,SAGb,GAAI7F,EAAJ,UACI,IAAK,IAAI+J,EAAT,EAAmBA,EAAQ/J,EAAAA,UAA3B,OAAiD+J,IAAS,CACtD,IAAMshB,EAAWrrB,EAAAA,UAAjB,GACAL,EAAAA,QAAiB0rB,EAAjB1rB,OACAA,EAAAA,UAAmB0rB,EAAnB1rB,SACAA,EAAAA,SAAkByqB,GAAazqB,EAAD,SAAiB0rB,EAA/C1rB,UAGR,UA9HR,wCAiII2iB,SAAAA,EAAAA,EAAAA,GACI,IAAIgJ,EAAUluB,KAAKmuB,yBAAnB,GACIC,EAAJ,GACAA,GAAU,0BAA0BjhB,GAAAA,CAAOvK,EAAD,UAANuK,kBAAAA,OAA9B,yBAANihB,QACAA,GAAAA,2CACAA,GAAU,0DAA0DF,EAA9D,SAANE,QACIF,EAAAA,OAAJ,IAA0BE,GAAU,8DAA8DF,EAAlE,OAANE,SACtBF,EAAAA,SAAJ,IAA0BE,GAAU,iEAAiEF,EAArE,SAANE,SAC1BA,GAAAA,QACAjlB,EAAAA,UAAAA,GA1IR,6CA6IIqY,SAAAA,EAAAA,GACI,OAAQ5e,EAAR,WA9IR,6CAiJI8e,SAAAA,EAAAA,EAAAA,GACI,IAAInf,GAAJ,EAWA,MAVA,aAAIgf,GACK3e,EAAD,YAAJ,IAAyBA,EAAAA,YACrBL,GAAAA,GAGR,aAAIgf,IACA,IAAI3e,EAAAA,YACAL,GAAAA,GAGR,GA7JR,sCAgKIse,SAAAA,EAAAA,GACI,IAAIte,EAASmT,GAASkP,SAMtB,OALIhiB,EAAJ,YACI,IAAIA,EAAAA,YACAL,EAASmT,GAASiP,QAG1B,GAvKR,2CA0KIhE,SAAAA,EAAAA,EAAAA,GAGI,GAFI3gB,KAAJ,cAAuBA,KAAK8tB,aAD4D,UAGpFlrB,EAAJ,UAAoB,CAChB,IAAM0gB,EAAkBtjB,KAAxB,qBACMujB,EAAkBvjB,KAAKwjB,8BAA8BniB,EAA3D,GAEIgtB,EAASvlB,SAAAA,cAAb,UACA4a,GAAAA,cAAAA,EAAiC,CAAC,CAACriB,KAAD,QAAcM,MAAM,6BACtD0sB,EAAAA,aAAoBruB,KAAKogB,mBAAzBiO,MAAAA,GACAA,EAAAA,aAAAA,EAAqCruB,KAAKogB,mBAAmB8F,WAP7C,cAWhB,IAAIoI,EAAJ,GACI5c,EAAJ,GACI6c,EAAJ,GACIC,EAAJ,GAEA5rB,EAAAA,UAAAA,SAAuB,YC1N5B,IAAwB6rB,ED2NfH,EAAAA,MAAAA,IC3NeG,ED2NYR,EAAD,MCxNlCQ,QDwNQH,GCvNR,EAGGG,EAAAA,MAAAA,EDoNKH,ICpNZ,QDqNY,WAAIL,EAAAA,MACAvc,EAAAA,KAAUuc,EAAVvc,UACA6c,EAAAA,KAAcV,EAAdU,UACAC,EAAAA,KAAcX,EAAdW,gBAGA9c,EAAAA,KAAUuc,EAAVvc,QACA6c,EAAAA,KAAcV,EAAdU,YACAC,EAAAA,KAAcX,EAAdW,oBAGR,IAYM9Z,EAAS,CACXvP,KADW,MAEXuM,KAdY,CACZ4c,OADY,EAEZI,SAAU,CAAC,CACPnJ,MADO,YAEP7T,KAFO,EAGPid,gBAHO,EAIPC,YAJO,EAKPC,YAAa,KAQjBC,QAAS,CACLC,YADK,EAELC,WAFK,EAGLC,qBAHK,EAILC,OAAQ,CACJC,EAAG,CACCC,aAAa,MAM7BvU,GAxDgB,GA2DhB7a,KAAA,aAAoB,IAAI,GAAJ,IAApB,GACAmJ,EAAAA,YAAAA,KAzOZ,aAoPI,gBACI,qCADiE,GAG7DoY,IAAesM,EAAAA,UAAAA,iBAAAA,aAAAA,GAAnB,MAEI1jB,GAAWnH,cAAXmH,oCAAAA,GAIAoX,IAAesM,EAAAA,UAAAA,iBAAAA,aAAAA,GAAnB,MAEIwB,GAAIrsB,cAAJqsB,sBA/PZ,O,0NAAaxB,GAEM5H,UAA+B,CAC1C8F,YAAa,CACTuD,MADS,EAETC,OAFS,EAGTC,MAHS,EAITC,OAAQ,GAEZrD,aAAc,CACV1E,eADU,gBAEVD,YAAa,OAEjBiF,UAAW,CACPjF,YADO,GAEPC,eAAgB,UAEpB6E,kBAAkB1W,GAAY4W,KAC9BH,IAAK,CACD5E,eADC,MAEDD,YAAa,OAEjBoF,6BAA8B,CAC1BpF,YAD0B,MAE1BC,eAAgB,2BAEpBmE,gBAAiB,CACbpE,YADa,MAEbC,eAAe,gDAEnBiE,iBAAkB,CACdzF,WAAY,CACRC,mBADQ,WAERC,azCvBS,WyCwBTvH,KAAM,CACFC,YAAa,CAAC5W,GACd8W,WAAY,CAAC9W,KAGrBme,mBATc,MAUdE,eAVc,OAWdC,MAXc,MAYdlG,QAAS3K,GAAQiF,OACjB6L,UAAW,CACP3F,OADO,WAEP8D,SAFO,WAGPD,OAHO,WAIPD,QAAQ,YAEZhE,OAAQ,CACJgG,iBADI,YAEJC,gBAFI,MAGJC,mBAHI,GAIJC,QAJI,EAKJhK,OAAQ,CACJkK,cADI,oCAEJC,YAFI,0BAGJhE,WAAW,CAAC,CAAC3hB,KAAD,cAAoBM,MAAM,WAAW,CAACN,KAAD,iBAAuBM,MAAM,OAAO,CAACN,KAAD,QAAcM,MAAM,yBAE7G+tB,WAAY,CACRjI,YADQ,MAERC,eAAe,KAGvB5B,aAAc,CACV,CACIzkB,KADJ,WAEIsuB,WAFJ,GAGI5I,cAHJ,yCAIIC,YAJJ,cAKIhE,WAAW,CAAC,CAAC3hB,KAAD,cAAoBM,MAAM,WAAW,CAACN,KAAD,iBAAuBM,MAAM,OAAO,CAACN,KAAD,QAAcM,MAAM,iEAG7G,CACIN,KADJ,WAEIsuB,WAFJ,GAGI3I,YAHJ,wBAIID,cAJJ,yCAKI/D,WAAW,CAAC,CAAC3hB,KAAD,cAAoBM,MAAM,WAAW,CAACN,KAAD,iBAAuBM,MAAM,OAAO,CAACN,KAAD,QAAcM,MAAM,sCA9EhHksB,GA8OM+B,WAAa,uBA9OnB/B,GA+OMgC,SAAW,wBA/OjBhC,GAiPMiC,eAAgB,kBAjPtBjC,GAkPMkC,aAAe,mBEjQlC,ICmBA,GA8EA,GDjGMlV,GAAShb,GAAAA,CAAf,uBAEamwB,GAAb,Y,QA0DI,cAAuC,aACnC,cAAMA,EAAN,YAAiDhoB,IAAjD,MACA,SAAgB,IAAImb,GAAiB,GAArB,MAAhB,IAFmC,E,EA1D3C,G,EAAA,G,uEAAA,yCAgEI5F,SAAAA,EAAAA,GAGI,OAFA1C,GAAO,cAAPA,GACAA,GAAO2F,EAAY,cACfA,EAAY,WACRA,EAAY,YAAsBrW,GAAWnH,cAAjD,wBApEZ,0BA2EI4d,SAAAA,EAAAA,GACI,OAAO9Y,EAAYF,EAAnB,IA5ER,gCA+EI4b,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,KAhFR,wCAmFIsiB,SAAAA,EAAAA,EAAAA,GACI/b,EAAAA,UAAyBvG,EAAzBuG,MApFR,6CAuFIqY,SAAAA,EAAAA,GAGI,OAFA3G,GAAO,yBAAPA,GACAA,GAAOjY,EAAI,cACPA,EAAI,WACAA,EAAI,YAAsBuH,GAAWnH,cAAzC,wBA3FZ,aAkGIsa,SAAAA,EAAAA,EAAAA,GACI,qCAD0D,GAGtDiE,IAAeyO,EAAAA,UAAAA,aAAAA,GAAnB,MAEI7lB,GAAWnH,cAAXmH,4BAAAA,IAvGZ,OAAa6lB,GAEM/J,UAAqC,CAChDC,WAAY,CACRC,mBADQ,gBAERC,aAAcje,GAElBke,mBALgD,IAMhDC,yBAA0B,CAAC,CAACjlB,KAAD,OAAeM,MAAO,MACjD4kB,eAPgD,4EAQhDC,MARgD,MAShDlG,QAAS3K,GAAQiF,OACjB6L,UAAW,CACP3F,OADO,GAEP8D,SAFO,wBAGPD,OAHO,0BAIPD,QAAS,IAEbJ,MAAO,CACHxD,OADG,GAEH8D,SAFG,GAGHD,OAHG,GAIHD,QAAS,IAEbhE,OAAQ,CACJgG,iBADI,uCAEJC,gBAFI,OAGJC,mBAHI,OAIJC,QAJI,EAKJvC,MAAM,cACF,OAAI1hB,EAAJ,KACI,WAAIA,EAAAA,KACO,CAAP,uBAGO,CAAP,wBAGR,IAEJia,OAAQ,CACJkK,cADI,6CAEJC,YAFI,iCAGJhE,WAAW,CAAC,CAAC3hB,KAAD,cAAoBM,MAAM,WAAW,CAACN,KAAD,iBAAuBM,MAAM,SAAS,CAACN,KAAD,QAAcM,MAAM,gCAE/GslB,KAAM,CACF9hB,KAAM+C,EACNvC,KAAMuC,IAGd4d,aAAc,CAAC,CACXzkB,KADW,eAEX0lB,cAFW,mDAGXC,YAHW,gCAIXhE,WAAW,CAAC,CAAC3hB,KAAD,cAAoBM,MAAM,WAAW,CAACN,KAAD,iBAAuBM,MAAM,SAAS,CAACN,KAAD,QAAcM,MAAM,iD,SCrC3GsuB,GAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,K,SA8EAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,QAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,S,CAAAA,KAAAA,GAAAA,KAWL,ICxHP,GCFA,GAWA,GF+GaC,GAAN,W,SCxHKC,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,SAAAA,EAAAA,WAAAA,aAAAA,EAAAA,mBAAAA,qBAAAA,EAAAA,UAAAA,YAAAA,EAAAA,OAAAA,SAAAA,EAAAA,aAAAA,eAAAA,EAAAA,MAAAA,QAAAA,EAAAA,SAAAA,WAAAA,EAAAA,eAAAA,iBAAAA,EAAAA,QAAAA,UAAAA,EAAAA,SAAAA,WAAAA,EAAAA,UAAAA,YAAAA,EAAAA,UAAAA,Q,CAAAA,KAAAA,GAAAA,K,SCFAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,YAAAA,GAAAA,cAAAA,EAAAA,EAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,KAAAA,GAAAA,K,SAWAC,GAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,MAAAA,GAAAA,Q,CAAAA,KAAAA,GAAAA,KCJZ,IAAMzV,GAAShb,GAAAA,CAAf,sBACMoW,GAAUpW,GAAAA,CAAhB,mCAuCa0wB,GAAb,WAaI,aACIvwB,KAAA,aAdR,cAII,WAII,OAHMuwB,EAAN,YACIA,EAAAA,UAA8B,IAA9BA,GAEGA,EAAP,WARR,mCAiBI,WACI,4BAlBR,gBAqBI,cAAgE,WAC5D1V,GAAO,uBAAuB2V,EAAxB,6BAAyDC,EAA/D5V,mBAOA,IAAI6V,EAAiCF,EAAAA,wBAA6BC,EAAlE,mBACA,MAEI,OADAxa,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,kBAAPxa,yBACA,EAGJ,IAAI0a,EAAiC,CACjCD,YADiC,EAEjC1f,SAAUyf,EAFuB,SAGjCG,gBAHiC,GAIjCC,gBAAiB,IAIrBJ,EAAAA,WAAAA,SAAwB,YAEpB,IAAMK,EAAF,SAAyBA,EAA7B,kBAEI,OADA7a,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,kBAAPxa,2DACA,EAGJ,GAAK6a,EAAD,QAAuBA,EAA3B,kBAAyD,CACrDjW,GAAO,wBAAwB2V,EAAzB,6BAA0DC,EAA1D,qCAAmGK,EAAnG,kCAA8IA,EAApJjW,QACA,IAAIkW,EAAiCP,EAAAA,wBAA6BM,EAAlE,mBACA,MAEI,OADA7a,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,qCAAsGK,EAAtG,kBAAP7a,eACA,EAEJ0a,EAAAA,gBAAAA,KAAmC,CAC/BI,YAD+B,EAE/BC,WAAYF,EAFmB,WAG/BG,OAAQH,EAAUG,SAEtBF,EAAAA,iBAAAA,QACG,GAAID,EAAJ,OACHjW,GAAO,wBAAwB2V,EAAzB,6BAA0DC,EAA1D,+BAA6FK,EAD1E,QAGzBH,EAAAA,gBAAAA,KAAmC,CAACM,OAAQH,EAAT,OAA2BE,WAAYF,EAAUE,aAEpFN,EAAAA,iBAAAA,QACG,GAAII,EAAJ,kBAAiC,CACpCjW,GAAO,wBAAwB2V,EAAzB,6BAA0DC,EAA1D,qCAAmGK,EAAzGjW,mBACA,IAAIkW,EAAiCP,EAAAA,wBAA6BM,EAAlE,mBACA,MAEI,OADA7a,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,qCAAsGK,EAAtG,kBAAP7a,eACA,EAWJ,IAAIib,EAAaH,EAAAA,qBAhBmB,KAoBpC,OAFiBL,EAAAA,qBAAjB,MAGI,KAAMnb,GAAUkB,KAChB,KAAMlB,GAAUoB,SACZ,GAAKua,IAAe3b,GAAUoB,UACzBua,IAAe3b,GAAUkB,KAE1B,OADAR,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,kBAAPxa,2CACA,EAEJ,MAEJ,KAAMV,GAAUkC,KAChB,KAAMlC,GAAUmC,UACZ,GAAKwZ,IAAe3b,GAAUkC,MACzByZ,IAAe3b,GAAUmC,UAE1B,OADAzB,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,kBAAPxa,qCACA,EAEJ,MAEJ,KAAMV,GAAUqB,QACZ,GAAKsa,IAAe3b,GAAUqB,QAE1B,OADAX,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,kBAAPxa,wCACA,EAEJ,MAEJ,KAAMV,GAAU2B,QAChB,KAAM3B,GAAUuB,MACZ,GAAKoa,IAAe3b,GAAU2B,SACzBga,IAAe3b,GAAUuB,MAE1B,OADAb,GAAQ,2BAA2Bua,EAA5B,6BAA6DC,EAA7D,kBAAPxa,uCACA,EAKZ0a,EAAAA,gBAAAA,KAAmC,CAACI,YAAD,EAA2BC,WAAYF,EAAUE,aACpFD,EAAAA,iBAAAA,OAGRlW,GAAAA,sBACAA,GAAAA,GAEA,IA/G4D,EA+GxDlO,EAAQ3M,KAAKmxB,UAAU1wB,WAAU,mBAAc2wB,EAAAA,KAAAA,UAA0BZ,EAAxC,WAgBrC,OAbI7jB,EAAJ,GACI0kB,EAAc,CACVb,KADU,EAEVc,MAAO,CAACX,IAEZ3wB,KAAA,oBAEAqxB,EAAcrxB,KAAKmxB,UAAnBE,IACAA,MAAAA,KAAAA,GAEJxW,GAAO,iCAAiC2V,EAAxC3V,SACAA,GAAAA,IAEA,GApJR,oBAuJI,cACI,OAAI6V,EAAAA,aAA2BK,EAA/B,WACW,CACHQ,YADG,EAEHtrB,QAAYyqB,EAAL,+BAA+CK,EAAAA,WAGvD,CAACQ,YAAY,IA9J5B,4BAiKI,oBACI,IAAK,IAAL,EAAsC,OADmI,EAGzK,UACI,KAAMhc,GAAUkB,KACZ+a,GAAAA,YACIN,IAAe3b,GAAUkB,OACzBgb,GAAAA,aAEJ,MAEJ,KAAMlc,GAAUoB,SACRua,IAAe3b,GAAUkB,OACzBgb,GAAAA,aAEJ,MAEJ,KAAMlc,GAAUkC,KACRyZ,IAAe3b,GAAUmC,YACzB+Z,GAAAA,OAEJ,MAEJ,KAAMlc,GAAUmC,UACZ8Z,GAAAA,MACIN,IAAe3b,GAAUmC,YACzB+Z,GAAAA,OAQZ,OAFA5W,GAAO,aAAD,0CAANA,GAEA,GACI,KAAKwV,GAAeqB,SAChB,OAAQF,EAAR,EAEJ,KAAKnB,GAAesB,cAChB,OAAQH,GAAR,EAEJ,KAAKnB,GAAeuB,iBAChB,OAAQJ,GAAR,EAEJ,KAAKnB,GAAewB,YAChB,OAAQL,EAAR,EAEJ,KAAKnB,GAAeyB,OAChB,OAAQN,IAAR,EAGR,UApNR,yBAuNI,cACI,IAAIN,EAAwBH,EAAAA,qBAA5B,KACIgB,EAAwBrB,EAAAA,qBAA5B,KACIe,EAAcV,EAAlB,WACIS,EAAcd,EAAlB,WAEA,OAAK1wB,KAAKgyB,0BAA0BD,EAAYP,EAAaN,EAAYO,EAAapB,GAAeqB,UAM9F,CAACH,YAAY,GALT,CACHA,YADG,EAEHtrB,QAAYyqB,EAAL,gCAAgDK,EAAAA,YAhOvE,8BAsOI,cACI,IAAIkB,EAAmBjyB,KAAKkyB,kBAAkBxB,EAA9C,GACA,OAAIuB,EAAJ,aACIA,EAAQjyB,KAAKmyB,uBAAuBzB,EAApCuB,IACA,WACW,CACHV,YADG,EAEHtrB,QAAYyqB,EAAL,4CAA4DK,EAAAA,WAKxE,CAACQ,YAAY,IAlP5B,sBAqPI,cACI,IAAIL,EAAwBH,EAAAA,qBAA5B,KACIgB,EAAwBrB,EAAAA,qBAA5B,KACIe,EAAcV,EAAlB,WACIS,EAAcd,EAAlB,WAEA,OAAK1wB,KAAKgyB,0BAA0BD,EAAYP,EAAaN,EAAYO,EAAapB,GAAewB,aAM9F,CAACN,YAAY,GALT,CACHA,YADG,EAEHtrB,QAAYyqB,EAAL,mCAAmDK,EAAAA,YA9P1E,eAoQI,YACI,IAAIS,EAAcT,EAD8B,WAGhD,OAAKS,GAAiBA,EAAAA,OAAAA,OAAtB,EACW,CACHD,YADG,EAEHtrB,QAAY8qB,EAAL,4BAGR,CAACQ,YAAY,IA7Q5B,kBAiRI,YACI,IAAIC,EAAcT,EADiC,WAGnD,OAAI,GAAmBS,EAAAA,OAAAA,OAAvB,EACW,CACHD,YADG,EAEHtrB,QAAY8qB,EAAL,gCAGR,CAACQ,YAAY,IA1R5B,qBA8RI,cACI,IAAIC,EAAchb,EAAlB,WAEA,GADAqE,GAAO,cAAcrE,EAAf,qDAA6EA,EAAnFqE,YACA,EAAiB,CAEb,IAAIuX,EAAkBnB,EAAAA,MAAtB,KACIoB,GAAJ,EAOA,GANAD,EAAAA,SAAe,YACPZ,IAAJ,IACI3W,GAAO,cAAcrE,EAAf,qDAA6EA,EAA7E,WAANqE,wBACAwX,GAAAA,MAGR,EACI,MAAO,CAACd,YAAW,GAG3B,MAAO,CACHA,YADG,EAEHtrB,QAAYuQ,EAAL,sCAAgDya,IAjTnE,2BAqTI,cACI,OAAOjxB,KAAKsyB,mBAAmB9b,EAA/B,IAtTR,2BAyTI,cACI,OAAOxW,KAAKsyB,mBAAmB9b,EAA/B,IA1TR,iCA6TI,cACI,IAAIyb,EAAmBjyB,KAAKkyB,kBAAkBxB,EAA9C,GACA,OAAIuB,EAAJ,aACIA,EAAQjyB,KAAKuyB,oBAAoB7B,EAAjCuB,IACA,WACW,CACHV,YADG,EAEHtrB,QAAYyqB,EAAL,+CAA+DK,EAAAA,WAI3E,CAACQ,YAAY,IAxU5B,gBA4UI,kBACI,UACI,KAAKlB,GAAeyB,OAChB,OAAO9xB,KAAKkyB,kBAAkBxB,EAA9B,GAGJ,KAAKL,GAAeqB,SAChB,OAAO1xB,KAAKmyB,uBAAuBzB,EAAnC,GAGJ,KAAKL,GAAesB,cAChB,OAAO3xB,KAAKwyB,4BAA4B9B,EAAxC,GAGJ,KAAKL,GAAewB,YAChB,OAAO7xB,KAAKuyB,oBAAoB7B,EAAhC,GAGJ,KAAKL,GAAeuB,iBAChB,OAAO5xB,KAAKyyB,+BAA+B/B,EAA3C,GAGJ,KAAKL,GAAeqC,OAChB,OAAO1yB,KAAK2yB,aAAZ,GAGJ,KAAKtC,GAAeuC,UAChB,OAAO5yB,KAAK6yB,gBAAZ,GAGJ,KAAKxC,GAAeyC,SAChB,OAAO9yB,KAAK+yB,yBAAyBhC,EAArC,KA3WhB,cAiXI,YAAyD,WACjD/f,EAAyB,CACzBwF,MAAOia,EADkB,YAEzBc,YAFyB,EAGzBvgB,SAAUyf,EAAKzf,UAoCnB,OAjCA6J,GAAO,6BAA6B4V,EAAAA,YAApC5V,SACAA,GAAAA,GACA4V,EAAAA,gBAAAA,OAA2B,YACvB5V,GAAAA,wBACAA,GAAAA,GACA,IAAIoW,EAAUH,EAAD,OAAqBA,EAArB,OAAb,GACIkC,EAAuB,gBAAmBvC,EAAnB,YAAqCK,EAArC,YAA4DA,EAA5D,WAA3B,GACA,OAAIkC,EAAJ,YACI/c,GAAAA,+BACAjF,EAAAA,YAFsB,EAIlByf,EAAAA,WAAkBH,GAAkB2C,UAASjiB,EAAAA,QAAmBgiB,EAAnBhiB,UACjD,IAEJ6J,GAAAA,gCACA,MAGC7J,EAAL,YACIyf,EAAAA,gBAAAA,SAA6B,YACzB5V,GAAAA,wBACAA,GAAAA,GACA,IAAImY,EAAuB,gBAAmBvC,EAAnB,YAAqCA,EAArC,YAAuDJ,GAAeyC,SAAUhC,EAA3G,QACA,OAAIkC,EAAJ,YACI/c,GAAAA,+BACAjF,EAAAA,YAAAA,EACAA,EAAAA,QAAmBgiB,EAAnBhiB,SACA,IAEJ6J,GAAAA,gCACA,MAGR,GAzZR,yBA4ZI,gBACI,IAAIyW,EAD2G,GAG/GzW,GAAO,0BAAD,qBAANA,GACA,IAAIlO,EAAQ3M,KAAKmxB,UAAU1wB,WAAU,mBAAc2wB,EAAAA,KAAAA,UAAd,KAgCrC,OA/BIzkB,GAAJ,GACiC3M,KAAKmxB,UADtB,GAIZ+B,MAAAA,SAAsB,YACdzC,EAAAA,YAAAA,UAAJ,GACI5V,GAAO,+BAAD,EAANA,cACI4V,EAAAA,YAAJ,UACIa,EAAAA,KAAAA,GAGArb,GAAQ,+BAAD,EAAPA,gDAGJ,GACIwa,EAAAA,gBAAAA,OAA2B,YACvB,OAAI9uB,EAAAA,YAAAA,UAAJ,IACIkZ,GAAO,+BAAD,EAANA,cACIlZ,EAAAA,YAAJ,UACI2vB,EAAAA,KAAAA,GAEArb,GAAQ,+BAAD,EAAPA,gDAEJ,SAQxB,GAhcR,mBAmcI,oBAncJ,0BAscI,gBAAwH,WACpH4E,GAAO,6CAAD,kBAAoErE,EAD0C,IAGpH,IAAM8a,EAA2BtxB,KAAKmzB,uBAAuBC,EAAQ5c,EAApC,IAAjC,GAEIjU,EAAmB,CACnBgvB,YAAW,GAef,OAZAD,EAAAA,OAAY,YACR,GAAK+B,GAAmB5C,EAAAA,WAApB,IAAJ,EAAgF,CAC5E,IAAIzf,EAAyB,cAA7B,GACA,GAAIA,EAAJ,WAII,OAHAiF,GAAQ,wBAAD,iBAA8CO,EAA9C,6BAAgFxF,EAAvFiF,SACA1T,EAAAA,YAAAA,EACAA,EAAAA,QAAiByO,EAAjBzO,SACA,EAGR,YAEJ,GA3dR,eA8dI,gBAA2F,WACvFsY,GAAO,gCAAD,kBAAuDrE,EAAvD,cADiF,GAIvF,IAAM8a,EAA2BtxB,KAAKmzB,uBAAuBC,EAAQ5c,EAApC,IAJsD,GAMnF8c,EAAJ,GAEAhC,EAAAA,SAAc,YACV,IAAItgB,EAAyB,cAA7B,GACIA,EAAJ,YACIsiB,EAAAA,KAAAA,MAIRzY,GAAO,QAAQyY,EAAT,OAfiF,iCAiBvFA,EAAAA,SAAwB,YACpB,OAAQtiB,EAAR,UACI,KAAKsf,GAAkBiD,KACnB1Y,GAAO,cAAc7J,EAAAA,MAArB6J,SACA7J,EAAAA,MAAAA,OACA,MAEJ,KAAKsf,GAAkBhoB,KACnBuS,GAAO,cAAc7J,EAAAA,MAArB6J,SACA7J,EAAAA,MAAAA,OACA,MAEJ,KAAKsf,GAAkB2C,QACnBpY,GAAO,iBAAiB7J,EAAAA,MAAxB6J,SACI7J,EAAJ,SAAsBA,EAAAA,MAAAA,WAA0BA,EAA1BA,SACtB,MAEJ,KAAKsf,GAAkBkD,MACnB3Y,GAAO,eAAe7J,EAAAA,MAAtB6J,SACA7J,EAAAA,MAAAA,gBAlgBpB,K,iNClCA,IAAM6J,GAAShb,GAAAA,CAAf,iBACM4zB,GAAU5zB,GAAAA,CAAhB,wBACMqW,GAAUrW,GAAAA,CAAhB,mCAGsB6zB,GAAtB,WAeI,gBAEI,GAFyE,KAdnEC,cAAgC,GAcmC,KAbnEC,eAAkC,GAaiC,KATnEC,MAAiC,KASkC,KARnEC,WAAqB,EAQ8C,KAPnEla,OAAiB,GAOkD,KALnEma,eAAwB,EAK2C,KAJnEC,mBAA4B,EAIuC,KAHnEC,eAAwB,EAI9Bj0B,KAAA,YAAmB8I,SAAAA,eAAnB,IACM9I,KAAN,YAAyB,MAAM,IAAIiV,MAAJ,4BAAgDkE,EAAhD,GAAN,mBAEzBnZ,KAAA,OACAA,KAAA,aACAA,KAAA,eANyE,GAUzEA,KAAA,gBAAAA,MAzBR,sCA4BI,WACI,OAAOA,KAAP,mBA7BR,UAgCIoe,WACI,OAAQpe,KAAKmZ,WAAb,aAjCR,eAoCI+a,SAAAA,EAAAA,EAAAA,GACIl0B,KAAA,qBACAA,KAAA,oBACA6a,GAAAA,qBAvCR,mBA0CIsZ,SAAAA,EAAAA,EAAAA,EAAAA,GACIn0B,KAAA,qBACA6a,GAAAA,qBA5CR,aA+DI,qBAAgH,IAA1CuZ,IAAAA,GAA6B,GAC3Fp0B,KAAJ,gBACAA,KAAA,iBACAA,KAAA,qBAlER,mBAsEI,YACIA,KAAA,wBAvER,kBA0EI,YACIA,KAAA,uBA3ER,sBAoFI,cACIA,KAAA,uBAA2B,mBAAcY,EAAAA,YAAAA,EAAd,OArFnC,oBAwFI,YACI6yB,GAAQ,qCAAqCna,EAA7Cma,aACA,IAAIlxB,EAAJ,KACA,GAAIvC,KAAJ,MAEI,IADA,IAAI2M,EAAJ,EACOA,EAAQ3M,KAAK6zB,MAAMQ,YAA1B,QAA8C,CAG1C,GADA9xB,EADmBvC,KAAK6zB,MAAMQ,YAA9B,GACS,aAAuB,mBAAcnW,EAAAA,MAAAA,KAAsB5E,EAApC,MACpB,CACRma,GAAQ,qCAAqCna,EAAtC,YAAPma,YACA,MAEJ9mB,IAGR,UAvGR,QA2GI,WAOI,GANAkO,GAAAA,kBACA7a,KAAA,sBACAA,KAAA,iBACAA,KAAA,mBAJiB,EAObA,KAAJ,MAAgB,CACZ,IAAIs0B,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAcoE,WAE7Bx0B,KAAA,sBAAoCA,KAApC,gBAEJA,KAAA,kBACAA,KAhBiB,SAkBjBA,KAAA,gBAAoB,YAChBwW,EAAAA,WAEJxW,KAAA,sBAhIR,eAmII,YAGI,GAFA6a,GAAO,0BAAPA,GACA7a,KAAA,YACIA,KAAJ,MAAgB,CACZ,IAAII,EAAYgwB,GAAcqE,OAC1Bz0B,KAAJ,WACIA,KAAA,WACAI,EAAYgwB,GAAcsE,OAG1B10B,KAAA,UAGJ,IAAIs0B,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWA,GAEfJ,KAAA,sBAAoCA,KAApC,gBAEA8zB,IAAc9zB,KAAlB,eAAsCA,KAAK20B,+BACvCb,GAAa9zB,KAAjB,eAAqCA,KAAK40B,0CAxJlD,yCA2JI,WAAmD,WAC/C/Z,GAAAA,gDACA7a,KAAA,gBAAoB,YAChBwW,EAD2B,OAG3B,IAAIxF,EAAWuf,GAAkBvtB,cAAlButB,wBAAwD,QAAxDA,GAAuE/Z,EAAvE+Z,qBAAkGD,GAAkBiD,MAC/HviB,EAAJ,aAEIwF,EAAAA,OACAN,GAAQ,SAASM,EAAV,2DAA0ExF,EAAjFkF,cApKhB,+BA0KI,WAAyC,WACrC2E,GAAAA,+BACA5Z,QAAAA,IAAAA,SACAjB,KAAA,gBAAoB,YAGhB,GAFAwW,EAAAA,OACqBA,EAArB,WACKA,EAAL,UAGO,CAGH,IAAIxF,EAAsBuf,GAAkBvtB,cAAlButB,wBAAwD,QAAxDA,GAAuE/Z,EAAvE+Z,qBAAkGD,GAAkB2C,SAC1IjiB,EAAJ,aAEIwF,EAAAA,WAAiBxF,EAAjBwF,SACAN,GAAQ,SAASM,EAAV,4DAA2ExF,EAAlFkF,WAGJlF,EAAWuf,GAAkBvtB,cAAlButB,wBAAwD,QAAxDA,GAAuE/Z,EAAvE+Z,qBAAkGD,GAAkBiD,OAC/H,aAEI/c,EAAAA,OACAN,GAAQ,SAASM,EAAV,2DAA0ExF,EAAjFkF,eAhBJ2E,GAAO,SAASrE,EAAV,QAANqE,eACArE,EAAAA,WAAoBA,EAApBA,UAAAA,8CAlLhB,iBAwMI,WAOI,GANAxW,KAAA,sBACA6a,GAAAA,uBACA7a,KAAA,QACAA,KAAA,kBACAA,KAAA,iBACAA,KAAA,qBACIA,KAAJ,MAAgB,CACZ,IAAII,EAAYgwB,GAAcyE,SAE1BP,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWA,GAEfJ,KAAA,eACAA,KAAA,sBAAoCA,KAApC,gBAGJ,OADAA,KAAA,gBACOA,KAAP,gBA3NR,cA+NI,YAQI,GAPAA,KAAA,sBACA6a,GAAAA,gCACA7a,KAAA,iBACAA,KAAA,qBACA6a,GAAAA,GACA7a,KAAA,qBANwC,GAQpCA,KAAJ,MAAgB,CACZ,IAAII,EAAYgwB,GAAc0E,UAE1BR,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWA,GAEfJ,KAAA,eACAA,KAAA,sBAAoCA,KAApC,gBAEJA,KAAA,iBAlPR,cAqPI0a,SAAAA,GACI1a,KAAA,sBACA6a,GAAAA,0BACAA,GAAAA,GACA7a,KAAA,iBACAA,KAAA,qBACAA,KAAA,qBANiC,GAQ7BA,KAAJ,OACIA,KAAA,eAEJA,KAAA,eAhQR,cAqQI,cAAgE,WAExD+0B,GAAJ,EACA,OAAQxW,EAAR,WACI,KAAM6R,GAAc4E,WAEhB,GADAna,GAAAA,sBACI7a,KAAKg0B,oBAAsBh0B,KAA/B,cACQA,KAAJ,OACI0f,GAAAA,cAAAA,WAAAA,KAA4C1f,KAAK6zB,MAAjDnU,YAAAA,4BAAiG0Q,GAAc4E,iBAInH,GAAIh1B,KAAJ,MAAgB,CACZ,IAAIs0B,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAc6E,WAE7Bj1B,KAAA,sBAAoCA,KAApC,gBAGR,MAEJ,KAAMowB,GAAc8E,mBAChBra,GAAAA,gCACA,MAEJ,KAAMuV,GAAc6E,UAChBpa,GAD4B,iCAG5B7a,KAAA,iBACAA,KAJ4B,QAK5BA,KAAA,cACA,MAEJ,KAAMowB,GAAc+E,SAChBta,GAAAA,oBACI7a,KAAJ,OACI0f,GAAAA,cAAAA,WAAAA,KAA4C1f,KAAK6zB,MAAjDnU,YAAAA,oDAAuH0Q,GAAc+E,UAEzI,MAEJ,KAAM/E,GAAcgF,eAChBva,GAAAA,8BACA,MAEJ,KAAMuV,GAAciF,QAChBxa,GAD0B,+BAG1B7a,KAAA,QACA,MAEJ,KAAMowB,GAAckF,aAChBt1B,KAAA,yBACA6a,GAAAA,uBACA,MAEJ,KAAMuV,GAAcmF,MAChBv1B,KAAA,yBACA6a,GAAAA,2BACAA,GAAAA,GACA7a,KAAA,iBACAA,KAAA,qBACA,MAEJ,KAAMowB,GAAcoF,OAGhB,GAFA3a,GAAAA,0DACA7a,KAAA,gBACIA,KAAJ,MAAgB,CACZ,IAAIy1B,GADQ,EA0BZ,GAtBAz1B,KAAA,gBAAoB,YAChB,IAAM0W,EAAeF,EAArB,WACA,GAAKA,EAAL,UAIO,CAGH,IAAMxF,EAAsBuf,GAAkBvtB,cAAlButB,wBAAwD,QAAxDA,GAAuE/Z,EAAvE+Z,qBAAkGD,GAAkB2C,SAC5IjiB,EAAJ,YAEIwF,EAAAA,WAAiBxF,EAAjBwF,SACAN,GAAQ,SAASM,EAAV,4DAA2ExF,EAAlFkF,SACAuf,GAAAA,GAEA,4BAA+B,EAA/B,yBAbJvf,GAAQ,SAASM,EAAV,QAAPN,eACAM,EAAAA,WAAoBA,EAApBA,UAAAA,0CACAif,GAAAA,KAiBR,EASO,CACH5a,GAAAA,4BACA,IAAM6a,EAAsB11B,KAA5B,yBACIs0B,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAcmF,OAE7Bv1B,KAAA,6BAjBiB,CACjB6a,GAAAA,gDACA,IAAIyZ,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAckF,cAE7Bt1B,KAAA,sBAAmCA,KAAnC,gBACA+0B,GAAAA,EAWJ,OAIZ,UA1XR,QA8XIY,WACI,IAAIpzB,EAAJ,GAIA,OAHIvC,KAAJ,QACIuC,EAASvC,KAAK6zB,MAAdtxB,IAEJ,GAnYR,0BAsYIqzB,SAAAA,GACI,IAAIrzB,OAAJ,EACAkxB,GAAQ,+BAAD,EAAPA,KAEA,IAAMoC,EAA6C71B,KAAK81B,IAAIzyB,MAAK,mBAAawyB,EAAAA,cAAb,KAOjE,OANA,IACIpC,GAAQ,oBAAoBoC,EAArB,yBAAqDA,EADnD,SAGVtzB,EAASvC,KAAK4Z,OAAOvW,MAAK,mBAAWmT,EAAAA,UAAkBqf,EAA7B,gBAG7B,GAjZR,YAoZIjU,SAAAA,GAGI,GAFA/G,GAAAA,4BACAA,GAAAA,GACI0D,EAAAA,SAAiBve,KAArB,MACI,OAAOue,EAAP,SACI,KAAM6R,GAAc4E,WAChB,GAAIzW,EAAAA,UAAkBW,GAAAA,UAAqB,CACvC,IAAIoV,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAc6E,WAE7Bj1B,KAAA,sBAAmCA,KAAnC,oBAEC,CACD,IAAIs0B,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAc8E,oBAE7Bl1B,KAAA,sBAAmCA,KAAnC,gBAEJ,MAEJ,KAAMowB,GAAc+E,SAChB,GAAI5W,EAAAA,UAAkBW,GAAAA,UAAqB,CACvC,IAAIoV,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAciF,SAE7Br1B,KAAA,sBAAmCA,KAAnC,oBAEC,CACD,IAAIs0B,EAAuB,CACvBlB,OAAQpzB,KAAK6zB,MADU,GAEvBU,OAFuB,KAGvBn0B,UAAWgwB,GAAcgF,gBAE7Bp1B,KAAA,sBAAmCA,KAAnC,mBA3bxB,gBAocI+1B,WACI/1B,KAAA,gBAAoB,YACjBwW,EAAAA,oBAtcX,cA2cIwf,WACIh2B,KAAA,gBAAoB,YAChBwW,EAAAA,kBA7cZ,mBAkdIyf,SAAAA,GACI,QAAIj2B,KAAJ,gBACWA,KAAKk2B,yBAAZ,IApdZ,aAydIC,WACI,OAAOn2B,KAAP,eA1dR,KCVMiW,GAAUpW,GAAAA,CAAhB,oCACMqW,GAAUrW,GAAAA,CAAhB,oCAEMuW,IADUvW,GAAAA,CAAhB,oCACgBA,GAAAA,CAAhB,oCAOau2B,GAAb,WAGI,aAAqB,KAFbC,aAAkC,GAD9C,uCASI9f,SAAAA,EAAAA,GACIN,GAAQ,iCAAiCO,EAAlC,2BAAPP,GACA,IAAI1T,EAFuD,EAc3D,OAVAvC,KAAA,sBAA0B,YAClBs2B,EAAJ,UACI/zB,EAAS+zB,EAAT/zB,MACIiU,EAAAA,SAAiBb,GAAQkB,SACzBtU,EAAS2K,SAAT3K,QAKZ0T,GAAQ,mCAAmCO,EAApC,6CAAPP,GACA,GAvBR,eA0BIkB,SAAAA,EAAAA,GACIjB,GAAQ,qCAAqCM,EAAtC,2BAAPN,GACA,IAAIlF,EAA+B,CAC/BoG,SAD+B,EAE/BC,gBAAgB,GAIpB,GAAIb,EAAJ,WAMI,GALAxW,KAAA,sBAA0B,YAClBs2B,EAAJ,UACItlB,EAAAA,SAAAA,OAGHA,EAAL,QAGI,OAFAA,EAAAA,QAAsBwF,EAAtBxF,YAAAA,iDACAkF,GAAQ,qCAAqCM,EAAtC,+CAAoGxF,EAApG,yBAAqIA,EAA5IkF,SACA,OAIJlF,EAAAA,SAAAA,EAIJ,OADAkF,GAAQ,qCAAqCM,EAAtC,+CAAoGxF,EAApG,yBAAqIA,EAA5IkF,SACA,GAnDR,cAsDI2B,SAAAA,EAAAA,GAKI,OAJAzB,GAAQ,6BAA6BI,EAA9B,+BAAPJ,GACApW,KAAA,sBAA0B,YAClBs2B,EAAAA,QAAJ,IAAwCA,EAAAA,SAAAA,MAE5C,MA3DR,WA+DIte,SAAAA,EAAAA,GACI,UAhER,iBAmEI1B,SAAAA,GACItW,KAAA,gBApER,KCVM6a,GAAShb,GAAAA,CAAf,gCAEa02B,GAAb,WAWI,cAXJ,qBAII,WAII,OAHMA,EAAN,YACIA,EAAAA,UAAsC,IAAtCA,GAEGA,EAAP,WARR,+BAgBI,uBAAsK,IAAtDnC,IAAAA,GAA6B,GACzI,IAAIoC,EAAwC,IAA5C,GACIC,EAAuC,IAFuH,GAK9JC,EAAJ,GACAvd,EAAAA,OAAAA,SAA0B,cAEtB,IAAIW,EAAyBmW,GAAY1Y,KACzC,OAAQ+B,EAAR,MACI,KAAM/D,GAAUkC,KAChB,KAAMlC,GAAUgC,KAChB,KAAMhC,GAAUkB,KAChB,KAAMlB,GAAUmC,UAChB,KAAMnC,GAAU9M,SACZ,MAEJ,KAAM8M,GAAUoB,SAEZ,IACQ2C,EAAAA,KAAJ,KACIQ,EAAYmW,GAAYlO,QAExBzI,EAAAA,KAAJ,KACIQ,EAAYmW,GAAYlO,SAGhC,MAEJ,KAAMxM,GAAUwC,OAER+B,EADJ,EACgBmW,GAAYlO,OAGZkO,GAAY1Y,KAE5B,MAEJ,KAAMhC,GAAUuC,KAChB,KAAMvC,GAAUP,GACZ8E,EAAYmW,GAAYlO,OACxB,MAEJ,KAAMxM,GAAU2B,QAChB,KAAM3B,GAAUuB,MACZgD,EAAYmW,GAAYpZ,OACxB,MAEJ,KAAMtB,GAAU+B,MACZwC,EAAYmW,GAAY3Y,MACxB,MAEJ,KAAM/B,GAAUiC,SACZsC,EAAYmW,GAAYzY,SACxB,MAEJ,KAAMjC,GAAUqB,QACZkD,EAAYmW,GAAY0G,SACxB,MAEJ,KAAMphB,GAAUqhB,UACZ9c,EAAYmW,GAAY4G,SACxB,MAEJ,KAAMthB,GAAUuhB,OACZhd,EAAYmW,GAAYpJ,OACxB,MAEJ,KAAMtR,GAAU2G,cACZpC,EAAYmW,GAAY8G,WAMhC,IAAMxd,EAAsCyd,EAAA,MAAmB,mBAAWr1B,EAAAA,UAAkB2X,EAA7B,MAC3D2d,EAAJ,EACA,IACIA,EAAoB1d,EAApB0d,cAIJ,IAAIC,EAA+B,CAC/B1gB,MAD+B,EAE/B+C,aAF+B,EAG/BkO,YAH+B,EAI/BC,eAJ+B,wBAK/BxH,SAL+B,EAM/BiX,UAAWX,GAGVld,EAAAA,OAAkB/D,GAAUP,IAAQsE,EAAAA,OAAkB/D,GAAUuC,MAAUgC,IAAcmW,GAAYlO,SACrGmV,EAAAA,YAA4B,CACxBzP,YADwB,MAExBC,eAAgB,kBAGpBwP,EAAAA,MAAsB,CAClB3R,MAAOjM,EADW,YAElBuJ,QAAS,qCAETvJ,EAAJ,cACI4d,EAAAA,YAA4B,CACxBjxB,QAASqT,EADe,YAExBmO,YAFwB,QAGxBC,eAAgB,mDAGnBpO,EAAL,cACI4d,EAAAA,UAA0B,CAClBE,UADkB,EAElBC,eAAgB,CAChB5P,YADgB,MAEhBC,eAAgB,mDAEpB4P,aANsB,WAOtBC,eAAgB,gBAMxBje,EAAAA,OAAkB/D,GAAUqhB,YAC5BM,EAAAA,SAAyB,CACrBM,KADqB,EAErBC,KAAM,KAIVne,EAAAA,OAAkB/D,GAAUuhB,SAC5BI,EAAAA,WAA2B,CACvBx2B,QAAS,CAAC+mB,YAAD,SAAwBC,eAAgB,KAErDwP,EAAAA,WAA2B5d,EAA3B4d,YAGA5d,EAAAA,OAAkB/D,GAAU2G,gBAC5Bgb,EAAAA,WAA2B,CACvBx2B,QAAS,CACL+mB,YADK,QAELC,eAFK,mBAGLgQ,kBAAmB,CAAC,CAACr2B,KAAD,OAAeM,MAAO,WAE9Cse,UAAW,CACPwH,YADO,MAEPC,eAAgB,gCAEpBnC,MAAO,CACHA,MADG,QAEH1C,QAAS,qBAGjBqU,EAAAA,SAAAA,EACIA,EAAJ,YAA6BA,EAAAA,UAAAA,UAAAA,GAC7BA,EAAAA,UAAAA,EAEAA,EAAAA,WAA2B5d,EAA3B4d,YAIJR,EAAAA,KAAAA,MAGJ,IAAMiB,EAAyB,CAC3BC,YAAa,CACTnQ,YADS,MAETC,eAAgB,aAEpB9N,OAAQ8c,GAGNmB,EAA+B,CACjC7iB,GAAImE,EAD6B,GAEjCQ,YAAaR,EAFoB,YAGjCkb,YAAa,CAHoB,GAIjCyD,eAAgB,CACZrQ,YADY,MAEZC,eAFY,6DAGZgQ,kBAAmB,CAAC,CAACr2B,KAAD,QAAcM,MAAM,kBACxCo2B,UAAW,sBAAsB5e,EAAWQ,aAEhDqe,mBAAoB,CAChBvQ,YADgB,MAEhBC,eAAgB,sCAEpBuQ,aAAc,CACVtI,WADU,WAEV5I,cAFU,uCAGVC,YAAa,cAEjBkR,aAAc,CACVvI,WADU,SAEV5I,cAFU,qCAGVC,YAAa,eAEjBmR,WAAW,iGAoBf,OAhBAN,EAAAA,YAAAA,SAA+B,YAC3BO,EAAAA,OAAAA,MAAkB,cAAW,OAAQC,EAAAA,aAAiBC,EAAzB,mBAIjC,IACIT,EAAAA,aAA0B,CACtBlI,WADsB,WAEtB5I,cAFsB,0CAGtBC,YAAa,qBAMrBnM,GAAAA,GACA,GAvOR,KCLa0d,GAAb,WAMI,yBAA0H,IAA5CC,IAAAA,EAAsC,MAChHx4B,KAAA,SACAA,KAAA,cACAA,KAAA,YACAA,KAAA,cACAA,KAAA,YAAmBA,KAAKy4B,YAAYz0B,KAApChE,MAXR,yDAcI,oBAAkK,WAC9J,QAD8J,IAArEiG,IAAAA,OAA2ByyB,QAA0C,IAAhCrhB,IAAAA,GAAyB,GACnJrX,KAAK24B,YAAYvB,WAArB,EAAgD,CAC5C,IAAM5gB,EAAyBxW,KAAK24B,YAApC,MACIC,EAFwC,EAG5C,GAAI54B,KAAJ,cACIA,KAAA,+CAAoDA,KAApD,aACIA,KAAK24B,YAAT,YAAiC,CAC7B,IAAI7uB,EAAW+uB,EAAf,cACA,IACID,EAAAA,EACI54B,KAAK24B,YAAYG,WAArB,YACIhvB,EAAWA,EAAXA,iBAEI8uB,EAAAA,IAMpB,IAAMG,EAAkBjwB,SAAAA,eAA2B9I,KAA3B8I,OAAAA,UAAgD9I,KAAK24B,YAAYniB,MAAjE1N,GAAxB,UACMkwB,EAAiBlwB,SAAAA,eAA2B9I,KAA3B8I,OAAAA,UAAgD9I,KAAK24B,YAAYniB,MAAjE1N,GAnBqB,kBA4B5C,GANAiwB,MAAAA,GAAAA,EAAAA,aAAAA,QAAAA,gBACA,IAAoBC,EAAAA,UAAAA,IAEhBh5B,KAAK24B,YAAYvB,UAArB,gBAA+C1T,GAAAA,iBAAAA,EAAsD1jB,KAAK24B,YAAYvB,UAAvE1T,gBAAAA,GAC3C1jB,KAAK24B,YAAYvB,UAArB,cAA6C1T,GAAAA,iBAAAA,EAAsD1jB,KAAK24B,YAAYvB,UAAvE1T,eAE7C,EAAc,CAWV,GAVI1jB,KAAK24B,YAAYvB,UAArB,gBAA+C1T,GAAAA,iBAAAA,EAAsD1jB,KAAK24B,YAAYvB,UAAvE1T,gBAC3C1jB,KAAK24B,YAAYvB,UAArB,cAA6C1T,GAAAA,iBAAAA,EAAsD1jB,KAAK24B,YAAYvB,UAAvE1T,cAAAA,GAE7C,IACIzd,EAAauQ,EAAN,YAAPvQ,iCAGJ8yB,MAAAA,GAAAA,EAAAA,aAAAA,QAAAA,iBACA,IAAoBC,EAAAA,UAAAA,GAEpB,EACI,OAAQxiB,EAAR,MACI,KAAMjB,GAAUqB,QAEZiiB,EAAAA,SAAAA,EACA,MAEJ,KAAMtjB,GAAU2B,QAEZ2hB,EAAAA,MAAAA,IACA,MAEJ,KAAMtjB,GAAUuB,MAEZ+hB,EAAAA,MAAAA,MACA,MAEJ,QAEIA,EAAAA,MAAAA,GAMZ74B,KAAA,mBAAuB,mBAAcY,EAAAA,iBAA0B,EAA1BA,OAAAA,EAAAA,EAAd,SA/EvC,oBAqFIq4B,SAAAA,GACI,GAAIj5B,KAAK24B,YAAYvB,WAArB,EAAgD,CAC5C,IAAM5gB,EAAyBxW,KAAK24B,YADQ,MAGxCh3B,EAAgBk3B,EAHwB,MAKxC74B,KAAK24B,YAAYlR,cAAgBwI,GAAY0G,WAC7Ch1B,EAAQ,GAAKk3B,EAAbl3B,SAEA3B,KAAJ,cACI2B,EAAAA,GACA3B,KAAA,qBAAyB,YACjB84B,EAAJ,UACIn3B,EAAQm3B,EAARn3B,WAMZ,IAAMu3B,EAAqCl5B,KAAK24B,YAAYvB,UAAUA,UAAUjgB,aAAaX,EAA7F,GACAxW,KAAA,gCAAgDk5B,EAAhD,UAA6EA,EAA7E,QAAoGA,EAApG,kBAzGZ,cA6GIT,SAAAA,GACIla,EAAAA,iBACAA,EAFqB,kBAIrB,IAAMsa,EAAiCta,EAAvC,OAEAve,KAAA,sBAnHR,KCDam5B,GAAb,WAKI,kBACIn5B,KAAA,SACAA,KAAA,cACAA,KAAA,YACAA,KAAA,YAAmBA,KAAKy4B,YAAYz0B,KAApChE,MATR,+BAYIy4B,SAAAA,GAAyB,WACrBla,EAAAA,iBACAA,EAFqB,kBAIrB,IAAMsa,EAAiCta,EAAvC,OAEA,GAAIve,KAAK24B,YAAT,OAA6B,CACzB,IAAMniB,EAAyBxW,KAAK24B,YAApC,MACMh3B,EAAgBk3B,EAAtB,MACMxtB,EAAmBrL,KAAK24B,YAAYS,OAAOC,UAAU7iB,EAA3D,GACA,IACIqiB,EAAAA,MAAAA,EACA74B,KAAA,mBAAuB,mBAAcY,EAAAA,aAAsB,EAAtBA,OAAAA,EAAd,SAxBvC,KCIM04B,GAAAA,WAKF,kBACIt5B,KAAA,SACAA,KAAA,gBACAA,KAAA,gB,mBAGJu5B,eAAAA,SAAAA,GACI7V,GAAAA,kBAA8B1jB,KAA9B0jB,eAC4B8V,GAAAA,kBAA2Cx5B,KAA3Cw5B,OAAwDx5B,KAAxDw5B,cAA4Ex5B,KAA5Ew5B,cAA5B,I,EAbFF,GAmBOE,GAAb,WAWI,cAXJ,cAII,WAII,OAHMA,EAAN,YACIA,EAAAA,UAAqC,IAArCA,GAEGA,EAAP,WARR,yCAcI,oBAiBI,QAjBqM,IAAjDhB,IAAAA,EAAsC,MAC1LK,EAAAA,aAAAA,KAAmCzF,EAAnCyF,UAAmDF,EAAAA,MAAnDE,IACAA,EAAAA,aAAAA,GAA6CF,EAAAA,MAA7CE,IACAA,EAAAA,aAAAA,OAAkCF,EAAAA,MAAlCE,IACIF,EAAJ,mBAAmCjV,GAAAA,cAAAA,EAAwCiV,EAAxCjV,mBAC/BiV,EAAJ,gBAAgCjV,GAAAA,iBAAAA,EAA2CiV,EAL0H,gBAQjMA,EAAAA,MAAJ,aACIjV,GAAAA,cAAAA,EAAwC,CAAC,CAACriB,KAAD,WAAmBM,MAAO,QAAS,CACxEN,KADwE,WAExEM,MAAO,UAMXg3B,EAAJ,UAA2B,CACvB,IAAMtU,EAAe,IAAIkU,GAAuBnF,EAAQuF,EAAar3B,EAArE,GACA,EACIk3B,EAAAA,SAAoB,YACjBM,EAAAA,iBAAAA,OAAAA,MAKHD,EAAAA,iBAAAA,OAAAA,GAKJF,EAAJ,QACIE,EAAAA,iBAAAA,QAAuC,IAAIM,GAAqB/F,EAAQuF,EAAxEE,IAIAF,EAAAA,MAAAA,OAA2BpjB,GAAUkB,OACrCrN,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,WAAAA,SAAAA,aAAAA,cApDZ,oCA0DI,oBAGI,IAAIqwB,EAAJ,KAEA,GAAId,EAAJ,UAA2B,EACvBc,EAAoB3wB,SAAAA,cAApB2wB,QACAA,aAAAA,KAAwCrG,EAAxCqG,UAAwDd,EAAAA,MAAxDc,GAAAA,UACAA,EAAAA,aAAAA,QAHuB,iBAIvB/V,GAAAA,iBAAAA,EAAgDiV,EAAAA,UAAAA,eAAhDjV,gBACA,IAAIiG,EAAY7gB,SAAAA,cAAuB6vB,EAAAA,UAAAA,eAAvC,aACA,IACIhP,EAAAA,aAAAA,KAAgCyJ,EAAhCzJ,UAAgDgP,EAAAA,MAAhDhP,GAAAA,kBACIgP,EAAAA,UAAAA,eAAJ,mBAA4DjV,GAAAA,cAAAA,EAAqCiV,EAAAA,UAAAA,eAArCjV,mBAC5D+V,EAAAA,YAAAA,IAMR,GAAId,EAAJ,YAA6B,CAEzB,IAAIe,EAAgB5wB,SAAAA,cAAuB6vB,EAAAA,YAA3C,aACA,KAAmB,CAMf,GALAjV,GAAAA,iBAAAA,EAA4CiV,EAAAA,YAA5CjV,gBACAgW,EAAAA,aAAAA,KAAoCtG,EAApCsG,UAAoDf,EAAAA,MAApDe,GAAAA,cAEIf,EAAAA,YAAJ,mBAA+CjV,GAAAA,cAAAA,EAAuCiV,EAAAA,YAJvE,mBAMXA,EAAJ,MAAuB,CACnB,IAAIgB,EAA4B7wB,SAAAA,cAAhC,SACA6wB,EAAAA,aAAAA,MAA+BvG,EAA/BuG,UAA+ChB,EAAAA,MAA/CgB,IACAA,EAAAA,UAAoBhB,EAAAA,MAApBgB,YACIhB,EAAAA,MAAJ,YAAkCjV,GAAAA,cAAAA,EAAmCiV,EAAAA,MAAnCjV,YAC9BiV,EAAAA,MAAJ,SAA+BjV,GAAAA,iBAAAA,EAAsCiV,EAAAA,MAAtCjV,SAC/BgW,EAAAA,YAAAA,GAEJ,GAAIf,EAAJ,YAA6B,CACzB,IAAIiB,EAAsB9wB,SAAAA,cAAuB6vB,EAAAA,YAAjD,aACA,GAEIiB,EAAAA,aAAAA,KAA6BxG,EAA7BwG,UAA6CjB,EAAAA,MAA7CiB,GAAAA,SACIjB,EAAAA,MAAJ,cAAmCiB,EAAAA,UAAmBjB,EAAAA,MAAnBiB,aACnCf,EAAAA,aAAAA,mBAAiDzF,EAAjDyF,UAAiEF,EAAAA,MAAjEE,GAAAA,SACIF,EAAAA,YAAJ,gBAA4CjV,GAAAA,iBAAAA,EAAqCiV,EAAAA,YAArCjV,gBAC5CgW,EAAAA,YAAAA,GACAA,EAAAA,YAAAA,GACA,GAAuBA,EAAAA,YAAAA,KAEvBA,EAAAA,YAAAA,GACA,GAAuBA,EAAAA,YAAAA,SAG3BA,EAAAA,YAAAA,GACA,GAAuBA,EAAAA,YAAAA,GAE3BvwB,EAAAA,YAAAA,QAEAA,EAAAA,YAAAA,GACA,GAAuBA,EAAAA,YAAAA,QAG3BA,EAAAA,YAAAA,GACA,GAAuBA,EAAAA,YAAAA,IAzHnC,gEA8HI,kBACI,IAAI0vB,EAAiC/vB,SAAAA,cAArC,SAEA,OAAQ6vB,EAAR,aACI,KAAK1I,GAAY0G,SACbkC,EAAAA,aAAAA,OAAAA,YACAA,EAAAA,aAAAA,QAAmCF,EAAAA,MAAnCE,IACA,MAEJ,KAAK5I,GAAY3Y,MACbuhB,EAAAA,aAAAA,OAAAA,SACA,MAEJ,KAAK5I,GAAYlO,OACb8W,EAAAA,aAAAA,OAAAA,UACA,MAEJ,KAAK5I,GAAYpZ,OACbgiB,EAAAA,aAAAA,OAAAA,UACA,MAEJ,KAAK5I,GAAYzY,SACbqhB,EAAAA,aAAAA,OAAAA,YACA,MAEJ,KAAK5I,GAAY1Y,KACbshB,EAAAA,aAAAA,OAAAA,QAMR,OAFAW,EAAAA,uCAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,kCAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,GA9JR,oCAiKI,kBACI,IAAIX,EAAoC/vB,SAAAA,cAAxC,YAOA,OANI6vB,EAAJ,WACIE,EAAAA,aAAAA,OAAAA,GAAqCF,EAAAA,SAArCE,MACAA,EAAAA,aAAAA,OAAAA,GAAqCF,EAAAA,SAArCE,OAEJW,EAAAA,uCAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,kCAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,GAzKR,oBA4KI,kBACI,IAAI/kB,EAAJ,GAkCA,OAhCAolB,EAAAA,SAAqB,cACjB,GAAIlB,EAAJ,WAA4B,CACxB,IAAIxvB,EADoB,EAGpBwvB,EAAAA,WAAJ,YACIxvB,EAAcL,SAAAA,cAAuB6vB,EAAAA,WAAAA,UAArCxvB,aACAua,GAAAA,iBAAAA,EAA0CiV,EAAAA,WAAAA,UAA1CjV,gBACIiV,EAAAA,WAAAA,UAAJ,mBAAwDjV,GAAAA,cAAAA,EAAuCiV,EAAAA,WAAAA,UAAvCjV,mBACxD5Z,EAAAA,YAAAA,IAEJ,IAAIgwB,EAAuBhxB,SAAAA,cAAuB6vB,EAAAA,WAAAA,QAAlD,aAUA,GATAmB,EAAAA,aAAAA,QAA8BC,EAA9BD,OACAA,EAAAA,aAAAA,KAA8B1G,EAA9B0G,UAA8CnB,EAAAA,MAA9CmB,GAAAA,IAAAA,GACAA,EAAAA,aAAAA,OAAgC1G,EAAhC0G,UAAgDnB,EAAAA,MAAhDmB,IAEApW,GAAAA,iBAAAA,EAAsCiV,EAAAA,WAAAA,QAAtCjV,gBACIiV,EAAAA,WAAAA,QAAJ,mBAAsDjV,GAAAA,cAAAA,EAAmCiV,EAAAA,WAAAA,QAAnCjV,mBAEtDva,EAAAA,YAAAA,GAEIwvB,EAAAA,WAAJ,MAAkC,CAC9B,IAAIgB,EAAU7wB,SAAAA,cAAd,SACI6vB,EAAAA,WAAAA,MAAJ,SAA0CjV,GAAAA,iBAAAA,EAAsCiV,EAAAA,WAAAA,MAAtCjV,SACtCiV,EAAAA,WAAAA,MAAJ,YAA6CjV,GAAAA,cAAAA,EAAmCiV,EAAAA,WAAAA,MAAnCjV,YAC7CiW,EAAAA,UAAoBI,EAApBJ,KACAxwB,EAAAA,YAAAA,QAEA2wB,EAAAA,UAAoBC,EAApBD,KAEJrlB,EAAAA,KAAAA,OAGR,GA/MR,wCAkNI,kBACI,IAAIokB,EAAkC/vB,SAAAA,cADwH,UAW9J,OARI6vB,EAAJ,aACIa,EAAAA,kBAAAA,EAAAA,EAAAA,EAA8Eb,EAAAA,WADtD,cAGxBA,EAAAA,WAAAA,YAAmC,IAAIW,GAA4BlG,EAAQyF,EAA3EF,KAGJa,EAAAA,uCAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,kCAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACA,GA7NR,4CAgOI,kBAQI,IAAIQ,EAAoClxB,SAAAA,cAAxC,OACI6vB,EAAJ,mBAAmCjV,GAAAA,cAAAA,EAA6CiV,EAA7CjV,mBAC/BiV,EAAJ,gBAAgCjV,GAAAA,iBAAAA,EAAgDiV,EAAhDjV,gBAEhC,IAAI8U,EAPR,GAsBI,OAbIG,EAAJ,aAEIH,EAAkCgB,EAAAA,kBAAAA,EAAAA,EAAAA,EAAmFb,EAAAA,WAF7F,cAIxBA,EAAAA,WAAAA,YAAmC,IAAIW,GAA4BlG,EAAQ4G,EAJnD,IAMpBrB,EAAJ,WAA2BA,EAAAA,UAAAA,UAAAA,eAAAA,GACvBA,EAAJ,UAA0BA,EAAAA,SAAAA,eAAAA,GACtBA,EAAJ,WAA2BA,EAAAA,UAAAA,eAAAA,IAG/Ba,EAAAA,uCAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACAA,EAAAA,kCAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GACO,CACHvZ,UADG,EAEHoW,aAAamC,IA7PzB,KCJayB,GAAb,WAWI,cAXJ,cAII,WAII,OAHMA,EAAN,YACIA,EAAAA,UAA+B,IAA/BA,GAEGA,EAAP,WARR,4CAaI,oBACI,IAAIC,EAA6BpxB,SAAAA,cAAjC,UAMA,GALA4a,GAAAA,iBAAAA,EAAsCyW,EAAtCzW,eACAwW,EAAAA,aAAAA,KAA8BrC,EAA9BqC,GAAAA,IAAAA,GACIC,EAAJ,aACID,EAAAA,UAAqBC,EAArBD,YAEAC,EAAJ,YAA2B,CACvB,IAAIhW,EAASrb,SAAAA,cAAb,KACA,IACI4a,GAAAA,iBAAAA,EAAoCyW,EAApCzW,aACAwW,EAAAA,YAAAA,IAcR,OAVAA,EAAAA,iBAAAA,SAAkC,YAC9B3b,EAAAA,iBACAA,EAAAA,kBACA,IAAI+V,EAAsB,CACtBC,OADsB,EAEtBnB,OAAOyE,EAFe,GAGtBz3B,UAAUA,GAEduzB,EAAAA,SAAsB,mBAAc/yB,EAAAA,YAAd,SAE1B,GAtCR,qBAyCI,kBACI,IAAIw5B,EAAyBtxB,SAAAA,cAA7B,QACAsxB,EAAAA,aAAAA,KAAyBvC,EAAzBuC,IACAA,EAAAA,aAAAA,OAA2BvC,EAA3BuC,aAEIvC,EAAJ,SAAwBnU,GAAAA,iBAAAA,EAAoCmU,EALkF,SAO9I,IAAIwC,EAAJ,GACIC,EAAJ,GACIC,EAAJ,GAIIC,EAAJ,GAEIC,EAA6B3xB,SAAAA,cAAuB+uB,EAAAA,eAAxD,aACAnU,GAAAA,iBAAAA,EAA4CmU,EAAAA,eAA5CnU,gBACImU,EAAAA,eAAJ,mBAAiDnU,GAAAA,cAAAA,EAAyCmU,EAAAA,eAAzCnU,mBAEjD0W,EAAAA,YAAAA,GAEAvC,EAAAA,YAAAA,SAA+B,YAE3B,IAAI1uB,EAAJ,EACIivB,EAAJ,cAEIjvB,EAAcL,SAAAA,cAAuBsvB,EAAAA,YAArCjvB,gBAEQivB,EAAAA,YAAJ,mBAAyC1U,GAAAA,cAAAA,EAAsC0U,EAAAA,YAAtC1U,mBACrC0U,EAAAA,YAAJ,gBAAsC1U,GAAAA,iBAAAA,EAAyC0U,EAAAA,YAAzC1U,gBACtC0W,EAAAA,YAAAA,IAGRhC,EAAAA,OAAAA,SAAqB,YACjB,OAAQ5hB,EAAR,aACI,KAAMyZ,GAAY4G,SACd,IAAM6D,EAAUlB,GAAyBx2B,cAAzBw2B,kCAAyE3B,EAAzE2B,GAAAA,EAAAA,EAAhB,GACAc,EAAAA,KAAAA,GACA,MAEJ,KAAMrK,GAAYpJ,OACd,IAAM6T,EAAUlB,GAAyBx2B,cAAzBw2B,sCAA6E3B,EAA7E2B,GAAAA,EAAAA,EAAhB,GACAgB,EAAAA,KAAAA,GACA,MAEJ,KAAMvK,GAAY8G,WACd,IAAM2D,EAAUlB,GAAyBx2B,cAAzBw2B,0CAAiF3B,EAAjF2B,GAAAA,EAAAA,EAAhB,GACAe,EAAAA,KAAAA,GACA,MAEJ,QACI,IAAMG,EAAUlB,GAAyBx2B,cAAzBw2B,qCAA4E3B,EAA5E2B,GAAAA,EAAAA,EAAhB,GACAa,EAAAA,KAAAA,UAOhB,IAAIM,EAAJ,EAEI9C,EAAJ,sBACI8C,EAAkB7xB,SAAAA,cAAuB+uB,EAAAA,mBAAzC8C,eAEQ9C,EAAAA,mBAAJ,mBAAqDnU,GAAAA,cAAAA,EAA0CmU,EAAAA,mBAA1CnU,mBACrDA,GAAAA,iBAAAA,EAA6CmU,EAAAA,mBAA7CnU,gBACA0W,EAAAA,YAAAA,IAGAO,EADC,GAKT,IAAIvW,OAAJ,EACIyT,EAAJ,eACIzT,EAAiBpkB,KAAK46B,iBAAiBpK,EAAtB,IAAoDqH,EAApD,aAA4EzH,GAAc+E,UAC3GwF,EAAAA,YAAAA,IAGJ,IAAIE,EAAmC76B,KAAK46B,iBAAiBpK,EAAtB,IAAoDqH,EAApD,aAA4EzH,GAAc4E,YACjI2F,EAAAA,YAAAA,GAEA,IAAIG,EAAmC96B,KAAK46B,iBAAiBpK,EAAtB,IAAoDqH,EAApD,aAA4EzH,GAAcoF,QAejI,OAdAmF,EAAAA,YAAAA,GAEiC,CAC7BnK,KAD6B,EAE7BiK,eAF6B,EAG7B7gB,OAH6B,EAI7BmhB,aAJ6B,EAK7BC,kBAL6B,EAM7BC,WAN6B,EAO7BC,aAP6B,EAQ7BjD,aAR6B,EAS7BC,aAAa4C,IAvIzB,KCnBaK,GAAb,WAMI,yBAA2H,IAA5C3C,IAAAA,EAAsC,MACjHx4B,KAAA,SACAA,KAAA,cACAA,KAAA,YACAA,KAAA,cACAA,KAAA,YAAmBA,KAAKy4B,YAAYz0B,KAApChE,MAXR,4CAcIo7B,SAAAA,GACI,IAAI/vB,EAAJ,GACA,GAAIrL,KAAK24B,YAAT,SAA+B,CAC3B,IAAMniB,EAAyBxW,KAAK24B,YAApC,MACMh3B,EAAgBk3B,EAAtB,MACI74B,KAAJ,aAAsBA,KAAK24B,YAAYzY,SAAS5J,eAAetW,KAAzC,cACtBqL,EAAWrL,KAAK24B,YAAYzY,SAASrI,YAAYrB,EAAjDnL,MAEIwtB,EAAAA,MADU,EAGV74B,KAAA,mBAAuB,mBAAcY,EAAAA,aAAAA,EAAd,OAG/B,UAII,IA/BZ,cAmCI63B,SAAAA,GACIla,EAAAA,iBACAA,EAFqB,kBAIrB,IAAMsa,EAAiCta,EAAvC,OAEAve,KAAA,qBAzCR,KCKM6a,GAAShb,GAAAA,CAAf,kBAGaw7B,GAAb,WAWI,sBAAmJ,oBAA/C7C,IAAAA,EAAyC,MAAM,KATzI9jB,OAA+B,KAS0G,KANzI8jB,YAAkC,GAMuG,KAHzIl3B,UAA6B,GAG4G,KAF3IygB,QAAiB,EAGrB/hB,KAAA,SACAA,KAAA,SACAA,KAAA,aACAA,KAAA,UACA,IAAiBA,KAAKw4B,YAAcA,GACpCx4B,KAAA,kBAAyB,IAAIu4B,GAAuBnF,EAAQ1e,EAAQ,CAA3C,MAAzB,GACA1U,KAAA,iBAAwB,IAAIm7B,GAAuB/H,EAAQ1e,EAAQ,CAA3C,MAPuH,GAU/I1U,KAAA,kBAAyBA,KAAKs7B,kBAAkBt3B,KAAhDhE,MACIA,KAAJ,YACIA,KAAA,qBAAyB,YACrB84B,EAAAA,iBAAAA,SAAsC,EAAtCA,sBAIJ94B,KAAA,kCAAwCA,KAAxC,mBA5BZ,oCAiCIu7B,WACI,OAAOv7B,KAAP,QAlCR,oBAsCI,YAA0C,WAEtC,GADA6a,GAAAA,yBACI7a,KAAJ,OAAiB,CACb,IAAI2B,EAAuB3B,KAA3B,WACA6a,GAAAA,+CACA7a,KAAA,mBAAuB,mBAAcY,EAAAA,aAAsB,EAAtBA,OAAkC,EAAlCA,WAAd,QA3CnC,mBA+CI46B,SAAAA,GACI3gB,GAAU7a,KAAJ,gCAAwCY,EADF,WAGhCZ,KAAKsB,UAAUb,WAAU,mBAAoBg7B,EAAAA,YAA6B76B,EAAjD,aACrC,EACIZ,KAAA,kBAGA6a,GAAU7a,KAAJ,mCAA2CY,EAA3C,UAANia,aAvDZ,qBA4DI6gB,WACI,OAAO17B,KAAP,YA7DR,aAgEI27B,SAAAA,GAAkC,WAC9B37B,KAAA,gDAAqDA,KAArD,iBAD8B,GAG9BA,KAAA,mBAAuB,mBAAcY,EAAAA,iBAA0B,EAA1BA,OAAsC,EAAtCA,WAAsD,EAAtDA,WAAd,OAnE/B,aAsEI,aAtEJ,WAyEIg7B,WAA0B,WAClBr5B,EAAJ,KACA,GAAIvC,KAAK0U,QAAU1U,KAAnB,QACI,OAAQA,KAAK0U,OAAb,aACI,KAAMub,GAAY8G,WACdlc,GAAU7a,KAAKgb,WAAT,GAANH,0BACI7a,KAAJ,aACIA,KAAA,qBAAyB,YACjB84B,EAAJ,UACIje,GAAU,aAAJ,uCAA0Die,EAAhEje,OACAtY,EAASu2B,EAATv2B,UAIZ,MAEJ,KAAM0tB,GAAY0G,SAEdp0B,EAAS,GAAKvC,KAAKU,QAAnB6B,QACA,MAEJ,QAEIA,EAASvC,KAAKU,QAAd6B,MAMZ,OADAsY,GAAU7a,KAAKgb,WAAT,yBAANH,GACA,GAtGR,oBAyGIghB,WACI,IAAIt5B,EAAJ,KAWA,OAVIvC,KAAK0U,QAAU1U,KAAnB,UAEIuC,EAASvC,KAAKU,QAAd6B,MACIvC,KAAK0U,OAAO+S,cAAgBwI,GAAY0G,WACxCp0B,EAAS,GAAKvC,KAAKU,QAAnB6B,SAEAvC,KAAK0U,OAAT,YACInS,EAASvC,KAAK0U,OAAOyiB,UAAU5gB,YAAYvW,KAAlC,WAATuC,KAGR,GArHR,UAwHI6U,WACI,IAAI7U,GAAJ,EAUA,OATIvC,KAAK0U,QAAU1U,KAAnB,SACQA,KAAK0U,OAAT,WACQ1U,KAAK0U,OAAO0iB,UAAhB,YAGI70B,EAFkCvC,KAAK0U,OAAO0iB,UAA9C,UACqCA,aAAuBp3B,KAAvBo3B,WAAwCp3B,KAA7E,YACAuC,SAIZ,GAnIR,QAsIIozB,WACI,OAAO31B,KAAKgb,WAAZ,IAvIR,WA0II8gB,SAAAA,GAEI,GADAzwB,EAAW,GAAXA,EACIrL,KAAKU,SAAWV,KAApB,OAEI,OAAQA,KAAK0U,OAAb,aACI,KAAMub,GAAY8G,WACV/2B,KAAJ,aACIA,KAAA,qBAAyB,YACjB84B,EAAAA,QAAJ,IACIA,EAAAA,SAAAA,MAIZ,MAEJ,KAAM7I,GAAY0G,SAEd32B,KAAA,yBAAwBqL,EAAAA,cACxB,MAEJ,KAAM4kB,GAAYpJ,OACd5lB,QAAAA,IAAejB,KAAKgb,WAApB/Z,GAAAA,sBAAAA,GAGA,IAFA,IAAM86B,EAAgD/7B,KAAtD,QACIg8B,GAAJ,EACSrvB,EAAT,EAAmBA,EAAQovB,EAAAA,QAA3B,OAAmDpvB,IAAS,CAExD,IAAMsvB,EAA2BF,EAAAA,QAAAA,KAAjC,GACA96B,QAAAA,IAAejB,KAAKgb,WAApB/Z,GAAAA,qBAAsDg7B,EAAtDh7B,OACIg7B,EAAAA,QAAJ,IACIh7B,QAAAA,IAAejB,KAAKgb,WAApB/Z,GAAAA,qBAAsDg7B,EAAtDh7B,MAAAA,eACAg7B,EAAAA,UAAAA,EACAD,EAAAA,GAGR/6B,QAAAA,IAAejB,KAAKgb,WAApB/Z,GAAAA,qBAAAA,GACA86B,EAAAA,cAAAA,EACA,MAEJ,QACIlhB,GAAU7a,KAAKgb,WAAT,yBADD,GAGLhb,KAAA,kBAnLpB,QA0LIk8B,WACI,GAAIl8B,KAAJ,QACI,OAAQA,KAAKgb,WAAb,MACI,KAAMzF,GAAUqB,QAEZ5W,KAAA,mBACA,MAEJ,KAAMuV,GAAU2B,QAEZlX,KAAA,kBACA,MAEJ,KAAMuV,GAAUuB,MAEZ9W,KAAA,oBACA,MAEJ,KAAMuV,GAAU2G,cACRlc,KAAJ,aACIA,KAAA,qBAAyB,YACrB84B,EAAAA,SAAAA,KAGR,MAEJ,QAEI94B,KAAA,iBAKZA,KAAA,QA3NR,aA8NIm8B,WACIn8B,KAAA,SA/NR,WAkOIo8B,WACQp8B,KAAJ,SACIA,KAAA,oCAAyCA,KAAzC,UApOZ,SAwOI8hB,SAAAA,GAAqC,MAC7Bvf,EAAJ,EACA,YAAIvC,KAAJ,SAAI,EAAJ,SAA2B,CACvB,IAAI2B,EAAQ3B,KAAK0U,OAAOwL,SAASrI,YAAY7X,KAAjC,WAAZ,GACA,IAAWuC,EAAAA,GAEf,UA9OR,mBAiPI4xB,SAAAA,EAAAA,EAAAA,EAAAA,KAjPJ,eAkPID,SAAAA,EAAAA,EAAAA,KAlPJ,UAoPI9V,WACI,OAAOpe,KAAKgb,WAAZ,aArPR,OAwPIuY,WAKI,GAAIvzB,KAAJ,OACI,GAAIA,KAAK0U,OAAT,YAA6B,CACzB,IAAM5K,EAAW9J,KAAKU,QAAtB,cACA,GACIoJ,EAAAA,aAAAA,QAAAA,qBAKJ9J,KAAA,cAGRA,KAAA,WAzQR,WA8QIq8B,WACIr8B,KAAA,gDAAqDA,KAArD,gBA/QR,OAkRIsI,WAKI,GAAItI,KAAJ,OACI,GAAIA,KAAK0U,OAAT,YAA6B,CACzB,IAAM5K,EAAW9J,KAAKU,QAAtB,cACA,GACIoJ,EAAAA,gBAAAA,cAKJ9J,KAAA,gBAGRA,KAAA,WAnSR,gBAsSI+1B,WACQ/1B,KAAKgb,WAAT,cACAhb,KAAA,oCACAA,KAAA,wBAHkB,YAKdA,KAAJ,aACIA,KAAA,qBAAyB,YACrB84B,EAAAA,gBAAAA,YACAA,EAAAA,gBAAAA,iBA9ShB,cAoTI9C,WACIh2B,KAAA,wCACAA,KAAA,gCAFgB,QAIZA,KAAJ,aACIA,KAAA,qBAAyB,YACrB84B,EAAAA,aAAAA,WAAAA,QACAA,EAAAA,aAAAA,WAAAA,YA3ThB,K,8FCNA,IAAawD,GAAb,Y,QAEI,oBAA4G,OACxG,kBADwG,SAFhH,O,EAAA,G,EAAA,G,uEAAA,O,8FCFA,IAAaC,GAAb,Y,QACI,sBAAqI,OACjI,oBADiI,SADzI,O,EAAA,G,EAAA,G,uEAAA,O,8FCEA,IAAaC,GAAb,Y,QAEI,oBAA0G,OACtG,kBADsG,SAF9G,O,EAAA,G,EAAA,G,uEAAA,O,8FCDA,IAAaC,GAAb,Y,QAEI,oBAAyG,OACrG,kBADqG,SAF7G,O,EAAA,G,EAAA,G,uEAAA,O,8FCUA,IAAM5hB,GAAShb,GAAAA,CAAf,cACM4zB,GAAU5zB,GAAAA,CAAhB,qBAEa68B,GAAb,Y,QAKI,gBAA0E,aACtE,0BAJMC,gBAA8C,KAGkB,E,EAL9E,G,EAAA,G,uEAAA,mCASI,WAA0B,MAClB38B,KAAJ,kBAA0B,SAAAA,KAAA,4BAA8BA,KAAK28B,gBAAnC,QAVlC,mBAaI,mBAAuF,IAAtCnE,IAAAA,EAAkC,IAE/E,IAAMoE,EAAwBlC,EAAAA,aAA9B,IACMrhB,EAAyBqhB,EAAAA,aAA/B,MAEA,GADAjH,GAAQ,kCAAD,sBAAPA,GACImJ,GAAJ,EAAuB,CAEL58B,KAAKmZ,WAAWS,OAAOnZ,WAAU,mBAAWkB,EAAAA,KAAX,KAA/C,IACM2X,EAAwCtZ,KAAKmZ,WAAWS,OAAOvW,MAAK,mBAAW1B,EAAAA,KAAX,KAC1E,KAAc,CACV8xB,GAAQ,kCAAD,wBAAPA,wBACA5Y,GAFU,GAKV,IAAMqc,EAAkDl3B,KAAK68B,kBAA7D,GAGA,GAFApJ,GAAQ,kCAAD,wBAAPA,uBACA5Y,GAAAA,GACA,GACQ7a,KAAJ,MAAgB,CACZ,MACA,OAAQk3B,EAAR,aACI,KAAKjH,GAAY4G,SACbrgB,EAAQ,IAAI8lB,GAAct8B,KAAK6zB,MAAvB,OAARrd,GACA,MAEJ,KAAKyZ,GAAY8G,WACbvgB,EAAQ,IAAI+lB,GAAsBv8B,KAAK6zB,MAA/B,SAARrd,GACA,MAEJ,KAAKyZ,GAAYpJ,OACbrQ,EAAQ,IAAIgmB,GAAYx8B,KAAK6zB,MAArB,OAARrd,GACA,MAEJ,QACIA,EAAQ,IAAIimB,GAAWz8B,KAAK6zB,MAApB,OAARrd,GAIRxW,KAAA,eACAwW,EAAAA,iBAAAA,MACAxW,KAAA,SAAc,CAAC88B,YAAD,EAAsBzjB,QAASA,UAIrDoa,GAAQ,kCAAD,wBAAPA,oCAzDhB,sBA+DI,WACQzzB,KAAJ,kBAA0BA,KAAK28B,gBAAgBlC,eAAe1C,UAAY,KAhElF,oBAmEI,WACQ/3B,KAAK28B,iBAAmB38B,KAAxB,OAAsCA,KAAK6zB,MAAMiE,eAArD,UACI93B,KAAA,yCAAgDA,KAAK6zB,MAAMiE,eAA3D,UAEK93B,KAAJ,kBACDA,KAAA,qEAxEZ,cA4EI,gBAAmH,oBAAzC+8B,IAAAA,GAA4B,GAClGliB,GAD+G,gBAI/G7a,KAAA,MAAau2B,GAA0BvzB,cAA1BuzB,mBAA2Dv2B,KAA3Du2B,WAAAA,EAAAA,EAAb,GACA1b,GAAO7a,KALwG,OAO/GA,KAAA,gBAAuBi6B,GAAmBj3B,cAAnBi3B,mBAAAA,KAA0Dj6B,KAA1Di6B,cAA8Ej6B,KAA9Ei6B,MAA0Fj6B,KAAjH,gBACA6a,GAAO7a,KARwG,iBAU/G6a,GAAAA,oDACA7a,KAAA,gCAAoC,YAChC06B,EAAAA,iBAAAA,SAAiC,YAC7BjH,GAAQ,kBAAkB,EAA1BA,WACA,uBACA,yBAEJ,yBAGJ5Y,GAAAA,wDACA7a,KAAA,oCAAwC,YACpC06B,EAAAA,iBAAAA,SAAiC,YAC7BjH,GAAQ,kBAAkB,EAA1BA,WACA,uBACA,yBAEJ,yBAGJ5Y,GAAAA,qDACA7a,KAAA,sCAA0C,YACtCyzB,GAAQ,kBAAkB,EAA1BA,cAGJ5Y,GAAAA,kDACA7a,KAAA,2CAA+C,YAC3C,mBAAsBg9B,EAAtB,UAAqCA,EAArC,iBAIJniB,GAAAA,sBACAA,GAAO7a,KAAP6a,KACAA,GAAAA,cACAA,GAAO7a,KAAP6a,SAxHR,SA2HI,WACI7a,KAAA,uBA5HR,gBA+HI,YACI,IAAMwW,EAA2BxW,KAAK41B,wBAAwBtc,EAA9D,IACA,GAAW9C,EAAAA,YAjInB,cAoII,cACI,IAAIjU,EAAJ,EACMiU,EAA2BxW,KAAK41B,wBAAwBtc,EAA9D,IAKA,OAHA,IACI/W,EAASiU,EAAAA,OAATjU,IAEJ,GA3IR,eA+II,WAA+B,WAC3BvC,KAD2B,sBAI3BA,KAAA,2BAA+B,YAC3B,GAAIsZ,EAAAA,WAAsBA,EAAAA,UAA1B,WAAyD,CACrD,IAAI1B,EAAa0B,EAAAA,UAAAA,UAAAA,SAAAA,GAAjB,GACAma,GAAQ,8BAA8Bna,EAA/B,mBAAPma,GACA,iBAAoBna,EAApB,MAEJ,IAAI1B,EAAa,iBAAoB0B,EAArC,IACA,IACI1B,EAAa,gBAAbA,GACA,oCAIJ,sBAIA5X,KAAK28B,iBAAmB38B,KAAK28B,gBAAjC,cAA+D,iBAA0B38B,KAAK28B,gBAA/B,aAA6D,CAAC,CACzHt7B,KADyH,QAEzHM,MAAO,mBAtKnB,eA2KI,WAA+B,WAC3B3B,KAD2B,sBAI3B6a,GAAO7a,KAAP6a,gBACA7a,KAAA,2BAA+B,YAC3B,GAAIsZ,EAAAA,WAAsBA,EAAAA,UAA1B,SAAuD,CACnD,IAAI1B,EAAa0B,EAAAA,UAAAA,UAAAA,SAAAA,GAAjB,GACAma,GAAQ,uCAAuCna,EAAxC,mBAAPma,GACA,iBAAoBna,EAApB,MAEJ,IAAI1B,EAAa,iBAAoB0B,EAArC,IACA,IAAgB1B,EAAa,gBAAbA,IAChB,mCACA,sBAGA5X,KAAK28B,iBAAmB38B,KAAK28B,gBAAjC,cAA+DjZ,GAAAA,iBAA6B1jB,KAAK28B,gBAAlCjZ,aAAgE,CAAhEA,WA5LvE,eA+LI,WAA+B,WAC3B1jB,KAD2B,sBAI3B6a,GAAO7a,KAAP6a,gBACA7a,KAAA,2BAA+B,YAC3B,IAAI4X,EAAa,iBAAoB0B,EAArC,IACA,IAAgB1B,EAAa,gBAAbA,IAChB,sCAGA5X,KAAK28B,iBAAmB38B,KAAK28B,gBAAjC,cAAmE38B,KAAJ,iBAA0B,iBAA0BA,KAAK28B,gBAA/B,aAA6D,CAAC,CACnJt7B,KADmJ,QAEnJM,MAAO,mBA5MnB,WAgNI,WAA2B,MACnB3B,KAAJ,kBAA0B,SAAAA,KAAA,4BAA8BA,KAAK28B,gBAAnC,QAjNlC,4BAoNI,gBAEI,IAAM9G,EAA6C71B,KAAK81B,IAAIzyB,MAAK,mBAAawyB,EAAAA,cAAwBrf,EAArC,WACjE,GACIid,GAAQ,gBAAgBoC,EAAjB,yBAAiDA,EAAjD,2BAAPpC,GACAzzB,KAAA,eAAoB61B,EAApB,gBAEAhb,GAAO,gBAAgBrE,EAAjB,QAANqE,4BA3NZ,8BAgOI,cACI,IAAMrE,EAA2BxW,KAAK41B,wBAAwBtc,EADkC,IAGhG,IACI,EACI9C,EAAAA,SAAAA,GAEAA,EAAAA,eAvOhB,yBA4OI,YACI,IAAIjU,EAAJ,KAEMszB,EAA6C71B,KAAK81B,IAAIzyB,MAAK,mBAAawyB,EAAAA,cAAwBvc,EAArC,MACjE,KAAa,CACTma,GAAQ,oBAAoBoC,EAArB,yBAAqDA,EAArD,QADE,qCAGT,IAAMrf,EAA2BxW,KAAK4Z,OAAOvW,MAAK,mBAAWmT,EAAAA,UAAkBqf,EAA7B,eAClD,IACItzB,EAASiU,EAATjU,qBAGR,UAxPR,yBA2PI06B,WAA8B,WAC1BpiB,GAAAA,kCACA,IAAIqiB,EAAJ,GAMA,OALAl9B,KAAA,2BAA+B,YACV,iBAAoBsZ,EAArC,IACA4jB,EAAgB5jB,EAAhB4jB,IAA+B,yBAA/BA,MAEJriB,GAAAA,GACA,GAnQR,2BAsQI,YAA0D,WAElDsiB,GAAJ,EAoBA,OAnBA1J,GAAAA,6BACAA,GAAAA,GACAA,GAAQzzB,KAARyzB,gBAEAzzB,KAAA,yBAA6B,YACzB,GAAIwW,EAAJ,MAAiB,OACP4mB,EAAY,SAAG,0BAA6B5mB,EAAhC,YAAG,EAArB,WACM6mB,EAAgBh3B,EAAQmQ,EAA9B,IAQA,OAPAid,GAAQ,qBAAD,iBAAPA,IACK2J,IAAD,GAAmCA,IAAvC,KACID,GAAAA,GAECC,GAAD,GAAoCA,GAAxC,IACID,GAAAA,IAEJ,EAEJ,YAEJ,GA5RR,gBA+RI,WACQn9B,KAAK28B,iBAAmB38B,KAA5B,QACQA,KAAK28B,gBAAT,cACI38B,KAAA,yDAEJA,KAAA,yDACAA,KAAA,6CALoC,YAOpCA,KAAA,uCAA8CA,KAAK6zB,MAAMqE,aAAzD,aAvSZ,iBA2SI,WACQl4B,KAAJ,kBACQA,KAAK28B,gBAAT,cACI38B,KAAA,6DAEJA,KAAA,6DACAA,KAAA,+DAjTZ,gBAsTI,WACI,qCACAA,KAAA,iBAxTR,cA2TI,WACI,mCACAA,KAAA,kBA7TR,yBAgUI,WACIyzB,GAAAA,+BACAzzB,KAAA,gBACAA,KAAA,uBAnUR,gBAsUI,WACIyzB,GAAAA,kBACAzzB,KAAA,iBACIA,KAAK28B,iBAAmB38B,KAA5B,OACQA,KAAK6zB,MAAT,aACIJ,GAAQ,kBAAkBzzB,KAAK6zB,MADR,YAGvB7zB,KAAA,uCAA8CA,KAAK6zB,MAAMsE,WAAan4B,KAAK6zB,MAAMqE,aAAjF,aA7UhB,OCLMrd,GAAShb,GAAAA,CAAf,6BAEay9B,GAAb,WAUI,kBAA0G,KARhG9M,KAAoB,KAS1BxwB,KAAA,cACAA,KAAA,SACAA,KAAA,eACAA,KAAA,aACAA,KAAA,eACAA,KAAA,UACAA,KAAA,oBAjBR,6CAoBIu9B,SAAAA,GACIv9B,KAAA,aArBR,UAwBI,YACIA,KAAA,QAzBR,mBA4BIie,WACIje,KAAA,KAAY,IAAI08B,GAAwB18B,KAA5B,YAA8CA,KAA1D,QACAA,KAAA,qBAAAA,OA9BR,QAiCIk8B,WACQl8B,KAAJ,MAAeA,KAAKwwB,KAAK0L,SAlCjC,aAqCIzwB,SAAAA,EAAAA,EAAAA,GACQzL,KAAJ,MAAeA,KAAKwwB,KAAK/kB,WAAW8N,EAArB,MAtCvB,sBAyCIikB,SAAAA,GACIx9B,KAAA,aACIA,KAAJ,MAAeA,KAAKwwB,KAAK9V,YAAY+iB,IA3C7C,UA8CIrf,WACI,OAAOpe,KAAK0Z,OAAZ,aA/CR,iBAkDIyE,SAAAA,GACI,MAAM,IAAIlJ,MAAV,4BAnDR,mBAsDI+I,SAAAA,GACI,MAAM,IAAI/I,MAAV,4BAvDR,aA0DIoJ,WACI,IAAI9b,GAAJ,EAEA,OADIvC,KAAJ,OAAeuC,EAASvC,KAAKwwB,KAAdjuB,cACf,GA7DR,cAgEIwb,WACI,MAAM,IAAI9I,MAAV,4BAjER,qBAoEIqJ,WACI,MAAM,IAAIrJ,MAAV,4BArER,eAwEI,WACIjV,KAAA,aACIA,KAAJ,MAAeA,KAAKwwB,KAAK0L,SA1EjC,gBA6EI,WACQl8B,KAAJ,MAAeA,KAAKwwB,KAAKuF,iBA9EjC,cAiFI,WACQ/1B,KAAJ,MAAeA,KAAKwwB,KAAKwF,eAlFjC,aAqFI,WACI,IAAIzzB,GAAJ,EAEA,OADIvC,KAAJ,OAAeuC,EAASvC,KAAKwwB,KAAdjuB,cACf,GAxFR,aA2FI,WAAyB,MAQrB,OAPAvC,KAAA,eACA6a,GAAO,gCAAD,SAAgC7a,KAAhC,aAAgC,EAAtC6a,UACI7a,KAAJ,OACIA,KAAA,aACAA,KAAA,YAAmBA,KAAKwwB,KAAxB,kBAEJpnB,EAAAA,2BAAAA,UACOpJ,KAAP,aAnGR,cAsGI,YACIA,KAAA,cACAA,KAAA,aAEIA,KAAK09B,0BAAT,GACQ19B,KAAJ,MAAeA,KAAKwwB,KAAKmN,YAAYt3B,GAEjCrG,KAAJ,MAAeA,KAAKwwB,KAAK9V,YAAYrU,GAEzC+C,EAAAA,2BAAAA,WA/GR,SAmHI,WACQpJ,KAAJ,MAAeA,KAAKwwB,KAAKoN,cAAa,IApH9C,OAuHI,WACQ59B,KAAJ,MAAeA,KAAKwwB,KAAKoN,cAAa,IAxH9C,SA2HI9b,WACI9hB,KAAA,YAAiBA,KAAjB,aACAA,KAAA,QA7HR,4BAiII,YACI,OAAOA,KAAK69B,kBAAkBC,0BAA9B,IAlIR,4BAqII,YACI,OAAO99B,KAAK69B,kBAAkBH,0BAA9B,IAtIR,UAyII,WACI,OAAO19B,KAAP,MA1IR,mBA6II+9B,SAAAA,EAAAA,KA7IJ,mBAiJI9H,SAAAA,GACI,IAAI1zB,GAAJ,EAMA,OALIvC,KAAJ,aACQA,KAAJ,OACIuC,EAASvC,KAAKwwB,KAAKyF,iBAAnB1zB,IAGR,GAxJR,cA2JI,cAEI,OAAQgc,EAAR,WACI,KAAM6R,GAAc4E,WAChBna,GAAAA,sBACA,MAEJ,KAAMuV,GAAc8E,mBAChBra,GAAAA,gCACA,MAEJ,KAAMuV,GAAc6E,UAChBpa,GAAAA,iCACA7a,KAAA,cACIA,KAAKg+B,WAAah+B,KAAtB,MAAiCA,KAAKg+B,UAAUC,UAAUj+B,KAAzB,KAAmCA,KAAnC,aACjC,MAEJ,KAAMowB,GAAc+E,SAChBta,GAAAA,oBACA,MAEJ,KAAMuV,GAAcgF,eAChBva,GAAAA,8BACA,MAEJ,KAAMuV,GAAciF,QAChBxa,GAAAA,+BACA7a,KAAA,cACIA,KAAKg+B,WAAah+B,KAAtB,MAAiCA,KAAKg+B,UAAUE,YAAYl+B,KAA3B,KAAqCA,KAH5C,aAK1B,MAEJ,KAAMowB,GAAckF,aAChBza,GAAAA,uBACA,MAEJ,KAAMuV,GAAcmF,MAEhB,GADA1a,GAAAA,2BACI7a,KAAJ,KAAe,OACPm+B,EAAY,SAAGn+B,KAAH,aAAG,EAAnB,yBACIA,KAAJ,UACQA,KAAKg+B,WAAah+B,KAAtB,MAAiCA,KAAKg+B,UAAUI,YAAYp+B,KAA3B,QAG7BA,KAAKg+B,WAAah+B,KAAtB,MAAiCA,KAAKg+B,UAAUK,WAAWr+B,KAA1B,QAErCA,KAAA,aAGJ,MAEJ,KAAMowB,GAAcoF,OAChB3a,GAAAA,kBAIR,UAnNR,KCZayjB,GAAb,8EACIZ,SAAAA,GACI,IAAIn7B,GAAJ,EAIA,OAHIK,EAAJ,YACIL,EAAUK,EAAAA,YAAmBuH,GAAWnH,cAAxCT,uBAEJ,GANR,4BASIu7B,SAAAA,GACI,IAAIv7B,GAAJ,EAIA,OAHIK,EAAJ,YACIL,EAAUK,EAAAA,YAAmBuH,GAAWnH,cAAxCT,uBAEJ,GAdR,K,8FCCA,IAAag8B,GAAb,Y,QAII,aAAqB,aACjB,sBACA,uBAFiB,E,EAJzB,G,EAAA,G,uEAAA,uCASI,YACI,qCACAv+B,KAAA,6BAXR,cAcIo+B,SAAAA,EAAAA,GACSp+B,KAAL,oBACIA,KAAA,6BAAiC,mBAAcY,EAAAA,YAAAA,EAAd,OAhB7C,aAoBIy9B,SAAAA,EAAAA,GACSr+B,KAAL,oBACIA,KAAA,6BAAiC,mBAAcY,EAAAA,WAAAA,EAAd,OAtB7C,cA0BIs9B,SAAAA,EAAAA,GACSl+B,KAAL,oBACIA,KAAA,6BAAiC,mBAAcY,EAAAA,YAAAA,EAAd,OA5B7C,YAgCIq9B,SAAAA,EAAAA,GACSj+B,KAAL,oBACIA,KAAA,6BAAiC,mBAAcY,EAAAA,UAAAA,EAAd,OAlC7C,O,8FCIA,IAAa49B,GAAb,Y,QAII,gBAAkE,OAC9D,wBAJMC,YAAuB,KAK7B,aACA,IAAMT,EAAY,IAAlB,GAH8D,OAI9D,mBACA,mB,yHAAA,KACA,gCAN8D,E,EAJtE,G,EAAA,G,uEAAA,kDAaIU,SAAAA,GACI1+B,KAAA,+BAdR,eAkBI,WACIA,KAAA,kBAnBR,gBAsBI,WACIA,KAAA,0BAvBR,cA0BI,WACIA,KAAA,wBA3BR,aA8BI,WACI,OAAOA,KAAKkgB,SAAZ,cA/BR,aAkCI,WACI,OAAOlgB,KAAKkgB,SAAZ,cAnCR,cAsCI,YACIlgB,KAAA,cAEIA,KAAKkgB,SAASwd,0BAAlB,GACI19B,KAAA,wBAGAA,KAAA,gCAEJA,KAAA,QA/CR,SAmDI,WACIA,KAAA,mBApDR,OAsDI,WACIA,KAAA,iBAvDR,SA0DI,WACIA,KAAA,YAAiBA,KAAjB,cA3DR,mBA8DI,WACIA,KAAA,4BACA,yCAhER,4BAmEI,YACI,OAAOA,KAAKkgB,SAAS4d,0BAArB,IApER,4BAsEI,YACI,OAAO99B,KAAKkgB,SAASwd,0BAArB,IAvER,mBA0EI,cACI19B,KAAA,gCA3ER,mBA8EI,YACI,OAAOA,KAAKkgB,SAAS+V,iBAArB,IA/ER,aAkFI,WACI,OAAOj2B,KAAKkgB,SAAZ,cAnFR,aAsFIzU,SAAAA,EAAAA,EAAAA,QAA4G,IAA3C2oB,IAAAA,GAA8B,GAC3Fp0B,KAAA,4BAvFR,OCNsB2+B,GAAtB,WAKI,cAAuC,KAH7BC,eAAwB,EAI9B5+B,KAAA,WACAA,KAAA,aAPR,uCAUI,YACIA,KAAA,mBAXR,0BAcI,YAA+C,WAC3CA,KAAA,iBACAA,KAAA,mBAAuB,mBAAcY,EAAAA,OAAAA,EAAsB,EAAtBA,SAAd,OAhB/B,0BAmBI,YAA+C,WAC3CZ,KAAA,iBACAA,KAAA,mBAAuB,mBAAcY,EAAAA,OAAAA,EAAsB,EAAtBA,SAAd,OArB/B,0BAwBI,YAA+C,WAC3CZ,KAAA,iBACAA,KAAA,mBAAuB,mBAAcY,EAAAA,OAAAA,EAAsB,EAAtBA,SAAd,OA1B/B,iBA6BI,WACI,IAAI2B,GAAJ,EAKA,OAJKvC,KAAL,gBACIuC,EAASvC,KAATuC,kBACAvC,KAAA,iBAEJ,GAnCR,sBAwCI,WACI,OAAOA,KAAP,eAzCR,K,0NCSA,IAAM6a,GAAShb,GAAAA,CAAf,qBACM4zB,GAAU5zB,GAAAA,CAAhB,4BAEMg/B,GAAAA,WAGF,cACI7+B,KAAA,a,2BAGJ+nB,QAAAA,SAAAA,GACI3E,EAAAA,iBAAAA,O,EAGJ7F,cAAAA,SAAAA,EAAAA,GACI,U,EAGJF,eAAAA,SAAAA,K,EACAG,cAAAA,SAAAA,K,EACAF,WAAAA,SAAAA,EAAAA,EAAAA,K,EACAF,YAAAA,SAAAA,EAAAA,K,EACAM,YAAAA,SAAAA,EAAAA,K,EACAD,cAAAA,SAAAA,K,EAEAwgB,UAAAA,SAAAA,EAAAA,GACIj+B,KAAA,2B,EAEJk+B,YAAAA,SAAAA,EAAAA,GACIl+B,KAAA,6B,EAGJo+B,YAAAA,SAAAA,EAAAA,GACIp+B,KAAA,6B,EAIJq+B,WAAAA,SAAAA,EAAAA,GACIr+B,KAAA,4B,EAnCF6+B,GA4DOC,GAAb,Y,QAKI,gBAAwD,aACpD,wBAJMC,SAAwB,GAK9BlkB,GAAO,6BAA6BmkB,EAApCnkB,WACA,eACA,WAAgB,IAAIgkB,GAA0B,GAA9C,IACA,qCALoD,E,EAL5D,G,EAAA,G,uEAAA,+CAaI,YACIhkB,GAAO,qBAAqBokB,EAA5BpkB,WACA7a,KAAA,iBACAA,KAAA,iBAH6C,IAbrD,aAmBI,aAnBJ,gBAsBIud,SAAAA,EAAAA,GAGI,OAFA1C,GAAO,kCAAkCuI,EAAzCvI,WACA4Y,GAAAA,GACOzzB,KAAKg/B,WAAWxd,2CAA2C,GAAlE,IAzBR,iBA4BInE,SAAAA,GACIxC,GAAO,iCAAiCuI,EADX,WAG7BpjB,KAAA,kBAAsB,YACnBi/B,EAAAA,uBAhCX,gBAoCIzhB,SAAAA,GAEI3C,GAAO,4BAA4BuI,EAAnCvI,WACA7a,KAAA,kBAAsB,YAClBi/B,EAAAA,aAxCZ,aA4CI3hB,SAAAA,EAAAA,EAAAA,GACIzC,GAAO,wBAAD,gBAAiDuI,EAAvDvI,WACA4Y,GAAAA,GACAzzB,KAAA,kBAAsB,YAClBi/B,EAAAA,iBAAAA,EAAAA,OAhDZ,cAoDI7hB,SAAAA,EAAAA,GACIvC,GAAO,mCAAmCuI,EAA1CvI,WACA4Y,GAAAA,GACAzzB,KAAA,kBAAsB,YAElBi/B,EAAAA,eACAA,EAAAA,kBA1DZ,iBA8DI3f,SAAAA,EAAAA,GACIzE,GAAO,sCAAsCuI,EAA7CvI,WACA4Y,GAAAA,GACAzzB,KAAA,kBAAsB,YAElBi/B,EAAAA,eACAA,EAAAA,kBApEZ,kBAwEI7f,SAAAA,EAAAA,KAxEJ,cA2EI1B,SAAAA,EAAAA,KA3EJ,eA8EI2B,SAAAA,EAAAA,GACIxE,GAAO,oCAAoCuI,EAA3CvI,WACA4Y,GAAAA,GACAzzB,KAAA,kBAAsB,YAClBi/B,EAAAA,YAAAA,OAlFZ,gBAsFIxhB,SAAAA,GACI5C,GAAO,2BAA2BuI,EADN,WAG5BpjB,KAAA,kBAAsB,YAClBi/B,EAAAA,WA1FZ,gBA8FI1f,SAAAA,EAAAA,GAII,GAHA1E,GAAO,sCAAsCuI,EAA7CvI,WACA4Y,GAF4D,GAIxDzzB,KAAJ,cAAwB,OAJoC,EAO5D,IAAIk/B,GAAJ,EAUA,OATAl/B,KAAA,kBAAsB,YACdi/B,EAAJ,eACIxL,GAAQ,cAAcwL,EAAf,UAAPxL,6BACAyL,GAAAA,MAGR,IACIA,EAA0BC,QAAW/b,EAAJ,UAAjC8b,uCAEJ,GA/GR,YAoHIjB,SAAAA,EAAAA,GACIpjB,GAAO,sCAAsCuI,EAA7CvI,WACA4Y,GAAAA,GACAzzB,KAAA,kBAvHR,cA0HIk+B,SAAAA,EAAAA,GACIrjB,GAAO,oCAAoCuI,EAA3CvI,WACA4Y,GAAAA,GACAzzB,KAAA,4BA7HR,cAgIIo+B,SAAAA,EAAAA,GACIvjB,GAAO,qCAAqCuI,EAA5CvI,WACA4Y,GAAAA,GACAzzB,KAAA,4BAnIR,aAsIIq+B,SAAAA,EAAAA,GACIxjB,GAAO,mCAAmCuI,EAA1CvI,WACA4Y,GAAAA,GACAzzB,KAAA,4BAzIR,kBA4II,WACI6a,GADiC,6BAGjC,IAAIukB,GAAJ,EAmBA,OAlBAp/B,KAAA,kBAAsB,YACdi/B,EAAJ,eACIxL,GAAQ,cAAcwL,EAAf,UAAPxL,6BACA2L,GAAAA,MAGR,IACIA,EAA0BD,QAA1BC,8CAGAp/B,KAAK++B,SAASt3B,OAAlB,IACIoT,GAAO,6CAA6C7a,KAAK++B,SAAS,GAAlElkB,WACc7a,KAAK++B,SAAS,GAA5B,eAEIK,GAAAA,EACAp/B,KAAA,qBAGR,GAlKR,OCtEaq/B,GAAb,WAUI,cAVJ,qBAGI,WAII,OAHMA,EAAN,YACIA,EAAAA,UAA6B,IAA7BA,GAEGA,EAAP,WAPR,sDAYI,YACI,IAAI5O,EAAuB,CACvB6O,kBADuB,OAEvBtuB,SAAUsf,GAAkBhoB,KAC5Bi3B,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAO,YAInBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,OAEHtuB,SAAUsf,GAAkBhoB,KAC5Bi3B,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAO,YAInBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,SAEHtuB,SAAUsf,GAAkBhoB,KAC5Bi3B,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAO,YAInBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,OAEHtuB,SAAUsf,GAAkBiD,KAC5BgM,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAO,cAInBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,OAEHtuB,SAAUsf,GAAkBiD,KAC5BgM,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAO,cAKnBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,SAEHtuB,SAAUsf,GAAkBiD,KAC5BgM,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAO,cAKnBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,WAEHtuB,SAAUsf,GAAkBhoB,KAC5Bi3B,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAQ,cAIpBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,GACAE,EAAO,CACH6O,kBADG,WAEHtuB,SAAUsf,GAAkBiD,KAC5BgM,WAAY,CACR,CACIC,kBADJ,OAEIxO,WAAYX,GAAeyC,SAC3B7B,OAAQ,YAIpBV,GAAkBvtB,cAAlButB,cAAAA,EAAAA,IA9GR,KCeM1V,GAAShb,GAAAA,CAAf,iCAEa4/B,GAAb,WAGI,cACIz/B,KAAA,UAJR,oCAOIie,WACI,IAAMyhB,EAAgB,IAAI1P,GAAkB7lB,GAAWnH,cAAvD,mBACAhD,KAAA,kBAAmC,CAAC0I,YAAYwgB,GAAqBJ,kBAAkB7I,YAEvF,IAAMhE,EAAmDnB,GAAyB9X,cAAzB8X,eAAsD9S,GAE/G,KAA4B,CACxB,IAAI23B,EAAoD,IAAIrC,GAAuBl1B,EAA3B,EAAoF,IAA5I,IAEIw3B,EAAoC,IAAIpB,GACxC,CACIrY,mBAAoB/d,EACpBge,aAAcje,GAHtB,GAKI03B,EAA8C,IAAIf,GAAiC92B,EAAvF,GACA63B,EAAAA,oBAAAA,GACA7/B,KAAA,2BACA,IAAI8/B,EAAuB5mB,GAA6BlW,cAA7BkW,6BAA3B,GACA0mB,EAAAA,WAAAA,GAAAA,GAAAA,GAEA,IAAMG,EAAuBJ,EAA7B,UAEA,IACI9kB,GAAO,mCAAmCklB,EAA1CllB,SACAA,GAAAA,GACAwkB,GAAiBr8B,cAAjBq8B,0CAAAA,IAIJ,IAAIW,EAAwCl3B,SAAAA,erEAlC,sBqECV+R,GAAAA,iDACAA,GAAAA,GACA,GACImlB,EAAAA,iBAAAA,SAA4C,YACxCnlB,GAAAA,4CACAglB,EAAAA,oBAKRA,EAAAA,YAAuB11B,GAAWnH,iBA/C9C,K,kGClBqBi9B,GAAAA,SAAAA,G,QAYjB,aAAc,OACV,YAAMA,EADI,oB,0FAZGA,CAA8BrY,IAA9BqY,GACVtX,aAA4B,CAC/B3T,GAD+B,wBAE/B4T,aAF+B,OAG/BC,SAAUjT,GAAgB4S,QAJbyX,GAOVnX,kBAAoB,CACvB7I,UAAW,kBCJnB,IAAMtC,GAAW9d,GAAAA,CAAjB,4BAEaqgC,GAAb,WAKI,gBAA4E,KAFpEpS,aAA0B,KAG9B9tB,KAAA,OACAA,KAAA,eAPR,iEAUI,iBAAoF,IAAtCmgC,IAAAA,GAAqB,GAC/D,IAAIC,EAAJ,EACIC,EAAJ,EAGMC,EAAYrU,KAAAA,MAAAA,IAAWA,KAAAA,UAA7B,IAQA,OAPA,IAAgBmU,EAAAA,GAChB,IAAiBC,EAAAA,GAMV,CAHY,QAAH,EAAG,OAAH,EAAG,QACJ,OAAH,EAAG,OAAH,EAAZ,MArBR,wCA0BI,cACI,OAAOv3B,SAAAA,cAAP,MA3BR,6CA8BI,gBAAyH,WACrH6U,GAAS,QAAQ3d,KAAKojB,KAAd,UAARzF,8BACAA,GAAAA,GAEI3d,KAAJ,cAAuBA,KAAK8tB,aAJyF,UAOrH,IAAIyS,EAAJ,EACI1b,EAAAA,OAAJ,IACI0b,EAAgB1b,EAAAA,MAAeA,EAAAA,OAA/B0b,IAKJ,IAAIC,EAAJ,GACIC,EAAJ,GACIC,EAAJ,GACIhB,EAAJ,GACIpR,EAAJ,GACAiS,EAAAA,SAAsB,YAClB,IAAMhb,EAAQpY,GAAAA,CAAO+P,EAAD,UAAN/P,kBAAAA,OAAd,wBACAmhB,EAAAA,KAAAA,GACA3Q,GAAS,eAATA,GAEIT,EAAJ,WACIA,EAAAA,UAAAA,SAA0B,YACtB,IAAMyjB,EAAe1S,EADoB,KAIzC,GADiBuS,EAAA,WAAwB,mBAAUn/B,GAAV,KACzC,EAAoB,CAChBsc,GAAS,mBAAD,cAA4CsQ,EAA5C,KAARtQ,gBACA6iB,EAAAA,KAAAA,GACAd,EAAAA,KAAmBzR,EAAnByR,MACA,IAAMkB,EAAU,wCAAhB,aAA4D3S,EAAAA,MAC5DwS,EAAAA,KAAgBG,EAAhBH,IACAC,EAAAA,KAAgBE,EAAhBF,WAQhB,IAAIhS,EAAJ,GAEA8R,EAAAA,SAAsB,cAClB,IAAMK,EAAenB,EAArB,GACMoB,EAASL,EAAf,GACMM,EAASL,EAAf,GAEA/iB,GAAS,wBAAD,gBAARA,gBAEA,IAAIjM,EAAJ,GACIsvB,EAAJ,GACIC,EAAJ,GAGAV,EAAAA,SAAsB,YAClBS,EAAAA,KAAAA,GACAC,EAAAA,KAFoC,GAKhC/jB,EAAJ,UAE8BA,EAAA,iBAAwB,YAC9C,OAAI+Q,EAAAA,MAAJ,IACI,aAAI4S,GACAljB,GAAS,kBAAD,iBAAsCsQ,EAA9CtQ,QACAjM,EAAAA,KAAUuc,EAAVvc,UAEAiM,GAAS,kBAAD,iBAAsCsQ,EAA9CtQ,UACAjM,EAAAA,KAAUuc,EAAVvc,YAEJ,OAMJA,EAAAA,KAAAA,GAIJA,EAAAA,KAAAA,MAGR,IAAIwvB,EAAU,CAAC3b,MAAD,EAAc7T,KAAd,EAA0Bid,gBAA1B,EAA+CC,YAA/C,EAAgEC,YAAhE,EAAgFzV,MAAM,GAEpGuE,GAAAA,GACA+Q,EAAAA,KA5CmC,MAiDvC,IAAIyS,EAAY,CACZ7S,OADY,EAEZI,SAAUA,GAGVha,EAAS,CACTvP,KADS,MAETuM,KAFS,EAGTod,QAAS,CACLC,YADK,EAELC,WAFK,EAGLC,qBAHK,EAILC,OAAQ,CACJC,EAAG,CACCC,aAAa,MAM7BzR,GAlHqH,GAqHrH3d,KAAA,aAAoB,IAAI,GAAJ,IAApB,IAnJR,mBAsJIie,aAtJJ,K,0NCEA,IAAamjB,GAAb,Y,QAoBI,aAAc,aACV,cAAMA,EAAN,UAAoCj3B,GAAWnH,cAA/C,kBAAgFgF,IAAhF,MACA,SAAgB,IAAIk4B,GAAuB,GAA3B,MAAhB,IAFU,E,EApBlB,G,EAAA,G,uEAAA,yCAyBI3iB,SAAAA,EAAAA,GACI,UA1BR,0BA6BIqD,SAAAA,EAAAA,GACI,OAAO9Y,EAAYF,EAAnB,IA9BR,gCAiCI4b,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,KAlCR,wCAsCIsiB,SAAAA,EAAAA,EAAAA,KAtCJ,6CAwCI1D,SAAAA,EAAAA,GACI,UAzCR,6CA4CIE,SAAAA,EAAAA,EAAAA,GACI,UA7CR,2CAgDIf,SAAAA,EAAAA,EAAAA,KAhDJ,O,8FAAaygB,GAEMnb,UAAqC,CAChDC,WAAY,CACRC,mBADQ,sBAERC,axEuBa,kBwErBjBC,mBALgD,SAMhDE,eANgD,GAOhDC,MAPgD,MAQhDlG,QAAS3K,GAAQiF,OACjB8F,OAAQ,CACJgG,iBADI,GAEJC,gBAFI,GAGJC,mBAHI,GAIJC,QAAQ,I,ICvBCwa,GAAAA,SAAAA,G,QAajB,aAAc,OACV,YAAMA,EADI,oB,0FAbGA,CAA8BzZ,IAA9ByZ,GACV1Y,aAA4B,CAC/B3T,GAD+B,wBAE/B4T,aAF+B,MAG/BC,SAAUjT,GAAgB2S,OAJb8Y,GAOVvY,kBAAoB,CACvBwY,KADuB,YAEvB5gB,OAAQ,iBCThB,IAAa6gB,GAAb,8EACI7D,SAAAA,GACI,UAFR,4BAKII,SAAAA,GACI,UANR,K,0NCWej+B,GAAAA,CAAf,sCAEa2hC,GAAb,Y,QAoDI,cAAuC,aACnC,cAAMA,EAAN,YAA2Dx5B,IAA3D,MACA,SAAgB,IAAImb,GAAiB,GAArB,MAAhB,IAFmC,E,EApD3C,G,EAAA,G,uEAAA,yCA0DI5F,SAAAA,EAAAA,GACI,UA3DR,0BA8DIqD,SAAAA,EAAAA,GACI,OAAO9Y,EAAYF,EAAnB,IA/DR,gCAkEI4b,SAAAA,EAAAA,GACI,OAAO5gB,EAAP,KAnER,wCAsEIsiB,SAAAA,EAAAA,EAAAA,GACI/b,EAAAA,UAAyBvG,EAAzBuG,MAvER,6CA0EIqY,SAAAA,EAAAA,GACI,UA3ER,cA8EI9D,SAAAA,EAAAA,GACIvT,GAAWnH,cAAXmH,4BAAAA,IA/ER,OAAaq3B,GAEMvb,UAAqC,CAChDC,WAAY,CACRC,mBADQ,YAERC,aAAcje,EACd0W,KAAM,CACFG,WAAY,CAAC9W,GACb4W,YAAa,CAAC5W,KAGtBme,mBATgD,IAUhDC,yBAA0B,CAAC,CAACjlB,KAAD,OAAeM,MAAO,MACjD4kB,eAXgD,4EAYhDC,MAZgD,MAahDlG,QAAS3K,GAAQiF,OACjB6L,UAAW,CACP3F,OADO,GAEP8D,SAFO,wBAGPD,OAHO,0BAIPD,QAAS,IAEbJ,MAAO,CACHxD,OADG,GAEH8D,SAFG,GAGHD,OAHG,GAIHD,QAAS,IAEbhE,OAAQ,CACJgG,iBADI,uCAEJC,gBAFI,OAGJC,mBAHI,OAIJC,QAJI,EAKJvC,MAAM,cACF,OAAI1hB,EAAJ,KACI,WAAIA,EAAAA,KACO,CAAP,uBAGO,CAAP,wBAGR,IAEJia,OAAQ,CACJkK,cADI,6CAEJC,YAFI,iCAGJhE,WAAW,CAAC,CAAC3hB,KAAD,cAAoBM,MAAM,WAAW,CAACN,KAAD,iBAAuBM,MAAM,SAAS,CAACN,KAAD,QAAcM,MAAM,8CCvC3H,IAAMkZ,GAAShb,GAAAA,CAAf,kCAEa4hC,GAAb,WAMI,cAA0C,KAJlCC,eAAqB,GAIa,KAHlCC,WAAuC,KAI3C3hC,KAAA,UACAA,KAAA,aAAoB,IAApB,EACAA,KAAA,sCAA2CgI,EAA3ChI,MACAmK,GAAWnH,cAAXmH,kBAAAA,yBAAoEnC,EAApEmC,MAVR,2CAaIpD,WACI,wCAdR,mBAiBIkX,WAAmB,WAEf,GADAje,KAAA,WAAkB8a,GAAyB9X,cAAzB8X,eAAsD9S,IACnEhI,KAAL,WAAsB,MAAM,IAAIiV,MAAV,gCAEtB,IAAMyqB,EAAgB,IAAI8B,GAA4BxhC,KAAtD,cACAA,KAAA,kBAAmC,CAAC0I,Y5EMvB,qB4EJb,IAAMuT,EAAmDnB,GAAyB9X,cAAzB8X,eAAsD9S,GAE/G,KAA4B,CACxB,IAAI23B,EAAoD,IAAIrC,GAAuBl1B,EAA3B,EAAsF,IAA9I,IAEIw3B,EAAoC,IAAIpB,GACxC,CACIrY,mBAAoB/d,EACpBge,aAAcje,GAHtB,GAKI03B,EAA8C,IAAIf,GAAiC92B,EAAvF,GACA63B,EAAAA,oBAAAA,GACA7/B,KAAA,2BACA,IAAI8/B,EAAuB5mB,GAA6BlW,cAA7BkW,6BAA3B,GACA0mB,EAAAA,WAAAA,GAAAA,GAAAA,GAEA,IAAMG,EAAuBJ,EAA7B,UAEA,IACI9kB,GAAO,mCAAmCklB,EAA1CllB,SACAA,GAAAA,GACAwkB,GAAiBr8B,cAAjBq8B,0CAAAA,IAIJ,IAAIW,EAAwCl3B,SAAAA,e5EhBnC,mB4EiBT+R,GAAAA,gDACAA,GAAAA,GACA,GACImlB,EAAAA,iBAAAA,SAA4C,YACxCnlB,GAAAA,0BACA,8BACA,gBACA,qBAKRglB,EAAAA,YAAAA,QA9DZ,kBAmEI,WACI,OAAO7/B,KAAP,cApER,gBAwEI,WACI6a,GAAAA,gCACA7a,KAAA,eAAsB8a,GAAyB9X,cAAzB8X,eAAsD9S,GAC5E6S,GAAO7a,KAAP6a,gBACA1Q,GAAWnH,cAAXmH,kBAAAA,kBAA6DnC,EAAqBhI,KAAlFmK,gBAAAA,GACAnK,KAAA,4BAAiCgI,EAA0BhI,KAAK0hC,eAAhE,eA7ER,cAgFI,WACI7mB,GAAAA,0BACAA,GAAO7a,KAAP6a,gBAEA1Q,GAAWnH,cAAXmH,kBAAAA,kBAA6DnC,EAAqBhI,KAAlFmK,eAAAA,GAAAA,IApFR,eAuFItD,SAAAA,EAAAA,EAAAA,GAAqE,WACjEgU,GAAUpZ,EAAJ,IAANoZ,GACIxZ,IAAS2G,IACT6S,GAD+B,mBAG/B7a,KAAA,oBAEAqL,EAAAA,SAAiB,YACR6R,EAAD,WAAJ,UAA2BA,EAAAA,YACvB,uBAIJld,KAAJ,gBACI6a,GAAAA,kDACA7a,KAAA,4BAAiCgI,EAA0BhI,KAAK0hC,eAAhE,gBAGA7mB,GAAAA,oEACA7a,KAAA,mBA1GhB,wBA+GI8G,SAAAA,EAAAA,EAAAA,GACQzF,IAAS2G,IACT6S,GAAAA,mCACAA,GAAAA,GACA5Z,QAAAA,IAAAA,GACAjB,KAAA,iCACAA,KAAA,gBArHZ,0BAyHI2G,SAAAA,EAAAA,EAAAA,GACI,GAAItF,IAAS2G,EAA2B,CAEpC,IAAIzH,EAAaP,KAAK0hC,eAAeE,UAAUnhC,WAAU,mBAAkBwtB,EAAAA,MAAiB4T,EAAnC,OACzDhnB,GAAO,yCAAPA,GACAA,GAAAA,GACIta,GAAJ,GACIP,KAAA,qCAEJA,KAAA,gBAlIZ,0BAsII4G,SAAAA,EAAAA,EAAAA,EAAAA,GACI,GAAIvF,IAAS2G,EAA2B,CAEpC,IAAIzH,EAAaP,KAAK0hC,eAAeE,UAAUnhC,WAAU,mBAAkBwtB,EAAAA,MAAiB6T,EAAnC,OACzDjnB,GAAO,yCAAPA,GACAA,GAAAA,GACIta,GAAJ,GACIP,KAAA,uCAEJA,KAAA,gBA/IZ,SAoJI4c,SAAAA,EAAAA,EAAAA,GACI/B,GAAAA,6CACAA,GAAAA,GACA7a,KAAA,+BAAoCgI,EAApC,OAvJR,SAyJI8U,SAAAA,EAAAA,EAAAA,GACIjC,GAAAA,0CACAA,GAAAA,GACA7a,KAAA,+BAAoCgI,EAApC,SA5JR,SA8JI6U,SAAAA,EAAAA,EAAAA,GACIhC,GAAAA,4CACAA,GAAAA,GACA7a,KAAA,iCAAsCgI,EAAtC,SAjKR,KCrBA8E,aAAAA,MAAAA,iCAGAjN,IAAAA,IAAYoB,QAAAA,KAAAA,KAAZpB,SAkCA,IAAMgb,GAAShb,GAAAA,CAAf,OAEqBwvB,GAAAA,WA+BjB,aAEIrvB,KAAA,qBAA4BA,KAAK+hC,qBAAqB/9B,KAAtDhE,MACAA,KAAA,wBAA+BA,KAAKgiC,wBAAwBh+B,KAA5DhE,MACAA,KAAA,eAAsBA,KAAK2c,eAAe3Y,KAA1ChE,MACAA,KAAA,yBAAgCA,KAAKiiC,yBAAyBj+B,KAA9DhE,MACAA,KAAA,yBAAgCA,KAAKkiC,yBAAyBl+B,KAA9DhE,MAEAmK,GAAWnH,cAAXmH,qBAAAA,KAAoDY,OAApDZ,c,EAnCUnH,YAAd,WAII,OAHMqsB,EAAN,YACIA,EAAAA,UAAgB,IAAhBA,GAEGA,EAAP,W,2BAkCJ5kB,eAAAA,WACI,OAAON,GAAWnH,cAAlB,qB,EAGIm/B,4BAAR,WAEIr5B,SAAAA,e7EtEkB,4B6EsElBA,iBAAAA,QAA2E9I,KAFzC,sBAIlC8I,SAAAA,e7ExEkB,+B6EwElBA,iBAAAA,QAA8E9I,KAJ5C,yBAMlC8I,SAAAA,e7E1EkB,gC6E0ElBA,iBAAAA,QAA6E9I,KAN3C,0BAQlC8I,SAAAA,e7EtEY,gC6EsEZA,iBAAAA,QAA6E9I,KAR3C,0BAUlCA,KAAA,mBAA0B8I,SAAAA,e7E9ER,sB6EiFlB9I,KAAA,4CAAkDA,KAAlD,iB,EAGIoiC,qBAAR,WAEIpiC,KAAA,kBAAyB,IAAzB,GACA,IAAM+oB,EAAiB,IAAI,GAAe5e,GAAWnH,cAArD,mBACAhD,KAAA,4BAA+C,CAAC0I,YAAaggB,GAAAA,kBAAAA,iBAC7D,IAAM2Z,EAAiB,IAAI,GAAkBl4B,GAAWnH,cAAxD,mBACAhD,KAAA,4BAA+C,CAAC0I,YAAaggB,GAAAA,kBAAAA,aAC7D,IAAMyC,EAAe,IAAI,GAAgBhhB,GAAWnH,cAApD,mBACAhD,KAAA,4BAA6C,CAAC0I,YAAaggB,GAAAA,kBAAAA,UAC3D1oB,KAAA,sC,EAGIsiC,eAAR,WAEItiC,KAAA,YAAmB,IAAnB,GACAA,KAAA,SAAgB,IAAhB,GACAA,KAAA,oBAAyBA,KAAzB,SAAwC,CAAC0I,YAAaugB,GAAAA,kBAAAA,WAEtD,IAAMsZ,EAAc,IAAI,GAAkBp4B,GAAWnH,cAArD,mBACAhD,KAAA,sBAAsC,CAAC0I,YAAaugB,GAAAA,kBAAAA,UACpDjpB,KAAA,6BACAA,KAAA,gC,EAGJwiC,eAAAA,WACI3nB,GADa,mBAGb7a,KAAA,OAAc8I,SAAAA,eAAd,QAEA9I,KAAA,uBACAA,KAAA,iBACAA,KAAA,8BAEAA,KAAA,qBAA4B,IAA5B,GACA,OAA+BA,KAA/B,0CAEA,QAZa,mBAcbA,KAAA,sBAA6B,IAA7B,GACAA,KAAA,8BAAmC,IAAnC,GAA4D,CAAC0I,YAAau3B,GAAsBnX,kBAAkB7I,YAClHjgB,KAAA,yCAEAA,KAAA,sBAA6B,IAA7B,GACAA,KAAA,mBAA0B,IAAIyhC,GAA4BzhC,KAA1D,uBACAA,KAAA,sCAEAmK,GAAWnH,cAAXmH,c,EAKJs4B,gBAAAA,WACIziC,KAAA,4BACAA,KAAA,kCACAA,KAAA,sC,EAGJ+hC,qBAAAA,SAAAA,GACIlnB,GAAAA,6BACA0D,EAF+B,iBAK1BpU,GAAWnH,cAAhB,aAKAhD,KAAA,+BAHI+K,OAAAA,SAAAA,KAAuB9C,G,EAM/Bg6B,yBAAAA,SAAAA,GACIpnB,GAAAA,iCACA0D,EAFmC,iBAK9BpU,GAAWnH,cAAhB,aAKAhD,KAAA,mCAHI+K,OAAAA,SAAAA,KAAuB9C,G,EAM/Bi6B,yBAAAA,SAAAA,GACIrnB,GAAAA,iCACA0D,EAFmC,iBAK9BpU,GAAWnH,cAAhB,aAKAhD,KAAA,mCAHI+K,OAAAA,SAAAA,KAAuB9C,G,EAO/B+5B,wBAAAA,SAAAA,GACInnB,GAAAA,gCACA0D,EAFkC,iBAK7BpU,GAAWnH,cAAhB,aAKAhD,KAAA,kCAHI+K,OAAAA,SAAAA,KAAuB9C,G,EAM/B0U,eAAAA,SAAAA,GACI9B,GADoC,sBAK/B1Q,GAAWnH,cAAhB,cAKAhD,KAAA,4BACA,GACIA,KAAA,4BALA+K,OAAAA,SAAAA,KAAuB9C,G,EAU/By6B,aAAAA,SAAAA,GAEI,IAAItU,EAAJ,oCACIuU,EAAJ,IACIvU,GAAU,uDAAJ,EAANA,iBAEApuB,KAAJ,qBAA6BA,KAAK4iC,mBAAmB7K,UAAY,GAApC,I,EAGjC8K,+BAAAA,SAAAA,GACI7iC,KAAA,qCACAA,KAAA,sCACAA,KAAA,uDAA4DgI,EAA5D,O,EAGJ86B,mBAAAA,WACI9iC,KAAA,uC,EA7MaqvB,GAkNrBjmB,GAAE,WACEimB,GAAAA,cAAAA,qB,eC/PJ,IAAIyG,EAAM,CACT,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,IACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,IACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,IACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,aAAc,IACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,IACX,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,QAAS,KACT,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,gBAAiB,KACjB,aAAc,KACd,gBAAiB,KACjB,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,GACR,UAAW,GACX,OAAQ,IACR,UAAW,IACX,OAAQ,KACR,UAAW,KACX,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,aAAc,IACd,UAAW,IACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,IACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,WAAY,KACZ,cAAe,KACf,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,IACR,UAAW,IACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,YAAa,KACb,eAAgB,KAChB,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,QAAS,KACT,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,UAAW,KACX,aAAc,KACd,QAAS,KACT,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,QAAS,KACT,WAAY,KACZ,QAAS,KACT,aAAc,IACd,gBAAiB,IACjB,WAAY,KACZ,UAAW,KACX,aAAc,KACd,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,UAAW,KACX,OAAQ,KACR,YAAa,IACb,eAAgB,IAChB,UAAW,KACX,OAAQ,KACR,UAAW,KACX,aAAc,KACd,gBAAiB,KACjB,OAAQ,KACR,UAAW,KACX,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,KACd,UAAW,KACX,aAAc,MAIf,SAASiN,EAAeC,GACvB,IAAIhuB,EAAKiuB,EAAsBD,GAC/B,OAAOE,EAAoBluB,GAE5B,SAASiuB,EAAsBD,GAC9B,IAAIE,EAAoBC,EAAErN,EAAKkN,GAAM,CACpC,IAAII,EAAI,IAAInuB,MAAM,uBAAyB+tB,EAAM,KAEjD,MADAI,EAAEC,KAAO,mBACHD,EAEP,OAAOtN,EAAIkN,GAEZD,EAAeO,KAAO,WACrB,OAAOC,OAAOD,KAAKxN,IAEpBiN,EAAeS,QAAUP,EACzBQ,EAAOC,QAAUX,EACjBA,EAAe/tB,GAAK,OClShB2uB,EAA2B,GAG/B,SAAST,EAAoBU,GAE5B,IAAIC,EAAeF,EAAyBC,GAC5C,QAAqBlL,IAAjBmL,EACH,OAAOA,EAAaH,QAGrB,IAAID,EAASE,EAAyBC,GAAY,CACjD5uB,GAAI4uB,EACJE,QAAQ,EACRJ,QAAS,IAUV,OANAK,EAAoBH,GAAUI,KAAKP,EAAOC,QAASD,EAAQA,EAAOC,QAASR,GAG3EO,EAAOK,QAAS,EAGTL,EAAOC,QAIfR,EAAoBe,EAAIF,ExF5BpBrkC,EAAW,GACfwjC,EAAoBgB,EAAI,CAAC3hC,EAAQ4hC,EAAUC,EAAIt+B,KAC9C,IAAGq+B,EAAH,CAMA,IAAIE,EAAeC,EAAAA,EACnB,IAASC,EAAI,EAAGA,EAAI7kC,EAAS+H,OAAQ88B,IAAK,CAGzC,IAFA,IAAKJ,EAAUC,EAAIt+B,GAAYpG,EAAS6kC,GACpCC,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAAS18B,OAAQg9B,MACpB,EAAX3+B,GAAsBu+B,GAAgBv+B,IAAay9B,OAAOD,KAAKJ,EAAoBgB,GAAGQ,OAAOC,GAASzB,EAAoBgB,EAAES,GAAKR,EAASM,MAC9IN,EAASt2B,OAAO42B,IAAK,IAErBD,GAAY,EACT1+B,EAAWu+B,IAAcA,EAAev+B,IAG7C,GAAG0+B,EAAW,CACb9kC,EAASmO,OAAO02B,IAAK,GACrB,IAAIK,EAAIR,SACE1L,IAANkM,IAAiBriC,EAASqiC,IAGhC,OAAOriC,EAvBNuD,EAAWA,GAAY,EACvB,IAAI,IAAIy+B,EAAI7kC,EAAS+H,OAAQ88B,EAAI,GAAK7kC,EAAS6kC,EAAI,GAAG,GAAKz+B,EAAUy+B,IAAK7kC,EAAS6kC,GAAK7kC,EAAS6kC,EAAI,GACrG7kC,EAAS6kC,GAAK,CAACJ,EAAUC,EAAIt+B,IyFJ/Bo9B,EAAoB2B,EAAKpB,IACxB,IAAIqB,EAASrB,GAAUA,EAAOsB,WAC7B,IAAOtB,EAAiB,QACxB,IAAM,EAEP,OADAP,EAAoB8B,EAAEF,EAAQ,CAAEzM,EAAGyM,IAC5BA,GCLR5B,EAAoB8B,EAAI,CAACtB,EAAS1oB,KACjC,IAAI,IAAI2pB,KAAO3pB,EACXkoB,EAAoBC,EAAEnoB,EAAY2pB,KAASzB,EAAoBC,EAAEO,EAASiB,IAC5EpB,OAAO0B,eAAevB,EAASiB,EAAK,CAAEO,YAAY,EAAMC,IAAKnqB,EAAW2pB,MCJ3EzB,EAAoBC,EAAI,CAACiC,EAAKC,IAAU9B,OAAO+B,UAAUC,eAAevB,KAAKoB,EAAKC,GCAlFnC,EAAoBsC,IAAO/B,IAC1BA,EAAOgC,MAAQ,GACVhC,EAAO1E,WAAU0E,EAAO1E,SAAW,IACjC0E,G,MCER,IAAIiC,EAAkB,CACrB,IAAK,GAaNxC,EAAoBgB,EAAEO,EAAKkB,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4Bn0B,KACvD,IAGIkyB,EAAU+B,GAHTxB,EAAU2B,EAAaC,GAAWr0B,EAGhB6yB,EAAI,EAC3B,GAAGJ,EAAS6B,MAAMhxB,GAAgC,IAAxB0wB,EAAgB1wB,KAAa,CACtD,IAAI4uB,KAAYkC,EACZ5C,EAAoBC,EAAE2C,EAAalC,KACrCV,EAAoBe,EAAEL,GAAYkC,EAAYlC,IAGhD,GAAGmC,EAAS,IAAIxjC,EAASwjC,EAAQ7C,GAGlC,IADG2C,GAA4BA,EAA2Bn0B,GACrD6yB,EAAIJ,EAAS18B,OAAQ88B,IACzBoB,EAAUxB,EAASI,GAChBrB,EAAoBC,EAAEuC,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBvB,EAASI,IAAM,EAEhC,OAAOrB,EAAoBgB,EAAE3hC,IAG1B0jC,EAAqBC,KAA2C,qCAAIA,KAA2C,sCAAK,GACxHD,EAAmBE,QAAQP,EAAqB5hC,KAAK,KAAM,IAC3DiiC,EAAmBt4B,KAAOi4B,EAAqB5hC,KAAK,KAAMiiC,EAAmBt4B,KAAK3J,KAAKiiC,K,GC7CvF,IAAIG,EAAsBlD,EAAoBgB,OAAExL,EAAW,CAAC,MAAM,IAAOwK,EAAoB,QAC7FkD,EAAsBlD,EAAoBgB,EAAEkC,I","sources":["webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/ui-framework/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/CarouselViewRenderer.ts","webpack://template-feo-react-babel/./src/util/DurationFunctions.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutsView.ts","webpack://template-feo-react-babel/./src/util/MiscFunctions.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesView.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/ui-framework/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/InputField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/CreatedByPermissionChecker.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/component/helper/ValidationHelper.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesCompositeView.ts","webpack://template-feo-react-babel/./src/component/sidebar/WorkoutSummarySidebar.ts","webpack://template-feo-react-babel/./src/component/renderer/WorkoutSummaryRenderer.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutSummaryView.ts","webpack://template-feo-react-babel/./src/component/sidebar/CurrentWorkoutSidebar.ts","webpack://template-feo-react-babel/./src/DefaultPermissionChecker.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutExercisesView.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutCompositeView.ts","webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) =>  {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (stateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                }\n                catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n}","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary:'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises:'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail:\"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone:'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\n\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1:any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame, isSameMongo} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user}, isSameMongo);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?:string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item from ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        apiSMLogger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        apiSMLogger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui-framework/form/validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field:FieldDefinition,isCreate:boolean):string;\n}\n\n\n\n\nexport type FieldDefinition = {\n    id:string,\n    isKey:boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName:string,\n    mandatory:boolean,\n    displayOnly?:boolean,\n    description?:string,\n    collectionOfDataObjectId?:string,\n    generator?:{\n        onCreation:boolean,\n        onModify:boolean,\n        generator:FieldValueGenerator\n    },\n    dataSource?:FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id:string,\n    displayName:string,\n    fields:FieldDefinition[],\n    rules?:ValidationRule\n}\n\n\n\n","import {View} from \"./view/interface/View\";\n\nexport type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string,\n    attributes?:Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType:string,\n    elementAttributes?:Attribute[],\n    elementClasses:string,\n    innerHTML?:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type getIcons = (name:string,item:any) => string[];\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    quickDelete?:boolean,\n    icons?:getIcons,\n    badge?:BasicElement,\n    delete?:BasicButtonElement,\n    drag?:Draggable,\n    background?:BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string,\n    attributes?:Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId:string,\n    dataSourceId:string,\n    drop?:Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig:ViewDOMConfig,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    keyType: KeyType,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition:RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?:BasicElement,\n    actionContainer:BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui-framework/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui-framework/ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private previousFieldValues: FieldNameValue[];\n\n    private static dateRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {}\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui-framework/form/FormUITypeDefs\";\n\nexport const FIELD_ID:string = 'id';\nexport const FIELD_CreatedBy:string = 'createdBy';\nexport const FIELD_ModifiedBy:string = 'modifiedBy';\nexport const FIELD_CreatedOn:string = 'createdOn';\nexport const FIELD_ModifiedOn:string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc:string = 'Created By';\nexport const FIELD_ModifiedBy_Desc:string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc:string = 'Created On';\nexport const FIELD_ModifiedOn_Desc:string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    private constructor() {}\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition):DisplayOrder[] {\n        let result:DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef,index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        let objDef:DataObjectDefinition = {\n            id:id,\n            displayName:displayName,\n            fields:[]\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef:FieldDefinition = {\n                id:idFieldName,\n                isKey:true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName:'Id',\n                mandatory:true,\n                generator: {\n                    generator:ops,\n                    onModify:false,\n                    onCreation:true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    private addCreatedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_CreatedOn,FIELD_CreatedOn_Desc,FieldType.datetime,true,FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedOn,FIELD_ModifiedOn_Desc,FieldType.datetime,true,FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields,FIELD_CreatedBy,FIELD_CreatedBy_Desc,FieldType.userId,true,FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedBy,FIELD_ModifiedBy_Desc,FieldType.userId,true,FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields:FieldDefinition[],keyType:KeyType, id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        let fieldDef:FieldDefinition = {\n            id:id,\n            isKey:false,\n            idType: keyType,\n            type: type,\n            displayName:displayName,\n            mandatory:isMandatory,\n            displayOnly:false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation:true,\n                onModify:false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    private addNumericFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addStringFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n}","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport moment from \"moment\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    protected definitions:DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public findDefinition(id:string):DataObjectDefinition|null {\n        let result:DataObjectDefinition|null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result:DataObjectDefinition|null = this.findDefinition(id);\n        if (result) {\n            return result;\n        }\n        else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id,displayName,hasDataId,dataIdIsUUID,createModifierFields,idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition:DataObjectDefinition):any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch(fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef,fieldValue);\n                        break;\n                    }\n                }\n                                \n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id:string):any {\n        logger(`Creating instance for definition ${id}`);\n        let result:any = {};\n\n        const definition:DataObjectDefinition|null  = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options:ValueOption[];\n    private listeners:FieldValueOptionsListener[];\n\n    constructor(options:ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name:string,value:string) {\n        this.options.push({name,value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"./model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"./model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"./ui-framework/helper/SimpleValueDataSource\";\nimport {KeyType} from \"./ui-framework/ConfigurationTypes\";\nimport {DataObjectListener} from \"./model/DataObjectListener\";\nimport {DataObjectController} from \"./model/DataObjectController\";\nimport {isSameMongo} from \"./util/EqualityFunctions\";\nimport {v4} from \"uuid\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener,DataObjectListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n\n    constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName:STATE_NAMES.users,\n                serverURL:'',\n                api:API_Config.users,\n                isActive:true\n            },\n            {\n                stateName:STATE_NAMES.exerciseTypes,\n                serverURL:'',\n                api:API_Config.exerciseTypes,\n                isActive:true,\n                idField: '_id'\n            },\n            {\n                stateName:STATE_NAMES.workouts,\n                serverURL:'',\n                api:API_Config.workouts,\n                isActive:true,\n                idField: '_id'\n            }\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes,'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts,'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition:FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName,dataObj,false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName,dataObj,isSameMongo,false);\n                break;\n            }\n        }\n    }\n\n\n    addExerciseToCurrentWorkout(exerciseType:any):void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout:any):void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise:any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n}\n\n\n","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    ViewDOMConfig\n} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl:HTMLElement|null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n    abstract show(): void;\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n}\n","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event:AlertEvent):void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    private alertDiv:HTMLDivElement;\n    private alertTitle:HTMLHeadingElement;\n    private alertContent:HTMLParagraphElement;\n    private cancelButton:HTMLButtonElement;\n    private confirmButton:HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public startAlert(listener:AlertListener, title:string, content:string, context?:any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event:MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',confirmHandler);\n        }\n\n        const cancelHandler = (event:MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click',confirmHandler);\n        this.cancelButton.addEventListener('click',cancelHandler);\n    }\n\n}","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {\n    CollectionViewDOMConfig,\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier\n} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView,CollectionViewEventHandler,AlertListener {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        this.selectedItem = null;\n        this.eventForwarder = new CollectionViewListenerForwarder();\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n    }\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n    protected getDragData(event: DragEvent): any {\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.collectionUIConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.collectionUIConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.collectionUIConfig.keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.collectionUIConfig.detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.collectionUIConfig.detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n    public eventStartDrag(event: DragEvent): void {\n        avLogger(`view ${this.getName()}: drag start`);\n        avLoggerDetails(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        avLoggerDetails(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this, data);\n    }\n\n    public eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.collectionUIConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.collectionUIConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.collectionUIConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        console.log(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                avLoggerDetails(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this, selectedItem);\n            }\n        }\n    }\n\n    public eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.collectionUIConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.collectionUIConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.collectionUIConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.collectionUIConfig.detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n\n    public eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.collectionUIConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n        if (this.collectionUIConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.collectionUIConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                avLoggerDetails(selectedItem);\n                this.eventForwarder.itemAction(this, actionName, selectedItem);\n            }\n        }\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n    completed(event: AlertEvent): void {\n        avLoggerDetails(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this, event.context);\n        }\n    }\n\n}\n","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener,CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName:string) {\n        super(uiConfig,stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName,this);\n    }\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render():void {\n        this.updateViewForNamedCollection(this.collectionName,this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show():void {}\n    hidden():void{}\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemAction(view:View, actionName:string, selectedItem:any):void{}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, this.compareItemsForEquality, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n\n\n}\n","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import browserUtil from \"../../../util/BrowserUtil\";\nimport {EXTRA_ACTION_ATTRIBUTE_NAME, Modifier, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action,extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                            iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        action.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl,uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons:string[] = uiConfig.detail.icons(collectionName,item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {}\n\n}","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame, isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentUserSearches',\n            dataSourceId: VIEW_NAME.userSearch,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.number,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value}, isSameMongo)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSameMongo, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSame(item1,item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, this.compareItemsForEquality, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n\n\n\n}\n\nexport default UserSearchView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {isSame, isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener,CollectionViewListener {\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,new MemoryBufferStateManager(), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameRoom(item1,item2);\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs,newState,true);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n}\n\nexport default ChatLogsView;\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements CollectionViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View, config:SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'chatSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'exerciseTypesSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    Modifier,\n    ViewDOMConfig\n} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport { CollectionView } from '../../ui-framework/view/interface/CollectionView';\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasChanged(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: CollectionViewListener): void {}\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {}\n\n    show(): void {\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'favouriteUsers',\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            dataSourceId: VIEW_NAME.favouriteUsers,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\nexport default FavouriteUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'blockedUsers',\n            dataSourceId: VIEW_NAME.blockedUsers,\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\nexport default BlockedUserView;\n","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    Modifier,\n    RowPosition, SCREEN_WIDTH_LARGE,\n    SCREEN_WIDTH_MEDIUM, SCREEN_WIDTH_SMALL\n} from \"../../ConfigurationTypes\";\n\nconst avLogger = debug('carousel-renderer');\n\nexport class CarouselViewRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected config: CarouselDOMConfig;\n\n    private lastRenderedContainer:HTMLElement|null = null;\n    private lastRenderedCollectionName:string|null = null;\n    private lastRenderedCollection:any|null = null;\n    private previousWindowWidth:number = 0;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler, config: CarouselDOMConfig) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.config = config;\n    }\n\n    onDocumentLoaded(): void {\n        // we need to track window resizing\n        this.previousWindowWidth = window.innerWidth;\n\n        window.addEventListener('resize',(event) => {\n            const newWindowWidth = window.innerWidth;\n            let reRenderRequired:boolean = false;\n            if (newWindowWidth < this.previousWindowWidth) {\n                if (this.previousWindowWidth > SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth <= SCREEN_WIDTH_LARGE) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to large`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to medium`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth <= SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to small`);\n                    }\n                }\n            }\n            else {\n                if (this.previousWindowWidth <= SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth > SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        avLogger(`window increased and is now larger than small`);\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                        avLogger(`window increased and is now larger than medium`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth > SCREEN_WIDTH_LARGE) {\n                        avLogger(`window increased and is now larger than large`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n            }\n            this.previousWindowWidth = newWindowWidth;\n            if (this.lastRenderedContainer && this.lastRenderedCollection && this.lastRenderedCollectionName && reRenderRequired) {\n                this.setDisplayElementsForCollectionInContainer(this.lastRenderedContainer,this.lastRenderedCollectionName,this.lastRenderedCollection);\n            }\n        });\n\n\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n        const canDeleteItem = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n\n        avLogger(`view ${this.view.getName()}: creating carousel item`);\n        avLogger(item);\n\n        const collectionConfig = this.view.getCollectionUIConfig();\n\n\n        let childEl: HTMLElement = document.createElement(collectionConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, collectionConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, collectionConfig.resultsElementAttributes);\n        childEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n\n\n        if (collectionConfig.detail.background) {\n            let backgroundEl = document.createElement(collectionConfig.detail.background.elementType);\n            browserUtil.addRemoveClasses(backgroundEl, collectionConfig.detail.background.elementClasses);\n            browserUtil.addAttributes(backgroundEl, collectionConfig.detail.background.elementAttributes);\n            backgroundEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n            backgroundEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n            childEl.appendChild(backgroundEl);\n            this.view.renderBackgroundForItemInNamedCollection(backgroundEl, collectionName, item);\n        }\n\n\n        // the content may be structured\n        let textEl = childEl;\n        if (collectionConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, collectionConfig.detail.containerClasses);\n            contentEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(collectionConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, collectionConfig.detail.textElementClasses);\n            textEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (collectionConfig.extraActions || collectionConfig.detail.delete) {\n                let buttonsEl = document.createElement(this.config.actionContainer.elementType);\n                browserUtil.addRemoveClasses(buttonsEl, this.config.actionContainer.elementClasses);\n\n                contentEl.appendChild(buttonsEl);\n\n\n                if (collectionConfig.extraActions) {\n                    collectionConfig.extraActions.forEach((extraAction) => {\n                        const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                        if (hasPermissionForAction) {\n\n                            let action: HTMLElement = document.createElement('button');\n                            action.setAttribute('type', 'button');\n                            browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                            browserUtil.addAttributes(action,extraAction.attributes);\n                            if (extraAction.buttonText) {\n                                action.innerHTML = extraAction.buttonText;\n                            }\n                            if (extraAction.iconClasses) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                                iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                                iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                                action.appendChild(iconEl);\n                            }\n                            action.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                            action.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                            action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                            action.addEventListener('click', (event) => {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                this.eventHandler.eventActionClicked(event);\n                            });\n                            buttonsEl.appendChild(action);\n                        }\n                    });\n                }\n                if (collectionConfig.detail.delete && collectionConfig && canDeleteItem) {\n                    let deleteButtonEl: HTMLElement = document.createElement('button');\n                    deleteButtonEl.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(deleteButtonEl, collectionConfig.detail.delete.buttonClasses);\n                    browserUtil.addAttributes(deleteButtonEl, collectionConfig.detail.delete.attributes);\n                    if (collectionConfig.detail.delete.buttonText) {\n                        deleteButtonEl.innerHTML = collectionConfig.detail.delete.buttonText;\n                    }\n                    if (collectionConfig.detail.delete.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.detail.delete.iconClasses);\n                        iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                        deleteButtonEl.appendChild(iconEl);\n                    }\n                    deleteButtonEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                    deleteButtonEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventDeleteClickItem(event);\n                    });\n                    buttonsEl.appendChild(deleteButtonEl);\n                }\n\n            }\n\n            childEl.appendChild(contentEl);\n\n            if (collectionConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (collectionConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n        const displayText = this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n        // add icons\n\n\n        // add modifiers for patient state\n        if (collectionConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal);\n                    if (collectionConfig.icons && collectionConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.normal);\n                        iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active);\n                    if (collectionConfig.icons && collectionConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                        iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive);\n                    if (collectionConfig.icons && collectionConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.inactive);\n                        iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                iconEl.setAttribute(collectionConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, collectionConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating carousel results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // need to break the items up by row, and the last row is active (assumes increasing time order)\n        const numberOfResults = newState.length;\n\n        // number of items per row depends on view port\n        let itemsPerRow = this.config.itemsPerRow.xlarge;\n        if (window.innerWidth <= SCREEN_WIDTH_LARGE) {\n            itemsPerRow = this.config.itemsPerRow.large;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_MEDIUM) {\n           itemsPerRow = this.config.itemsPerRow.medium;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_SMALL) {\n            itemsPerRow = this.config.itemsPerRow.small;\n        }\n\n\n\n        const numberOfRows = Math.ceil(numberOfResults / itemsPerRow);\n        avLogger(`view ${this.view.getName()}: creating carousel with number of results per row of ${itemsPerRow} with rows ${numberOfRows}`);\n        for (let rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {\n            // create the row\n            let rowContainerEl = document.createElement(this.config.rowContainer.elementType);\n            browserUtil.addRemoveClasses(rowContainerEl, this.config.rowContainer.elementClasses);\n            browserUtil.addAttributes(rowContainerEl, this.config.rowContainer.elementAttributes);\n            //browserUtil.addAttributes(rowContainerEl,[{name:'style',value:'display:block'}]);\n\n            let rowEl = document.createElement(this.config.row.elementType);\n            browserUtil.addRemoveClasses(rowEl, this.config.row.elementClasses);\n            browserUtil.addAttributes(rowEl, this.config.row.elementAttributes);\n            rowContainerEl.appendChild(rowEl);\n\n            // if this the active row?\n            if (((rowIndex === 0) && this.config.activeRowPosition === RowPosition.first) ||\n                ((rowIndex === (numberOfRows - 1)) && this.config.activeRowPosition === RowPosition.last)) {\n                browserUtil.addRemoveClasses(rowContainerEl, this.config.activeRow.elementClasses);\n                browserUtil.addAttributes(rowContainerEl, this.config.activeRow.elementAttributes);\n            }\n\n            let itemIndex = rowIndex * itemsPerRow;\n\n            while (itemIndex < ((rowIndex + 1) * itemsPerRow) && (itemIndex < numberOfResults)) {\n                avLogger(`rowIndex ${rowIndex} item index ${itemIndex}`);\n                const item = newState[itemIndex];\n\n\n                let itemContainerEl = rowEl;\n                if (this.config.multipleItemsPerRowContainer) {\n                    itemContainerEl = document.createElement(this.config.multipleItemsPerRowContainer.elementType);\n                    browserUtil.addRemoveClasses(itemContainerEl, this.config.multipleItemsPerRowContainer.elementClasses);\n                    browserUtil.addAttributes(itemContainerEl, this.config.multipleItemsPerRowContainer.elementAttributes);\n                    rowEl.appendChild(itemContainerEl);\n                }\n\n                const itemEl = this.createDisplayElementForCollectionItem(collectionName, item);\n                itemContainerEl.appendChild(itemEl);\n                itemIndex++;\n            }\n\n\n            containerEl.appendChild(rowContainerEl);\n\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        this.lastRenderedContainer = containerEl;\n        this.lastRenderedCollectionName = collectionName;\n        this.lastRenderedCollection = newState;\n\n    }\n\n}","export function addDurations(duration1:string, duration2:string):string {\n    const durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid:boolean = durationRegexp.test(duration1);\n    const duration2Valid:boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components:string[] = duration1.split(':');\n        const duration2Components:string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        let sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0)?sumHours + ':':''}${(sumMinutes < 10)?'0'+sumMinutes:sumMinutes}:${(sumSeconds < 10)?'0'+sumSeconds:sumSeconds}`\n    }\n    else {\n        return '00:00';\n    }\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {\n    CarouselDOMConfig,\n    KeyType, Modifier,\n    RowPosition\n} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\n\nimport debug from 'debug';\nimport {CarouselViewRenderer} from \"../../ui-framework/view/renderer/CarouselViewRenderer\";\nimport moment from \"moment\";\nimport {addDurations} from \"../../util/DurationFunctions\";\nimport {truncateString} from \"../../util/MiscFunctions\";\nimport Chart from 'chart.js/auto';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport App from \"../../App\";\n\nconst logger = debug('workouts-view');\n\ntype ExerciseSummary = {\n    weight:number,\n    distance:number,\n    duration:string\n}\n\nexport class WorkoutsView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CarouselDOMConfig = {\n        itemsPerRow: {\n            small:1,\n            medium:2,\n            large: 2,\n            xlarge: 2\n        },\n        rowContainer: {\n            elementClasses: \"carousel-item\",\n            elementType: 'div',\n        },\n        activeRow: {\n            elementType: '',\n            elementClasses: 'active',\n        },\n        activeRowPosition:RowPosition.last,\n        row: {\n            elementClasses: \"row\",\n            elementType: 'div',\n        },\n        multipleItemsPerRowContainer: {\n            elementType: 'div',\n            elementClasses: 'col-sm-12 col-md-6 mb-2',\n        },\n        actionContainer: {\n            elementType:'div',\n            elementClasses:'card-footer d-flex w-100 justify-content-end'\n        },\n        collectionConfig: {\n            viewConfig: {\n                resultsContainerId: 'workouts',\n                dataSourceId: VIEW_NAME.workouts,\n                drop: {\n                    acceptTypes: [DRAGGABLE.typeExerciseType],\n                    acceptFrom: [DRAGGABLE.fromExerciseTypes]\n                }\n            },\n            resultsElementType: 'div',\n            resultsClasses: 'card',\n            keyId: '_id',\n            keyType: KeyType.string,\n            modifiers: {\n                normal:'bg-light',\n                inactive:'bg-light',\n                active:'bg-light',\n                warning:'bg-light',\n            },\n            detail: {\n                containerClasses: 'card-body',\n                textElementType: 'div',\n                textElementClasses: '',\n                select: true,\n                delete: {\n                    buttonClasses:'btn btn-warning btn-circle btn-md',\n                    iconClasses:'fas fa-trash text-white',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Delete this workout\"}]\n                },\n                background: {\n                    elementType:'div',\n                    elementClasses:'',\n                },\n            },\n            extraActions: [\n                {\n                    name: 'template',\n                    buttonText: '',\n                    buttonClasses: 'btn btn-primary btn-circle btn-md mr-2',\n                    iconClasses: 'fas fa-copy',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Add the exercises from this workout to the current workout.\"}]\n\n                },\n                {\n                    name: 'continue',\n                    buttonText: '',\n                    iconClasses:'fas fa-clipboard-list',\n                    buttonClasses: 'btn btn-primary btn-circle btn-md mr-2',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Continue this current workout\"}]\n                }\n            ],\n\n        },\n\n\n    }\n\n    private currentChart:Chart|null = null;\n\n\n    constructor() {\n        super(WorkoutsView.DOMConfig.collectionConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new CarouselViewRenderer(this, this,WorkoutsView.DOMConfig);\n        this.addEventCollectionListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return (selectedItem.completed);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n\n\n    private calculateExerciseSummary(item:any) : ExerciseSummary {\n        let result:ExerciseSummary = {\n            weight:0,\n            distance:0,\n            duration:'00:00'\n        };\n\n        if (item.exercises) {\n            for (let index = 0;index < item.exercises.length;index++) {\n                const exercise = item.exercises[index];\n                result.weight += exercise.weight;\n                result.distance += exercise.distance;\n                result.duration = addDurations(result.duration,exercise.duration);\n            }\n        }\n        return result;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let summary = this.calculateExerciseSummary(item);\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h5>`;\n        buffer += `<ul class=\"list-group list-group-flush\">`;\n        buffer += `<li class=\"list-group-item\"><strong>Duration:</strong> ${summary.duration}</li>`;\n        if (summary.weight > 0)   buffer += `<li class=\"list-group-item\"><strong>Total Weight:</strong> ${summary.weight}</li>`;\n        if (summary.distance > 0) buffer += `<li class=\"list-group-item\"><strong>Total Distance: </strong> ${summary.distance}</li>`;\n        buffer += `</ul>`;\n        containerEl.innerHTML = buffer;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return (item.completed);\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        let result = false;\n        if (actionName === 'template') {\n            if ((item.completed) && (item.completed === true)) {\n                result = true;\n            }\n        }\n        if (actionName === 'continue') {\n            if (item.completed === false) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.inactive;\n        if (item.completed) {\n            if (item.completed !== true) {\n                result = Modifier.active;\n            }\n        }\n        return result;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n        if (this.currentChart) this.currentChart.destroy();\n        // we are going to render a chart for the workout\n        if (item.exercises) {\n            const dataSourceKeyId = this.getDataSourceKeyId();\n            const resultDataKeyId = this.getIdForItemInNamedCollection(name, item);\n\n            let canvas = document.createElement('canvas');\n            browserUtil.addAttributes(canvas,[{name:'style',value:'height:100%; width:100%'}]);\n            canvas.setAttribute(this.collectionUIConfig.keyId, resultDataKeyId);\n            canvas.setAttribute(dataSourceKeyId, this.collectionUIConfig.viewConfig.dataSourceId);\n            // chart labels are the exercise names (shortened to 10 characters)\n\n\n            let labels:string[] = [];\n            let data:any[] = [];\n            let bgColour:string[] = []\n            let brColour:string[] = [];\n\n            item.exercises.forEach((exercise: any) => {\n                labels.push(truncateString(exercise.name, 10));\n                if (exercise.type === 'cardio') {\n                    data.push(exercise.distance);\n                    bgColour.push(WorkoutsView.bgCardio);\n                    brColour.push(WorkoutsView.borderCardio);\n                }\n                else {\n                    data.push(exercise.weight);\n                    bgColour.push(WorkoutsView.bgStrength);\n                    brColour.push(WorkoutsView.borderStrength);\n                }\n            });\n            let chartData = {\n                labels: labels,\n                datasets: [{\n                    label:'Exercises',\n                    data: data,\n                    backgroundColor: bgColour,\n                    borderColor: brColour,\n                    borderWidth: 1\n                }]\n            };\n\n\n            const config = {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: false,\n                    animation:false,\n                    maintainAspectRatio:false,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                },\n            };\n\n            logger(config);\n\n            // @ts-ignore\n            this.currentChart = new Chart(canvas,config);\n            containerEl.appendChild(canvas);\n\n        }\n    }\n\n    private static bgStrength = 'rgba(255, 0, 0, 0.2)';\n    private static bgCardio = 'rgba(0, 50, 255, 0.2)';\n\n    private static borderStrength ='rgb(255, 50, 0)';\n    private static borderCardio = 'rgb(0, 50 , 255)';\n\n    public itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === WorkoutsView.DOMConfig.collectionConfig.extraActions[0].name) {\n            // add the current list of exercises to the current workout\n            Controller.getInstance().addWorkoutExercisesToCurrentWorkout(selectedItem);\n\n        }\n        // @ts-ignore\n        if (actionName === WorkoutsView.DOMConfig.collectionConfig.extraActions[1].name) {\n            // continue the current workout\n            App.getInstance().showCurrentWorkout();\n\n\n        }\n    }\n\n}\n\n","export function truncateString(str:string, num:number):string {\n    // If the length of str is less than or equal to num\n    // just return str--don't truncate it.\n    if (str.length <= num) {\n        return str\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...'\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport { CollectionView } from \"../../ui-framework/view/interface/CollectionView\";\nimport { View } from \"../../ui-framework/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../state/StateManager\";\n\nconst logger = debug('exercise-types-view');\n\nexport class ExerciseTypesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exerciseTypes',\n            dataSourceId: VIEW_NAME.exerciseTypes,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise type.\"}]\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n        extraActions: [{\n            name: 'addToWorkout',\n            buttonClasses:'btn bg-primary text-white btn-circle btn-md mr-1',\n            iconClasses:'fas fa-arrow-alt-circle-right',\n            attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Add this exercise to the current workout.\"}]\n        }]\n    };\n\n    constructor(stateManager:StateManager) {\n        super(ExerciseTypesView.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRenderer(this, this);\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        logger(selectedItem[FIELD_CreatedBy]);\n        if (selectedItem[FIELD_CreatedBy]) {\n            if (selectedItem[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        logger(item[FIELD_CreatedBy]);\n        if (item[FIELD_CreatedBy]) {\n            if (item[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === ExerciseTypesView.DOMConfig.extraActions[0].name) {\n            // add the exercise type the current workout\n            Controller.getInstance().addExerciseToCurrentWorkout(selectedItem);\n        }\n    }\n\n\n}\n\n","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid:boolean,\n    message?:string,\n    resetOnFailure:boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field:FieldDefinition, currentValue:string|null):ValidationResponse;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field:FieldDefinition, currentValue:string):any;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field:FieldDefinition, currentValue:string):string|null;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field:FieldDefinition, currentValue:string):string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field:FieldDefinition, formValues:string[]):boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup\n}\n\nexport type FieldLabel = {\n    label:string,\n    attributes?:Attribute[],\n    classes?:string\n}\n\nexport type DescriptionText = {\n    message:string,\n    elementType:string,\n    elementClasses:string,\n}\n\nexport type DisplayOrder = {\n    fieldId:string,\n    displayOrder:number\n}\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder:number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?:{\n        container?:BasicElement,\n        label?: FieldLabel,\n        element:BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions\n}\n\nexport type FieldGroup = {\n    containedBy?:BasicElement,\n    fields:FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id:string,\n    displayName:string,\n    classes?:string,\n    unsavedChanges:BasicElement,\n    fieldGroups:FieldGroup[],\n    buttonsContainedBy?:BasicElement\n    deleteButton?:BasicButtonElement,// should be clickable\n    cancelButton:BasicButtonElement,// should be clickable\n    submitButton:BasicButtonElement  // should be clickable\n    activeSave?:string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId:string,\n    attributeId:string\n}\n\nexport const DATA_ID_ATTRIBUTE:string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target:Form,\n    formId:string,\n    eventType:FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event:FormEvent,formValues?:any):boolean; // return true to cancel the action\n}","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n};\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?:string,\n    values?:string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId:string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import {ComparisonType, ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if (condition.values) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if (condition.sourceDataFieldId) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: [convertedRule]\n            }\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${field.getValue()}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits:string[] = values.split(',');\n            let foundInValue:boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${field.getValue()} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed:false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesTargetFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field,values);\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field,values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                // only need messages for invalid responses\n                if (rule.response === ConditionResponse.invalid) response.message = ruleCheck.message;\n                return false;\n            }\n            logger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                logger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string,includeSourceFields:boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    }\n                    else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId:string, field:FieldDefinition,onlyRulesOfType:ConditionResponse|null) : RuleCheck {\n        logger(`Checking invalidation only rules for form ${formId}, data field ${field.id}`);\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,false);\n\n        let result:RuleCheck = {\n            ruleFailed:false\n        }\n\n        rules.every((rule) => { // we only want rules that make a field invalid\n            if ((onlyRulesOfType && rule.response === onlyRulesOfType) || !onlyRulesOfType) {\n                let response: RuleResponse = this.executeRule(rule);\n                if (response.ruleFailed) {\n                    flogger(`Rule failed for form ${formId} with field ${field.displayName} with message ${response.message}`);\n                    result.ruleFailed = true;\n                    result.message = response.message;\n                    return false;\n                }\n            }\n            return true;\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form,FormListener,AlertListener,FieldListener{\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement|null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields:Field[] = [];\n    protected map:AttributeFieldMapItem[];\n    protected isInitialised:boolean = false;\n    protected hasChangedBoolean:boolean = false;\n    protected isDisplayOnly:boolean = false;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error (`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged():boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return  this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate():void;\n    protected abstract _startCreate():void;\n    protected abstract _reset():void;\n    protected abstract _visible():void;\n    protected abstract _hidden():void;\n    protected abstract _initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean):void;\n    protected abstract _displayOnly():void;\n    protected abstract _isSameObjectAsDisplayed(dataObj:any):boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj:any,field:Field,currentValue:string|null):void;\n    public abstract getFormattedDataObject(): any;\n    protected abstract _saveFinishedOrAborted():void;\n    protected abstract _saveIsActive():void;\n\n\n    public initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder,hasDeleteButton,hideModifierFields);\n    }\n\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    protected abstract clearUnsavedMessage():void;\n\n    protected abstract setUnsavedMessage():void;\n\n\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef:FieldDefinition):FieldUIConfig|null|undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result:FieldUIConfig|null|undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index ++;\n            }\n        }\n        return result;\n    }\n\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            }\n            else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n        if (isVisible && this.isDisplayOnly) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            // @ts-ignore\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this.uiDef.id, field.getFieldDefinition(),ConditionResponse.hide);\n            if (response.ruleFailed) {\n                // @ts-ignore\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n        console.log('stuff');\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.uiDef.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                // @ts-ignore\n                response = ValidationManager.getInstance().applyRulesToTargetField(this.uiDef.id, field.getFieldDefinition(),ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.uiDef.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                }\n                else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.isDisplayOnly = true;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName,`Are you sure you want to delete this information?`,FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.uiDef.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n\n    getId(): string {\n        let result = '';\n        if (this.uiDef) {\n            result = this.uiDef.id;\n        }\n        return result;\n    }\n\n    getFieldFromDataFieldId(dataFieldId:string): Field | undefined {\n        let result:Field|undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n           result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event:AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch(event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.uiDef.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n           field.clearReadOnly();\n        });\n    }\n\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n\n\n\n\n}","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../Controller\";\nimport {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons:HTMLInputElement[] = [];\n\n    public constructor() {}\n\n\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        }\n        else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n\n}","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {DisplayOrder, FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    private constructor() {\n    }\n\n\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition,displayOrders:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation:RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef,index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.duration):{\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    }\n                    else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder:DisplayOrder|undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue:number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder:displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                            validator: fieldOperations,\n                            messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                elementType: 'div',\n                elementClasses: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                elementAttributes: [{name:'style',value:'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            },\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            },\n            activeSave:'<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;',\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a,b) => { return (a.displayOrder - b.displayOrder);})\n\n        });\n\n        if (hasDeleteButton) {\n            formConfig.deleteButton = {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class ValidationEventHandler {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement:HTMLElement,isValid:boolean, value:string, message:string|undefined = undefined,resetOnFailure:boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId,field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement:HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement,validationResp.isValid,value,validationResp.message,validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId,field, newValue));\n\n            }\n        }\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    private constructor() {\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements:HTMLInputElement[]|null = null):void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners,subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                   subElement.addEventListener('blur',eventHandler);\n                });\n\n            }\n            else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker( );\n            $(fieldElement).datepicker( \"option\", \"dateFormat\",'dd/mm/yy' );\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n        }\n    {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements:HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners,subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container:radioGroupElement,\n            radioButtons:subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields:HTMLTextAreaElement[],\n    selectFields:HTMLSelectElement[],\n    radioButtonGroups: {\n        container:HTMLElement,\n        radioButtons:HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    private constructor() {}\n\n    private createFormButton(form:Form,formConfig:FormUIDefinition,formListeners:FormListener[],buttonDef:BasicButtonElement,eventType:FormEventType):HTMLButtonElement {\n        let buttonEl:HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl,buttonDef.buttonClasses);\n        buttonEl.setAttribute('id',`${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl,buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click',(event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent:FormEvent = {\n                target:form,\n                formId:formConfig.id,\n                eventType:eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n\n    public createFormElements(form:Form, formListeners:FormListener[],formConfig:FormUIDefinition,fieldListeners:FieldListener[]):FormFactoryResponse {\n        let formEl:HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id',formConfig.id);\n        formEl.setAttribute('name',formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl,formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements:HTMLInputElement[] = [];\n        let formTAElements:HTMLTextAreaElement[] = [];\n        let formRBGElements:{\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n            }[] = [];\n        let formSelectElements:HTMLSelectElement[] = [];\n\n        let unsavedMessage:HTMLElement = document.createElement(formConfig.unsavedChanges.elementType);\n        browserUtil.addRemoveClasses(unsavedMessage,formConfig.unsavedChanges.elementClasses);\n        if (formConfig.unsavedChanges.elementAttributes) browserUtil.addAttributes(unsavedMessage,formConfig.unsavedChanges.elementAttributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group:FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl,group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl,group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field:FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer:HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer,formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer,formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            }\n            else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl:HTMLButtonElement|undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form,formConfig,formListeners,formConfig.deleteButton,FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.cancelButton,FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.submitButton,FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result:FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage:unsavedMessage,\n            fields: formInputElements,\n            selectFields:formSelectElements,\n            radioButtonGroups:formRBGElements,\n            textFields:formTAElements,\n            deleteButton:deleteButtonEl,\n            cancelButton:cancelButtonEl,\n            submitButton:submitButtonEl\n        }\n\n        return result;\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string, fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement:HTMLInputElement):string{\n        let newValue:string|null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        }\n        else {\n            return '';\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden:boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        }\n        else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId,this.definition, value));\n        }\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        }\n        else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,false,'',message,false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId,this.definition,this.getValue(),message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = ''+newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    console.log(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl:HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0;index < selectEl.options.length;index++) {\n                        // @ts-ignore\n                        const option:HTMLOptionElement = selectEl.options.item(index);\n                        console.log(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            console.log(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    console.log(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue():void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId:string, field: FieldDefinition, currentValue: string, message: string): void {}\n    valueChanged(formId:string, field: FieldDefinition, newValue: string | null): void {}\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style','display:none');\n                }\n\n            }\n            else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,true,'');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            }\n            else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly','true');\n        this.element.setAttribute('disabled','true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly','true');\n                subElement.setAttribute('disabled','true');\n            });\n        }\n    }\n}\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport {AbstractField} from \"./field/AbstractField\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\nimport {isSame} from \"../../util/EqualityFunctions\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.uiDef.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.uiDef.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.uiDef.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.uiDef.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        }\n        else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModiferFields:boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef,displayOrder,hasDeleteButton,hideModiferFields);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup',(event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup',(event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            dlogger(`key up in form ${this.getName()}`);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result:string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId)||(currentObjId && !suppliedObjId)){\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            this.factoryElements.cancelButton.removeAttribute('disabled');\n            this.factoryElements.submitButton.removeAttribute('disabled');\n            // @ts-ignore\n            this.factoryElements.submitButton.innerHTML = this.uiDef.submitButton.buttonText;\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled','true');\n            }\n            this.factoryElements.cancelButton.setAttribute('disabled','true');\n            this.factoryElements.submitButton.setAttribute('disabled','true');\n        }\n    }\n\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // @ts-ignore\n                this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.buttonText;\n            }\n        }\n    }\n\n\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer,FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem:boolean;\n    protected containerId: string;\n    protected forwarder:DetailViewListenerForwarder|null;\n    protected view:DetailView|null;\n    protected permissionChecker:ObjectPermissionChecker;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker:ObjectPermissionChecker) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view:DetailView):void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean): void {\n        if (this.form) this.form.initialise(displayOrder,hasDeleteButton,hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly():boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item:any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item:any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view,this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view,this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view,formattedObj);\n                    }\n                    else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view,formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n}","import {ObjectPermissionChecker} from \"./ui-framework/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class CreatedByPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem:any|null = null;\n    protected renderer:DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer:DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        }\n        else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item:any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n    public hasPermissionToUpdateItem(item:any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName,selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[],hasDeleteButton:boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder,hasDeleteButton,hideModifierFields)\n    }\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners:DataObjectListener[];\n    protected isCreatingNew:boolean = false;\n    protected typeName:string;\n\n    protected constructor(typeName:string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener:DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    protected informListenersOfCreate(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName,dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName,dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName,dataObj));\n    }\n\n    public startNewObject():boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    protected abstract _startNewObject():boolean; // return false, if the creation was cancelled\n\n    public isCreatingNewObject():boolean {\n        return this.isCreatingNew;\n    }\n\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller:DetailViewListener;\n\n    constructor(controller:DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view:DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view,dataObj);\n    }\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view,dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view,dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view,dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback:any;\n\n    constructor(callback:any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this,'Discard Changes','There are unsaved changes.  Discard?',{});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener,DetailViewListener{\n    protected parentView:CollectionView;\n    protected children:DetailView[] = [];\n    protected delegate:ChildViewListenerDelegate;\n\n    constructor(typeName:string, parentView:CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView:DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise():void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('',selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n           childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection:boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew:boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import {Form} from \"../../ui-framework/form/Form\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"../../ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../ui-framework/form/validation/ValidationManager\";\n\nexport class ValidationHelper {\n    private static _instance: ValidationHelper;\n\n    public static getInstance(): ValidationHelper {\n        if (!(ValidationHelper._instance)) {\n            ValidationHelper._instance = new ValidationHelper();\n        }\n        return ValidationHelper._instance;\n    }\n\n    private constructor() {}\n\n    public setupValidationForExerciseTypeDetailsForm(form:Form) {\n        let rule: ValidationRule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n    }\n\n}","import SidebarViewContainer from \"../../ui-framework/container/SidebarViewContainer\";\nimport {ExerciseTypesView} from \"./ExerciseTypesView\";\nimport ExerciseTypesSidebar from \"../sidebar/ExerciseTypesSidebar\";\nimport {DataObjectDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {CreatedByPermissionChecker} from \"../../CreatedByPermissionChecker\";\nimport {DetailView} from \"../../ui-framework/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../ui-framework/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../ui-framework/form/Form\";\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"../../ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../ui-framework/form/validation/ValidationManager\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\n\nconst logger = debug('exercise-types-composite-view');\n\nexport class ExerciseTypesCompositeView {\n    private sideBar:SidebarViewContainer;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const exerciseTypes = new ExerciseTypesView(Controller.getInstance().getStateManager());\n        this.sideBar.addView(exerciseTypes,{containerId:ExerciseTypesSidebar.SidebarContainers.container});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.exerciseTypeDetail,exerciseTypeDefinition,new CreatedByPermissionChecker());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.exerciseTypeDetail,\n                    dataSourceId: VIEW_NAME.exerciseTypes\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.createNewExerciseType);\n            logger(`Setting up button for creating exercise types`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n}","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class WorkoutSummarySidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'workoutSummarySidebar',\n        expandedSize:'100%',\n        location: SidebarLocation.bottom\n    }\n\n    static SidebarContainers = {\n        container: 'workoutSummary',\n    }\n\n\n    constructor() {\n        super(WorkoutSummarySidebar.SidebarPrefs);\n    }\n}\n","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../../ui-framework/view/interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../../ui-framework/view/interface/CollectionViewEventHandler\";\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\n\nconst avLogger = debug('workout-summary-renderer');\n\nexport class WorkoutSummaryRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart:Chart|null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    private generateRandomExerciseColourAndBorder(isStrength:boolean = true) : string[] {\n        let red = 0;\n        let blue = 0;\n        let green = 50;\n\n        const newColour = Math.floor(Math.random() * 100) + 155;\n        if (isStrength) red = newColour;\n        if (!isStrength) blue = newColour;\n        const transparency = 0.4;\n\n        const background = `rgba(${red},${green},${blue},${transparency})`;\n        const border = `rgb(${red},${green},${blue})`;\n\n        return [background,border];\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating workout summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        let sevenWorkouts = newState;\n        if (newState.length > 7) {\n            sevenWorkouts = newState.slice(newState.length - 7);\n        }\n\n\n        // go through the workouts and find all the unique exercise names as data series names\n        let exerciseNames: string[] = [];\n        let exerciseBG: string[] = [];\n        let exerciseBR: string[] = [];\n        let exerciseTypes: string[] = [];\n        let labels: string[] = [];\n        sevenWorkouts.forEach((workout: any) => {\n            const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n            labels.push(label);\n            avLogger(`Added label ${label}`);\n\n            if (workout.exercises) {\n                workout.exercises.forEach((exercise: any) => {\n                    const exerciseName = exercise.name;\n                    // do we have this exercise already?\n                    let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n                    if (foundIndex < 0) {\n                        avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n                        exerciseNames.push(exerciseName);\n                        exerciseTypes.push(exercise.type);\n                        const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n                        exerciseBG.push(colours[0]);\n                        exerciseBR.push(colours[1]);\n                    }\n                })\n            }\n        });\n\n        // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n\n        let datasets: any[] = [];\n\n        exerciseNames.forEach((name, index) => {\n            const exerciseType = exerciseTypes[index];\n            const itemBG = exerciseBG[index];\n            const itemBR = exerciseBR[index];\n\n            avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n\n            let data: number[] = [];\n            let bg: string[] = [];\n            let br: string[] = [];\n\n\n            sevenWorkouts.forEach((workout: any) => {\n                bg.push(itemBG);\n                br.push(itemBR);\n\n                // find the exercise name\n                if (workout.exercises) {\n\n                    const didntFindExercise = workout.exercises.every((exercise: any) => {\n                        if (exercise.name == name) {\n                            if (exerciseType === 'strength') {\n                                avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n                                data.push(exercise.weight);\n                            } else {\n                                avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n                                data.push(exercise.distance);\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                    // not found - zero value\n                    if (didntFindExercise) {\n                        data.push(0);\n                    }\n\n                } else {\n                    data.push(0);\n                }\n            });\n            let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order:1};\n            let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n            avLogger(dataset);\n            datasets.push(dataset);\n            //datasets.push(lineDataSet);\n        });\n\n\n        let chartData = {\n            labels: labels,\n            datasets: datasets,\n        };\n\n        let config = {\n            type:'bar',\n            data: chartData,\n            options: {\n                responsive: true,\n                animation: true,\n                maintainAspectRatio: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            },\n\n        }\n        avLogger(chartData);\n\n        // @ts-ignore\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\n\nimport {WorkoutSummaryRenderer} from \"../renderer/WorkoutSummaryRenderer\";\n\n\nexport class WorkoutSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'workoutSummaryChart',\n            dataSourceId: VIEW_NAME.workoutSummary,\n        },\n        resultsElementType: 'canvas',\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElementType: '',\n            textElementClasses: '',\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(WorkoutSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new WorkoutSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {}\n\n}\n\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class CurrentWorkoutSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'currentWorkoutSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        list: 'exercises',\n        detail: 'workoutDetail'\n    }\n\n\n    constructor() {\n        super(CurrentWorkoutSidebar.SidebarPrefs);\n    }\n}\n","import {ObjectPermissionChecker} from \"./ui-framework/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class DefaultPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return true;\n    }\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport { CollectionView } from \"../../ui-framework/view/interface/CollectionView\";\nimport { View } from \"../../ui-framework/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../state/StateManager\";\n\nconst logger = debug('current-workout-exercises-view');\n\nexport class CurrentWorkoutExercisesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exercises',\n            dataSourceId: VIEW_NAME.exercises,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromExerciseTypes],\n                acceptTypes: [DRAGGABLE.typeExerciseType]\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise from the workout.\"}]\n            }\n        }\n    };\n\n    constructor(stateManager:StateManager) {\n        super(CurrentWorkoutExercisesView.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRenderer(this, this);\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    itemDropped(view: View, droppedItem: any) {\n        Controller.getInstance().addExerciseToCurrentWorkout(droppedItem);\n    }\n\n\n}\n\n","import SidebarViewContainer from \"../../ui-framework/container/SidebarViewContainer\";\nimport {ExerciseTypesView} from \"./ExerciseTypesView\";\nimport {DataObjectDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {DetailView} from \"../../ui-framework/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../ui-framework/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../ui-framework/form/Form\";\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\nimport CurrentWorkoutSidebar from \"../sidebar/CurrentWorkoutSidebar\";\nimport {StateManager} from \"../../state/StateManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {DefaultPermissionChecker} from \"../../DefaultPermissionChecker\";\nimport {CurrentWorkoutExercisesView} from \"./CurrentWorkoutExercisesView\";\nimport {DataObjectListener} from \"../../model/DataObjectListener\";\nimport {DataObjectController} from \"../../model/DataObjectController\";\n\nconst logger = debug('current-workout-composite-view');\n\nexport class CurrentWorkoutCompositeView implements StateChangeListener,DataObjectListener{\n    private sideBar:SidebarViewContainer;\n    private currentWorkout:any = {};\n    private workoutDef:DataObjectDefinition|null = null;\n    private readonly stateManager:StateManager;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n        this.stateManager = new MemoryBufferStateManager();\n        this.stateManager.addChangeListenerForName(STATE_NAMES.exerciseTypes,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.workouts,this);\n    }\n\n    getListenerName(): string {\n        return 'Current Workout Composite View';\n    }\n\n    onDocumentLoaded() {\n        this.workoutDef = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.workouts);\n        if (!this.workoutDef) throw new Error ('Workout definition not found');\n\n        const exerciseTypes = new CurrentWorkoutExercisesView(this.stateManager);\n        this.sideBar.addView(exerciseTypes,{containerId:VIEW_CONTAINER.exerciseDropZone});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.currentWorkoutDetail,exerciseTypeDefinition,new DefaultPermissionChecker());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.currentWorkoutDetail,\n                    dataSourceId: VIEW_NAME.exercises\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.completeWorkout);\n            logger(`Setting up button for completing the workout`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Completing the workout`);\n                    this.currentWorkout.completed = true;\n                    this.saveWorkout();\n                    this.createWorkout();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n\n    private createWorkout() {\n        logger(`Creating new current workout`);\n        this.currentWorkout = ObjectDefinitionRegistry.getInstance().createInstance(STATE_NAMES.workouts);\n        logger(this.currentWorkout);\n        Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.workouts,this.currentWorkout,false);\n        this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n    }\n\n    private saveWorkout() {\n        logger(`Saving current workout`);\n        logger(this.currentWorkout);\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.workouts,this.currentWorkout,isSameMongo,false);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`${managerName},${name}`);\n        if (name === STATE_NAMES.workouts) {\n            logger(`Workouts loaded`);\n            // is there a current workout?\n            this.currentWorkout = null;\n\n            newValue.forEach((workout:any) => {\n                if (!workout.completed || (workout.completed === 'false')) {\n                    this.currentWorkout = workout;\n                }\n            });\n\n            if (this.currentWorkout) {\n                logger(`Workouts loaded found existing current workout`);\n                this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n            }\n            else {\n                logger(`Workouts loaded no existing current workout, creating and saving`);\n                this.createWorkout();\n            }\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            logger(`Added a new exercise to workout`);\n            logger(itemAdded);\n            console.log(itemAdded);\n            this.currentWorkout.exercises.push(itemAdded);\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemRemoved._id);\n            logger(`Removing exercise to workout at index ${foundIndex}`);\n            logger(itemRemoved);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1);\n            }\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemNewValue._id);\n            logger(`Updating exercise to workout at index ${foundIndex}`);\n            logger(itemNewValue);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1,itemNewValue);\n            }\n            this.saveWorkout();\n        }\n\n    }\n\n    create(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Added a new exercise to workout from view`);\n        logger(dataObj);\n        this.stateManager.addNewItemToState(STATE_NAMES.exerciseTypes,dataObj,false);\n    }\n    update(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Updating exercise in workout from view`);\n        logger(dataObj);\n        this.stateManager.updateItemInState(STATE_NAMES.exerciseTypes,dataObj,isSameMongo,false);\n    }\n    delete(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Deleting exercise from workout from view`);\n        logger(dataObj);\n        this.stateManager.removeItemFromState(STATE_NAMES.exerciseTypes,dataObj,isSameMongo,false);\n    }\n\n\n\n}","import {Form} from \"./ui-framework/form/Form\";\n\n//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nlocalStorage.debug = 'current-workout-composite-view';\n\nimport debug from 'debug';\ndebug.log = console.info.bind(console);\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport {API_Config, BUTTON, NAVIGATION, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"./AppTypes\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ExerciseTypesSidebar from \"./component/sidebar/ExerciseTypesSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport {ExerciseTypesView} from \"./component/view/ExerciseTypesView\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"./ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"./ui-framework/form/validation/ValidationManager\";\nimport {FormDetailViewRenderer} from \"./ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {ObjectDefinitionRegistry} from \"./model/ObjectDefinitionRegistry\";\nimport {DataObjectDefinition} from \"./model/DataObjectTypeDefs\";\nimport {DetailViewImplementation} from \"./ui-framework/view/implementation/DetailViewImplementation\";\nimport {DetailView} from \"./ui-framework/view/interface/DetailView\";\nimport {LinkedCollectionDetailController} from \"./ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"./model/BasicObjectDefinitionFactory\";\nimport {CreatedByPermissionChecker} from \"./CreatedByPermissionChecker\";\nimport {WorkoutsView} from \"./component/view/WorkoutsView\";\nimport {ExerciseTypesCompositeView} from \"./component/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./component/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./component/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./component/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./component/view/CurrentWorkoutCompositeView\";\nimport {v4} from \"uuid\";\nimport {StateManager} from \"./state/StateManager\";\n\n\nconst logger = debug('app');\n\nexport default class App implements UnreadMessageCountListener {\n\n    private static _instance: App;\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private workoutSummarySidebar: WorkoutSummarySidebar;\n    // @ts-ignore\n    private currentWorkoutSidebar: CurrentWorkoutSidebar;\n    // @ts-ignore\n    private currentWorkoutView: CurrentWorkoutCompositeView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    private constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowWorkoutSummary = this.handleShowWorkoutSummary.bind(this);\n        this.handleShowCurrentWorkout = this.handleShowCurrentWorkout.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.workoutSummary).addEventListener('click', this.handleShowWorkoutSummary);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.currentWorkout).addEventListener('click', this.handleShowCurrentWorkout);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = new UserSearchSidebar();\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = new ChatRoomsSidebar();\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n        this.chatSidebar.onDocumentLoaded();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        new ExerciseTypesCompositeView(this.exerciseTypesSidebar).onDocumentLoaded();\n\n        new WorkoutsView().onDocumentLoaded(); // carousel view\n\n        this.workoutSummarySidebar = new WorkoutSummarySidebar();\n        this.workoutSummarySidebar.addView(new WorkoutSummaryView(),{containerId: WorkoutSummarySidebar.SidebarContainers.container});\n        this.workoutSummarySidebar.onDocumentLoaded();\n\n        this.currentWorkoutSidebar = new CurrentWorkoutSidebar();\n        this.currentWorkoutView = new CurrentWorkoutCompositeView(this.currentWorkoutSidebar);\n        this.currentWorkoutView.onDocumentLoaded();\n\n        Controller.getInstance().initialise();\n\n    }\n\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.exerciseTypesSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowWorkoutSummary(event: Event) {\n        logger('Handling Show Workout Summary');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.workoutSummarySidebar.eventShow(event);\n    }\n\n    handleShowCurrentWorkout(event: Event) {\n        logger('Handling Show Current Workout');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.currentWorkoutSidebar.eventShow(event);\n    }\n\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    addingExerciseToCurrentWorkout(exerciseType:any) {\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventShow(null);\n        this.currentWorkoutView.getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes,exerciseType, false);\n    }\n\n    showCurrentWorkout() {\n        this.currentWorkoutSidebar.eventShow(null);\n    }\n}\n\n\n$(function() {\n    App.getInstance().onDocumentLoad();\n});","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 7207,\n\t\"./en-il.js\": 7207,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(1663)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","stateEventType","smLogger","debug","StateChangedDelegate","suppressEventEmits","this","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","foundIndex","stateChangeListeners","findIndex","element","changeListenersForName","listener","ItemAdded","ItemUpdated","ItemDeleted","err","console","addChangeListenerForName","ensureListenerSetupForName","listenersNameArrayPair","name","listeners","AbstractStateManager","forceSaves","managerName","state","value","stateObjForName","getStateByName","stateValueObj","_getState","setStateByName","informListeners","_saveState","stateObjectForName","addNewItemToState","isPersisted","findItemInState","result","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","item","updateItemInState","msManager","MemoryBufferStateManager","getInstance","_ensureStatePresent","applicationState","_addNewNamedStateToStorage","_replaceNamedStateInStorage","find","_addItemToState","_removeItemFromState","valueIndex","_updateItemInState","Priority","InviteType","sDebug","SocketManager","chatReceivers","callbackForMessage","bind","callbackForData","callbackForLogin","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForUserList","callbackForDeclineInvite","addChatReceiver","setListener","io","login","username","logout","joinChat","room","type","leaveChat","sendInvite","ChatRoom","requiresAcceptDecline","subject","attachment","inviteObj","from","to","sendMessage","priority","Normal","messageObj","message","created","getUserList","sendDeclineInvite","dataObj","JSON","receiver","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","stateChangedItemAdded","getListenerName","aggLogger","AggregateStateManager","filters","mWF","manager","stateManager","managerWithFilters","sm","stateManagers","length","filter","isSame","item1","item2","isSameMongo","Decorator","STATE_NAMES","API_Config","DRAGGABLE","VIEW_NAME","VIEW_CONTAINER","BootstrapNotification","show","topOffset","context","duration","containerId","notificationManager","bgColorClass","containerNode","document","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","NotificationFactory","createNotification","NotificationManager","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","changeUser","Controller","getStateManager","_id","user","stateObj","handleMessage","getCurrentUser","UserStatus","lsLogger","BrowserStorageStateManager","useLocalStorage","configuration","window","storage","getItem","stringifiedSaveData","savedResults","savedResultsJSON","newValue","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","cmLogger","ChatManager","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","receiveLogin","receiveLogout","receiveInvitation","receiveMessage","receiveQueuedMessages","receiveQueuedInvites","receiveJoinedRoom","receivedLeftRoom","receiveUserList","blocked","index","favourite","savedLogs","localStorage","users","log","ensureChatLogExists","parseInt","moment","joinDateTime","invite","isUserInBlockedList","didChatAlreadyExist","doesChatRoomExist","happyToProceed","chatLog","push","isUserInFavouriteList","splice","receiveDecline","chatLogs","wasOffline","invites","messages","trim","declineInvite","sent","roomName","ensureChatLogExistsWithUser","lastViewed","numOfNewMessages","foundLog","v4","unreadCount","chatLogKey","blockedListKey","favouriteListKey","notLogger","NotificationController","doNotDisturb","handleChatLogUpdated","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleInvitationDeclined","handleNewInviteReceived","ScoreSheet","dontDisturbMe","isBlackedListed","isFavourited","chatManager","handleChatLogsUpdated","displayMessage","handleBlockedUsersChanged","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","RequestType","queueType","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","url","response","apiFetchJSONWithPost","request","error","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","fetchJSON","callback","data","dlLogger","DownloadManager","callbackForQueueRequest","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addQLApiRequest","isPriority","POST","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","jsonRequest","managerRequest","originalRequest","PRIORITY","priorityChangeListener","handleEventAddToQueue","BACKGROUND","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","apiUtil","GET","DELETE","PUT","apiSMLogger","RESTApiStateManager","callbackForAddItem","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","results","config","bHasCompletedRun","setCompletedRun","runsComplete","getConfigurationForStateName","identifier","id","Error","stateName","serverURL","api","isActive","status","FieldType","DRAGGABLE_KEY_ID","EXTRA_ACTION_ATTRIBUTE_NAME","Modifier","KeyType","SidebarLocation","RowPosition","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","flogger","vlogger","glogger","rlogger","BasicFieldOperations","setSubElements","formatValue","field","date","currentValue","datetime","boolean","number","float","parsed","parseFloat","isNaN","integer","isValidValue","isValid","resetOnFailure","email","text","password","time","shortTime","previousFieldValues","fieldValue","renderValue","uuid","userId","generate","generateValue","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","BasicObjectDefinitionFactory","dataObjDef","order","fieldId","fieldDef","displayOrder","createModifierFields","idFieldName","objDef","displayName","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","addStringFieldToArray","addNumericFieldToArray","isMandatory","description","datasource","displayOnly","addFieldToArray","string","logger","ObjectDefinitionRegistry","definitions","definition","findDefinition","fieldOps","collection","createInstanceFromDef","SimpleValueDataSource","addListener","getOptions","cLogger","cLoggerDetail","connectToApplication","restSM","idField","aggregateSM","memorySM","asyncSM","setupDataObjectDefinitions","exerciseTypeDefinition","limitedChoice","workoutDefinition","exercisesFieldDefinition","socketListerDelegate","getLoggedInUserId","isLoggedIn","loggedInUser","getLoggedInUsername","getServerAPIURL","handleShowChat","create","delete","update","addExerciseToCurrentWorkout","copyOfExercise","addWorkoutExercisesToCurrentWorkout","workout","ViewListenerForwarder","itemDeleted","documentLoaded","itemAction","canDeleteItem","hideRequested","showRequested","itemDropped","avLogger","avLoggerDetails","AbstractView","handleDrop","getUIConfig","addEventListener","onDocumentLoaded","uiConfig","setContainedBy","getName","hasChanged","getDataSourceKeyId","event","draggedObjectJSON","draggedObject","droppedObjectType","droppedObjectFrom","acceptType","drop","acceptTypes","objectType","acceptFrom","DATA_SOURCE","AlertType","CollectionViewListenerForwarder","itemDragStarted","itemSelected","itemDeselected","canSelectItem","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","cancelHandler","AbstractCollectionView","getCollectionUIConfig","addEventCollectionListener","container","renderer","itemId","collectionUIConfig","dataSource","keyType","compareWith","selectedItem","getItemInNamedCollection","detail","renderBackgroundForItemInNamedCollection","compareItemsForEquality","getModifierForItemInNamedCollection","normal","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","viewEl","getDragData","shouldSelect","shouldDelete","eventForwarder","actionName","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasPermissionToActionItemInNamedCollection","setRenderer","completed","AbstractStatefulCollectionView","render","hidden","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","addAttributes","attributes","attribute","removeAttributes","ListViewRenderer","view","collectionName","dataSourceKeyId","resultDataKeyId","getIdForItemInNamedCollection","childEl","browserUtil","textEl","contentEl","imgEl","buttonsEl","badgeValue","badgeEl","extraAction","action","iconEl","deleteButtonEl","eventHandler","icons","modifier","secondModifier","getSecondaryModifierForItemInNamedCollection","warning","active","inactive","newState","vLogger","vLoggerDetail","UserSearchView","fastSearchEl","renderDisplayForItemInNamedCollection","eventUserSelected","ui","localisedSM","recentUserSearches","label","myUsername","fastSearchValues","searchValue","source","disabled","minLength","extraActions","fastSearchInputId","dataLimit","DOMConfig","viewConfig","resultsContainerId","dataSourceId","resultsElementType","resultsElementAttributes","resultsClasses","keyId","modifiers","containerClasses","textElementType","textElementClasses","select","quickDelete","buttonClasses","iconClasses","drag","csLogger","ChatLogsView","selectedChatLog","isSameRoom","updateStateManager","selectChatRoom","badge","elementType","elementClasses","sbvcLogger","SidebarViewContainer","eventHide","eventShow","addView","viewContainer","sidePanelEl","prefs","closeButtonEl","size","showHide","left","right","bottom","top","UserSearchSidebar","SidebarPrefs","expandedSize","location","SidebarContainers","recentSearches","favourites","ChatRoomsSidebar","ExerciseTypesSidebar","csLoggerDetail","ChatLogDetailView","handleAddMessage","handleUserDrop","getDisplayValueForItemInNamedCollection","commentEl","messageContent","sentMessage","messageEl","addChatMessage","chatMessageEl","messageSenderEl","reRenderChatMessages","renderChatLog","checkCanComment","removeAttribute","sendMessageButton","leaveChatButton","fastUserSearch","setAttribute","clearChatLog","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","FavouriteUserView","favUsers","droppedItem","BlockedUserView","blockedUsers","CarouselViewRenderer","lastRenderedContainer","lastRenderedCollectionName","lastRenderedCollection","previousWindowWidth","newWindowWidth","reRenderRequired","collectionConfig","backgroundEl","actionContainer","numberOfResults","itemsPerRow","numberOfRows","Math","rowIndex","rowContainerEl","rowContainer","rowEl","row","activeRowPosition","first","last","activeRow","itemIndex","itemContainerEl","multipleItemsPerRowContainer","itemEl","createDisplayElementForCollectionItem","addDurations","duration1","duration1Valid","duration2Valid","duration1Components","duration2Components","duration2","carry","sumSeconds","sumMinutes","duration1Hours","duration2Hours","sumHours","WorkoutsView","currentChart","weight","distance","exercise","summary","calculateExerciseSummary","buffer","canvas","labels","bgColour","brColour","str","datasets","backgroundColor","borderColor","borderWidth","options","responsive","animation","maintainAspectRatio","scales","y","beginAtZero","App","small","medium","large","xlarge","background","buttonText","bgStrength","bgCardio","borderStrength","borderCardio","ExerciseTypesView","UIFieldType","FormMode","DATA_ID_ATTRIBUTE","FormEventType","ComparisonType","ConditionResponse","ValidationManager","form","rule","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","comparison","values","sourceType","formRules","formRule","formRuleSet","rules","ruleFailed","targetValue","sourceValue","lessThan","lessThanEqual","greaterThanEqual","greaterThan","equals","targetType","compareTwoValuesWithTypes","check","areTwoFieldsEqual","isTargetLessThanSource","splits","foundInValue","doesFieldHaveValue","isTargetGreaterThan","isTargetLessThanEqualSource","isTargetGreaterThanEqualSource","isNull","isSourceNull","isNotNull","isSourceNotNull","hasValue","doesSourceFieldHaveValue","ruleCheck","invalid","ruleSet","getRulesForFieldChange","formId","onlyRulesOfType","failedResponses","hide","valid","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","valueChanged","failedValidation","hideModifierFields","fieldGroups","formEvent","target","RESETTING","HIDDEN","SHOWN","checkFormValidationOnDisplay","checkForVisualValidationForDisplayOnly","CREATING","MODIFYING","shouldCancelChange","CANCELLING","CANCELLED","CANCELLING_ABORTED","DELETING","DELETE_ABORTED","DELETED","SAVE_ABORTED","SAVED","SAVING","allFieldsValid","formattedDataObject","getId","getFieldFromDataFieldId","mapItem","map","clearReadOnly","setReadOnly","isDisplayingItem","_isSameObjectAsDisplayed","isReadOnly","RBGFieldOperations","radioButtons","radioButton","BootstrapFormConfigHelper","fieldOperations","rbgFieldOperation","fieldUIConfigs","checkbox","largeText","textarea","choice","radioGroup","displayOrders","displayOrderValue","fieldUIConfig","formatter","validator","messageDisplay","validClasses","invalidClasses","rows","cols","elementAttributes","fieldGroup","containedBy","formConfig","unsavedChanges","innerHTML","buttonsContainedBy","cancelButton","submitButton","activeSave","group","a","b","ValidationEventHandler","subElements","handleEvent","undefined","fieldConfig","validationElementTarget","fieldElement","subElement","errorMessageDiv","errorMessageEl","processValidation","validationResp","EditingEventListener","editor","editValue","DefaultFieldOptionsListener","optionsChanged","FieldInputElementFactory","errorMessageDivEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","FormElementFactory","buttonEl","buttonDef","formEl","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","fieldEl","buttonContainer","createFormButton","cancelButtonEl","submitButtonEl","selectFields","radioButtonGroups","textFields","deleteButton","RenderingEventListener","processRendering","AbstractField","handleChangeEvent","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","setValue","selectEl","selectedIndex","option","reset","clearValue","validate","setValid","TextAreaField","RadioButtonGroupField","SelectField","InputField","BasicFormImplementation","factoryElements","dataId","findFieldUiConfig","attributeId","hideModiferFields","rbg","getFormattedDataObject","formattedResult","isSameObject","currentObjId","suppliedObjId","FormDetailViewRenderer","setEventForwarder","displayItemReadonly","dataObject","hasPermissionToUpdateItem","startUpdate","setIsVisible","permissionChecker","hasPermissionToDeleteItem","handleActionItem","forwarder","cancelled","deletedItem","formattedObj","saveNewItem","updateItem","CreatedByPermissionChecker","DetailViewListenerForwarder","DetailViewImplementation","currentItem","addEventDetailListener","DataObjectController","isCreatingNew","ChildViewListenerDelegate","LinkedCollectionDetailController","children","parentView","childView","canProceedWithSelection","confirm","canProceedWithCreateNew","ValidationHelper","targetDataFieldId","conditions","sourceDataFieldId","ExerciseTypesCompositeView","exerciseTypes","exerciseTypeDetailRenderer","exerciseTypeDetailView","viewLinker","startingDisplayOrder","detailForm","createExerciseType","WorkoutSummarySidebar","WorkoutSummaryRenderer","isStrength","red","blue","newColour","sevenWorkouts","exerciseNames","exerciseBG","exerciseBR","exerciseName","colours","exerciseType","itemBG","itemBR","bg","br","dataset","chartData","WorkoutSummaryView","CurrentWorkoutSidebar","list","DefaultPermissionChecker","CurrentWorkoutExercisesView","CurrentWorkoutCompositeView","currentWorkout","workoutDef","exercises","itemRemoved","itemNewValue","handleShowUserSearch","handleShowExerciseTypes","handleShowWorkoutSummary","handleShowCurrentWorkout","setupNavigationItemHandling","setupUserSearchViews","favouriteUsers","setupChatViews","chatLogView","onDocumentLoad","hideAllSideBars","countChanged","newCount","chatNavigationItem","addingExerciseToCurrentWorkout","showCurrentWorkout","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","O","chunkIds","fn","notFulfilled","Infinity","i","fulfilled","j","every","key","r","n","getter","__esModule","d","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","__webpack_exports__"],"sourceRoot":""}