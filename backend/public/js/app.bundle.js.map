{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/util/UUID.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/state/GraphQLApiStateManager.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/template/TemplateManager.ts","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/component/view/ScoreSheetDetailView.ts","webpack://template-feo-react-babel/./src/component/controller/CallManager.ts","webpack://template-feo-react-babel/./src/component/controller/ScoreSheetController.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/ui-framework/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/AbstractView.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/component/view/BoardGameView.tsx","webpack://template-feo-react-babel/./src/component/view/ScoreSheetsView.ts","webpack://template-feo-react-babel/./src/ui-framework/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ScoreSheetsSidebar.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/component/sidebar/BoardGameSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/view/BGGSearchView.ts","webpack://template-feo-react-babel/./src/App.tsx","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/handsontable/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/global","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n}","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any | null;\n    timer: number,\n    data: any[] | null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\nexport const STATE_NAMES = {\n    users: 'users',\n    boardGames: 'boardGames',\n    scores: 'scores',\n    selectedEntry: 'selectedEntry',\n    recentUserSearches: 'recentUserSearches',\n    bggSearchResults: 'bggSearchResults',\n    scoreSheet: 'scoreSheet',\n    chatLogs: 'chatLogs'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphql',\n    bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n    bggSearchCallById: {\n        queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n        resultName: 'getBoardGameDetails',\n    },\n    findUsers: {\n        queryString: 'query {findUsers {id, username}}',\n        resultName: 'findUsers',\n    },\n    addToMyCollection: {\n        queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n        resultName: 'addToMyCollection',\n    },\n    removeFromMyCollection: {\n        queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n        resultName: 'removeFromMyCollection'\n    },\n    getMyBoardGameCollection: {\n        queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scoresheets {id, player1, score1, player2, score2, player3, score3, player4, score4, player5, score5, player6, score6, player7, score7, createdOn}}}',\n        resultName: 'getMyBoardGameCollection',\n    },\n    addScoreSheetToBoardGame: {\n        queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}}',\n        resultName: 'addScoreSheetToBoardGame'\n    },\n    removeScoreSheet: {\n        queryString: 'mutation removeSheet($sheetId: String!) {removeScoreSheet(sheetId: $sheetId) {result}}',\n        resultName: 'removeFromMyCollection'\n    },\n};\n\nexport const NAVIGATION = {\n    showMyCollection: 'navigationItemMyCollection',\n    boardGameSearchId: 'navigationItemBoardGameSearch',\n    userSearchId: 'navigationItemUserSearch',\n    chatId: 'navigationItemChat',\n    showScoreSheet: 'navigationItemScoreSheet',\n\n}\n\nexport const ALERT = {\n    modalId: \"alert\",\n    titleId: \"alert-title\",\n    contentId: \"alert-content\",\n    cancelButtonId: \"alert-cancel\",\n    confirmButtonId: \"alert-confirm\",\n    closeButtonId: \"alert-close\",\n    hideClass: \"d-none\",\n    showClass: \"d-block\",\n}\n\nexport const DRAGGABLE = {\n    typeBoardGame: 'boardGame',\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites'\n}\n\nexport const VIEW_NAME = {\n    bggSearch: 'bggSearch',\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    scoreSheets: 'scoreSheets',\n    userSearch: 'userSearch'\n}\n\n\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1: any, item2: any): boolean {\n    return (item1.gameId === item2.gameId);\n}\n\nexport function isSameRoom(item1:any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","class UUID {\n    constructor() {\n    }\n\n    getUniqueId(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = Math.random() * 16 | 0;\n            const v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = uuid.getUniqueId();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import moment from \"moment\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport debug from 'debug';\n\nconst templateLogger = debug('template-manager');\n\nexport class TemplateManager {\n    private static _instance: TemplateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): TemplateManager {\n        if (!(TemplateManager._instance)) {\n            TemplateManager._instance = new TemplateManager();\n        }\n        return TemplateManager._instance;\n    }\n\n    public getScoreSheetTemplate(boardGame: any): any | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiTemplate();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingTemplate();\n        }\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    public getScoreSheetStartingData(boardGame: any): any[] | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiStartingData();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingStartingData();\n        }\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    public getSaveData(boardGame: any, scoreSheet: ScoreSheet): any {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiSaveData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingSaveData(scoreSheet);\n        }\n        return this.getDefaultSaveData(scoreSheet);\n    }\n\n    public transformDataAfterUserChange(boardGame: any, scoreSheet: ScoreSheet): boolean {\n        let result = false;\n        if (boardGame.gameId === 270314) {\n            result = true;\n            this.transformOhanamiData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            result = true;\n            this.transformSkullKingData(scoreSheet);\n        }\n        return result; // do nothing unless for a specific game\n    }\n\n    private getOhanamiTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 8)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column > 1) {\n                    if ((row === 1) || (row === 2) || (row === 4)) {\n                        return {\n                            className: 'bg-ohanami-blue',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 3) || (row === 5)) {\n                        return {\n                            className: 'bg-ohanami-green',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 6)) {\n                        return {\n                            className: 'bg-ohanami-grey',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 7)) {\n                        return {\n                            className: 'bg-ohanami-pink',\n                            forceNumeric: true,\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 21)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column % 2 === 0) {\n                    if (row % 2 === 0) {\n                        return {\n                            className: 'bg-readonly',\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingStartingData(): any[] {\n        return [\n            ['Round', '', 'P 1', '', 'P 2', '', 'P 3', '', 'P 4', ''],\n            ['1', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['2', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['3', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['4', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['5', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['6', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['7', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['8', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['9', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['10', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['Total', '', '', '', '', '', '', '', '', '']\n        ];\n    }\n\n    private getOhanamiStartingData(): any[] {\n        return [\n            ['Round', 'Mult.', 'P 1', 'P 2', 'P 3', 'P 4'],\n            ['1', 'x3', '0', '0', '0', '0'],\n            ['2', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['3', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['', 'x7', '0', '0', '0', '0'],\n            ['', 'var', '0', '0', '0', '0'],\n            ['Total', '', '0', '0', '0', '0']\n        ];\n    }\n\n    private getDefaultScoreSheetTemplate(boardGame: any): any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn: 0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame: any): any[] {\n        return [\n            ['P 1', 'P 2', 'P 3', 'P 4', 'P 5', 'P 6', 'P 7'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n        ];\n    }\n\n    private getDefaultSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        // ensure the scores are numbers\n        scores.forEach((score,index) => {\n            const parsed = parseInt(score);\n            if (isNaN(parsed)) {\n                scores[index] = 0;\n            }\n            else {\n                scores[index] = parsed;\n            }\n        })\n\n        // @ts-ignore\n        saveData.players = playerNames;\n        // @ts-ignore\n        saveData.scores = scores;\n        return saveData;\n    }\n\n    private getOhanamiSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first two columns\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 2; index < playerNames.length; index++) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for ohanami is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private getSkullKingSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first three columns, every second column\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // last row is the scores, following the same pattern as the playr names\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 3; index < playerNames.length; index += 2) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for skull king is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private calculateOhanamiPinkScore(numOfCards: number): number {\n        let score = 0;\n        if (numOfCards > 0) {\n            if (numOfCards > 15) numOfCards = 15;\n            while (numOfCards > 0) {\n                score += numOfCards;\n                numOfCards--;\n            }\n        }\n        return score;\n    }\n\n    private transformOhanamiData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 0; index < 4; index++) {\n            /*\n             *  for each player the score is the sum of\n             *  3 x row 1, 2, and 4\n             *  4 x row 3 and 5\n             *  7 x row 6\n             *  row 7 is complicated\n             */\n            let score: number = 0;\n            // @ts-ignore\n            let parsed = parseInt(scoreSheet.data[1][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[2][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[4][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[3][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[5][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[6][index + 2]);\n            if (!isNaN(parsed)) score += (7 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[7][index + 2]);\n            if (!isNaN(parsed)) score += this.calculateOhanamiPinkScore(parsed);\n\n            // @ts-ignore\n            scoreSheet.data[8][index + 2] = score;\n        }\n    }\n\n    private transformSkullKingData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 2; index < 10; index += 2) {\n            /*\n             *  for each player the score is the sum of\n             *  each bid score plus a bonus\n             *  if bid is 0, and actual is 0, score is 10 x round\n             *  if bid is x, and actual is x, score is 20 x bid\n             *  if bid ix x, and actual is y (x != y), score is 10 x abs(x-y)\n             */\n            let score: number = 0;\n\n\n            for (let round = 1; round <= 10; round++) {\n                let row = 2 * round - 1;\n                // @ts-ignore\n                let parsedBid = parseInt(scoreSheet.data[row][index]);\n                // @ts-ignore\n                let parsedActual = parseInt(scoreSheet.data[row][index + 1])\n                // @ts-ignore\n                let parsedBonus = parseInt(scoreSheet.data[row + 1][index + 1]);\n                // @ts-ignore\n                if (!isNaN(parsedBid) && !isNaN(parsedActual)) {\n                    if ((parsedBid === 0) && (parsedActual === 0)) {\n                        score += round * 10;\n                    }\n                    if (parsedBid === parsedActual) {\n                        score += 20 * parsedBid;\n                    }\n                    if ((parsedBid > 0) && (parsedBid !== parsedActual)) {\n                        score -= 10 * Math.abs(parsedBid - parsedActual);\n                    }\n                    if (!isNaN(parsedBonus)) score += parsedBonus;\n                }\n            }\n\n            // @ts-ignore\n            scoreSheet.data[21][index + 1] = score;\n        }\n\n    }\n}","export type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type Deletable = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string\n}\n\nexport type Badgeable = {\n    elementType:string,\n    elementAttributes?:[Attribute],\n    elementClasses:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Background = {\n    elementType:string,\n    elementClasses:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    badge?:Badgeable,\n    delete?:Deletable,\n    drag?:Draggable,\n    background?:Background,\n    drop?:Droppable\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId:string,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    keyType: KeyType,\n    dataSourceId:string,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\n\n","import StateChangeListener from \"../../state/StateChangeListener\";\nimport {ScoreSheetController} from \"../controller/ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {DRAGGABLE, ScoreSheet, STATE_NAMES} from \"../../AppTypes\";\nimport {TemplateManager} from \"../../template/TemplateManager\";\nimport {StateManager} from \"../../state/StateManager\";\nimport Controller from \"../../Controller\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE} from \"../../ui-framework/ConfigurationTypes\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetDetailView implements StateChangeListener {\n    private static _instance: ScoreSheetDetailView;\n\n    public static ScoreSheetDom = {\n            dropZone: \"scoreSheetZone\",\n            boardGame: \"selectedBoardGame\",\n            startStopTimer: \"startStopTimer\",\n            timer: \"timerDisplay\",\n            end: \"leaveScoreSheet\",\n            scoreSheet: \"scoreSheet\",\n            iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n            iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n            iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n            iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n            ssFastSearchUserNames: 'ssFastSearchUserNames',\n            webrtc: 'webrtc'\n        }\n\n\n\n\n    // @ts-ignore\n    protected ssFastSearchUserNames: HTMLElement;\n    private stateManager: StateManager;\n\n    private thisEl: HTMLDivElement | null = null;\n    private boardGameTitleEl: HTMLHeadingElement | null = null;\n    private startStopTimer: HTMLButtonElement | null = null;\n    private timerEl: HTMLDivElement | null = null;\n    private endOrLeaveEl: HTMLButtonElement | null = null;\n    private scoreSheetEl: HTMLDivElement | null = null;\n\n\n\n    private table: Handsontable | null = null;\n    private controller: ScoreSheetController;\n    private config: any;\n\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n        this.stateManager = Controller.getInstance().getStateManager();\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    public static getInstance(): ScoreSheetDetailView {\n        if (!(ScoreSheetDetailView._instance)) {\n            ScoreSheetDetailView._instance = new ScoreSheetDetailView();\n        }\n        return ScoreSheetDetailView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.resetDisplay();\n\n        // @ts-ignore\n        this.ssFastSearchUserNames = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames);\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.scoreSheet, this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click', this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click', this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {\n                event.preventDefault()\n            });\n            this.thisEl.addEventListener('drop', this.handleUserDrop);\n        }\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        ssvLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected, and is scoresheet owner\n        if (ScoreSheetController.getInstance().isSheetOwner()) {\n            ScoreSheetController.getInstance().inviteUser(ui.item.label);\n        }\n        else {\n            alert (\"Only the score sheet creator can invite users.\");\n        }\n    }\n\n\n    handleEndOrLeave(event: MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        } else {\n            // leaving the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event: MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        } else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event: Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    public resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) {\n            this.startStopTimer.innerHTML = 'Start ' + ScoreSheetDetailView.ScoreSheetDom.iconStart;\n            this.startStopTimer.setAttribute(\"disabled\", \"true\");\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = ScoreSheetDetailView.ScoreSheetDom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n\n\n    }\n\n    public updateTimer(time: number, isPaused: boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + ScoreSheetDetailView.ScoreSheetDom.iconStart;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n            } else {\n                this.startStopTimer.innerHTML = 'Pause   ' + ScoreSheetDetailView.ScoreSheetDom.iconInProgress;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', true);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', false);\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n\n        } else {\n            let scoreSheet: ScoreSheet = newValue;\n            ssvLogger(`Processing new state`);\n            ssvLogger(scoreSheet);\n            if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n            // update the board game name\n            if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n            // update the table\n            if (this.table) {\n                // process the data in the state change, will be array of array (rows) into what the table wants\n                let tableData: any = [];\n                // @ts-ignore\n                scoreSheet.data.forEach((row: any[], rowIndex: number) => {\n                    row.forEach((column: any, columnIndex: number) => {\n                        tableData.push([rowIndex, columnIndex, column]);\n                    });\n                });\n                ssvLogger(`Table data is `);\n                ssvLogger(tableData);\n                // @ts-ignore\n                this.table.setDataAtCell(tableData, ScoreSheetController.SOURCE_View);\n\n            } else {\n                // create a new table\n\n                if (this.scoreSheetEl) {\n                    const boardGame = this.controller.getSelectedBoardGame();\n                    if (boardGame) {\n                        scoreSheet.sheetLayoutOptions = TemplateManager.getInstance().getScoreSheetTemplate(boardGame);\n                    }\n                    scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                    this.table = new Handsontable(\n                        this.scoreSheetEl,\n                        scoreSheet.sheetLayoutOptions);\n                    // @ts-ignore\n                    this.table.addHook('afterChange', this.controller.userChangedValue);\n                }\n            }\n\n\n            // update the timer\n            if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n        }\n\n    }\n\n    public getTableData(): any[] {\n        if (this.table) {\n            return this.table.getData();\n        } else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n\n    private createTimerDisplay(timer: number): string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        } else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer / 3600);\n                let minutes = Math.floor(timer / 60);\n                let seconds = timer - (hours * 3600) - (minutes * 60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    } else {\n                        result += `${minutes}:`\n                    }\n                } else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    } else {\n                        result += `${seconds}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            } else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    } else {\n                        result += `${timer}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            }\n        }\n        return result;\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n}","import debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport Controller from \"../../Controller\";\nimport {ScoreSheetDetailView} from \"../view/ScoreSheetDetailView\";\n\nconst callLogger = debug('call-manager');\n\nexport class CallManager {\n    private static _instance: CallManager;\n    \n\n    public static getInstance(): CallManager {\n        if (!(CallManager._instance)) {\n            CallManager._instance = new CallManager();\n        }\n        return CallManager._instance;\n    }\n\n    private peer: any | null = null;\n    private webrtcDiv: HTMLElement | null = null;\n    private myVideoStream: MediaStream | null = null;\n    private myVideo: HTMLVideoElement | null = null;\n    private currentUserList:string[];\n    \n    private constructor() {\n        this.callUser = this.callUser.bind(this);\n        this.currentUserList = [];\n    }\n\n    private startPeerConnection() {\n        if (Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore  - is for the WebRTC peer via Nodejs\n            this.peer = new Peer(Controller.getInstance().getLoggedInUsername(), {path: '/peerjs', host: '/', debug: 2, secure:true});\n            //this.peer = new Peer(Controller.getInstance().getLoggedInUsername(), {path: '/peerjs', host: '/', port: '3000', debug:1, secure:false});\n            this.peer.on('open', (id:any) => {\n                callLogger('My peer ID is: ' + id);\n            });\n        }\n    }\n    \n    public initialise() {\n        this.startPeerConnection();\n        // @ts-ignore\n        this.webrtcDiv = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.webrtc);\n        //this.reset();\n    }\n\n    public startScoreSheet() {\n        try {\n            if (Controller.getInstance().isLoggedIn()) {\n                if (navigator.mediaDevices.getUserMedia) {\n                    callLogger('Starting scoresheet stream');\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        callLogger('Scoresheet stream started - adding video element');\n                        this.myVideoStream = stream;\n                        this.addVideoStream(Controller.getInstance().getLoggedInUsername(), this.myVideoStream, true);\n                    });\n\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Non-secure context or no camera capability`);\n        }\n    }\n    \n    public reset() {\n        callLogger('Reset');\n        if (this.currentUserList && this.currentUserList.length > 0) {\n            callLogger('Removing previous users');\n            this.currentUserList.forEach((user) => {\n                callLogger('Removing previous user ${user}');\n                this.removeUser(user);\n            })\n        }\n        if (this.webrtcDiv) browserUtil.removeAllChildren(this.webrtcDiv);\n        this.currentUserList = [];\n        if (this.peer) {\n            callLogger('Stopping video stream');\n            //this.peer.disconnect();\n            if (this.myVideoStream) {\n                this.myVideoStream.getTracks().forEach((track) => track.stop());\n            }\n            if (this.myVideo) this.myVideo.srcObject = null;\n            this.myVideoStream = null;\n        }\n    }\n\n    private addVideoStream(username: string, stream: MediaStream, isCurrentUser = false) {\n        // check to see if they are already there\n        let index = this.currentUserList.findIndex((user) => user === username);\n        if (index >= 0) return;\n\n        this.currentUserList.push(username);\n\n        const videoCardHolder = document.createElement('div');\n        videoCardHolder.setAttribute(\"id\", username);\n        browserUtil.addRemoveClasses(videoCardHolder, 'col-sm-12 col-md-4 col-lg-3');\n        const videoCard = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCard,'card');\n        const videoCardTitle = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardTitle, 'card-header');\n        videoCardTitle.innerHTML = `<h5 class=\"card-title\">${username}</h5>`;\n        const videoCardBody = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardBody, 'card-body p-0 text-center');\n        const video = document.createElement('video');\n        browserUtil.addRemoveClasses(video, 'video ');\n\n        videoCard.appendChild(videoCardTitle);\n        videoCard.appendChild(videoCardBody);\n        videoCardBody.appendChild(video);\n\n        if (isCurrentUser) {\n            const videoCardFooter = document.createElement('div');\n            browserUtil.addRemoveClasses(videoCardFooter, 'card-footer');\n            const footerContent = document.createElement('div');\n            browserUtil.addRemoveClasses(footerContent,'d-flex w-100 justify-content-between mt-2');\n            const stopVideoButton = document.createElement('button');\n            stopVideoButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(stopVideoButton,'btn btn-circle btn-warning');\n            stopVideoButton.innerHTML = '<i class=\"fas fa-video-slash\"></i>';\n            const muteMicButton = document.createElement('button');\n            muteMicButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(muteMicButton,'btn btn-circle btn-warning');\n            muteMicButton.innerHTML = '<i class=\"fa fa-microphone\"></i>';\n\n            footerContent.appendChild(stopVideoButton);\n            footerContent.appendChild(muteMicButton);\n\n            videoCardFooter.appendChild(footerContent);\n\n            videoCard.appendChild(videoCardFooter);\n\n            stopVideoButton.addEventListener('click',() => {\n                const isPaused = video.paused;\n                if (isPaused) {\n                    try {\n                        video.play();\n                    }\n                    catch (error) { }// account for user with no video\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',true);\n\n                }\n                else {\n                    try {\n                        video.pause();\n                    } catch (error) {}// account for user with no video\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',false);\n                }\n\n            });\n            muteMicButton.addEventListener('click',() => {\n                const isMuted = video.muted;\n                if (isMuted) {\n                    video.muted = false;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',true);\n\n                }\n                else {\n                    video.muted = true;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',false);\n                }\n\n            });\n\n            this.myVideo = video;\n        }\n\n        videoCardHolder.appendChild(videoCard);\n        video.srcObject = stream;\n        video.addEventListener(\"loadedmetadata\", () => {\n            try {\n                video.play();\n            }\n            catch (error) {} // account for user with no video\n            if (this.webrtcDiv) this.webrtcDiv.append(videoCardHolder);\n        });\n    };\n\n    public callUser(userId: string) {\n        callLogger(`Asked to call user ${userId}`);\n        if (userId === Controller.getInstance().getLoggedInUsername()) return; // don't call ourself\n        let numberOfAttempts:number = 0;\n\n        let index = this.currentUserList.findIndex((user) => user === userId); // don't call the same users\n        if (index >= 0) return;\n        // wait a small time for the sockets and peer to sync\n        const interval = setInterval(() => {\n            callLogger(`Calling user ${userId}`);\n            if (this.myVideoStream) {\n                const call = this.peer.call(userId, this.myVideoStream);\n                if (call) {\n                    call.on('stream', (userVideoStream: any) => {\n                        callLogger(`User ${userId} answered, showing stream`);\n                        this.addVideoStream(userId, userVideoStream, false);\n                    });\n                    clearInterval(interval);\n                }\n                else {\n                    // try again shortly\n                    numberOfAttempts ++;\n                    if (numberOfAttempts > 3) clearInterval(interval);\n                }\n            }\n        },5000);\n    };\n\n    public removeUser(userId:string) {\n        callLogger(`Asked to remove user ${userId}`);\n        let index = this.currentUserList.findIndex((user) => user === userId);\n        if (index >= 0) {\n            this.currentUserList.splice(index,1);\n        }\n        const userVideoCard = document.getElementById(userId);\n        if (userVideoCard) {\n            callLogger(`Asked to remove user ${userId} - removing video element`);\n            const videoEl:HTMLVideoElement|null = userVideoCard.querySelector(\".video\");\n            if (videoEl) {\n                videoEl.srcObject = null;\n            }\n\n            browserUtil.removeAllChildren(userVideoCard);\n            const parentNode = userVideoCard.parentNode;\n            if (parentNode) parentNode.removeChild(userVideoCard);\n        }\n    }\n\n    prepareToAnswerCallFrom(userId: string) {\n        try {\n            if (Controller.getInstance().isLoggedIn()) {\n                callLogger(`Preparing to answer call from ${userId}`);\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        this.myVideoStream = stream;\n                        this.addVideoStream(Controller.getInstance().getLoggedInUsername(), this.myVideoStream, true);\n                        callLogger(`Awaiting call from ${userId}`);\n                        this.peer.on('call', (call: any) => {\n                            callLogger(`Answering call from ${userId}`);\n                            call.answer(this.myVideoStream);\n                            call.on('stream', (userVideoStream: any) => {\n                                alert(\"Answered\");\n                                callLogger(`Have answered, showing stream`);\n                                this.addVideoStream(userId, userVideoStream, false);\n                            });\n                        });\n                    });\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Insecure context or no video capability`);\n        }\n\n    }\n}","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../../socket/Types\";\nimport {ChatReceiver} from \"../../socket/ChatReceiver\";\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport {ScoreSheetDetailView} from \"../view/ScoreSheetDetailView\";\nimport {ScoreSheet, STATE_NAMES} from \"../../AppTypes\";\nimport uuid from \"../../util/UUID\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {StateManager} from \"../../state/StateManager\";\nimport moment from \"moment\";\nimport Controller from \"../../Controller\";\nimport {TemplateManager} from \"../../template/TemplateManager\";\nimport {CallManager} from \"./CallManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport SocketManager from \"../../socket/SocketManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    private static _instance: ScoreSheetController;\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n    public static SOURCE_View: string = 'ssv';\n\n    private applicationView: any | null = null;\n    private currentScoreRoom: string | null = null;\n    private currentlySelectedBoardGame: any | null = null;\n    private currentScoreSheet: ScoreSheet | null = null;\n    private currentUsername: string = '';\n    private isRoomCreator: boolean = false;\n    private stateManager: StateManager;\n    private currentUsersInScoreSheet: string[] = [];\n    private intervalTimer: number = -1;\n\n\n\n    private constructor() {\n        this.stateManager = new MemoryBufferStateManager();\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n        this.isSheetOwner = this.isSheetOwner.bind(this);\n        this.inviteUser = this.inviteUser.bind(this);\n        this.getCurrentRoom = this.getCurrentRoom.bind(this);\n        this.getSelectedBoardGame = this.getSelectedBoardGame.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimerStoppedByAnotherUser = this.stopTimerStoppedByAnotherUser.bind(this);\n        this.isTimerGoing = this.isTimerGoing.bind(this);\n        this.reset = this.reset.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    public getCurrentRoom(): string | null {\n        return this.currentScoreRoom;\n    }\n\n    receiveLogin(username: string): void {\n    }\n\n    receiveLogout(username: string): void {\n    }\n\n    public setCurrentUser(username: string): void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView: any) {\n        this.applicationView = applicationView;\n        CallManager.getInstance().initialise();\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreSheet) {\n            sscLogger(`Received invite - already in score sheet - declining`);\n            // are we already in this score sheet?\n            if (this.currentScoreSheet.room !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                SocketManager.getInstance().sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`)) {\n                SocketManager.getInstance().sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n\n        }\n\n        // prepare to receive a call\n        CallManager.getInstance().prepareToAnswerCallFrom(invite.from);\n\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Score Sheet', `Joining score sheet`, 'info', 7000);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ScoreSheet);\n        this.currentScoreRoom = invite.room;\n        this.currentlySelectedBoardGame = invite.attachment.boardGame;\n        this.currentScoreSheet = invite.attachment.scoreSheet;\n\n        Controller.getInstance().addBoardGameToDisplay(invite.attachment.boardGame);\n\n        // check to see if the timer should be going\n        if (this.isTimerGoing()) {\n            this.stopTimerStoppedByAnotherUser();\n            this.startTimer();\n        }\n        // ask the view to initialise with these values\n        ScoreSheetDetailView.getInstance().stateChanged(\"\", \"\", this.currentScoreSheet);\n\n\n\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n    public getSelectedBoardGame(): any | null {\n        return this.currentlySelectedBoardGame;\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message: Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        invites.forEach((invite: Invitation) => {\n            if (invite.type === InviteType.ScoreSheet) {  // only process offline invites to scoresheet\n                this.receiveInvitation(invite);\n            }\n        });\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        sscLogger(`Receive decline for room ${room} from ${username}`);\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                NotificationManager.getInstance().show('Score Sheet', `User ${username} declined the invitation.`, 'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.addUserToScoreSheet(users.username);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `User ${users.username} joined the scoresheet.`, 'message', 120000);\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index, 1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `User ${users.username} left the scoresheet.`, 'warning', 100000);\n    }\n\n    receiveUserList(users: string[]): void {\n    } // will be managed in the transfer of sheet data\n\n    public endScoreSheet(): void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet, true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    public startScoreSheet(boardGame: any): void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: TemplateManager.getInstance().getScoreSheetTemplate(boardGame),\n                timer: 0,\n                timerGoing: false,\n                data: TemplateManager.getInstance().getScoreSheetStartingData(boardGame),\n                isFinished: false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            CallManager.getInstance().startScoreSheet();\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(STATE_NAMES.scoreSheet, this.currentScoreSheet, true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) SocketManager.getInstance().joinChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n\n        }\n    }\n\n    public hasActiveScoreSheet(): boolean {\n        let result = false;\n        if (this.currentScoreRoom && (this.currentScoreRoom !== null)) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username: string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.isRoomCreator) {\n                NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `You have invited user ${username} to the scoresheet`, 'message');\n                SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, this.currentScoreRoom, InviteType.ScoreSheet, true, this.currentlySelectedBoardGame.name, {\n                    scoreSheet: this.currentScoreSheet,\n                    boardGame: this.currentlySelectedBoardGame\n                });\n            } else {\n                alert(\"Only the score sheet creator can invite other users.\");\n            }\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        sscLogger(`'Handling receive message`);\n        sscLogger(message);\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet: ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n\n                    // @ts-ignore\n                    if (this.currentScoreSheet) {\n                        let timerWasGoing = this.currentScoreSheet.timerGoing;\n                        this.currentScoreSheet.room = message.room;\n                        this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                        this.currentScoreSheet.data = scoreSheet.data;\n                        this.currentScoreSheet.timer = (scoreSheet.timer > this.currentScoreSheet.timer) ? scoreSheet.timer : this.currentScoreSheet.timer;\n                        this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                        this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                        this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n\n                        // has the timer changed?\n                        if (scoreSheet.timerGoing) {\n                            if (timerWasGoing) {\n                                // both timers going, no need to do anything\n                            } else {\n                                // timer is going with another user, but we aren't going - start timer\n                                this.stopTimerStoppedByAnotherUser();\n                                this.startTimer();\n                            }\n                        } else { // timer not going at the other users end\n                            if (timerWasGoing) {\n                                // our timer is active - pause it\n                                this.stopTimerStoppedByAnotherUser();\n                            } else {\n                                // neither timer going\n                            }\n                        }\n\n\n                    }\n                    sscLogger('Updated score sheet');\n                    sscLogger(this.currentScoreSheet);\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet, true);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        // reset the view\n                        ScoreSheetDetailView.getInstance().resetDisplay();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner(): boolean {\n        return this.isRoomCreator;\n    }\n\n    public createScoreSheetFromTable(): ScoreSheet | null {\n        let scoreSheet: ScoreSheet | null = null;\n        let tableData = ScoreSheetDetailView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: (this.currentlySelectedBoardGame) ? TemplateManager.getInstance().getScoreSheetTemplate(this.currentlySelectedBoardGame) : null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet: ScoreSheet, isFinished: boolean = false): void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            SocketManager.getInstance().sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        // @ts-ignore\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer++;\n                ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n            } else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n                }\n            }\n        }, 1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            this.intervalTimer = -1;\n\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet, false);\n            }\n        }\n    }\n\n    public userChangedValue(value: any, source: string) {\n        sscLogger(`Handling user changed value ${source}`)\n        if (source === ScoreSheetController.SOURCE_View) return;\n\n        // is the source an edit?\n        if (source !== 'edit') return;\n\n        let scoreSheet: ScoreSheet | null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            sscLogger(`Letting the template manager change any values`);\n            const changedByTM: boolean = TemplateManager.getInstance().transformDataAfterUserChange(this.currentlySelectedBoardGame, scoreSheet);\n            if (changedByTM) {\n                sscLogger(scoreSheet);\n            }\n\n            this.saveCurrentScoreSheet(scoreSheet, changedByTM);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet, false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                SocketManager.getInstance().leaveChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n            }\n            this.reset();\n            this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n        }\n    }\n\n    protected addUserToScoreSheet(username: string): void {\n        if (Controller.getInstance().isLoggedIn()) {\n            sscLogger(`Calling user ${username}`);\n            CallManager.getInstance().callUser(username);\n        }\n    }\n\n    protected removeUserFromScoreSheet(username: string): void {\n        sscLogger(`Removing user ${username}`);\n        CallManager.getInstance().removeUser(username);\n    }\n\n    private reset(): void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n        this.stopTimerStoppedByAnotherUser();\n        CallManager.getInstance().reset();\n    }\n\n    private isLoggedIn(): boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet: ScoreSheet) {\n        sscLogger('Handling save');\n\n        // add the data to the selected board game\n        if (this.currentlySelectedBoardGame) {\n            const saveData = TemplateManager.getInstance().getSaveData(this.currentlySelectedBoardGame, scoreSheet);\n            sscLogger(saveData);\n            if (!this.currentlySelectedBoardGame.scoresheets) {\n                this.currentlySelectedBoardGame.scoresheets = [];\n            }\n            this.currentlySelectedBoardGame.scoresheets.push(saveData);\n            Controller.getInstance().scoreSheetAddedToBoardGame(this.currentlySelectedBoardGame, saveData);\n        }\n    }\n\n    private saveCurrentScoreSheet(scoreSheet: ScoreSheet, informListeners: boolean = true) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(STATE_NAMES.scoreSheet, this.currentScoreSheet, informListeners);\n    }\n\n    private stopTimerStoppedByAnotherUser() {\n        sscLogger(`Handling timer stopped by another user`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, true);\n        }\n        this.intervalTimer = -1;\n    }\n\n}\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {API_Config, Decorator, STATE_NAMES} from \"./AppTypes\";\nimport Downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {ScoreSheetController} from \"./component/controller/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n    public static eventDataKeyId:string =  'board-game-id';\n\n\n    constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                apiURL: this.getServerAPIURL() + API_Config.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: API_Config.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: API_Config.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [STATE_NAMES.recentUserSearches, STATE_NAMES.boardGames, STATE_NAMES.scores], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n        }\n        let currentGameList: any[] = this.displayedBoardGamesStateManager.getStateByName(STATE_NAMES.boardGames);\n        currentGameList = this.cleanupBoardGameState(currentGameList);\n\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: currentGameList});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.bggSearchCallById.queryString, {gameId: boardGame.gameId}, this.callbackBoardGameDetails, STATE_NAMES.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[API_Config.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[API_Config.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game: any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n\n                if (updatingBoardGame.scoresheets) {\n                    const cb = (data: any, status: number, associatedStateName: string) => {\n                    };\n\n                    // add the scoresheets to database\n                    updatingBoardGame.scoresheets.forEach((scoreSheet: any) => {\n                        this.convertScoreSheetToApiCallFormat(scoreSheet);\n                        Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                            {userId: this.getCurrentUser(), boardGameId: updatingBoardGame.id, sheet: scoreSheet},\n                            cb,\n                            STATE_NAMES.scoreSheet,\n                            false);\n                        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n                        scoreSheet.decorator = Decorator.Persisted;\n\n                    });\n\n                }\n\n                this.applicationView.setState({boardGames: currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(STATE_NAMES.boardGames, updatingBoardGame, isSameGame, false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[API_Config.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[API_Config.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame: any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n\n                this.decorateScoreSheets(boardGame);\n\n                let index = currentGameList.findIndex((game: any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >= 0}`);\n                if (index >= 0) {\n                    const locallySaveBoardGame = currentGameList[index];\n\n                    cLoggerDetail(`in current state, replacing`);\n                    // copy any locally saved score sheets to the database object\n                    this.copyLocallySavedScoreSheetsToBoardGame(boardGame, locallySaveBoardGame);\n\n                    // replace the current entry\n                    currentGameList.splice(index, 1, boardGame);\n                } else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            currentGameList = this.cleanupBoardGameState(currentGameList);\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames: currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentGameList, false);\n        }\n    }\n\n    scoreSheetAddedToBoardGame(boardGame: any, scoreSheet: any) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                {userId: this.getCurrentUser(), boardGameId: boardGame.id, sheet: scoreSheet},\n                cb,\n                STATE_NAMES.scoreSheet,\n                false);\n            scoreSheet.decorator = Decorator.Persisted;\n        } else {\n            scoreSheet.decorator = Decorator.PersistedLocally;\n        }\n        // convert the scoresheet into the usual received format from the database\n        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    scoreSheetRemovedFromBoardGame(boardGame: any, scoreSheetId: string) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.removeScoreSheet.queryString,\n                {sheetId: scoreSheetId},\n                cb,\n                STATE_NAMES.scoreSheet,\n                false);\n        }\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(STATE_NAMES.boardGames, boardGame, true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            let scoreSheets = boardGame.scoresheets;\n                            delete boardGame.scoresheets;\n\n                            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                STATE_NAMES.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                            boardGame.scoresheets = scoreSheets;\n\n\n                        } else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                STATE_NAMES.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private cleanupBoardGameState(boardGames: any[]): any[] { // lets tidy up any duplicates, keeping Persisted ones by preference\n        let cleanedUpList: any[] = [];\n        boardGames.forEach((boardGame) => {\n            // is already in the list?\n            let index = cleanedUpList.findIndex((game) => game.gameId === boardGame.gameId);\n            if (index >= 0) { // found in the list\n                // is this a persisted board game?\n                let existingListGame = cleanedUpList[index]\n                if (existingListGame.decorator && existingListGame.decorator === Decorator.Persisted) {\n                    // leave the persisted version in the cleaned up list\n                } else {\n                    // do we have persisted game to replace the one in the list\n                    if (boardGame.decorator && boardGame.decorator === Decorator.Persisted) {\n                        // replace the existing one with this one\n                        cleanedUpList.splice(index, 1, boardGame);\n                    } else {\n                        // just leave the one there, neither are persisted to a database\n                    }\n                }\n            } else {\n                // not found yet, add to list\n                cleanedUpList.push(boardGame);\n            }\n\n        });\n        return cleanedUpList;\n\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.getMyBoardGameCollection.queryString, {userId: this.getLoggedInUserId()}, this.callbackGetCollection, STATE_NAMES.boardGames, false);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    private removeBoardGameFromState(boardGame: any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index, 1);\n            this.applicationView.setState({boardGames: currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentBoardGamesOnDisplay, false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n    private decorateScoreSheets(boardGame: any) {\n        if (boardGame) {\n            if (boardGame.scoresheets) {\n                boardGame.scoresheets.forEach((sheet: any) => {\n                    sheet.decorator = Decorator.Persisted;\n                })\n            } else {\n                boardGame.scoresheets = [];\n            }\n        }\n    }\n\n    private copyLocallySavedScoreSheetsToBoardGame(target: any, source: any) {\n        if (source.scoresheets) {\n            let toSave: any[] = [];\n            source.scoresheets.forEach((sheet: any) => {\n                // is the scoresheet already in the target?\n                let index = target.scoresheets.findIndex((item: any) => item.id === sheet.id);\n                if (index < 0) {\n                    sheet.decorator = Decorator.PersistedLocally;\n                    target.scoresheets.push(sheet);\n                    toSave.push(sheet);\n                }\n            });\n\n            // do we have any sheets to save?\n            if (toSave.length > 0) {\n                const cb = (data: any, status: number, associatedStateName: string) => {\n                };\n\n                toSave.forEach((sheetToSave: any) => {\n                    this.convertScoreSheetToApiCallFormat(sheetToSave);\n\n\n                    Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                        {userId: this.getCurrentUser(), boardGameId: target.id, sheet: sheetToSave},\n                        cb,\n                        this.config.stateNames.scoreSheet,\n                        false);\n\n                    this.convertScoreSheetToDatabaseFormat(sheetToSave);\n                    sheetToSave.decorator = Decorator.Persisted;\n                });\n            }\n        }\n    }\n\n    private convertScoreSheetToDatabaseFormat(scoreSheet: any) {\n        if (scoreSheet.players) {\n            if (scoreSheet.players.length >= 1) {\n                scoreSheet.player1 = scoreSheet.players[0];\n                scoreSheet.score1 = scoreSheet.scores[0];\n            }\n            if (scoreSheet.players.length >= 2) {\n                scoreSheet.player2 = scoreSheet.players[1];\n                scoreSheet.score2 = scoreSheet.scores[1];\n            }\n            if (scoreSheet.players.length >= 3) {\n                scoreSheet.player3 = scoreSheet.players[2];\n                scoreSheet.score3 = scoreSheet.scores[2];\n            }\n            if (scoreSheet.players.length >= 4) {\n                scoreSheet.player4 = scoreSheet.players[3];\n                scoreSheet.score4 = scoreSheet.scores[3];\n            }\n            if (scoreSheet.players.length >= 5) {\n                scoreSheet.player5 = scoreSheet.players[4];\n                scoreSheet.score5 = scoreSheet.scores[4];\n            }\n            if (scoreSheet.players.length >= 6) {\n                scoreSheet.player6 = scoreSheet.players[5];\n                scoreSheet.score6 = scoreSheet.scores[5];\n            }\n            if (scoreSheet.players.length >= 7) {\n                scoreSheet.player7 = scoreSheet.players[6];\n                scoreSheet.score7 = scoreSheet.scores[6];\n            }\n\n        }\n    }\n\n    private convertScoreSheetToApiCallFormat(scoreSheet: any) {\n        delete scoreSheet.decorator;\n        delete scoreSheet.player1;\n        delete scoreSheet.score1;\n        delete scoreSheet.player2;\n        delete scoreSheet.score2;\n        delete scoreSheet.player3;\n        delete scoreSheet.score3;\n        delete scoreSheet.player4;\n        delete scoreSheet.score4;\n        delete scoreSheet.player5;\n        delete scoreSheet.score5;\n        delete scoreSheet.player6;\n        delete scoreSheet.score6;\n        delete scoreSheet.player7;\n        delete scoreSheet.score7;\n    }\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n}\n\nexport default Controller;\n","import {ViewListener} from \"./ViewListener\";\nimport {View} from \"./View\";\n\nclass ViewListenerForwarder implements ViewListener {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener:ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view:View,selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view,selectedItem));\n        }\n    }\n\n    itemDragStarted(view:View,selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDragStarted(view,selectedItem));\n        }\n    }\n\n    itemSelected(view:View,selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemSelected(view,selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view:View,actionName:string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view,actionName,selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view,selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view,droppedItem));\n        }\n    }\n\n    itemDeselected(view: View, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeselected(view,deselectedItem));\n        }\n    }\n\n}\n\nexport default ViewListenerForwarder;","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\nimport ViewListenerForwarder from \"./ViewListenerForwarder\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier,\n    ViewDOMConfig,\n} from \"./ConfigurationTypes\";\nimport {ViewListener} from \"./ViewListener\";\nimport {View} from \"./View\";\nimport {isSame} from \"../util/EqualityFunctions\";\n\nconst avLogger = debug('view-ts');\nconst avLoggerDetails = debug('view-ts-detail');\n\nexport default abstract class AbstractView implements StateChangeListener, View {\n\n    public static DATA_SOURCE = 'data-source';\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected stateManager: StateManager;\n    protected stateName: string;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement|null = null;\n\n    protected constructor(uiConfig: ViewDOMConfig, stateManager: StateManager, stateName:string) {\n        this.uiConfig = uiConfig;\n        this.stateManager = stateManager;\n        this.stateName = stateName;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.stateName,this);\n\n    }\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.eventForwarder.documentLoaded(this);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (this.stateManager && this.stateName) this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (this.stateManager && this.stateName) this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (this.stateManager && this.stateName) this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    protected eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n        console.log(selectedItem);\n        if (selectedItem) this.eventForwarder.itemSelected(this, selectedItem);\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                avLoggerDetails(selectedItem);\n                this.eventForwarder.itemDeleted(this, selectedItem);\n            }\n        }\n    }\n\n    protected eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n        if (selectedItem) {\n            this.eventForwarder.itemAction(this, actionName, selectedItem);\n        }\n    }\n\n\n    protected getDragData(event: DragEvent): any {\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.uiConfig.detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.uiConfig.detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    abstract getIdForStateItem(name: string, item: any): string;\n    abstract getDisplayValueForStateItem(name: string, item: any): string;\n\n    compareStateItemsForEquality(item1:any, item2:any) :boolean {\n        return isSame(item1,item2);\n    }\n\n    getModifierForStateItem(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImage(name: string, item: any): string {\n        return '';\n    }\n\n    updateView(name: string, newState: any): void {\n        this.createResultsForState(name, newState);\n    }\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger(`view ${this.getName()}: drag start`);\n        avLoggerDetails(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        avLoggerDetails(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n    }\n\n    protected createResultForItem(name: string, item: any): HTMLElement {\n        avLogger(`view ${this.getName()}: creating Result`);\n        avLogger(item);\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n\n        let childEl: HTMLElement = document.createElement(this.uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, this.uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, this.uiConfig.resultsElementAttributes);\n        childEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (this.uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, this.uiConfig.detail.containerClasses);\n            contentEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n\n\n            textEl = document.createElement(this.uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,this.uiConfig.detail.textElementClasses);\n            textEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (this.uiConfig.detail.background) {\n                let imgEl = document.createElement(this.uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, this.uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.getBackgroundImage(name, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (this.uiConfig.detail.badge) {\n                const badgeValue = this.getBadgeValue(name, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(this.uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, this.uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, this.uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (this.uiConfig.extraActions) {\n                this.uiConfig.extraActions.forEach((extraAction) => {\n                    let action: HTMLElement = document.createElement('button');\n                    action.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                    if (extraAction.buttonText) {\n                       action.innerHTML = extraAction.buttonText;\n                    }\n                    if (extraAction.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n                        action.appendChild(iconEl);\n                    }\n                    action.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                    action.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                    action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n\n                    action.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventActionClicked(event);\n                    });\n                    buttonsEl.appendChild(action);\n                });\n            }\n            if (this.uiConfig.detail.delete) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, this.uiConfig.detail.delete.buttonClasses);\n                if (this.uiConfig.detail.delete.buttonText) {\n                   deleteButtonEl.innerHTML = this.uiConfig.detail.delete.buttonText;\n                }\n                if (this.uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, this.uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (this.uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (this.uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        textEl.innerHTML = displayText;\n        // add modifiers for patient state\n        if (this.uiConfig.modifiers) {\n            const modifier = this.getModifierForStateItem(name, item);\n            const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.normal);\n                    if (this.uiConfig.icons && this.uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.normal);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.warning, true);\n                            if (this.uiConfig.icons && this.uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.warning);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (this.uiConfig.icons && this.uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.active);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.active);\n                    if (this.uiConfig.icons && this.uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.active);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.warning, true);\n                            if (this.uiConfig.icons && this.uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.warning);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.inactive);\n                    if (this.uiConfig.icons && this.uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.inactive);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (this.uiConfig.icons && this.uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.warning);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (this.uiConfig.icons && this.uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.active);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger(`view ${this.getName()}: creating Results`, 10);\n        avLogger(newState);\n        // remove the previous items from list\n        const viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name, item);\n            // add draggable actions\n            avLogger(`view ${this.getName()}:  Adding child ${this.getIdForStateItem(name,item)}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n        if (this.uiConfig.detail.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    handleDrop(event: Event) {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.detail.drop) {\n            const acceptType = (this.uiConfig.detail.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.detail.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.detail.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this,draggedObject);\n                }\n            }\n        }\n    }\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n    hidden(): void {}\n\n}\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {KeyType, Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from \"../../ui-framework/View\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractView implements ChatUserEventListener,ViewListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'recentUserSearches',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.userSearch,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        this.addEventListener(this);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateView(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, isSame, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n\n}\n\nexport default UserSearchView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {KeyType, Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {isSame, isSameRoom} from \"../../util/EqualityFunctions\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractView implements ChatEventListener,ViewListener {\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'chatLogs',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        dataSourceId: VIEW_NAME.chatLogs,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,new MemoryBufferStateManager(), STATE_NAMES.chatLogs);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareStateItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameRoom(item1,item2);\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs,newState,true);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        this.eventForwarder.itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.eventForwarder.itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.eventForwarder.itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            this.eventForwarder.itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n}\n\nexport default ChatLogsView;\n","import React from \"react\";\nimport debug from 'debug';\n\nimport Controller from \"../../Controller\";\nimport {Decorator} from \"../../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler, startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!Controller.getInstance().isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!Controller.getInstance().isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-2 w-100\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"fas fa-list-alt\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scoresheets) {\n            scoreCount = boardGame.scoresheets.length;\n        }\n\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-info ml-1'\n                               onClick={showScoresHandler}>Scores: {scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n            const bggURL = `https://boardgamegeek.com/boardgame/${boardGame.gameId}`;\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <a href={bggURL} target=\"_blank\"><img className=\"card-img-top\" src={boardGame.image}\n                                                              alt=\"Card image cap\"></img></a>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? favouriteIcon : ''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? scoreBadge : ''}<br/> {(Controller.getInstance().isLoggedIn()) ? ((boardGame.decorator === Decorator.Persisted) ? deleteButton : addButton) : deleteButton}\n                            </h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                            <p className=\"card-text\">Loading...</p>\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Loading...\n                                </small>\n                            </p>\n                        </div>\n                        <div className={\"card-footer text-right text-muted\"}>\n                            Loading...\n                        </div>\n                    </div>\n                </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import debug from 'debug';\nimport moment from \"moment\";\nimport Controller from \"../../Controller\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {KeyType, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from \"../../ui-framework/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\n\n\nconst csLogger = debug('score-sheet-sidebar');\nconst csLoggerDetail = debug('score-sheet-sidebar:detail');\n\nclass ScoreSheetsView extends AbstractView implements ViewListener{\n    protected selectedBoardGame: any | null = null;\n    static SCORESHEETS_ViewConfig:ViewDOMConfig = {\n        resultsContainerId:'scoreSheets',\n        resultsElementType:'div',\n        resultsClasses:'text-white bg-info col-sm-6 col-md-3 col-lg-2 score-card',\n        keyId:'id',\n        keyType: KeyType.string,\n        dataSourceId:VIEW_NAME.scoreSheets,\n        detail: {\n            containerClasses: 'card-img-overlay',\n            textElementType:'div',\n            textElementClasses:'ml-2',\n            select: true,\n            delete: {\n                buttonClasses: 'btn btn-rounded btn-warning ml-6 mt-4',\n                buttonText:'Delete&nbsp;',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            background: {\n                elementType: 'img',\n                elementClasses: 'score-card-img'\n            }\n        },\n    }\n\n\n    constructor() {\n        super(ScoreSheetsView.SCORESHEETS_ViewConfig,new MemoryBufferStateManager(),STATE_NAMES.scores);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n        this.stateManager.setStateByName(STATE_NAMES.scores,[],true);\n    }\n\n\n    public setSelectedBoardGame(boardGame: any) {\n        csLogger(`setting selected board game to`);\n        csLoggerDetail(boardGame);\n        if (boardGame) {\n            this.selectedBoardGame = boardGame;\n            this.stateManager.setStateByName(STATE_NAMES.scores,this.selectedBoardGame.scoresheets,true);\n        }\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">${this.selectedBoardGame.name} (${this.selectedBoardGame.year})</h5>`;\n        buffer += `<p class=\"card-text\">Played On: ${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</p>`;\n        buffer += `<p class=\"card-text\">Scores: `;\n        if (item.player1) {\n            if (item.score1 > 0) {\n                buffer += `${item.player1}:${item.score1} `;\n            }\n        }\n        if (item.player2) {\n            if (item.score2 > 0) {\n                buffer += `${item.player2}:${item.score2} `;\n            }\n        }\n        if (item.player3) {\n            if (item.score3 > 0) {\n                buffer += `${item.player3}:${item.score3} `;\n            }\n        }\n        if (item.player4) {\n            if (item.score4 > 0) {\n                buffer += `${item.player4}:${item.score4} `;\n            }\n        }\n        if (item.player5) {\n            if (item.score5 > 0) {\n                buffer += `${item.player5}:${item.score5} `;\n            }\n        }\n        if (item.player6) {\n            if (item.score6 > 0) {\n                buffer += `${item.player6}:${item.score6} `;\n            }\n        }\n        if (item.player7) {\n            if (item.score7 > 0) {\n                buffer += `${item.player7}:${item.score7} `;\n            }\n        }\n        buffer += `</p>`;\n        return buffer;\n    }\n\n    getBackgroundImage(name: string, item: any): string {\n        return './img/scorecard-vertical.jpg';\n    }\n\n    getIdForStateItem(name: string, item: any): string {\n        return item.id;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true;\n        if (this.selectedBoardGame) {\n            if (!confirm(\"Are you sure you want to delete this Score Sheet?\")) {\n                result = false;\n            }\n        }\n        return result;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Handling delete ${selectedItem}`);\n        // remove the sheet from the selected board game\n        if (this.selectedBoardGame.scoresheets) {\n            let index = this.selectedBoardGame.scoresheets.findIndex((sheet: any) => sheet.id === selectedItem.id);\n            if (index >= 0) {\n                this.selectedBoardGame.scoresheets.splice(index, 1);\n                // let the controller know to remove from the database if the user is logged in\n                this.stateManager.setStateByName(STATE_NAMES.scores,this.selectedBoardGame.scoresheets,true);\n                Controller.getInstance().scoreSheetRemovedFromBoardGame(this.selectedBoardGame, selectedItem.id);\n            }\n        }\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n\n\n}\n\nexport default ScoreSheetsView;\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"./ConfigurationTypes\";\nimport {View} from \"./View\";\nimport {ViewListener} from \"./ViewListener\";\nimport debug from 'debug';\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements ViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View,config:SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'chatSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ScoreSheetsSidebar extends SidebarViewContainer {\n    private static SidebarPrefs:SidebarPrefs = {\n        id:'scoreSheetSidebar',\n        expandedSize:'40%',\n        location: SidebarLocation.bottom\n    }\n\n    public static scoreSheets = 'scoreSheets';\n\n    constructor() {\n        super(ScoreSheetsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ScoreSheetsSidebar;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport notifier from \"../../notification/NotificationManager\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, ViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: ViewListener): void {}\n\n    getIdForStateItem(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForStateItem(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareStateItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForStateItem(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForStateItem(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValue(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImage(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateView(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {KeyType, Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/View\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractView implements ChatUserEventListener,ViewListener {\n    static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'favouriteUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.favouriteUsers,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateView('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateView('',{});\n    }\n\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateView(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateView(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateView('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n}\n\nexport default FavouriteUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {KeyType, Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from '../../ui-framework/View';\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractView implements ChatUserEventListener, ViewListener {\n    private static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'blockedUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.blockedUsers,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateView('',{});\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForStateItem(name: string, item: any): string {\n        return item.id;\n    }\n\n    updateView(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateView(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n}\n\nexport default BlockedUserView;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass BoardGameSearchSidebar extends SidebarViewContainer {\n    private static BGGSEARCH_SidebarPrefs:SidebarPrefs = {\n        id:'boardGameSearchSidebar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    public static bggSearchResults = 'bggSearchResults';\n\n    constructor() {\n        super(BoardGameSearchSidebar.BGGSEARCH_SidebarPrefs);\n    }\n}\n\nexport default BoardGameSearchSidebar;\n","import debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport DownloadManager from \"../../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {KeyType, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {API_Config, DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from \"../../ui-framework/View\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BGGSearchView extends AbstractView implements ViewListener{\n    // @ts-ignore\n    private formEl: HTMLElement;\n    // @ts-ignore\n    private queryEl: HTMLInputElement;\n    // @ts-ignore\n    private buttonEl: HTMLButtonElement;\n\n    private static BGGSEARCH_ViewConfig:ViewDOMConfig = {\n        resultsContainerId:'bggSearchResults',\n        resultsElementType:'a',\n        resultsElementAttributes:[{name:'href',value:'#'}],\n        resultsClasses:'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId:'gameId',\n        keyType:KeyType.number,\n        dataSourceId:VIEW_NAME.bggSearch,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active:'list-group-item-info',\n            warning:'list-group-item-danger'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType:'span',\n            textElementClasses:'mb-1',\n            select: true,\n            drag: {\n                type: DRAGGABLE.typeBoardGame,\n                from: 'boardGameSearch'\n            }\n        },\n    }\n\n    static BGGSEARCH_Form:string = 'bggSearch';\n    static BGGSEARCH_Query:string = 'queryText';\n    static BGGSEARCH_Search:string = 'bggSearchButton';\n\n    constructor() {\n        super(BGGSearchView.BGGSEARCH_ViewConfig,new MemoryBufferStateManager(),STATE_NAMES.bggSearchResults);\n\n        // handler binding\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n    }\n\n    public handleSearchResultsCB(data: any, status: number, associatedStateName: string): void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            if (this.stateManager && this.stateName) this.stateManager.setStateByName(this.stateName, data.data.findBoardGames, true);\n        }\n    }\n\n    onDocumentLoaded() {\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = document.getElementById(BGGSearchView.BGGSEARCH_Form);\n        // @ts-ignore\n        this.buttonEl = document.getElementById(BGGSearchView.BGGSEARCH_Search);\n        // @ts-ignore\n        this.queryEl = document.getElementById(BGGSearchView.BGGSEARCH_Query);\n\n        this.formEl.addEventListener('submit', this.handleSearch);\n\n        this.addEventListener(this);\n\n        super.onDocumentLoaded();\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    compareStateItemsForEquality(item1: any, item2: any): boolean {\n        let result = false;\n        if (item1.gameId && item2.gameId) {\n            const parsed1 = parseInt(item1.gameId);\n            const parsed2 = parseInt(item2.gameId);\n            if (!isNaN(parsed1) && !isNaN(parsed2)) {\n                item1.gameId = parsed1;\n                item2.gameId = parsed2;\n                result = (item1.gameId === item2.gameId);\n            }\n        }\n        return result;\n    }\n\n\n    eventClickItem(event: MouseEvent) {\n        super.eventClickItem(event);\n        //this.applicationView.addBoardGameToDisplay(boardGame);\n        this.eventForwarder.hideRequested(this);\n    }\n\n\n    private changeSearchButton(enable: boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        } else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\", \"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event: Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = API_Config.bggSearchCall;\n        DownloadManager.getInstance().addQLApiRequest(API_Config.graphQL, query, {queryString: queryText}, this.handleSearchResultsCB, STATE_NAMES.bggSearchResults);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {    }\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        /* listen for our own deletes as we are expected to implement them */\n        vLoggerDetail(`Handling delete of board game search result for game ${selectedItem.gameId}`);\n        this.stateManager?.removeItemFromState(STATE_NAMES.bggSearchResults,selectedItem,this.compareStateItemsForEquality,true);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n}\n\nexport default BGGSearchView;\n","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport BoardGameView from \"./component/view/BoardGameView\";\nimport {ALERT, API_Config, Decorator, DRAGGABLE, NAVIGATION} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/controller/ScoreSheetController\";\nimport {ScoreSheetDetailView} from \"./component/view/ScoreSheetDetailView\";\nimport ScoreSheetsView from \"./component/view/ScoreSheetsView\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ScoreSheetsSidebar from \"./component/sidebar/ScoreSheetsSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport BoardGameSearchSidebar from \"./component/sidebar/BoardGameSearchSidebar\";\nimport BGGSearchView from \"./component/view/BGGSearchView\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE} from \"./ui-framework/ConfigurationTypes\";\nimport {ViewListener} from \"./ui-framework/ViewListener\";\nimport {View} from \"./ui-framework/View\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component implements UnreadMessageCountListener,ViewListener {\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private bggSearchSidebar: BoardGameSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private scoreSheetSidebar: ScoreSheetsSidebar;\n    // @ts-ignore\n    private scoresView: ScoreSheetsView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            boardGames: [],\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n        this.handleShowScores = this.handleShowScores.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public addBoardGameToDisplay(draggedObject: any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        Controller.getInstance().addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    alert(title: string, content: string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames: any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index: number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={this.handleShowScores}\n                addToCollectionHandler={Controller.getInstance().addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.hideClass);\n        event.preventDefault();\n        let id = this.modalEl.getAttribute(Controller.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            Controller.getInstance().removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event: MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            } else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n    handleDeleteBoardGame(event: MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (Controller.getInstance().isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(Controller.eventDataKeyId, id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    } else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        Controller.getInstance().removeBoardGameFromDisplay(boardGame);\n\n                    }\n                } else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    Controller.getInstance().removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatSidebar = new ChatRoomsSidebar();\n        // add the views to the chat side bar\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView,{containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView,{containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n\n        this.chatSidebar.onDocumentLoaded();\n\n\n        this.userSearchSidebar = new UserSearchSidebar();\n        // add the subviews for the user search\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches,{containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers,{containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers,{containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n\n\n        this.bggSearchSidebar = new BoardGameSearchSidebar();\n        const bggSearch = new BGGSearchView();\n        this.bggSearchSidebar.addView(bggSearch,{containerId:BoardGameSearchSidebar.bggSearchResults})\n        this.bggSearchSidebar.onDocumentLoaded();\n        bggSearch.addEventListener(this);\n\n        this.scoreSheetSidebar = new ScoreSheetsSidebar();\n        this.scoresView = new ScoreSheetsView();\n        this.scoreSheetSidebar.addView(this.scoresView,{containerId:ScoreSheetsSidebar.scoreSheets});\n        this.scoreSheetSidebar.onDocumentLoaded();\n\n\n        ScoreSheetDetailView.getInstance().onDocumentLoaded();\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(NAVIGATION.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(ALERT.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(ALERT.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(ALERT.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(ALERT.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(ALERT.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(ALERT.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click', this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click', this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click', this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {event.preventDefault();});\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        Controller.getInstance().initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.bggSearchSidebar.eventHide(null);\n    }\n\n    handleShowCollection(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowScores(event: Event) {\n        logger(`Handling show board game scores`);\n        event.preventDefault();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling Show board game scores ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                this.scoresView.setSelectedBoardGame(boardGame);\n                this.scoreSheetSidebar.eventShow(null);\n            }\n        }\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    handleShowBGGSearch(event: Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchSidebar.eventShow(event);\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    private handleDrop(event: Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeBoardGame) {\n            draggedObject.gameId = parseInt(draggedObject.gameId);\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection: boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', false);\n        } else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    showRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    itemSelected(view: View, selectedItem: any): void {\n        // add a new board game to the display\n        selectedItem.gameId = parseInt(selectedItem.gameId);\n        this.addBoardGameToDisplay(selectedItem);\n    }\n\n\n}\n\n//localStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts chat-sidebar chat-sidebar:detail socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts view-ts-detail user-search user-search-detail template-manager sidebar-container' ;\nlocalStorage.debug = 'score-sheet-view' ;\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","var map = {\n\t\"./af\": 2525,\n\t\"./af.js\": 2525,\n\t\"./ar\": 9102,\n\t\"./ar-dz\": 3778,\n\t\"./ar-dz.js\": 3778,\n\t\"./ar-kw\": 960,\n\t\"./ar-kw.js\": 960,\n\t\"./ar-ly\": 1490,\n\t\"./ar-ly.js\": 1490,\n\t\"./ar-ma\": 5507,\n\t\"./ar-ma.js\": 5507,\n\t\"./ar-sa\": 4042,\n\t\"./ar-sa.js\": 4042,\n\t\"./ar-tn\": 1523,\n\t\"./ar-tn.js\": 1523,\n\t\"./ar.js\": 9102,\n\t\"./az\": 8365,\n\t\"./az.js\": 8365,\n\t\"./be\": 4860,\n\t\"./be.js\": 4860,\n\t\"./bg\": 9904,\n\t\"./bg.js\": 9904,\n\t\"./bm\": 952,\n\t\"./bm.js\": 952,\n\t\"./bn\": 8609,\n\t\"./bn.js\": 8609,\n\t\"./bo\": 8437,\n\t\"./bo.js\": 8437,\n\t\"./br\": 4557,\n\t\"./br.js\": 4557,\n\t\"./bs\": 9332,\n\t\"./bs.js\": 9332,\n\t\"./ca\": 3667,\n\t\"./ca.js\": 3667,\n\t\"./cs\": 6860,\n\t\"./cs.js\": 6860,\n\t\"./cv\": 5427,\n\t\"./cv.js\": 5427,\n\t\"./cy\": 8863,\n\t\"./cy.js\": 8863,\n\t\"./da\": 3520,\n\t\"./da.js\": 3520,\n\t\"./de\": 2111,\n\t\"./de-at\": 464,\n\t\"./de-at.js\": 464,\n\t\"./de-ch\": 701,\n\t\"./de-ch.js\": 701,\n\t\"./de.js\": 2111,\n\t\"./dv\": 4438,\n\t\"./dv.js\": 4438,\n\t\"./el\": 3121,\n\t\"./el.js\": 3121,\n\t\"./en-SG\": 2406,\n\t\"./en-SG.js\": 2406,\n\t\"./en-au\": 9197,\n\t\"./en-au.js\": 9197,\n\t\"./en-ca\": 3885,\n\t\"./en-ca.js\": 3885,\n\t\"./en-gb\": 1914,\n\t\"./en-gb.js\": 1914,\n\t\"./en-ie\": 938,\n\t\"./en-ie.js\": 938,\n\t\"./en-il\": 5438,\n\t\"./en-il.js\": 5438,\n\t\"./en-nz\": 9722,\n\t\"./en-nz.js\": 9722,\n\t\"./eo\": 2783,\n\t\"./eo.js\": 2783,\n\t\"./es\": 6820,\n\t\"./es-do\": 9651,\n\t\"./es-do.js\": 9651,\n\t\"./es-us\": 6018,\n\t\"./es-us.js\": 6018,\n\t\"./es.js\": 6820,\n\t\"./et\": 8686,\n\t\"./et.js\": 8686,\n\t\"./eu\": 1323,\n\t\"./eu.js\": 1323,\n\t\"./fa\": 1885,\n\t\"./fa.js\": 1885,\n\t\"./fi\": 3741,\n\t\"./fi.js\": 3741,\n\t\"./fo\": 9961,\n\t\"./fo.js\": 9961,\n\t\"./fr\": 2800,\n\t\"./fr-ca\": 8121,\n\t\"./fr-ca.js\": 8121,\n\t\"./fr-ch\": 7979,\n\t\"./fr-ch.js\": 7979,\n\t\"./fr.js\": 2800,\n\t\"./fy\": 8930,\n\t\"./fy.js\": 8930,\n\t\"./ga\": 2591,\n\t\"./ga.js\": 2591,\n\t\"./gd\": 5513,\n\t\"./gd.js\": 5513,\n\t\"./gl\": 4485,\n\t\"./gl.js\": 4485,\n\t\"./gom-latn\": 3878,\n\t\"./gom-latn.js\": 3878,\n\t\"./gu\": 5435,\n\t\"./gu.js\": 5435,\n\t\"./he\": 2825,\n\t\"./he.js\": 2825,\n\t\"./hi\": 7282,\n\t\"./hi.js\": 7282,\n\t\"./hr\": 2438,\n\t\"./hr.js\": 2438,\n\t\"./hu\": 1310,\n\t\"./hu.js\": 1310,\n\t\"./hy-am\": 4794,\n\t\"./hy-am.js\": 4794,\n\t\"./id\": 8761,\n\t\"./id.js\": 8761,\n\t\"./is\": 6593,\n\t\"./is.js\": 6593,\n\t\"./it\": 2196,\n\t\"./it-ch\": 8111,\n\t\"./it-ch.js\": 8111,\n\t\"./it.js\": 2196,\n\t\"./ja\": 2645,\n\t\"./ja.js\": 2645,\n\t\"./jv\": 1869,\n\t\"./jv.js\": 1869,\n\t\"./ka\": 4093,\n\t\"./ka.js\": 4093,\n\t\"./kk\": 9794,\n\t\"./kk.js\": 9794,\n\t\"./km\": 2637,\n\t\"./km.js\": 2637,\n\t\"./kn\": 8684,\n\t\"./kn.js\": 8684,\n\t\"./ko\": 4565,\n\t\"./ko.js\": 4565,\n\t\"./ku\": 2773,\n\t\"./ku.js\": 2773,\n\t\"./ky\": 5606,\n\t\"./ky.js\": 5606,\n\t\"./lb\": 2027,\n\t\"./lb.js\": 2027,\n\t\"./lo\": 366,\n\t\"./lo.js\": 366,\n\t\"./lt\": 7311,\n\t\"./lt.js\": 7311,\n\t\"./lv\": 1851,\n\t\"./lv.js\": 1851,\n\t\"./me\": 2700,\n\t\"./me.js\": 2700,\n\t\"./mi\": 3575,\n\t\"./mi.js\": 3575,\n\t\"./mk\": 5509,\n\t\"./mk.js\": 5509,\n\t\"./ml\": 9866,\n\t\"./ml.js\": 9866,\n\t\"./mn\": 9072,\n\t\"./mn.js\": 9072,\n\t\"./mr\": 3798,\n\t\"./mr.js\": 3798,\n\t\"./ms\": 6848,\n\t\"./ms-my\": 1212,\n\t\"./ms-my.js\": 1212,\n\t\"./ms.js\": 6848,\n\t\"./mt\": 3181,\n\t\"./mt.js\": 3181,\n\t\"./my\": 3977,\n\t\"./my.js\": 3977,\n\t\"./nb\": 7248,\n\t\"./nb.js\": 7248,\n\t\"./ne\": 1859,\n\t\"./ne.js\": 1859,\n\t\"./nl\": 7058,\n\t\"./nl-be\": 6901,\n\t\"./nl-be.js\": 6901,\n\t\"./nl.js\": 7058,\n\t\"./nn\": 1748,\n\t\"./nn.js\": 1748,\n\t\"./pa-in\": 4266,\n\t\"./pa-in.js\": 4266,\n\t\"./pl\": 9581,\n\t\"./pl.js\": 9581,\n\t\"./pt\": 7410,\n\t\"./pt-br\": 6114,\n\t\"./pt-br.js\": 6114,\n\t\"./pt.js\": 7410,\n\t\"./ro\": 8295,\n\t\"./ro.js\": 8295,\n\t\"./ru\": 9862,\n\t\"./ru.js\": 9862,\n\t\"./sd\": 9548,\n\t\"./sd.js\": 9548,\n\t\"./se\": 3236,\n\t\"./se.js\": 3236,\n\t\"./si\": 289,\n\t\"./si.js\": 289,\n\t\"./sk\": 8339,\n\t\"./sk.js\": 8339,\n\t\"./sl\": 4170,\n\t\"./sl.js\": 4170,\n\t\"./sq\": 5316,\n\t\"./sq.js\": 5316,\n\t\"./sr\": 8791,\n\t\"./sr-cyrl\": 7630,\n\t\"./sr-cyrl.js\": 7630,\n\t\"./sr.js\": 8791,\n\t\"./ss\": 5773,\n\t\"./ss.js\": 5773,\n\t\"./sv\": 1159,\n\t\"./sv.js\": 1159,\n\t\"./sw\": 2329,\n\t\"./sw.js\": 2329,\n\t\"./ta\": 7054,\n\t\"./ta.js\": 7054,\n\t\"./te\": 1280,\n\t\"./te.js\": 1280,\n\t\"./tet\": 4120,\n\t\"./tet.js\": 4120,\n\t\"./tg\": 7678,\n\t\"./tg.js\": 7678,\n\t\"./th\": 4679,\n\t\"./th.js\": 4679,\n\t\"./tl-ph\": 3270,\n\t\"./tl-ph.js\": 3270,\n\t\"./tlh\": 5386,\n\t\"./tlh.js\": 5386,\n\t\"./tr\": 4669,\n\t\"./tr.js\": 4669,\n\t\"./tzl\": 1434,\n\t\"./tzl.js\": 1434,\n\t\"./tzm\": 7217,\n\t\"./tzm-latn\": 7665,\n\t\"./tzm-latn.js\": 7665,\n\t\"./tzm.js\": 7217,\n\t\"./ug-cn\": 4956,\n\t\"./ug-cn.js\": 4956,\n\t\"./uk\": 9596,\n\t\"./uk.js\": 9596,\n\t\"./ur\": 5133,\n\t\"./ur.js\": 5133,\n\t\"./uz\": 9456,\n\t\"./uz-latn\": 8737,\n\t\"./uz-latn.js\": 8737,\n\t\"./uz.js\": 9456,\n\t\"./vi\": 5577,\n\t\"./vi.js\": 5577,\n\t\"./x-pseudo\": 4564,\n\t\"./x-pseudo.js\": 4564,\n\t\"./yo\": 8854,\n\t\"./yo.js\": 8854,\n\t\"./zh-cn\": 5817,\n\t\"./zh-cn.js\": 5817,\n\t\"./zh-hk\": 6634,\n\t\"./zh-hk.js\": 6634,\n\t\"./zh-tw\": 9292,\n\t\"./zh-tw.js\": 9292\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 4125;","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 7207,\n\t\"./en-il.js\": 7207,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(3610)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","stateEventType","smLogger","debug","StateChangedDelegate","suppressEventEmits","this","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","foundIndex","stateChangeListeners","findIndex","element","changeListenersForName","index","listener","ItemAdded","ItemUpdated","ItemDeleted","addChangeListenerForName","ensureListenerSetupForName","listenersNameArrayPair","name","listeners","AbstractStateManager","forceSaves","managerName","state","value","stateObjForName","getStateByName","stateValueObj","_getState","setStateByName","informListeners","_saveState","stateObjectForName","addNewItemToState","isPersisted","findItemInState","result","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","item","updateItemInState","msManager","MemoryBufferStateManager","getInstance","_ensureStatePresent","applicationState","_addNewNamedStateToStorage","_replaceNamedStateInStorage","find","_addItemToState","_removeItemFromState","valueIndex","_updateItemInState","Priority","InviteType","sDebug","SocketManager","chatReceivers","callbackForMessage","bind","callbackForData","callbackForLogin","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForUserList","callbackForDeclineInvite","addChatReceiver","setListener","io","login","username","logout","joinChat","room","type","leaveChat","sendInvite","ChatRoom","requiresAcceptDecline","subject","attachment","inviteObj","from","to","sendMessage","priority","Normal","messageObj","message","created","getUserList","sendDeclineInvite","dataObj","JSON","receiver","err","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","stateChangedItemAdded","aggLogger","AggregateStateManager","filters","mWF","manager","stateManager","managerWithFilters","sm","stateManagers","length","filter","isSame","item1","item2","isSameGame","Decorator","STATE_NAMES","API_Config","ALERT","DRAGGABLE","BootstrapNotification","show","topOffset","context","duration","containerId","notificationManager","bgColorClass","containerNode","document","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","$","setTimeout","NotificationFactory","createNotification","NotificationManager","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","changeUser","id","user","stateObj","Controller","handleMessage","getCurrentUser","lsLogger","BrowserStorageStateManager","useLocalStorage","configuration","window","storage","getItem","stringifiedSaveData","savedResults","savedResultsJSON","newValue","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","UUID","getUniqueId","replace","r","Math","c","v","UserStatus","cmLogger","ChatManager","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","receiveLogin","receiveLogout","receiveInvitation","receiveMessage","receiveQueuedMessages","receiveQueuedInvites","receiveJoinedRoom","receivedLeftRoom","receiveUserList","blocked","favourite","savedLogs","localStorage","users","log","ensureChatLogExists","parseInt","moment","joinDateTime","invite","isUserInBlockedList","didChatAlreadyExist","doesChatRoomExist","happyToProceed","chatLog","push","isUserInFavouriteList","splice","receiveDecline","chatLogs","wasOffline","invites","messages","trim","declineInvite","sent","roomName","ensureChatLogExistsWithUser","lastViewed","numOfNewMessages","foundLog","uuid","unreadCount","chatLogKey","blockedListKey","favouriteListKey","notLogger","NotificationController","doNotDisturb","handleChatLogUpdated","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleInvitationDeclined","handleNewInviteReceived","ScoreSheet","dontDisturbMe","isBlackedListed","isFavourited","chatManager","handleChatLogsUpdated","displayMessage","handleBlockedUsersChanged","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","RequestType","queueType","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","url","response","apiFetchJSONWithPost","request","error","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","fetchJSON","callback","data","dlLogger","DownloadManager","callbackForQueueRequest","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addQLApiRequest","isPriority","POST","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","jsonRequest","managerRequest","originalRequest","PRIORITY","priorityChangeListener","handleEventAddToQueue","BACKGROUND","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","apiUtil","GET","DELETE","PUT","graphSMLogger","GraphQLApiStateManager","callbackForAddItem","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","results","config","bHasCompletedRun","setCompletedRun","runsComplete","getConfigurationForStateName","Error","stateName","apiURL","apis","findAll","create","destroy","update","isActive","status","dataAttribute","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","addAttributes","attributes","attribute","templateLogger","TemplateManager","boardGame","getDefaultScoreSheetTemplate","getDefaultScoreSheetStartingData","getOhanamiSaveData","getSkullKingSaveData","getDefaultSaveData","template","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","cells","column","row","readOnly","className","forceNumeric","columnSummary","destinationRow","destinationColumn","reversedRowCoords","saveData","scoreSheet","jsonData","createdOn","players","scores","playerNames","parsed","isNaN","score","numOfCards","calculateOhanamiPinkScore","round","parsedBid","parsedActual","parsedBonus","DRAGGABLE_KEY_ID","EXTRA_ACTION_ATTRIBUTE_NAME","Modifier","KeyType","SidebarLocation","ssvLogger","ScoreSheetDetailView","thisEl","boardGameTitleEl","startStopTimer","timerEl","endOrLeaveEl","scoreSheetEl","table","ScoreSheetController","eventUserSelected","fastSearchEl","handleStartStopTimer","handleEndOrLeave","handleUserDrop","addEventListener","event","ui","alert","controller","hasActiveScoreSheet","confirm","draggedObjectJSON","draggedObject","innerText","browserUtil","createTimerDisplay","innerHTML","isPaused","myUsername","fastSearchValues","searchValue","label","source","disabled","minLength","removeAttribute","tableData","rowIndex","columnIndex","SOURCE_View","timer","hours","minutes","seconds","ScoreSheetDom","dropZone","end","iconStart","iconInProgress","iconEnd","iconLeave","ssFastSearchUserNames","webrtc","callLogger","CallManager","peer","webrtcDiv","myVideoStream","myVideo","callUser","Peer","path","host","secure","navigator","audio","video","currentUserList","track","srcObject","isCurrentUser","videoCardHolder","videoCard","videoCardTitle","videoCardBody","videoCardFooter","footerContent","stopVideoButton","muteMicButton","userId","numberOfAttempts","interval","setInterval","call","clearInterval","userVideoCard","videoEl","parentNode","prepareToAnswerCallFrom","sscLogger","applicationView","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","isRoomCreator","currentUsersInScoreSheet","intervalTimer","userChangedValue","endScoreSheet","pauseTimer","isSheetOwner","inviteUser","getCurrentRoom","getSelectedBoardGame","startTimer","stopTimerStoppedByAnotherUser","isTimerGoing","reset","saveCurrentScoreSheet","saveScoreSheetToBoardGame","boardGameName","sheetLayoutOptions","timerGoing","isFinished","timerWasGoing","isLoggedIn","changedByTM","cLogger","cLoggerDetail","connectToApplication","graphSM","getServerAPIURL","aggregateSM","memorySM","asyncSM","callbackBoardGameDetails","callbackAddToCollection","callbackRemoveFromCollection","callbackGetCollection","addBoardGameToCollection","removeBoardGameFromCollection","removeBoardGameFromDisplay","socketListerDelegate","getLoggedInUserId","currentGameList","displayedBoardGamesStateManager","cleanupBoardGameState","boardGames","getStateManager","getLoggedInUsername","addBoardGameToDisplay","currentListOfGames","Incomplete","Downloader","gameId","boardGameDetails","regex","PersistedLocally","game","updatingBoardGame","Persisted","cb","boardGameId","sheet","collectionData","locallySaveBoardGame","scoreSheetAddedToBoardGame","oldBoardGame","scoreSheetRemovedFromBoardGame","sheetId","scoreSheetId","findBoardGameInStateFromEvent","Complete","scoreSheets","cleanedUpList","existingListGame","downloadAndSyncSavedBoardGameCollection","removeBoardGameFromState","currentBoardGamesOnDisplay","decorateScoreSheets","copyLocallySavedScoreSheetsToBoardGame","toSave","target","sheetToSave","convertScoreSheetToDatabaseFormat","convertScoreSheetToApiCallFormat","handleShowChat","eventDataKeyId","ViewListenerForwarder","addListener","itemDeleted","itemDragStarted","itemSelected","documentLoaded","itemAction","canDeleteItem","hideRequested","showRequested","itemDropped","itemDeselected","avLogger","avLoggerDetails","AbstractView","eventStartDrag","eventClickItem","eventDeleteClickItem","eventActionClicked","handleDrop","onDocumentLoaded","updateView","itemId","uiConfig","dataSource","keyType","number","compareWith","selectedItem","console","eventForwarder","shouldDelete","actionName","getDragData","detail","compareStateItemsForEquality","getModifierForStateItem","normal","getSecondaryModifierForStateItem","getBadgeValue","getBackgroundImage","createResultForItem","resultDataKeyId","getIdForStateItem","childEl","textEl","contentEl","imgEl","background","buttonsEl","badgeValue","badgeEl","badge","action","extraAction","iconEl","deleteButtonEl","delete","displayText","getDisplayValueForStateItem","modifier","secondModifier","modifiers","icons","warning","active","inactive","createResultsForState","viewEl","newState","setContainedBy","container","droppedObjectType","droppedObjectFrom","acceptType","drop","acceptTypes","objectType","acceptFrom","getName","hidden","DATA_SOURCE","vLogger","vLoggerDetail","UserSearchView","localisedSM","recentUserSearches","extraActions","fastSearchInputId","dataLimit","DOMConfig","resultsContainerId","resultsElementType","resultsElementAttributes","resultsClasses","keyId","dataSourceId","containerClasses","textElementType","textElementClasses","select","buttonClasses","iconClasses","drag","csLogger","ChatLogsView","selectedChatLog","isSameRoom","updateStateManager","selectChatRoom","string","elementType","elementClasses","beLogger","BoardGameView","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","onClick","deleteButton","startScoreSheetButton","scoreCount","scoresheets","favouriteIcon","scoreBadge","decorator","bggURL","href","src","image","alt","year","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","csLoggerDetail","ScoreSheetsView","selectedBoardGame","setSelectedBoardGame","buffer","SCORESHEETS_ViewConfig","buttonText","sbvcLogger","SidebarViewContainer","eventHide","eventShow","addView","viewContainer","view","sidePanelEl","prefs","closeButtonEl","size","showHide","left","right","bottom","top","UserSearchSidebar","SidebarPrefs","expandedSize","location","SidebarContainers","recentSearches","favourites","ChatRoomsSidebar","ScoreSheetsSidebar","ChatLogDetailView","handleAddMessage","commentEl","messageContent","sentMessage","messageEl","addChatMessage","chatMessageEl","messageSenderEl","reRenderChatMessages","renderChatLog","checkCanComment","sendMessageButton","leaveChatButton","fastUserSearch","setAttribute","clearChatLog","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","FavouriteUserView","favUsers","droppedItem","BlockedUserView","blockedUsers","BoardGameSearchSidebar","BGGSEARCH_SidebarPrefs","bggSearchResults","BGGSearchView","handleSearchResultsCB","parsed1","parsed2","changeSearchButton","enable","buttonEl","handleSearch","queryText","queryEl","queryString","BGGSEARCH_ViewConfig","BGGSEARCH_Form","BGGSEARCH_Query","BGGSEARCH_Search","logger","Root","cancelDelete","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowBGGSearch","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","handleShowScores","title","content","titleEl","textContent","modalEl","classList","remove","add","render","games","map","entry","key","preventDefault","getAttribute","hideAllSideBars","startScoreSheet","switchBetweenCollectionAndScoreSheet","componentDidMount","chatSidebar","chatView","chatLogView","userSearchSidebar","favouriteUsers","bggSearchSidebar","bggSearch","scoreSheetSidebar","scoresView","getElementById","chatNavigationItem","cancelBtnEl","confirmBtnEl","closeBtnEl","countChanged","newCount","dataTransfer","getData","parse","showCollection","React","info","ReactDOM","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","loaded","__webpack_modules__","m","O","chunkIds","fn","notFulfilled","Infinity","i","fulfilled","j","every","n","getter","__esModule","d","a","definition","defineProperty","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","__webpack_exports__"],"sourceRoot":""}