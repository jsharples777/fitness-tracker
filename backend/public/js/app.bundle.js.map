{"version":3,"file":"app.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;;WAAYA;AAAAA,EAAAA,UAAAA,uBAAAA,KAAAA,eAAAA;AAAAA,EAAAA,UAAAA,qBAAAA,KAAAA,aAAAA;AAAAA,EAAAA,UAAAA,sBAAAA,KAAAA,cAAAA;AAAAA,EAAAA,UAAAA,6BAAAA,KAAAA,qBAAAA;GAAAA,cAAAA;;AAiBL,IAAMC,WAAW,GAAG;AACvBC,EAAAA,KAAK,EADkB;AAEvBC,EAAAA,UAAU,EAFa;AAGvBC,EAAAA,MAAM,EAHiB;AAIvBC,EAAAA,aAAa,EAJU;AAKvBC,EAAAA,kBAAkB,EALK;AAMvBC,EAAAA,gBAAgB,EANO;AAOvBC,EAAAA,UAAU,EAAE;AAPW,CAApB;AAUA,IAAMC,UAAU,GAAG;AACtBC,EAAAA,KAAK,EADiB;AAEtBC,EAAAA,OAAO,EAFe;AAGtBC,EAAAA,aAAa,EAHS;AAItBC,EAAAA,iBAAiB,EAAE;AACfC,IAAAA,WAAW,EADI;AAEfC,IAAAA,UAAU,EAAE;AAFG,GAJG;AAQtBC,EAAAA,SAAS,EAAE;AACPF,IAAAA,WAAW,EADJ;AAEPC,IAAAA,UAAU,EAAE;AAFL,GARW;AAYtBE,EAAAA,iBAAiB,EAAE;AACfH,IAAAA,WAAW,EADI;AAEfC,IAAAA,UAAU,EAAE;AAFG,GAZG;AAgBtBG,EAAAA,sBAAsB,EAAE;AACpBJ,IAAAA,WAAW,EADS;AAEpBC,IAAAA,UAAU,EAAE;AAFQ,GAhBF;AAoBtBI,EAAAA,wBAAwB,EAAE;AACtBL,IAAAA,WAAW,EADW;AAEtBC,IAAAA,UAAU,EAAE;AAFU,GApBJ;AAwBtBK,EAAAA,wBAAwB,EAAE;AACtBN,IAAAA,WAAW,EADW;AAEtBC,IAAAA,UAAU,EAAE;AAFU,GAxBJ;AA4BtBM,EAAAA,gBAAgB,EAAE;AACdP,IAAAA,WAAW,EADG;AAEdC,IAAAA,UAAU,EAAE;AAFE;AA5BI,CAAnB;AAkCA,IAAMO,UAAU,GAAG;AACtBC,EAAAA,gBAAgB,EADM;AAEtBC,EAAAA,iBAAiB,EAFK;AAGtBC,EAAAA,YAAY,EAHU;AAItBC,EAAAA,MAAM,EAJgB;AAKtBC,EAAAA,cAAc,EAAE;AALM,CAAnB;AASA,IAAMC,KAAK,GAAG;AACjBC,EAAAA,OAAO,EADU;AAEjBC,EAAAA,OAAO,EAFU;AAGjBC,EAAAA,SAAS,EAHQ;AAIjBC,EAAAA,cAAc,EAJG;AAKjBC,EAAAA,eAAe,EALE;AAMjBC,EAAAA,aAAa,EANI;AAOjBC,EAAAA,SAAS,EAPQ;AAQjBC,EAAAA,SAAS,EAAE;AARM,CAAd;AAWA,IAAMC,SAAS,GAAG;AACrBC,EAAAA,aAAa,EADQ;AAErBC,EAAAA,QAAQ,EAFa;AAGrBC,EAAAA,cAAc,EAHO;AAIrBC,EAAAA,cAAc,EAAE;AAJK,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFP;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMC,OAAO,GAAGC,4CAAK,CAArB,eAAqB,CAArB;AACA,IAAMC,aAAa,GAAGD,4CAAK,CAA3B,sBAA2B,CAA3B;;IAEME;aAGYC,cAAd,uBAAwC;AACpC,QAAI,CAAED,UAAU,CAAhB,WAA6B;AACzBA,MAAAA,UAAU,CAAVA,SAAAA,GAAuB,IAAvBA,UAAuB,EAAvBA;AACH;;AACD,WAAOA,UAAU,CAAjB;;;AAcJ,wBAAc,CAAE;;;;SAEhBG,uBAAAA,SAAAA,oBAAAA,CAAAA,eAAAA,EAAAA,iBAAAA,EAAmE;AAC/D;AACA,6BAF+D,iBAE/D,CAF+D,CAG/D;;AAEA,QAAIC,OAAO,GAAG,IAAd,iFAAc,EAAd;AACAA,IAAAA,OAAO,CAAPA,UAAAA,CAAmB,CACf;AACIC,MAAAA,SAAS,EAAEjD,wDADf;AAEIkD,MAAAA,MAAM,EAAE,yBAAyB1C,yDAFrC;AAGI2C,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EADF;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,OAAO,EAAEhD,uEAAgCK;AALvC,OAHV;AAUI4C,MAAAA,IAAI,EAAE;AACFL,QAAAA,IAAI,EADF;AAEFC,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFC,QAAAA,OAAO,EAAEhD,sEAA+BM;AALtC,OAVV;AAiBI4C,MAAAA,QAAQ,EAAE;AAjBd,KADe,CAAnBV;AAyBA,QAAIW,WAAW,GAAGC,2FAAAA,EAAlB;AACA,QAAIC,QAAQ,GAAGC,mFAAAA,EAAf;AAEA,QAAIC,OAAO,GAAG,yFAAd,OAAc,CAAd;AAGAJ,IAAAA,WAAW,CAAXA,eAAAA,CAAAA,QAAAA,EAAAA,EAAAA,EAAAA,KAAAA;AACAA,IAAAA,WAAW,CAAXA,eAAAA,CAAAA,OAAAA,EAAqC,CAAC3D,qEAAD,EAAiCA,6DAAjC,EAAyDA,yDAAzD,CAArC2D,EAAAA,KAAAA;AAEA,wBAxC+D,WAwC/D,CAxC+D,CA0C/D;;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,mCAA+B,kCAA/B,IAA+B,CAA/B;AACA,mCAA+B,kCA9CgC,IA8ChC,CAA/B,CA9C+D,CAgD/D;;AACA,oCAAgC,mCAAhC,IAAgC,CAAhC;AACA,mCAA+B,kCAA/B,IAA+B,CAA/B;AACA,wCAAoC,uCAApC,IAAoC,CAApC;AACA,iCAA6B,gCApDkC,IAoDlC,CAA7B,CApD+D,CAsD/D;;AACA,oCAAgC,mCAAhC,IAAgC,CAAhC;AACA,yCAAqC,wCAArC,IAAqC,CAArC;AACA,sCAAkC,qCAzD6B,IAyD7B,CAAlC,CAzD+D,CA2D/D;;AACA,2CAAuC,+EAAvC,IAAuC,CAAvC;AAEA;AACH;AAED;AACJ;AACA;;;SACWK,aAAP,sBAA0B;AACtBvB,IAAAA,OAAO,CADe,yBACf,CAAPA,CADsB,CAEtB;;AACA,QAAIwB,oBAAoB,GAAG,IAA3B,+DAA2B,EAA3B;AACAC,IAAAA,yEAAAA,GAAAA,WAAAA,CAJsB,oBAItBA,EAJsB,CAMtB;;AACAzB,IAAAA,OAAO,sCAAoC,KAApC,iBAAoC,EAApC,UAAiE,KAAxEA,mBAAwE,EAAjE,CAAPA;;AACA,QAAI,2BAAJ,GAAkC;AAC9B;AACA,UAAI0B,WAAW,GAAGC,wEAAAA,EAAlB,CAF8B,CAEe;AAE7C;;AACAC,MAAAA,8FAAAA;AACAF,MAAAA,WAAW,CAAXA,cAAAA,CAA2B,KAA3BA,mBAA2B,EAA3BA;AACAG,MAAAA,yGAAAA,GAAAA,cAAAA,CAAkD,KAPpB,mBAOoB,EAAlDA,EAP8B,CAS9B;;AACAH,MAAAA,WAAW,CAAXA,sBAAAA,CAAmC,KAAnCA,eAAAA;AAEAA,MAAAA,WAAW,CAZmB,KAY9BA,GAZ8B,CAa9B;;AACA,4CAAsCnE,wDAAtC;AACH;;AACD,QAAIuE,eAAsB,GAAG,oDAAoDvE,6DAApD,CAA7B;AACAuE,IAAAA,eAAe,GAAG,2BAzBI,eAyBJ,CAAlBA,CAzBsB,CA4BtB;;AACA,kCAA8B;AAACrE,MAAAA,UAAU,EAAEqE;AAAb,KAA9B,EA7BsB,CA+BtB;;AACA;;;SAGGC,kBAAP,2BAAuC;AACnC,WAAO,KAAP;;;SAGGC,aAAP,sBAA6B;AACzB,QAAIA,UAAU,GAAd;;AACA,QAAI;AACA;AACA,0BAAoB;AAChBA,QAAAA,UAAU,GAAVA,IAAAA;AACH;AAJL,MAKE,cAAc,CACf;;AACD;;;SAGGC,oBAAP,6BAAmC;AAC/B,QAAIC,MAAM,GAAG,CAAb;;AACA,QAAI;AACA;AACA,0BAAoB;AAChB;AACAA,QAAAA,MAAM,GAANA,cAAAA;AACH;AALL,MAME,cAAc,CACf;;AACDhC,IAAAA,aAAa,2BAAbA,MAAa,CAAbA;AACA;;;SAGGiC,sBAAP,+BAAqC;AACjC,QAAID,MAAM,GAAV;;AACA,QAAI;AACA;AACA,4BAAsB;AAClB;AACAA,QAAAA,MAAM,GAANA,gBAAAA;AACH;AALL,MAME,cAAc,CACf;;AACDhC,IAAAA,aAAa,wBAAbA,MAAa,CAAbA;AACA;;;SAGGkC,gBAAP,gCAA4C;AACxCpC,IAAAA,OAAO,CAAPA,OAAO,CAAPA;;;SAGGqC,iBAAP,0BAAgC;AAC5B,WAAO,KAAP,iBAAO,EAAP;;;SAGJC,wBAAAA,SAAAA,qBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA+E;;SAC/EC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAmF;;SACnFC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EAAsG;;SACtGC,eAAAA,SAAAA,YAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,MAAAA,EAA6D,GAE7D;;;SACOC,wBAAP,0CAAmD;AAC/C;AACA1C,IAAAA,OAAO,CAAPA,iCAAO,CAAPA;AACAA,IAAAA,OAAO,CAHwC,SAGxC,CAAPA,CAH+C,CAK/C;;AACA,QAAI2C,kBAAyB,GAAG,2BAAhC;AACA,QAAIC,KAAK,GAAG,kBAAkB,CAAlB,UAA6B;AAAA,aAAWC,KAAK,CAALA,MAAAA,KAAiBC,SAAS,CAArC;AAAzC,KAAY,CAAZ;;AACA,QAAIF,KAAK,IAAT,GAAgB;AACZ5C,MAAAA,OAAO,CAAPA,+BAAO,CAAPA;AACA;AAV2C,MAa/C;;;AACA8C,IAAAA,SAAS,CAATA,SAAAA,GAAsBxF,2DAAtBwF;AACAH,IAAAA,kBAAkB,CAAlBA,IAAAA,CAAAA,SAAAA;AACA3C,IAAAA,OAAO,CAAPA,2CAAO,CAAPA;AACAA,IAAAA,OAAO,CAAPA,SAAO,CAAPA;AAEA,wDAAoDzC,6DAApD;AACA,kCAA8B;AAACE,MAAAA,UAAU,EAAEkF;AAAb,KAA9B,EApB+C,CAsB/C;;AACAI,IAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,+EAA7DgF,EAAuG;AAACC,MAAAA,MAAM,EAAEF,SAAS,CAACE;AAAnB,KAAvGD,EAAmI,KAAnIA,wBAAAA,EAAkKxF,6DAAlKwF,EAAAA,KAAAA;;;SAGGE,2BAAP,qEAA8F;AAC1FjD,IAAAA,OAAO,4FAAPA,MAAO,CAAPA;;AACA,QAAIkD,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClClD,MAAAA,OAAO,CAAPA,IAAO,CAAPA;AACA,UAAMmD,gBAAgB,GAAGnC,IAAI,CAAJA,IAAAA,CAAUjD,8EAAViD,CAAzB;AACAhB,MAAAA,OAAO,CAAPA,gBAAO,CAAPA;AACA,UAAIoD,KAAK,GAAT;AACAD,MAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BA,gBAAgB,CAAhBA,WAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAA/BA,MAA+BA,CAA/BA;AACAC,MAAAA,KAAK,GAALA,UAAAA;AACAD,MAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BA,gBAAgB,CAAhBA,WAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAA/BA,GAA+BA,CAA/BA;AACAC,MAAAA,KAAK,GAALA,UAAAA;AACAD,MAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BA,gBAAgB,CAAhBA,WAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAA/BA,GAA+BA,CAA/BA;AACAC,MAAAA,KAAK,GAALA,SAAAA;AACAD,MAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BA,gBAAgB,CAAhBA,WAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAA/BA,GAA+BA,CAA/BA;AACAC,MAAAA,KAAK,GAALA,UAAAA;AACAD,MAAAA,gBAAgB,CAAhBA,WAAAA,GAA+BA,gBAAgB,CAAhBA,WAAAA,CAAAA,OAAAA,CAAAA,KAAAA,EAA/BA,GAA+BA,CAA/BA;AAGA,UAAIR,kBAAyB,GAAG,2BAAhC;AACA,UAAIC,KAAK,GAAG,kBAAkB,CAAlB,UAA6B;AAAA,eAAWC,KAAK,CAALA,MAAAA,KAAiBM,gBAAgB,CAA5C;AAAzC,OAAY,CAAZ;;AACA,UAAIP,KAAK,IAAT,GAAgB;AACZ5C,QAAAA,OAAO,CAAPA,4BAAO,CAAPA;AACA2C,QAAAA,kBAAkB,CAAlBA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,gBAAAA;AACA3C,QAAAA,OAAO,CAAPA,kBAAO,CAAPA;AACAmD,QAAAA,gBAAgB,CAAhBA,SAAAA,GAA6B7F,iEAA7B6F;AACA,4DAAoD5F,6DAApD;AACA,sCAA8B;AAACE,UAAAA,UAAU,EAAEkF;AAAb,SAA9B;AANJ,aAOO;AACH3C,QAAAA,OAAO,iBAAemD,gBAAgB,CAA/B,KAAPnD,6BAAO,CAAPA;AACH;AAEJ;;;SAIEqD,0BAAP,oEAA6F;AAAA;;AACzFrD,IAAAA,OAAO,kGAAPA,MAAO,CAAPA;;AACA,QAAIkD,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClClD,MAAAA,OAAO,CAAPA,IAAO,CAAPA;AACA,UAAMsD,EAAE,GAAGtC,IAAI,CAAJA,IAAAA,CAAUjD,8EAAViD,CAAX;AACAhB,MAAAA,OAAO,CAHyB,EAGzB,CAAPA,CAHgC,CAKhC;;AACA,UAAI8B,eAAe,GAAG,2BAAtB;AACA,UAAIc,KAAK,GAAG,eAAe,CAAf,UAA0B;AAAA,eAAeW,IAAI,CAAJA,MAAAA,KAAgBD,EAAE,CAAjC;AAAtC,OAAY,CAAZ;;AACA,UAAIV,KAAK,IAAT,GAAgB;AACZ,YAAIY,iBAAiB,GAAG1B,eAAe,CAAvC,KAAuC,CAAvC;AACA9B,QAAAA,OAAO,0BAAwBwD,iBAAiB,CAAzC,gCAAqEF,EAAE,CAAvE,KAAPtD,0BAAO,CAAPA;AACAwD,QAAAA,iBAAiB,CAAjBA,SAAAA,GAA8BlG,0DAA9BkG;AACAA,QAAAA,iBAAiB,CAAjBA,EAAAA,GAAuBF,EAAE,CAAzBE,EAAAA;;AAEA,YAAIA,iBAAiB,CAArB,aAAmC;AAC/B,cAAMC,EAAE,GAAG,SAALA,EAAK,oCAA4D,CADxC,CAC/B,CAD+B,CAI/B;;;AACAD,UAAAA,iBAAiB,CAAjBA,WAAAA,CAAAA,OAAAA,CAAsC,sBAAqB;AACvD,iBAAI,CAAJ;;AACAT,YAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,sFAA7DgF,EACI;AAACW,cAAAA,MAAM,EAAE,KAAI,CAAb,cAAS,EAAT;AAAgCC,cAAAA,WAAW,EAAEH,iBAAiB,CAA9D;AAAmEI,cAAAA,KAAK,EAAE9F;AAA1E,aADJiF,EAAAA,EAAAA,EAGIxF,6DAHJwF,EAAAA,KAAAA;;AAKA,iBAAI,CAAJ;;AACAjF,YAAAA,UAAU,CAAVA,SAAAA,GAAuBR,0DAAvBQ;AARJ0F,WAAAA;AAYH;;AAED,sCAA8B;AAAC/F,UAAAA,UAAU,EAAEqE;AAAb,SAA9B;AACA,+DAAuDvE,6DAAvD;AACH;AACJ;;;SAGEsG,+BAAP,yEAAkG;AAC9F7D,IAAAA,OAAO,uGAAPA,MAAO,CAAPA;;AACA,QAAIkD,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClClD,MAAAA,OAAO,CAAPA,IAAO,CAAPA;AACA,UAAMsD,EAAE,GAAGtC,IAAI,CAAJA,IAAAA,CAAUjD,mFAAViD,CAAX;AACAhB,MAAAA,OAAO,CAAPA,EAAO,CAAPA;AACH;;;SAGE8D,wBAAP,kEAA2F;AAAA;;AACvF9D,IAAAA,OAAO,iHAAPA,MAAO,CAAPA;;AACA,QAAIkD,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClClD,MAAAA,OAAO,CAAPA,IAAO,CAAPA;AACA,UAAM+D,cAAc,GAAG/C,IAAI,CAAJA,IAAAA,CAAUjD,qFAAViD,CAAvB,CAFgC,CAIhC;;AACA,UAAIc,eAAe,GAAG,2BAAtB;AACA5B,MAAAA,aAAa,mCAAiC4B,eAAe,CAA7D5B,MAAa,CAAbA;AACA6D,MAAAA,cAAc,CAAdA,OAAAA,CAAuB,qBAAoB;AACvCjB,QAAAA,SAAS,CAATA,SAAAA,GAAsBxF,0DAAtBwF;AACA5C,QAAAA,aAAa,CAAbA,qCAAa,CAAbA;AACAA,QAAAA,aAAa,CAAbA,SAAa,CAAbA;;AAEA,cAAI,CAAJ;;AAEA,YAAI0C,KAAK,GAAG,eAAe,CAAf,UAA0B;AAAA,iBAAeW,IAAI,CAAJA,MAAAA,KAAgBT,SAAS,CAAxC;AAAtC,SAAY,CAAZ;AACA5C,QAAAA,aAAa,0CAAuC0C,KAAK,IAAzD1C,CAAa,EAAbA;;AACA,YAAI0C,KAAK,IAAT,GAAgB;AACZ,cAAMoB,oBAAoB,GAAGlC,eAAe,CAA5C,KAA4C,CAA5C;AAEA5B,UAAAA,aAAa,CAHD,6BAGC,CAAbA,CAHY,CAIZ;;AACA,gBAAI,CAAJ,kDALY,oBAKZ,EALY,CAOZ;;;AACA4B,UAAAA,eAAe,CAAfA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,SAAAA;AARJ,eASO;AACH5B,UAAAA,aAAa,CAAbA,8BAAa,CAAbA;AACA4B,UAAAA,eAAe,CAAfA,IAAAA,CAAAA,SAAAA;AACH;AArBLiC,OAAAA;AAuBAjC,MAAAA,eAAe,GAAG,2BAAlBA,eAAkB,CAAlBA;AACA5B,MAAAA,aAAa,iCAA+B4B,eAAe,CAA3D5B,MAAa,CAAbA;AACA,oCAA8B;AAACzC,QAAAA,UAAU,EAAEqE;AAAb,OAA9B;AACA,0DAAoDvE,6DAApD;AACH;;;SAGL0G,6BAAAA,SAAAA,0BAAAA,CAAAA,SAAAA,EAAAA,UAAAA,EAA4D;AACxD,QAAMR,EAAE,GAAG,SAALA,EAAK,oCAA4D,CAAvE;;AAGA,QAAI,qBAAsBX,SAAS,CAATA,SAAtB,IAA8CA,SAAS,CAATA,SAAAA,KAAwBxF,0DAA1E,EAAiG;AAC7F;AACAyF,MAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,sFAA7DgF,EACI;AAACW,QAAAA,MAAM,EAAE,KAAT,cAAS,EAAT;AAAgCC,QAAAA,WAAW,EAAEb,SAAS,CAAtD;AAA2Dc,QAAAA,KAAK,EAAE9F;AAAlE,OADJiF,EAAAA,EAAAA,EAGIxF,6DAHJwF,EAAAA,KAAAA;AAKAjF,MAAAA,UAAU,CAAVA,SAAAA,GAAuBR,0DAAvBQ;AAPJ,WAQO;AACHA,MAAAA,UAAU,CAAVA,SAAAA,GAAuBR,iEAAvBQ;AAboD,MAexD;;;AACA;AAEA,QAAI6E,kBAAyB,GAAG,2BAAhC;AACA,QAAIC,KAAK,GAAG,kBAAkB,CAAlB,UAA6B;AAAA,aAAWC,KAAK,CAALA,MAAAA,KAAiBC,SAAS,CAArC;AAAzC,KAAY,CAAZ;;AACA,QAAIF,KAAK,IAAT,GAAgB;AACZ,UAAMsB,YAAY,GAAGvB,kBAAkB,CAAvC,KAAuC,CAAvC;AACAG,MAAAA,SAAS,CAATA,SAAAA,GAAsBoB,YAAY,CAAlCpB,SAAAA;AAEA9C,MAAAA,OAAO,CAAPA,4BAAO,CAAPA;AACA2C,MAAAA,kBAAkB,CAAlBA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,SAAAA;AACA3C,MAAAA,OAAO,CAAPA,kBAAO,CAAPA;AACA,0DAAoDzC,6DAApD;AACA,oCAA8B;AAACE,QAAAA,UAAU,EAAEkF;AAAb,OAA9B;AARJ,WASO;AACH3C,MAAAA,OAAO,iBAAe8C,SAAS,CAAxB,KAAP9C,6BAAO,CAAPA;AACH;;;SAILmE,iCAAAA,SAAAA,8BAAAA,CAAAA,SAAAA,EAAAA,YAAAA,EAAqE;AACjE,QAAMV,EAAE,GAAG,SAALA,EAAK,oCAA4D,CAAvE;;AAGA,QAAI,qBAAsBX,SAAS,CAATA,SAAtB,IAA8CA,SAAS,CAATA,SAAAA,KAAwBxF,0DAA1E,EAAiG;AAC7F;AACAyF,MAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,8EAA7DgF,EACI;AAACqB,QAAAA,OAAO,EAAEC;AAAV,OADJtB,EAAAA,EAAAA,EAGIxF,6DAHJwF,EAAAA,KAAAA;AAKH;;AAED,QAAIJ,kBAAyB,GAAG,2BAAhC;AACA,QAAIC,KAAK,GAAG,kBAAkB,CAAlB,UAA6B;AAAA,aAAWC,KAAK,CAALA,MAAAA,KAAiBC,SAAS,CAArC;AAAzC,KAAY,CAAZ;;AACA,QAAIF,KAAK,IAAT,GAAgB;AACZ,UAAMsB,YAAY,GAAGvB,kBAAkB,CAAvC,KAAuC,CAAvC;AACAG,MAAAA,SAAS,CAATA,SAAAA,GAAsBoB,YAAY,CAAlCpB,SAAAA;AAEA9C,MAAAA,OAAO,CAAPA,4BAAO,CAAPA;AACA2C,MAAAA,kBAAkB,CAAlBA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,SAAAA;AACA3C,MAAAA,OAAO,CAAPA,kBAAO,CAAPA;AACA,0DAAoDzC,6DAApD;AACA,oCAA8B;AAACE,QAAAA,UAAU,EAAEkF;AAAb,OAA9B;AARJ,WASO;AACH3C,MAAAA,OAAO,iBAAe8C,SAAS,CAAxB,KAAP9C,6BAAO,CAAPA;AACH;;;SAILsE,2BAAAA,SAAAA,wBAAAA,CAAAA,KAAAA,EAA4C;AACxCtE,IAAAA,OAAO,CAAPA,uCAAO,CAAPA;AACA,QAAM8C,SAAqB,GAAG,mCAA9B,KAA8B,CAA9B;;AACA,mBAAe;AACX,UAAIA,SAAS,CAAb,WAAyB;AACrB,gBAAQA,SAAS,CAAjB;AACI,eAAMxF,0DAAN;AAA4B;AACxB;AACA;AACH;;AACD,eAAMA,2DAAN;AAA6B;AACzB;AACA;AACH;;AACD,eAAMA,iEAAN;AACA,eAAMA,yDAAN;AAA2B;AACvB;AACA,qEAAuDC,6DAAvD,aAFuB,IAEvB,EAFuB,CAGvB;AACA;;AACA,qBAAOuF,SAAS,CAAhB;AACA,qBAAOA,SAAS,CAAhB;;AACA,kBAAI,KAAJ,UAAI,EAAJ,EAAuB;AACnB,oBAAIyB,WAAW,GAAGzB,SAAS,CAA3B;AACA,uBAAOA,SAAS,CAAhB;AAEAC,gBAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,+EAA7DgF,EACI;AAACW,kBAAAA,MAAM,EAAE,KAAT,cAAS,EAAT;AAAgCZ,kBAAAA,SAAS,EAAEA;AAA3C,iBADJC,EAEI,KAFJA,uBAAAA,EAGIxF,6DAHJwF,EAAAA,IAAAA;AAKAD,gBAAAA,SAAS,CAATA,SAAAA,GAAsBxF,yDAAtBwF;AACAA,gBAAAA,SAAS,CAATA,WAAAA,GAAAA,WAAAA;AAVJ,qBAaO;AACHA,gBAAAA,SAAS,CAATA,SAAAA,GAAsBxF,iEAAtBwF;AACH;;AACD;AACH;AAlCL;AAoCH;AACJ;;;SAGL0B,gCAAAA,SAAAA,6BAAAA,CAAAA,SAAAA,EAA8C;AAAE;AAC5CxE,IAAAA,OAAO,yDAAuD8C,SAAS,CAAvE9C,MAAO,CAAPA;;AACA,mBAAe;AACX,UAAI8C,SAAS,CAAb,WAAyB;AACrB,gBAAQA,SAAS,CAAjB;AACI,eAAMxF,iEAAN;AACA,eAAMA,0DAAN;AAA4B;AACxB;AACA;;AACA,kBAAI,KAAJ,UAAI,EAAJ,EAAuB;AACnByF,gBAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,oFAA7DgF,EACI;AAACW,kBAAAA,MAAM,EAAE,KAAT,cAAS,EAAT;AAAgCC,kBAAAA,WAAW,EAAEb,SAAS,CAACE;AAAvD,iBADJD,EAEI,KAFJA,4BAAAA,EAGIxF,6DAHJwF,EAAAA,KAAAA;AAKH;;AACD;AACH;;AACD,eAAMzF,2DAAN;AAA6B;AACzB;AACA;AACH;;AACD,eAAMA,yDAAN;AAA2B;AACvB;AACA;AACH;AArBL;AAuBH;AACJ;;;SAGLmH,6BAAAA,SAAAA,0BAAAA,CAAAA,SAAAA,EAA2C;AAAE;AACzCzE,IAAAA,OAAO,8CAA4C8C,SAAS,CAA5D9C,MAAO,CAAPA;;AACA,mBAAe;AACX,UAAI8C,SAAS,CAAb,WAAyB;AACrB,gBAAQA,SAAS,CAAjB;AACI,eAAMxF,2DAAN;AAA6B;AACzB;AACA;AACH;;AACD,eAAMA,0DAAN;AACA,eAAMA,iEAAN;AACA,eAAMA,yDAAN;AAA2B;AACvB;AACA;AACA;AACH;AAXL;AAaH;AACJ;;;SAGGoH,wBAAR,2CAAwD;AAAE;AACtD,QAAIC,aAAoB,GAAxB;AACAlH,IAAAA,UAAU,CAAVA,OAAAA,CAAmB,qBAAe;AAC9B;AACA,UAAImF,KAAK,GAAG,aAAa,CAAb,UAAwB;AAAA,eAAUW,IAAI,CAAJA,MAAAA,KAAgBT,SAAS,CAAnC;AAApC,OAAY,CAAZ;;AACA,UAAIF,KAAK,IAAT,GAAgB;AAAE;AACd;AACA,YAAIgC,gBAAgB,GAAGD,aAAa,CAApC,KAAoC,CAApC;;AACA,YAAIC,gBAAgB,CAAhBA,SAAAA,IAA8BA,gBAAgB,CAAhBA,SAAAA,KAA+BtH,0DAAjE,EAAsF,CAClF;AADJ,eAEO;AACH;AACA,cAAIwF,SAAS,CAATA,SAAAA,IAAuBA,SAAS,CAATA,SAAAA,KAAwBxF,0DAAnD,EAAwE;AACpE;AACAqH,YAAAA,aAAa,CAAbA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA,EAAAA,SAAAA;AAFJ,iBAGO,CACH;AACH;AACJ;AAbL,aAcO;AACH;AACAA,QAAAA,aAAa,CAAbA,IAAAA,CAAAA,SAAAA;AACH;AApBLlH,KAAAA;AAuBA;;;SAIIoH,0CAAR,mDAAkD;AAC9C,QAAI,KAAJ,UAAI,EAAJ,EAAuB;AACnB;AACA9B,MAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,sFAA7DgF,EAA8G;AAACW,QAAAA,MAAM,EAAE;AAAT,OAA9GX,EAAkJ,KAAlJA,qBAAAA,EAA8KxF,6DAA9KwF,EAAAA,KAAAA;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;;;SACY+B,kBAAR,2BAAkC;AAC9B,QAAI5C,MAAM,GADoB,EAC9B,CAD8B,CAE9B;;AACA,QAAK6C,MAAM,CAAP,GAACA,IAAgBA,MAAM,CAANA,GAAAA,CAArB,WAA4C;AACxC;AACA7C,MAAAA,MAAM,GAAG6C,MAAM,CAANA,GAAAA,CAAT7C,SAAAA;AACH;;AACD;;;SAGI8C,2BAAR,6CAAiD;AAC7C,QAAMC,0BAA0B,GAAG,2BAAnC;AACA,QAAIrC,KAAK,GAAG,0BAA0B,CAA1B,UAAqC;AAAA,aAAeW,IAAI,CAAJA,MAAAA,KAAgBT,SAAS,CAAxC;AAAjD,KAAY,CAAZ;;AACA,QAAIF,KAAK,IAAT,GAAgB;AACZqC,MAAAA,0BAA0B,CAA1BA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;AACA,oCAA8B;AAACxH,QAAAA,UAAU,EAAEwH;AAAb,OAA9B;AALyC,MAO7C;;;AACA,wDAAoD1H,6DAApD;;;SAGI2H,gCAAR,8CAAoD;AAChD,QAAIpC,SAAqB,GAAzB;AACA5C,IAAAA,aAAa,CAFmC,gCAEnC,CAAbA,CAFgD,CAGhD;;AAEA,QAAIoD,EAAE,GAAG6B,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0BhF,UAAU,CAA7C,cAASgF,CAAT;AACAjF,IAAAA,aAAa,CAAbA,EAAa,CAAbA;;AACA,YAAQ;AACJ;AACAoD,MAAAA,EAAE,GAAG8B,QAAQ,CAFT,EAES,CAAb9B,CAFI,CAGJ;;AACA,UAAM2B,0BAA0B,GAAG,2BAAnC;AACA,UAAIrC,KAAK,GAAG,0BAA0B,CAA1B,UAAqC;AAAA,eAAeW,IAAI,CAAJA,MAAAA,KAAf;AAAjD,OAAY,CAAZ;AACArD,MAAAA,aAAa,CAAbA,KAAa,CAAbA;;AACA,UAAI0C,KAAK,IAAT,GAAgB;AACZE,QAAAA,SAAS,GAAGmC,0BAA0B,CAAtCnC,KAAsC,CAAtCA;AACH;AACJ;;AACD5C,IAAAA,aAAa,CAAbA,SAAa,CAAbA;AACA;;;SAGImF,sBAAR,wCAA4C;AACxC,mBAAe;AACX,UAAIvC,SAAS,CAAb,aAA2B;AACvBA,QAAAA,SAAS,CAATA,WAAAA,CAAAA,OAAAA,CAA8B,iBAAgB;AAC1Cc,UAAAA,KAAK,CAALA,SAAAA,GAAkBtG,0DAAlBsG;AADJd,SAAAA;AADJ,aAIO;AACHA,QAAAA,SAAS,CAATA,WAAAA,GAAAA,EAAAA;AACH;AACJ;;;SAGGwC,yCAAR,gEAAyE;AAAA;;AACrE,QAAIC,MAAM,CAAV,aAAwB;AACpB,UAAIC,MAAa,GAAjB;AACAD,MAAAA,MAAM,CAANA,WAAAA,CAAAA,OAAAA,CAA2B,iBAAgB;AACvC;AACA,YAAI3C,KAAK,GAAG,MAAM,CAAN,sBAA6B;AAAA,iBAAe6C,IAAI,CAAJA,EAAAA,KAAY7B,KAAK,CAAhC;AAAzC,SAAY,CAAZ;;AACA,YAAIhB,KAAK,GAAT,GAAe;AACXgB,UAAAA,KAAK,CAALA,SAAAA,GAAkBtG,iEAAlBsG;AACA8B,UAAAA,MAAM,CAANA,WAAAA,CAAAA,IAAAA,CAAAA,KAAAA;AACAF,UAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA;AACH;AATe,OAEpBD,EAFoB,CAYpB;;AACA,UAAIC,MAAM,CAANA,MAAAA,GAAJ,GAAuB;AACnB,YAAM/B,EAAE,GAAG,SAALA,EAAK,oCAA4D,CAAvE;;AAGA+B,QAAAA,MAAM,CAANA,OAAAA,CAAe,uBAAsB;AACjC,gBAAI,CAAJ;;AAGAzC,UAAAA,6EAAAA,GAAAA,eAAAA,CAAyChF,yDAAzCgF,EAA6DhF,sFAA7DgF,EACI;AAACW,YAAAA,MAAM,EAAE,MAAI,CAAb,cAAS,EAAT;AAAgCC,YAAAA,WAAW,EAAE+B,MAAM,CAAnD;AAAwD9B,YAAAA,KAAK,EAAE+B;AAA/D,WADJ5C,EAAAA,EAAAA,EAGI,MAAI,CAAJ,kBAHJA,UAAAA,EAAAA,KAAAA;;AAMA,gBAAI,CAAJ;;AACA4C,UAAAA,WAAW,CAAXA,SAAAA,GAAwBrI,0DAAxBqI;AAXJH,SAAAA;AAaH;AACJ;;;SAGGI,oCAAR,uDAA2D;AACvD,QAAI9H,UAAU,CAAd,SAAwB;AACpB,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;;AACD,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;;AACD,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;;AACD,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;;AACD,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;;AACD,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;;AACD,UAAIA,UAAU,CAAVA,OAAAA,CAAAA,MAAAA,IAAJ,GAAoC;AAChCA,QAAAA,UAAU,CAAVA,OAAAA,GAAqBA,UAAU,CAAVA,OAAAA,CAArBA,CAAqBA,CAArBA;AACAA,QAAAA,UAAU,CAAVA,MAAAA,GAAoBA,UAAU,CAAVA,MAAAA,CAApBA,CAAoBA,CAApBA;AACH;AAEJ;;;SAGG+H,mCAAR,sDAA0D;AACtD,WAAO/H,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;AACA,WAAOA,UAAU,CAAjB;;;SAGJgI,iBAAAA,SAAAA,cAAAA,CAAAA,QAAAA,EAAqC;AACjC;;;;;;AAxqBF3F,WAkBYE,cAlBZF,GAkBqC,eAlBrCA;AA4qBN;;;;;;;;;;;;;;;;;;;;;AC/rBA;AAGA;AACA;AACA;AACA;AAEA,IAAM4F,QAAQ,GAAG9F,4CAAK,CAAtB,iBAAsB,CAAtB;;IAEqB+F;AAEjB,oCAAqB,CAAE;;;;SAEhBC,iCAAP,iDAAoD;AAChDF,IAAAA,QAAQ,2BAAyBG,OAAO,CAAhC,4BAAwDA,OAAO,CAA/D,+BAA0FA,OAAO,CAAzGH,IAAQ,CAARA;AACA,QAAMI,UAAU,GAAG,oGAA2D5I,wDAA3D,EAA8E;AAAC+F,MAAAA,EAAE,EAAE4C,OAAO,CAACE;AAAb,KAA9E,EAAnB,2DAAmB,CAAnB;AACA,QAAIC,QAAQ,GAAZ;;AACA,oBAAgB;AACZA,MAAAA,QAAQ,GAAGF,UAAU,CAArBE,QAAAA;AACH;;AACDN,IAAAA,QAAQ,2BAAyBG,OAAO,CAAhC,4BAAwDA,OAAO,CAA/D,+BAARH,QAAQ,CAARA;AAEA,QAAIO,QAAQ,GAAGJ,OAAO,CAAtB;AACAH,IAAAA,QAAQ,CAVwC,QAUxC,CAARA,CAVgD,CAWhD;;AACA,QAAI;AACA,cAAQG,OAAO,CAAf;AACI;AAAe;AACX,oBAAQA,OAAO,CAAf;AACI,mBAAK3I,wDAAL;AAAwB;AACpB4C,kBAAAA,+DAAAA,GAAAA,eAAAA,GAAAA,iBAAAA,CAA6D5C,wDAA7D4C,EAAAA,QAAAA,EAAAA,IAAAA;AACAoG,kBAAAA,qFAAAA,GAAAA,IAAAA,CAAuCD,QAAQ,CAA/CC,QAAAA,EAA6DD,QAAQ,CAArEC,QAA6DD,GAA7DC,uBAAAA,EAAAA,SAAAA;AACA;AACH;AALL;;AAOA;AACH;AAVL;AADJ,MAaE,YAAY;AACVR,MAAAA,QAAQ,CAARA,GAAQ,CAARA;AACH;;;SAIL3D,gBAAAA,SAAAA,aAAAA,CAAAA,OAAAA,EAAqC;AACjC2D,IAAAA,QAAQ,wBAARA,OAAQ,CAARA;;;SAGJ1D,iBAAAA,SAAAA,cAAAA,GAAyB;AACrB,WAAOlC,+DAAAA,GAAP,iBAAOA,EAAP;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDR;AACA;AACA;AACA;AAEA,IAAMqG,UAAU,GAAGvG,4CAAK,CAAxB,cAAwB,CAAxB;AAEA,IAAawG,WAAb;AAAA,4BAII,uBAAyC;AACrC,QAAI,CAAEA,WAAW,CAAjB,WAA8B;AAC1BA,MAAAA,WAAW,CAAXA,SAAAA,GAAwB,IAAxBA,WAAwB,EAAxBA;AACH;;AACD,WAAOA,WAAW,CAAlB;AARR;;AAiBI,yBAAsB;AAAA,SANdC,IAMc,GANK,IAML;AAAA,SALdC,SAKc,GALkB,IAKlB;AAAA,SAJdC,aAIc,GAJsB,IAItB;AAAA,SAHdC,OAGc,GAHqB,IAGrB;AAClB,oBAAgB,mBAAhB,IAAgB,CAAhB;AACA;AACH;;AApBL;;AAAA,+BAsBI,+BAA8B;AAC1B,QAAI1G,+DAAAA,GAAJ,UAAIA,EAAJ,EAA2C;AACvC;AACA,kBAAY,SAASA,+DAAAA,GAAT,mBAASA,EAAT,EAAyD;AAAC2G,QAAAA,IAAI,EAAL;AAAkBC,QAAAA,IAAI,EAAtB;AAA6B9G,QAAAA,KAAK,EAAlC;AAAuC+G,QAAAA,MAAM,EAAC;AAA9C,OAAzD,CAAZ,CAFuC,CAGvC;;AACA,2BAAqB,cAAY;AAC7BR,QAAAA,UAAU,CAAC,oBAAXA,EAAU,CAAVA;AADJ;AAGH;AA9BT;;AAAA,sBAiCI,sBAAoB;AAChB,SADgB,mBAChB,GADgB,CAEhB;;AACA,qBAAiBS,QAAQ,CAARA,cAAAA,CAAwBC,iGAAxBD,CAAjB,CAHgB,CAIhB;AArCR;;AAAA,2BAwCI,2BAAyB;AAAA;;AACrB,QAAI;AACA,UAAI9G,+DAAAA,GAAJ,UAAIA,EAAJ,EAA2C;AACvC,YAAIgH,SAAS,CAATA,YAAAA,CAAJ,cAAyC;AACrCX,UAAAA,UAAU,CAAVA,4BAAU,CAAVA;AACAW,UAAAA,SAAS,CAATA,YAAAA,CAAAA,YAAAA,CAAoC;AAChCC,YAAAA,KAAK,EAD2B;AAEhCC,YAAAA,KAAK,EAAE;AAFyB,WAApCF,EAAAA,IAAAA,CAGQ,kBAAY;AAChBX,YAAAA,UAAU,CAAVA,kDAAU,CAAVA;AACA,iBAAI,CAAJ;;AACA,iBAAI,CAAJ,eAAoBrG,+DAAAA,GAApB,mBAAoBA,EAApB,EAAoE,KAAI,CAAxE;AANJgH,WAAAA;AASH;AACJ;AAdL,MAgBA,YAAY;AACRX,MAAAA,UAAU,CAAVA,GAAU,CAAVA;AACAA,MAAAA,UAAU,CAAVA,4CAAU,CAAVA;AACH;AA5DT;;AAAA,iBA+DI,iBAAe;AAAA;;AACXA,IAAAA,UAAU,CAAVA,OAAU,CAAVA;;AACA,QAAI,wBAAwB,8BAA5B,GAA6D;AACzDA,MAAAA,UAAU,CAAVA,yBAAU,CAAVA;AACA,mCAA6B,gBAAU;AACnCA,QAAAA,UAAU,CAAVA,gCAAU,CAAVA;;AACA,cAAI,CAAJ;AAFJ;AAIH;;AACD,QAAI,KAAJ,WAAoBc,2EAAAA,CAA8B,KAA9BA,SAAAA;AACpB;;AACA,QAAI,KAAJ,MAAe;AACXd,MAAAA,UAAU,CADC,uBACD,CAAVA,CADW,CAEX;;AACA,UAAI,KAAJ,eAAwB;AACpB,+CAAuC;AAAA,iBAAWe,KAAK,CAAhB,IAAWA,EAAX;AAAvC;AACH;;AACD,UAAI,KAAJ,SAAkB;AAClB;AACH;AAlFT;;AAAA,0BAqFI,yDAAqF;AAAA;;AAAA,QAAvBC,aAAuB;AAAvBA,MAAAA,aAAuB,GAAP,KAAhBA;AAAuB,MACjF;;;AACA,QAAI5E,KAAK,GAAG,+BAA+B;AAAA,aAAUwD,IAAI,KAAd;AAA3C,KAAY,CAAZ;AACA,QAAIxD,KAAK,IAAT,GAAgB;AAEhB;AAEA,QAAM6E,eAAe,GAAGR,QAAQ,CAARA,aAAAA,CAAxB,KAAwBA,CAAxB;AACAQ,IAAAA,eAAe,CAAfA,YAAAA,CAAAA,IAAAA,EAAAA,QAAAA;AACAH,IAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,6BAAAA;AACA,QAAMI,SAAS,GAAGT,QAAQ,CAARA,aAAAA,CAAlB,KAAkBA,CAAlB;AACAK,IAAAA,0EAAAA,CAAAA,SAAAA,EAAAA,MAAAA;AACA,QAAMK,cAAc,GAAGV,QAAQ,CAARA,aAAAA,CAAvB,KAAuBA,CAAvB;AACAK,IAAAA,0EAAAA,CAAAA,cAAAA,EAAAA,aAAAA;AACAK,IAAAA,cAAc,CAAdA,SAAAA,GAAAA,8BAAAA,QAAAA,GAAAA,OAAAA;AACA,QAAMC,aAAa,GAAGX,QAAQ,CAARA,aAAAA,CAAtB,KAAsBA,CAAtB;AACAK,IAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,2BAAAA;AACA,QAAMD,KAAK,GAAGJ,QAAQ,CAARA,aAAAA,CAAd,OAAcA,CAAd;AACAK,IAAAA,0EAAAA,CAAAA,KAAAA,EAAAA,QAAAA;AAEAI,IAAAA,SAAS,CAATA,WAAAA,CAAAA,cAAAA;AACAA,IAAAA,SAAS,CAATA,WAAAA,CAAAA,aAAAA;AACAE,IAAAA,aAAa,CAAbA,WAAAA,CAAAA,KAAAA;;AAEA,uBAAmB;AACf,UAAMC,eAAe,GAAGZ,QAAQ,CAARA,aAAAA,CAAxB,KAAwBA,CAAxB;AACAK,MAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,aAAAA;AACA,UAAMQ,aAAa,GAAGb,QAAQ,CAARA,aAAAA,CAAtB,KAAsBA,CAAtB;AACAK,MAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,2CAAAA;AACA,UAAMS,eAAe,GAAGd,QAAQ,CAARA,aAAAA,CAAxB,QAAwBA,CAAxB;AACAc,MAAAA,eAAe,CAAfA,YAAAA,CAAAA,MAAAA,EAAAA,QAAAA;AACAT,MAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,4BAAAA;AACAS,MAAAA,eAAe,CAAfA,SAAAA,GAAAA,oCAAAA;AACA,UAAMC,aAAa,GAAGf,QAAQ,CAARA,aAAAA,CAAtB,QAAsBA,CAAtB;AACAe,MAAAA,aAAa,CAAbA,YAAAA,CAAAA,MAAAA,EAAAA,QAAAA;AACAV,MAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,4BAAAA;AACAU,MAAAA,aAAa,CAAbA,SAAAA,GAAAA,kCAAAA;AAEAF,MAAAA,aAAa,CAAbA,WAAAA,CAAAA,eAAAA;AACAA,MAAAA,aAAa,CAAbA,WAAAA,CAAAA,aAAAA;AAEAD,MAAAA,eAAe,CAAfA,WAAAA,CAAAA,aAAAA;AAEAH,MAAAA,SAAS,CAATA,WAAAA,CAAAA,eAAAA;AAEAK,MAAAA,eAAe,CAAfA,gBAAAA,CAAAA,OAAAA,EAAyC,YAAM;AAC3C,YAAME,QAAQ,GAAGZ,KAAK,CAAtB;;AACA,sBAAc;AACVA,UAAAA,KAAK,CAALA,IAAAA;AACAC,UAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,UAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AAHJ,eAMK;AACDD,UAAAA,KAAK,CAALA,KAAAA;AACAC,UAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AACAA,UAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACH;AAZLS,OAAAA;AAeAC,MAAAA,aAAa,CAAbA,gBAAAA,CAAAA,OAAAA,EAAuC,YAAM;AACzC,YAAME,OAAO,GAAGb,KAAK,CAArB;;AACA,qBAAa;AACTA,UAAAA,KAAK,CAALA,KAAAA,GAAAA,KAAAA;AACAC,UAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,UAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AAHJ,eAMK;AACDD,UAAAA,KAAK,CAALA,KAAAA,GAAAA,IAAAA;AACAC,UAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AACAA,UAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACH;AAZLU,OAAAA;AAgBA;AACH;;AAEDP,IAAAA,eAAe,CAAfA,WAAAA,CAAAA,SAAAA;AACAJ,IAAAA,KAAK,CAALA,SAAAA,GAAAA,MAAAA;AACAA,IAAAA,KAAK,CAALA,gBAAAA,CAAAA,gBAAAA,EAAyC,YAAM;AAC3CA,MAAAA,KAAK,CAALA,IAAAA;AACA,UAAI,MAAI,CAAR,WAAoB,MAAI,CAAJ;AAFxBA,KAAAA;AAtKR;;AAAA,oBA4KI,0BAAgC;AAAA;;AAC5Bb,IAAAA,UAAU,yBAAVA,MAAU,CAAVA;AACA,QAAI9C,MAAM,KAAKvD,+DAAAA,GAAf,mBAAeA,EAAf,EAF4B,QAE2C;;AACvE,QAAIgI,gBAAuB,GAA3B;AAEA,QAAIvF,KAAK,GAAG,+BAA+B;AAAA,aAAUwD,IAAI,KAAd;AALf,KAKhB,CAAZ,CAL4B,CAK2C;;AACvE,QAAIxD,KAAK,IAAT,GAN4B,QAO5B;;AACA,QAAMwF,QAAQ,GAAGC,WAAW,CAAC,YAAM;AAC/B7B,MAAAA,UAAU,mBAAVA,MAAU,CAAVA;;AACA,UAAI,MAAI,CAAR,eAAwB;AACpB,YAAM8B,IAAI,GAAG,MAAI,CAAJ,kBAAuB,MAAI,CAAxC,aAAa,CAAb;;AACA,kBAAU;AACNA,UAAAA,IAAI,CAAJA,EAAAA,CAAAA,QAAAA,EAAkB,2BAA0B;AACxC9B,YAAAA,UAAU,oBAAVA,2BAAU,CAAVA;;AACA,kBAAI,CAAJ;AAFJ8B,WAAAA;AAIAC,UAAAA,aAAa,CAAbA,QAAa,CAAbA;AALJ,eAOK;AACD;AACAJ,UAAAA,gBAAgB;AAChB,cAAIA,gBAAgB,GAApB,GAA0BI,aAAa,CAAbA,QAAa,CAAbA;AAC7B;AACJ;AAhBuB,OAA5B,IAA4B,CAA5B;AApLR;;AAAA,sBAwMI,4BAAiC;AAC7B/B,IAAAA,UAAU,2BAAVA,MAAU,CAAVA;AACA,QAAI5D,KAAK,GAAG,+BAA+B;AAAA,aAAUwD,IAAI,KAAd;AAA3C,KAAY,CAAZ;;AACA,QAAIxD,KAAK,IAAT,GAAgB;AACZ;AACH;;AACD,QAAM4F,aAAa,GAAGvB,QAAQ,CAARA,cAAAA,CAAtB,MAAsBA,CAAtB;;AACA,uBAAmB;AACfT,MAAAA,UAAU,oCAAVA,2BAAU,CAAVA;AACA,UAAMiC,OAA6B,GAAGD,aAAa,CAAbA,aAAAA,CAAtC,QAAsCA,CAAtC;;AACA,mBAAa;AACTC,QAAAA,OAAO,CAAPA,SAAAA,GAAAA,IAAAA;AACH;;AAEDnB,MAAAA,2EAAAA,CAAAA,aAAAA;AACA,UAAMoB,UAAU,GAAGF,aAAa,CAAhC;AACA,sBAAgBE,UAAU,CAAVA,WAAAA,CAAAA,aAAAA;AACnB;AAzNT;;AAAA,mCA4NIC,SAAAA,uBAAAA,CAAAA,MAAAA,EAAwC;AAAA;;AACpC,QAAI;AACA,UAAIxI,+DAAAA,GAAJ,UAAIA,EAAJ,EAA2C;AACvCqG,QAAAA,UAAU,oCAAVA,MAAU,CAAVA;;AACA,YAAIW,SAAS,CAATA,YAAAA,CAAJ,cAAyC;AACrCA,UAAAA,SAAS,CAATA,YAAAA,CAAAA,YAAAA,CAAoC;AAChCC,YAAAA,KAAK,EAD2B;AAEhCC,YAAAA,KAAK,EAAE;AAFyB,WAApCF,EAAAA,IAAAA,CAGQ,kBAAY;AAChB,kBAAI,CAAJ;;AACA,kBAAI,CAAJ,eAAoBhH,+DAAAA,GAApB,mBAAoBA,EAApB,EAAoE,MAAI,CAAxE;;AACAqG,YAAAA,UAAU,yBAAVA,MAAU,CAAVA;;AACA,kBAAI,CAAJ,gBAAqB,gBAAe;AAChCA,cAAAA,UAAU,0BAAVA,MAAU,CAAVA;AACA8B,cAAAA,IAAI,CAAJA,MAAAA,CAAY,MAAI,CAAhBA,aAAAA;AACAA,cAAAA,IAAI,CAAJA,EAAAA,CAAAA,QAAAA,EAAkB,2BAA0B;AACxCM,gBAAAA,KAAK,CAALA,UAAK,CAALA;AACApC,gBAAAA,UAAU,CAAVA,+BAAU,CAAVA;;AACA,sBAAI,CAAJ;AAHJ8B,eAAAA;AAHJ;AAPJnB,WAAAA;AAiBH;AACJ;AAtBL,MAwBA,YAAY;AACRX,MAAAA,UAAU,CAAVA,GAAU,CAAVA;AACAA,MAAAA,UAAU,CAAVA,yCAAU,CAAVA;AACH;AAxPT;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMqC,SAAS,GAAG5I,4CAAK,CAAvB,wBAAuB,CAAvB;AAEA,IAAa4B,oBAAb;AAAA,qCAGI,uBAAkD;AAC9C,QAAI,CAAEA,oBAAoB,CAA1B,WAAuC;AACnCA,MAAAA,oBAAoB,CAApBA,SAAAA,GAAiC,IAAjCA,oBAAiC,EAAjCA;AACH;;AACD,WAAOA,oBAAoB,CAA3B;AAPR;;AAuBI,kCAAsB;AAAA,SAZdkH,eAYc,GAZgB,IAYhB;AAAA,SAXdC,gBAWc,GAXoB,IAWpB;AAAA,SAVdC,0BAUc,GAV2B,IAU3B;AAAA,SATdC,iBASc,GATyB,IASzB;AAAA,SARdC,eAQc,GARY,EAQZ;AAAA,SAPdC,aAOc,GAPW,KAOX;AAAA,SALdC,wBAKc,GALuB,EAKvB;AAAA,SAJdC,aAIc,GAJU,CAAC,CAIX;AAClB,wBAAoB,IAApB,wEAAoB,EAApB;AACA7H,IAAAA,0EAAAA,GAAAA,eAAAA,CAFkB,IAElBA,EAFkB,CAIlB;;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,yBAAqB,wBAArB,IAAqB,CAArB;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,0BAAsB,yBAAtB,IAAsB,CAAtB;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACA,yBAAqB,wBAArB,IAAqB,CAArB;AACA,sBAAkB,qBAAlB,IAAkB,CAAlB;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,sBAAkB,qBAAlB,IAAkB,CAAlB;AACA,0BAAsB,yBAAtB,IAAsB,CAAtB;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,sBAAkB,qBAAlB,IAAkB,CAAlB;AACA,yCAAqC,wCAArC,IAAqC,CAArC;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,iBAAa,gBAvBK,IAuBL,CAAb,CAvBkB,CA0BlB;;AACA;AAEH;;AApDL;;AAAA,wBAsDI,wBAA+B;AAC3B,QAAIS,MAAM,GAAV;;AACA,QAAI,KAAJ,mBAA4B;AACxBA,MAAAA,MAAM,GAAG,uBAATA,UAAAA;AACH;;AACD;AA3DR;;AAAA,2BA8DI,2BAAyB;AACrB,WAAO,KAAP;AA/DR;;AAAA,0BAkEI,0BAAuC;AACnC,WAAO,KAAP;AAnER;;AAAA,wBAsEIqH,SAAAA,YAAAA,CAAAA,QAAAA,EAAqC,CAtEzC;;AAAA,yBAyEIC,SAAAA,aAAAA,CAAAA,QAAAA,EAAsC,CAzE1C;;AAAA,0BA4EI,kCAA8C;AAC1CX,IAAAA,SAAS,2BAATA,QAAS,CAATA;AACA;AA9ER;;AAAA,0BAiFI,0BAAgC;AAC5B,WAAO,KAAP;AAlFR;;AAAA,sBAqFI,qCAAwC;AACpC;AACApC,IAAAA,kEAAAA,GAAAA,UAAAA;AAvFR;;AAAA,6BA0FIgD,SAAAA,iBAAAA,CAAAA,MAAAA,EAA4C;AACxC,QAAI,CAAC,KAAL,UAAK,EAAL,EADwC,QACP;;AACjC,QAAIC,MAAM,CAANA,IAAAA,KAAgBC,gEAApB,EAFwC,QAEW;;AAEnD,QAAIhI,wEAAAA,GAAAA,mBAAAA,CAA8C+H,MAAM,CAAxD,IAAI/H,CAAJ,EAAgE;AAC5DkH,MAAAA,SAAS,CAATA,8CAAS,CAATA;AACA;AANoC,MASxC;;;AACA,QAAI,KAAJ,mBAA4B;AACxBA,MAAAA,SAAS,CADe,sDACf,CAATA,CADwB,CAExB;;AACA,UAAI,gCAAgCa,MAAM,CAA1C,MAAiD;AAC7C;AACAb,QAAAA,SAAS,CAATA,sDAAS,CAATA;AACApH,QAAAA,0EAAAA,GAAAA,iBAAAA,CAA8CiI,MAAM,CAApDjI,IAAAA,EAA2D,KAA3DA,cAA2D,EAA3DA,EAAkFkI,gEAAlFlI,EAH6C,CAG4D;;AACzG;AACH;AACJ;;AAED,QAAIiI,MAAM,CAAV,uBAAkC;AAC9B;AACA,UAAI,CAACE,OAAO,oCAAkCF,MAAM,CAAxC,qDAAyFA,MAAM,CAA/F,UAAZ,cAAY,CAAZ,EAAoI;AAChIjI,QAAAA,0EAAAA,GAAAA,iBAAAA,CAA8CiI,MAAM,CAApDjI,IAAAA,EAA2D,KAA3DA,cAA2D,EAA3DA,EAAkFkI,gEAAlFlI,EADgI,CACvB;;AACzG;AACH;AA1BmC,MA8BxC;;;AACAgF,IAAAA,kEAAAA,GAAAA,uBAAAA,CAAkDiD,MAAM,CA/BhB,IA+BxCjD,EA/BwC,CAkCxC;;AACAF,IAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,aAAAA,EAAAA,qBAAAA,EAAAA,MAAAA,EAAAA,IAAAA;AACA9E,IAAAA,0EAAAA,GAAAA,QAAAA,CAAqC,KAArCA,cAAqC,EAArCA,EAA4DiI,MAAM,CAAlEjI,IAAAA,EAAyEkI,gEAAzElI;AACA,4BAAwBiI,MAAM,CAA9B;AACA,sCAAkCA,MAAM,CAANA,UAAAA,CAAlC;AACA,6BAAyBA,MAAM,CAANA,UAAAA,CAAzB;AAEAvJ,IAAAA,+DAAAA,GAAAA,qBAAAA,CAA+CuJ,MAAM,CAANA,UAAAA,CAzCP,SAyCxCvJ,EAzCwC,CA2CxC;;AACA,QAAI,KAAJ,YAAI,EAAJ,EAAyB;AACrB;AACA;AA9CoC,MAgDxC;;;AACA+G,IAAAA,wFAAAA,GAAAA,YAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAwD,KAjDhB,iBAiDxCA,EAjDwC,CAqDxC;;AACA;AAhJR;;AAAA,gCAmJI,gCAA0C;AACtC,WAAO,KAAP;AApJR;;AAAA,iCAuJI2C,SAAAA,qBAAAA,CAAAA,QAAAA,EAA2C;AAAA;;AACvC,QAAI,CAAC,KAAL,UAAK,EAAL,EADuC,QACN;;AAEjC,QAAI,CAAC,KAAL,kBAHuC,QAGH;;AAEpCC,IAAAA,QAAQ,CAARA,OAAAA,CAAiB,mBAAsB;AACnC,UAAI5D,OAAO,CAAPA,IAAAA,KAAiByD,gEAArB,EAA4C;AAAG;AAC3C,YAAI,KAAI,CAAJ,qBAA0BzD,OAAO,CAArC,MAA4C;AACxC,eAAI,CAAJ;AACH;AACJ;AALL4D,KAAAA;AA5JR;;AAAA,gCAqKIC,SAAAA,oBAAAA,CAAAA,OAAAA,EAAyC;AAAA;;AACrC,QAAI,CAAC,KAAL,UAAK,EAAL,EADqC,QACJ;;AAEjCC,IAAAA,OAAO,CAAPA,OAAAA,CAAgB,kBAAwB;AACpC,UAAIN,MAAM,CAANA,IAAAA,KAAgBC,gEAApB,EAA2C;AAAG;AAC1C,cAAI,CAAJ;AACH;AAHLK,KAAAA;AAxKR;;AAAA,0BA+KIC,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,IAAAA,EAAmE;AAC/D,QAAIC,IAAI,KAAKP,gEAAb,EAD+D,QACnB;;AAC5Cd,IAAAA,SAAS,iDAATA,QAAS,CAATA;;AACA,QAAI,KAAJ,kBAA2B;AACvB,UAAI,0BAAJ,MAAoC;AAChCtC,QAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,aAAAA,EAAAA,UAAAA,QAAAA,GAAAA,2BAAAA,EAAAA,SAAAA;AACH;AACJ;AAtLT;;AAAA,6BAyLI4D,SAAAA,iBAAAA,CAAAA,KAAAA,EAAyC;AACrC,QAAI3M,KAAK,CAALA,IAAAA,KAAemM,gEAAnB,EADqC,QACa;;AAClD,QAAI,CAAC,KAAL,UAAK,EAAL,EAFqC,QAEJ;;AACjC,QAAInM,KAAK,CAALA,QAAAA,KAAmB,KAAvB,cAAuB,EAAvB,EAA8C;AAE9C,QAAI,0BAA0BA,KAAK,CAAnC,MAA0C;AAE1CqL,IAAAA,SAAS,2BAAyBrL,KAAK,CAPF,QAO5B,CAATqL,CAPqC,CAQrC;;AACA,QAAIjG,KAAK,GAAG,wCAAwC;AAAA,aAAcyD,QAAQ,KAAK7I,KAAK,CAAhC;AAApD,KAAY,CAAZ;;AACA,QAAIoF,KAAK,GAAT,GAAe;AACX,yCAAmCpF,KAAK,CAD7B,QACX,EADW,CAEX;AAEA;;AACA,UAAI,KAAJ,mBAA4B,2BAA2B,KAA3B;AAC/B;;AACD,QAAI,sBAAsB,KAA1B,mBAAkD;AAC9CqL,MAAAA,SAAS,2BAAyBrL,KAAK,CAA9B,WAATqL,YAAS,CAATA;AACA,+BAAyBrL,KAAK,CAA9B;AACA,+BAAyB,KAAzB;AACH;;AACD+I,IAAAA,qFAAAA,GAAAA,IAAAA,CAAuC,gCAAvCA,IAAAA,EAAAA,UAAqF/I,KAAK,CAA1F+I,QAAAA,GAAAA,yBAAAA,EAAAA,SAAAA,EAAAA,MAAAA;AA/MR;;AAAA,4BAkNI6D,SAAAA,gBAAAA,CAAAA,KAAAA,EAAwC;AACpC,QAAI5M,KAAK,CAALA,IAAAA,KAAemM,gEAAnB,EADoC,QACc;;AAClD,QAAI,CAAC,KAAL,UAAK,EAAL,EAFoC,QAEH;;AACjC,QAAInM,KAAK,CAALA,QAAAA,KAAmB,KAAvB,cAAuB,EAAvB,EAA8C;AAE9C,QAAI,0BAA0BA,KAAK,CAAnC,MALoC,QAMpC;;AACAqL,IAAAA,SAAS,yBAAuBrL,KAAK,CAArCqL,QAAS,CAATA;AAEA,QAAIjG,KAAK,GAAG,wCAAwC;AAAA,aAAcyD,QAAQ,KAAK7I,KAAK,CAAhC;AAApD,KAAY,CAAZ;;AACA,QAAIoF,KAAK,IAAT,GAAgB;AACZ,kDADY,CACZ,EADY,CAEZ;;AACA,oCAA8BpF,KAAK,CAHvB,QAGZ,EAHY,CAIZ;;AACA,UAAI,KAAJ,mBAA4B,2BAA2B,KAA3B;AAC/B;;AACD,QAAI,sBAAsB,KAA1B,mBAAkD;AAC9CqL,MAAAA,SAAS,yBAAuBrL,KAAK,CAA5B,WAATqL,YAAS,CAATA;AACA,+BAAyB,KAAzB;AACH;;AACDtC,IAAAA,qFAAAA,GAAAA,IAAAA,CAAuC,gCAAvCA,IAAAA,EAAAA,UAAqF/I,KAAK,CAA1F+I,QAAAA,GAAAA,uBAAAA,EAAAA,SAAAA,EAAAA,MAAAA;AAvOR;;AAAA,2BA0OI8D,SAAAA,eAAAA,CAAAA,KAAAA,EAAuC,CA1O3C,EA2OM;AA3ON;;AAAA,yBA6OI,yBAA6B;AAAE;AAC3B;AACAxB,IAAAA,SAAS,CAATA,6BAAS,CAATA;AACA,QAAI,sBAAsB,KAA1B,mBAAkD,+BAA+B,KAA/B;;AAClD,QAAI,KAAJ,UAAI,EAAJ,EAAuB;AACnB,UAAI,yBAAyB,KAA7B,mBAAqD;AACjDA,QAAAA,SAAS,CAATA,uCAAS,CAATA;AACA,iCAAyB,KAAzB,mBAFiD,IAEjD,EAFiD,CAGjD;AAJe,QAMnB;;;AACA;AAXqB,MAazB;;;AACA;AACA;AA5PR;;AAAA,2BA+PI,oCAA6C;AACzC,mBAAe;AACXA,MAAAA,SAAS,+BAA6B/F,SAAS,CAA/C+F,IAAS,CAATA;AACA;AACA,UAAI,KAAJ,UAAI,EAAJ,EAAuB,gCAAgC,CAAC,KAAjC,cAAiC,EAAD,CAAhC;AACvB;AACA,8BAAwByB,8DAAAA,EAAxB;AACA,+BAAyB;AACrBC,QAAAA,IAAI,EAAE,KADe;AAErBC,QAAAA,aAAa,EAAE1H,SAAS,CAFH;AAGrB2H,QAAAA,kBAAkB,EAAEC,kFAAAA,GAAAA,qBAAAA,CAHC,SAGDA,CAHC;AAIrBC,QAAAA,KAAK,EAJgB;AAKrBC,QAAAA,UAAU,EALW;AAMrB5J,QAAAA,IAAI,EAAE0J,kFAAAA,GAAAA,yBAAAA,CANe,SAMfA,CANe;AAOrBG,QAAAA,UAAU,EAAE;AAPS,OAAzB;AASAhC,MAAAA,SAAS,CAAC,KAAVA,iBAAS,CAATA;AAEApC,MAAAA,kEAAAA,GAjBW,eAiBXA,GAjBW,CAmBX;;AACA,uCAAiClJ,6DAAjC,EAAyD,KAAzD,mBApBW,IAoBX,EApBW,CAsBX;;AACA,UAAI,KAAJ,UAAI,EAAJ,EAAuBkE,0EAAAA,GAAAA,QAAAA,CAAqC,KAArCA,cAAqC,EAArCA,EAA4D,KAA5DA,gBAAAA,EAAmFkI,gEAAnFlI;AAE1B;AAzRT;;AAAA,+BA4RI,+BAAsC;AAClC,QAAIS,MAAM,GAAV;;AACA,QAAI,yBAA0B,0BAA9B,MAA+D;AAC3D2G,MAAAA,SAAS,CAAC,KAAVA,gBAAS,CAATA;AACA3G,MAAAA,MAAM,GAANA,IAAAA;AACH;;AACD;AAlSR;;AAAA,sBAqSI,8BAAoC;AAChC,QAAI,CAAC,KAAL,UAAK,EAAL,EADgC,QACC;AACjC;;AACA,QAAK,KAAD,gBAAC,IAA2B,KAAhC,4BAAkE;AAC9D2G,MAAAA,SAAS,+BAATA,iBAAS,CAATA;;AACA,UAAI,KAAJ,eAAwB;AACpBtC,QAAAA,qFAAAA,GAAAA,IAAAA,CAAuC,gCAAvCA,IAAAA,EAAAA,2BAAAA,QAAAA,GAAAA,oBAAAA,EAAAA,SAAAA;AACA9E,QAAAA,0EAAAA,GAAAA,UAAAA,CAAuC,KAAvCA,cAAuC,EAAvCA,EAAAA,QAAAA,EAAwE,KAAxEA,gBAAAA,EAA+FkI,gEAA/FlI,EAAAA,IAAAA,EAA4H,gCAA5HA,IAAAA,EAAkK;AAC9J3D,UAAAA,UAAU,EAAE,KADkJ;AAE9JgF,UAAAA,SAAS,EAAE,KAAKmG;AAF8I,SAAlKxH;AAFJ,aAMO;AACHmH,QAAAA,KAAK,CAALA,sDAAK,CAALA;AACH;AACJ;AAnTT;;AAAA,0BAsTI,iCAA8C;AAC1CC,IAAAA,SAAS,CAATA,2BAAS,CAATA;AACAA,IAAAA,SAAS,CAATA,OAAS,CAATA;AACA,QAAI,CAAC,KAAL,UAAK,EAAL,EAH0C,QAGT;;AACjC,QAAI3C,OAAO,CAAPA,IAAAA,KAAiByD,gEAArB,EAJ0C,QAIU;;AACpD,QAAIzD,OAAO,CAAPA,IAAAA,KAAiB,KAArB,cAAqB,EAArB,EAL0C,QAKU;;AAEpD,QAAI,KAAJ,kBAA2B;AAAE;AACzB,UAAI,0BAA0BA,OAAO,CAArC,MAA4C;AAAE;AAC1C,YAAIvE,wEAAAA,GAAAA,mBAAAA,CAA8CuE,OAAO,CAAzD,IAAIvE,CAAJ,EAAiE;AAC7DkH,UAAAA,SAAS,CAATA,+CAAS,CAATA;AACA;AAHoC,UAKxC;;;AACAA,QAAAA,SAAS,uCAAqC3C,OAAO,CAArD2C,IAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,OAAS,CAATA;;AACA,YAAI3C,OAAO,CAAX,YAAwB;AACpB;AACA,cAAIpI,UAAsB,GAAGoI,OAAO,CAApC;AACA2C,UAAAA,SAAS,CAHW,UAGX,CAATA,CAHoB,CAKpB;;AACA,cAAI,KAAJ,mBAA4B;AACxB,gBAAIiC,aAAa,GAAG,uBAApB;AACA,0CAA8B5E,OAAO,CAArC;AACA,mDAAuCpI,UAAU,CAAjD;AACA,0CAA8BA,UAAU,CAAxC;AACA,2CAAgCA,UAAU,CAAVA,KAAAA,GAAmB,uBAApB,KAACA,GAAmDA,UAAU,CAA9D,KAACA,GAAsE,uBAAtG;AACA,gDAAoCA,UAAU,CAA9C;AACA,wDAA4CA,UAAU,CAAtD;AACA,gDAAoCA,UAAU,CARtB,UAQxB,CARwB,CAUxB;;AACA,gBAAIA,UAAU,CAAd,YAA2B;AACvB,iCAAmB,CACf;AADJ,qBAEO;AACH;AACA;AACA;AACH;AAPL,mBAQO;AAAE;AACL,iCAAmB;AACf;AACA;AAFJ,qBAGO,CACH;AACH;AACJ;AAGJ;;AACD+K,UAAAA,SAAS,CAATA,qBAAS,CAATA;AACAA,UAAAA,SAAS,CAAC,KArCU,iBAqCX,CAATA,CArCoB,CAsCpB;;AACA,cAAI,KAAJ,mBAA4B,2BAA2B,KAA3B;;AAC5B,cAAI/K,UAAU,CAAd,YAA2B;AACvB8K,YAAAA,KAAK,CADkB,yCAClB,CAALA,CADuB,CAEvB;;AACA,iBAHuB,KAGvB,GAHuB,CAKvB;;AACA,iBANuB,KAMvB,GANuB,CAQvB;;AACA1B,YAAAA,wFAAAA,GAAAA,YAAAA;AAEA;AACH;AACJ;AACJ;AAEJ;AA9XT;;AAAA,wBAiYI,wBAA+B;AAC3B,WAAO,KAAP;AAlYR;;AAAA,qCAqYI,qCAAsD;AAClD,QAAIpJ,UAA6B,GAAjC;AACA,QAAIiN,SAAS,GAAG7D,wFAAAA,GAAhB,YAAgBA,EAAhB;;AACA,QAAI,0BAA0B,KAA9B,kBAAqD;AACjDpJ,MAAAA,UAAU,GAAG;AACTyM,QAAAA,IAAI,EAAE,KADG;AAETvJ,QAAAA,IAAI,EAFK;AAGTwJ,QAAAA,aAAa,EAAE,gCAHN;AAITG,QAAAA,KAAK,EAAE,uBAJE;AAKTF,QAAAA,kBAAkB,EAAG,KAAD,0BAAC,GAAmCC,kFAAAA,GAAAA,qBAAAA,CAAoD,KAAxF,0BAAoCA,CAAnC,GALZ;AAMTE,QAAAA,UAAU,EAAE,uBANH;AAOTC,QAAAA,UAAU,EAAE;AAPH,OAAb/M;AASH;;AACD;AAnZR;;AAAA,+BAsZI,qDAAsF;AAAA,QAAnC+M,UAAmC;AAAnCA,MAAAA,UAAmC,GAAb,KAAtBA;AAAmC;;AAClF,QAAI,yBAAyB,KAA7B,UAA6B,EAA7B,EAAgD;AAC5C,UAAMG,OAAO,GAAG5F,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CADmB,gBACnBA,CAAD,CAAxB,CAD4C,CAE5C;;AACAC,MAAAA,aAAa,CAAbA,WAAAA,CACI,KADJA,cACI,EADJA,EAEI,KAFJA,gBAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAKIvB,gEALJuB,EAMIC,0DANJD,EAAAA,UAAAA;AAQH;AAlaT;;AAAA,sBAqaI,sBAAoB;AAAA;;AAChBrC,IAAAA,SAAS,CAATA,sBAAS,CAATA;AACA,QAAI,CAAC,KAAL,mBAA6B;AAE7B,wCAJgB,IAIhB,CAJgB,CAKhB;;AACA,yBAAqBR,WAAW,CAAC,YAAM;AACnC,UAAI,MAAI,CAAJ,qBAA0B,MAAI,CAAJ,kBAA9B,YAAiE;AAC7D,cAAI,CAAJ;AACAnB,QAAAA,wFAAAA,GAAAA,WAAAA,CAA+C,MAAI,CAAJ,kBAA/CA,KAAAA,EAA6E,CAAC,MAAI,CAAJ,kBAA9EA,UAAAA;AAFJ,aAGO;AACH,YAAI,MAAI,CAAR,mBAA4B;AACxB,gBAAI,CAAJ;AACAA,UAAAA,wFAAAA,GAAAA,WAAAA,CAA+C,MAAI,CAAJ,kBAA/CA,KAAAA,EAA6E,CAAC,MAAI,CAAJ,kBAA9EA,UAAAA;AACH;AACJ;AAT2B,OAAhC,IAAgC,CAAhC;;AAWA,QAAI,KAAJ,mBAA4B;AACxB,iCAA2B,KAA3B;AACH;;AACD,QAAI,qBAAqB,KAAzB,mBAAiD;AAC7C;AACA2B,MAAAA,SAAS,CAATA,4CAAS,CAATA;AACA,+BAAyB,KAAzB;AACH;AA7bT;;AAAA,sBAgcI,sBAAoB;AAChBA,IAAAA,SAAS,CAATA,sBAAS,CAATA;;AACA,QAAI,qBAAJ,GAA4B;AACxBN,MAAAA,aAAa,CAAC,KAAdA,aAAa,CAAbA;AACA,2BAAqB,CAArB;;AAEA,UAAI,KAAJ,mBAA4B;AACxB;AACA,mCAA2B,KAA3B;AACArB,QAAAA,wFAAAA,GAAAA,WAAAA,CAA+C,uBAA/CA,KAAAA,EAA6E,CAAC,uBAA9EA,UAAAA;AAPoB,QAWxB;;;AACA,UAAI,qBAAqB,KAAzB,mBAAiD;AAC7C2B,QAAAA,SAAS,CAATA,2CAAS,CAATA;AACA,iCAAyB,KAAzB;AACH;AACJ;AAldT;;AAAA,4BAqdI,yCAAoD;AAChDA,IAAAA,SAAS,kCAATA,MAAS,CAATA;AACA,QAAItD,MAAM,KAAK1D,oBAAoB,CAAnC,aAFgD,QAIhD;;AACA,QAAI0D,MAAM,KAAV,QAAuB;AAEvB,QAAIzH,UAA6B,GAAG,KAApC,yBAAoC,EAApC;AACA+K,IAAAA,SAAS,CAATA,6BAAS,CAATA;AACAA,IAAAA,SAAS,CAATA,KAAS,CAATA;AACAA,IAAAA,SAAS,CAATA,UAAS,CAATA;;AACA,oBAAgB;AACZA,MAAAA,SAAS,CAATA,gDAAS,CAATA;AACA,UAAMuC,WAAoB,GAAGV,kFAAAA,GAAAA,4BAAAA,CAA2D,KAA3DA,0BAAAA,EAA7B,UAA6BA,CAA7B;;AACA,uBAAiB;AACb7B,QAAAA,SAAS,CAATA,UAAS,CAATA;AACH;;AAED;;AACA,UAAI,KAAJ,UAAI,EAAJ,EAAuB;AACnBA,QAAAA,SAAS,CAATA,2CAAS,CAATA;AACA;AACH;AACJ;AA5eT;;AAAA,iBA+eI,iBAAe;AACXA,IAAAA,SAAS,CAATA,uBAAS,CAATA;;AACA,QAAI,0BAA0B,KAA9B,kBAAqD;AACjD,UAAI,KAAJ,UAAI,EAAJ,EAAuB;AACnBpH,QAAAA,0EAAAA,GAAAA,SAAAA,CAAsC,KAAtCA,cAAsC,EAAtCA,EAA6D,KAA7DA,gBAAAA,EAAoFkI,gEAApFlI;AACH;;AACD;AACA;AACH;AAvfT;;AAAA,+BA0fI,uCAAsD;AAClD,QAAItB,+DAAAA,GAAJ,UAAIA,EAAJ,EAA2C;AACvC0I,MAAAA,SAAS,mBAATA,QAAS,CAATA;AACApC,MAAAA,kEAAAA,GAAAA,QAAAA,CAAAA,QAAAA;AACH;AA9fT;;AAAA,oCAigBI,4CAA2D;AACvDoC,IAAAA,SAAS,oBAATA,QAAS,CAATA;AACApC,IAAAA,kEAAAA,GAAAA,UAAAA,CAAAA,QAAAA;AAngBR;;AAAA,iBAsgBI,iBAAsB;AAClB;AACA;AACA;AACA;AACA;AACA;AACAA,IAAAA,kEAAAA,GAAAA,KAAAA;AA7gBR;;AAAA,sBAghBI,sBAA8B;AAC1B,WAAQ,sCAAR;AAjhBR;;AAAA,qCAohBI,+CAA0D;AACtDoC,IAAAA,SAAS,CAD6C,eAC7C,CAATA,CADsD,CAGtD;;AACA,QAAI,KAAJ,4BAAqC;AACjC,UAAMwC,QAAQ,GAAGX,kFAAAA,GAAAA,WAAAA,CAA0C,KAA1CA,0BAAAA,EAAjB,UAAiBA,CAAjB;AACA7B,MAAAA,SAAS,CAATA,QAAS,CAATA;;AACA,UAAI,CAAC,gCAAL,aAAkD;AAC9C;AACH;;AACD;AACA1I,MAAAA,+DAAAA,GAAAA,0BAAAA,CAAoD,KAApDA,0BAAAA,EAAAA,QAAAA;AACH;AAhiBT;;AAAA,iCAmiBI,4DAAuF;AAAA,QAAjCmL,eAAiC;AAAjCA,MAAAA,eAAiC,GAAN,IAA3BA;AAAiC;;AACnF;AACA,qCAAiC/N,6DAAjC,EAAyD,KAAzD;AAriBR;;AAAA,yCAwiBI,yCAAwC;AACpCsL,IAAAA,SAAS,CAATA,wCAAS,CAATA;;AACA,QAAI,qBAAJ,GAA4B;AACxBN,MAAAA,aAAa,CAAC,KAAdA,aAAa,CAAbA;AACA,UAAI,KAAJ,mBAA4BrB,wFAAAA,GAAAA,WAAAA,CAA+C,uBAA/CA,KAAAA,EAAAA,IAAAA;AAC/B;;AACD,yBAAqB,CAArB;AA9iBR;;AAAA;AAAA;AAAarF,qBASKiH,WATLjH,GAS2B,KAT3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBb;AACA;;IAEM0J;;;AASF,oCAAc;AAAA,WACV,iCAAMA,sBAAsB,CADlB,sBACV,KADU;AAEb;;;EAXgCC;;AAA/BD,uBACaE,sBADbF,GACmD;AACjDjI,EAAAA,EAAE,EAD+C;AAEjDoI,EAAAA,YAAY,EAFqC;AAGjDC,EAAAA,QAAQ,EAAEC,kFAAoBC;AAHmB,CADnDN;AAAAA,uBAOY1N,gBAPZ0N,GAO+B,kBAP/BA;AAcN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;;IAEMO;;;AAYF,8BAAc;AAAA,WACV,iCAAMA,gBAAgB,CADZ,YACV,KADU;AAEb;;;EAd0BN;;AAAzBM,iBACKC,YADLD,GACiC;AAC/BxI,EAAAA,EAAE,EAD6B;AAE/BoI,EAAAA,YAAY,EAFmB;AAG/BC,EAAAA,QAAQ,EAAEC,kFAAoBC;AAHC,CADjCC;AAAAA,iBAOKE,iBAPLF,GAOyB;AACvBG,EAAAA,QAAQ,EADe;AAEvBC,EAAAA,OAAO,EAAE;AAFc,CAPzBJ;AAiBN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;;IAEMK;;;AASF,gCAAc;AAAA,WACV,iCAAMA,kBAAkB,CADd,YACV,KADU;AAEb;;;EAX4BX;;AAA3BW,mBACaJ,YADbI,GACyC;AACvC7I,EAAAA,EAAE,EADqC;AAEvCoI,EAAAA,YAAY,EAF2B;AAGvCC,EAAAA,QAAQ,EAAEC,oFAAsBQ;AAHO,CADzCD;AAAAA,mBAOY5H,WAPZ4H,GAO0B,aAP1BA;AAcN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;;IAEME;;;AAaF,+BAAc;AAAA,WACV,iCAAMA,iBAAiB,CADb,YACV,KADU;AAEb;;;EAf2Bb;;AAA1Ba,kBACKN,YADLM,GACiC;AAC/B/I,EAAAA,EAAE,EAD6B;AAE/BoI,EAAAA,YAAY,EAFmB;AAG/BC,EAAAA,QAAQ,EAAEC,kFAAoBC;AAHC,CADjCQ;AAAAA,kBAOKL,iBAPLK,GAOyB;AACvBC,EAAAA,cAAc,EADS;AAEvBC,EAAAA,UAAU,EAFa;AAGvBC,EAAAA,OAAO,EAAE;AAHc,CAPzBH;AAkBN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AAEA;AACA;AAIA,IAAMI,OAAO,GAAGxM,4CAAK,CAArB,2BAAqB,CAArB;AACA,IAAMyM,aAAa,GAAGzM,4CAAK,CAA3B,kCAA2B,CAA3B;;IAEM0M;gDACF;AAEA;AAEA;;;AAsCA,2BAAc;AAAA;;AACV,qCAAMA,aAAa,CAAnB,sBAAyC,IAAzC,uEAAyC,EAAzC,EAAwEpP,mEAAxE,KADU,IACV,CADU,CAGV;;AACA,yBAAoB,+CAApB,KAAoB,EAApB;AACA,kCAA6B,wDAA7B,KAA6B,EAA7B;AALU;AAOb;;;;SAEM8Q,wBAAP,kEAA2F;AACvF;AACA5B,IAAAA,OAAO,+EAAPA,KAAO,CAAPA;;AACA,QAAIvJ,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClCwJ,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACAA,MAAAA,aAAa,CAAC1L,IAAI,CAAJA,IAAAA,CAAd0L,cAAa,CAAbA;AACA,UAAI,qBAAqB,KAAzB,WAAyC,iCAAiC,KAAjC,WAAiD1L,IAAI,CAAJA,IAAAA,CAAjD;AAC5C;;;SAGLsN,mBAAAA,SAAAA,gBAAAA,GAAmB;AACf;AACA;AACA,kBAAcrH,QAAQ,CAARA,cAAAA,CAAwB0F,aAAa,CAHpC,cAGD1F,CAAd,CAHe,CAIf;;AACA,oBAAgBA,QAAQ,CAARA,cAAAA,CAAwB0F,aAAa,CALtC,gBAKC1F,CAAhB,CALe,CAMf;;AACA,mBAAeA,QAAQ,CAARA,cAAAA,CAAwB0F,aAAa,CAApD,eAAe1F,CAAf;AAEA,2CAAuC,KAAvC;AAEA;;AAEA;;;SAGJsH,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA2C;AACvC,WAAO9I,IAAI,CAAX;;;SAGJ+I,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAqD;AACjD,WAAU/I,IAAI,CAAd,IAAUA,GAAV,IAAUA,GAAcA,IAAI,CAA5B,IAAUA,GAAV;;;SAGJgJ,+BAAAA,SAAAA,4BAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAA8D;AAC1D,QAAIvM,MAAM,GAAV;;AACA,QAAIwM,KAAK,CAALA,MAAAA,IAAgBC,KAAK,CAAzB,QAAkC;AAC9B,UAAMC,OAAO,GAAGxJ,QAAQ,CAACsJ,KAAK,CAA9B,MAAwB,CAAxB;AACA,UAAMG,OAAO,GAAGzJ,QAAQ,CAACuJ,KAAK,CAA9B,MAAwB,CAAxB;;AACA,UAAI,CAACG,KAAK,CAAN,OAAM,CAAN,IAAmB,CAACA,KAAK,CAA7B,OAA6B,CAA7B,EAAwC;AACpCJ,QAAAA,KAAK,CAALA,MAAAA,GAAAA,OAAAA;AACAC,QAAAA,KAAK,CAALA,MAAAA,GAAAA,OAAAA;AACAzM,QAAAA,MAAM,GAAIwM,KAAK,CAALA,MAAAA,KAAiBC,KAAK,CAAhCzM,MAAAA;AACH;AACJ;;AACD;;;SAIJ6M,iBAAAA,SAAAA,cAAAA,CAAAA,KAAAA,EAAkC;AAC9B,sDAD8B,KAC9B,EAD8B,CAE9B;;;AACA;;;SAIIC,qBAAR,oCAAoD;AAAA,QAAzBC,MAAyB;AAAzBA,MAAAA,MAAyB,GAAP,KAAlBA;AAAyB;;AAChD3H,IAAAA,2EAAAA,CAA8B,KAA9BA,QAAAA;;AACA,gBAAY;AACR,UAAI,KAAJ,UAAmB;AACnB,UAAI,KAAJ,UAAmB;AAFvB,WAGO;AACH,UAAI,KAAJ,UAAmB;AACnB,UAAI,KAAJ,UAAmB;AACtB;;;SAGG4H,eAAR,6BAAmC;AAC/BzC,IAAAA,OAAO,CAAPA,iBAAO,CAAPA;AACAtH,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAH0B,eAG/BA,GAH+B,CAI/B;;AACA,QAAIgK,SAAS,GAAG,mBAAhB,IAAgB,EAAhB;AACA,QAAIA,SAAS,CAATA,MAAAA,IAAJ,GAN+B,QAQ/B;;AACA,4BAT+B,KAS/B,EAT+B,CAW/B;;AACA,QAAIC,KAAK,GAAGrR,+DAAZ;AACAsR,IAAAA,4EAAAA,GAAAA,eAAAA,CAA8CtR,yDAA9CsR,EAAAA,KAAAA,EAAyE;AAACjR,MAAAA,WAAW,EAAE+Q;AAAd,KAAzEE,EAAmG,KAAnGA,qBAAAA,EAA+H9R,mEAA/H8R;;;SAGJC,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SACjCC,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCC,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;;SACpEC,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AAAC;;;SAE3DC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAAA;AAC7C;;;AACAhD,IAAAA,aAAa,2DAAyDiD,YAAY,CAAlFjD,MAAa,CAAbA;AACA,uGAAuCnP,mEAAvC,gBAAiF,KAAjF;;;SAGJqS,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDC,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;;SAClDC,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;;SAChDC,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;;EAtJ5BpD;;AAAtBD,cAQaE,oBARbF,GAQkD;AAChDG,EAAAA,kBAAkB,EAD8B;AAEhDC,EAAAA,kBAAkB,EAF8B;AAGhDC,EAAAA,wBAAwB,EAAC,CAAC;AAACC,IAAAA,IAAI,EAAL;AAAapK,IAAAA,KAAK,EAAC;AAAnB,GAAD,CAHuB;AAIhDqK,EAAAA,cAAc,EAJkC;AAKhDC,EAAAA,KAAK,EAL2C;AAMhDC,EAAAA,YAAY,EANoC;AAOhDC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EADC;AAEPC,IAAAA,QAAQ,EAFD;AAGPC,IAAAA,MAAM,EAHC;AAIPC,IAAAA,OAAO,EAAC;AAJD,GAPqC;AAahDC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,MAAM,EADH;AAEHC,IAAAA,QAAQ,EAFL;AAGHC,IAAAA,MAAM,EAHH;AAIHC,IAAAA,OAAO,EAAC;AAJL,GAbyC;AAmBhDE,EAAAA,MAAM,EAAE;AACJC,IAAAA,gBAAgB,EADZ;AAEJC,IAAAA,eAAe,EAFX;AAGJC,IAAAA,kBAAkB,EAHd;AAIJC,IAAAA,MAAM,EAJF;AAKJC,IAAAA,IAAI,EAAE;AACF9D,MAAAA,IAAI,EAAEvK,8DADJ;AAEFsO,MAAAA,IAAI,EAAE;AAFJ;AALF;AAnBwC,CARlDtB;AAAAA,cAuCKuB,cAvCLvB,GAuC6B,WAvC7BA;AAAAA,cAwCKwB,eAxCLxB,GAwC8B,WAxC9BA;AAAAA,cAyCKyB,gBAzCLzB,GAyC+B,iBAzC/BA;AAyJN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtKA;AAGA;AACA;AACA;AACA;AACA;AAIA,IAAMF,OAAO,GAAGxM,4CAAK,CAArB,qBAAqB,CAArB;;IAEMgQ;;;AAqCF,yCAAwC;AAAA;;AACpC,qCAAMA,eAAe,CAArB,yBAA+C1S,wDAA/C,KADoC,IACpC,CADoC,CAGpC;;AACA,uBAAkB,6CAAlB,KAAkB,EAAlB;AACA,2BAAsB,iDAAtB,KAAsB,EAAtB;AACA,uCAAkC,6DAAlC,KAAkC,EAAlC;AACA,wCAAmC,8DAAnC,KAAmC,EAAnC;AACA,yCAAoC,+DAApC,KAAoC,EAApC;AACA,wCAAmC,8DAAnC,KAAmC,EAAnC;AACA,sCAAiC,4DAAjC,KAAiC,EAAjC;AACA,uCAAkC,6DAAlC,KAAkC,EAAlC;AAEAqE,IAAAA,8FAAAA,GAAAA,eAAAA,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA;AAboC;AAcvC;;;;SAED0M,mBAAAA,SAAAA,gBAAAA,GAAmB;AACf;;AACA;;;SAGJmB,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AAAC;;;SAC3DH,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SAEjCI,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAC7C;AACAjD,IAAAA,OAAO,mBAAiBkD,YAAY,CAA7B,yBAAkDA,YAAY,CAA9D,KAAPlD,qBAAO,CAAPA;AACA9K,IAAAA,wEAAAA,GAAAA,yBAAAA,CAAoDgO,YAAY,CAAhEhO,QAAAA;;;SAGJkO,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;AAC9C,UAAM,UAAN,yBAAM,CAAN;;;SAGJD,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;AACjD,UAAM,UAAN,yBAAM,CAAN;;;SAGJJ,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;AAChE,UAAM,UAAN,yBAAM,CAAN;;;SAGJD,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B,UAAM,UAAN,yBAAM,CAAN;;;SAGJO,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B,UAAM,UAAN,yBAAM,CAAN;;;SAIJW,6BAAAA,SAAAA,0BAAAA,CAAAA,SAAAA,EAAsD;;SACtDC,8BAAAA,SAAAA,2BAAAA,CAAAA,QAAAA,EAAoD;;SACpDC,+BAAAA,SAAAA,4BAAAA,CAAAA,QAAAA,EAAqD;;SACrDC,8BAAAA,SAAAA,2BAAAA,CAAAA,SAAAA,EAAuD;;SAEvDC,4BAAAA,SAAAA,yBAAAA,CAAAA,SAAAA,EAAqD;AACjDpE,IAAAA,OAAO,sCAAPA,SAAO,CAAPA;AACA;;;SAGJ+B,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAqD;AACjD,WAAO/I,IAAI,CAAX;;;SAGJqL,mCAAAA,SAAAA,gCAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAkE;AAC9D,WAAOC,8EAAP;;;SAIJxC,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAmD;AAC/C,WAAO9I,IAAI,CAAX;;;SAGJuL,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC;AAAA,4BACpC;;;AACA,QAAIC,YAAkB,GAAtB;AACA,QAAMzT,KAAW,yBAAG,KAAH,iCAAG,kCAAkCD,wDAAlC,CAApB;;AACA,eAAW;AACPC,MAAAA,KAAK,CAALA,OAAAA,CAAc,gBAAc;AACxB,YAAImE,wEAAAA,GAAAA,mBAAAA,CAA8CyE,IAAI,CAAtD,QAAIzE,CAAJ,EAAkE;AAC9DsP,UAAAA,YAAY,CAAZA,IAAAA,CAAAA,IAAAA;AACH;AAHLzT,OAAAA;AAKH;;AAED;;;SAGJuS,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;AAC5C,QAAIpO,wEAAAA,GAAAA,mBAAAA,CAA8CuP,WAAW,CAA7D,QAAIvP,CAAJ,EAAyE;AACrE8K,MAAAA,OAAO,CAAIyE,WAAW,CAAf,QAAIA,GAAXzE,oCAAO,CAAPA;AACA;AAHwC,MAK5C;;;AACA9K,IAAAA,wEAAAA,GAAAA,oBAAAA,CAA+CuP,WAAW,CAA1DvP,QAAAA;;;SAGJqO,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;;EAvI1BpD;;AAAxBqD,gBACaC,SADbD,GACwC;AACtCnD,EAAAA,kBAAkB,EADoB;AAEtCC,EAAAA,kBAAkB,EAFoB;AAGtCC,EAAAA,wBAAwB,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAL;AAAepK,IAAAA,KAAK,EAAE;AAAtB,GAAD,CAHY;AAItCqK,EAAAA,cAAc,EAJwB;AAKtCC,EAAAA,KAAK,EALiC;AAMtCC,EAAAA,YAAY,EAN0B;AAOtCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EADC;AAEPC,IAAAA,QAAQ,EAFD;AAGPC,IAAAA,MAAM,EAHC;AAIPC,IAAAA,OAAO,EAAE;AAJF,GAP2B;AAatCC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,MAAM,EADH;AAEHC,IAAAA,QAAQ,EAFL;AAGHC,IAAAA,MAAM,EAHH;AAIHC,IAAAA,OAAO,EAAE;AAJN,GAb+B;AAmBtCE,EAAAA,MAAM,EAAE;AACJC,IAAAA,gBAAgB,EADZ;AAEJC,IAAAA,eAAe,EAFX;AAGJC,IAAAA,kBAAkB,EAHd;AAIJC,IAAAA,MAAM,EAJF;AAKJoC,IAAAA,MAAM,EAAE;AACJC,MAAAA,aAAa,EADT;AAEJC,MAAAA,WAAW,EAAE;AAFT,KALJ;AASJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,UAAU,EAAC,CAAC5Q,+DAAD,EAA2BA,+DAA3B,CADT;AAEF6Q,MAAAA,WAAW,EAAC,CAAC7Q,yDAAD;AAFV;AATF;AAnB8B,CADxCsQ;AA2IN;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxJA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAGA,IAAMkB,QAAQ,GAAGlR,4CAAK,CAAtB,cAAsB,CAAtB;AACA,IAAMmR,cAAc,GAAGnR,4CAAK,CAA5B,qBAA4B,CAA5B;;IAEMoR;AA8BF,2CAAwC;AACpC;AACA,2BAFoC,IAEpC,CAFoC,CAIpC;;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,0BAAsB,yBAAtB,IAAsB,CAAtB;AACA,qBAAiB,oBAAjB,IAAiB,CAAjB;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AAEAzP,IAAAA,8FAAAA,GAAAA,WAAAA,CAAAA,IAAAA;AACAiQ,IAAAA,YAAY,CAAZA,wBAAAA,CAAsCtU,wDAAtCsU,EAAAA,IAAAA;AACH;;;;SAEDC,iBAAAA,SAAAA,cAAAA,CAAAA,SAAAA,EAA6C;;SAC7CC,mBAAAA,SAAAA,gBAAAA,CAAAA,QAAAA,EAA+C;;SAE/CxD,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAmD;AAC/C,UAAM,UAAN,yBAAM,CAAN;;;SAEJC,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA6D;AACzD,UAAM,UAAN,yBAAM,CAAN;;;SAEJC,+BAAAA,SAAAA,4BAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAA8D;AAC1D,UAAM,UAAN,yBAAM,CAAN;;;SAEJuD,0BAAAA,SAAAA,uBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA2D;AACvD,UAAM,UAAN,yBAAM,CAAN;;;SAEJlB,mCAAAA,SAAAA,gCAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoE;AAChE,UAAM,UAAN,yBAAM,CAAN;;;SAEJmB,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA+C;AAC3C,UAAM,UAAN,yBAAM,CAAN;;;SAEJC,qBAAAA,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoD;AAChD,UAAM,UAAN,yBAAM,CAAN;;;SAEJlB,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA8C;AAC1C,UAAM,UAAN,yBAAM,CAAN;;;SAGJhB,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;AAChDoB,IAAAA,cAAc,sCAAdA,aAAc,CAAdA;;AACA,QAAI,wBAAyBzB,YAAY,KAAK,qBAA9C,UAA8E;AAC1E;AACA;AACA;AACH;;;SAILE,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAsD;AAClDuB,IAAAA,cAAc,uBAAqBzB,YAAY,CAAjC,WAAdyB,WAAc,CAAdA;AACA,2BAAuBzP,wEAAAA,GAAAA,UAAAA,CAAqCgO,YAAY,CAAxE,QAAuBhO,CAAvB;;AACA,QAAI,KAAJ,iBAA0B;AACtB;AACA,yBAAmB,KAAnB;AACH;;;SAGL8N,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AACtD;;;SAGJC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAC7C0B,IAAAA,cAAc,sCAAdA,WAAc,CAAdA;AACA,2BAAuBzP,wEAAAA,GAAAA,UAAAA,CAAvB,YAAuBA,CAAvB;;AACA,QAAI,wBAAyB,kCAA7B,cAA8E;AAC1E;AACA,yBAAmB,KAAnB;AACH;;;SAGL4N,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B,QAAI,KAAJ,iBAA0B;AACtB;AACA;AACA;AACH;;;SAGL4C,iBAAAA,SAAAA,cAAAA,CAAAA,KAAAA,EAA6B;AACzBhB,IAAAA,QAAQ,CAARA,iCAAQ,CAARA;;AACA,QAAI,KAAJ,iBAA0B;AACtB;AACA,UAAMiB,iBAAiB,GAAGjN,KAAK,CAALA,YAAAA,CAAAA,OAAAA,CAA1B,8EAA0BA,CAA1B;AACA,UAAMkN,aAAa,GAAGC,IAAI,CAAJA,KAAAA,CAAtB,iBAAsBA,CAAtB;AACAnB,MAAAA,QAAQ,CAARA,aAAQ,CAARA;;AAEA,UAAIkB,aAAa,CAAbA,4EAAa,CAAbA,KAAkC1S,yDAAtC,EAA0D;AACtD;AACAgC,QAAAA,wEAAAA,GAAAA,UAAAA,CAAqC0Q,aAAa,CAAlD1Q,QAAAA,EAA6D,qBAA7DA,QAAAA;AACA4E,QAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,MAAAA,EAAAA,aAA0D8L,aAAa,CAAvE9L,QAAAA,GAAAA,eAAAA;AACH;AACJ;;;SAILgM,uBAAAA,SAAAA,oBAAAA,CAAAA,GAAAA,EAAyC;AACrCpB,IAAAA,QAAQ,CAARA,2BAAQ,CAARA;AACA;AACA;;;SAGJqB,mBAAAA,SAAAA,gBAAAA,CAAAA,KAAAA,EAAqC;AACjCrN,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;AACAgM,IAAAA,QAAQ,CAARA,wBAAQ,CAARA;;AACA,QAAI,KAAJ,iBAA0B;AACtB;AACA,UAAI,kBAAkB,uCAAtB,GAFsB,QAGtB;;AACA,UAAMsB,cAAc,GAAG,qBAJD,IAIC,EAAvB,CAJsB,CAKtB;;AACA;AAEA,UAAIC,WAA2B,GAAG/Q,wEAAAA,GAAAA,WAAAA,CAAsC,qBAAtCA,QAAAA,EAAAA,cAAAA,EAAqFwJ,0DAArFxJ,EAAlC,EAAkCA,CAAlC;;AACA,uBAAiB;AACb;AACA,YAAIgR,SAAS,GAAG,oBAFH,WAEG,CAAhB,CAFa,CAGb;;AACArL,QAAAA,wEAAAA,CAAAA,SAAAA;AACH;AACJ;;;SAGLgH,mBAAAA,SAAAA,gBAAAA,GAAmB;AAAA,sBACf;;;AACA,sBAAkBrH,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CAF5C,SAEGpK,CAAlB,CAFe,CAGf;;AACA,qBAAiBA,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CAJ3C,SAIEpK,CAAjB,CAJe,CAKf;;AACA,oBAAgBA,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CAN1C,SAMCpK,CAAhB,CANe,CAOf;;AACA,6BAAyBA,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CARnD,eAQUpK,CAAzB,CARe,CASf;;AACA,2BAAuBA,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CAVjD,WAUQpK,CAAvB,CAVe,CAWf;;AACA,uBAAmBA,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CAZ7C,aAYIpK,CAAnB,CAZe,CAaf;;AACA,0BAAsBA,QAAQ,CAARA,cAAAA,CAAwBoK,iBAAiB,CAA/D,uBAAsBpK,CAAtB;AAEA,kDAA8C,iBAAW;AACrDmK,MAAAA,cAAc,CAAdA,cAAc,CAAdA;AACA,UAAI,KAAI,CAAR,iBAA0BjM,KAAK,CAALA,cAAAA;AAF9B;AAIA,8CAA0C,KAA1C;AAGA,6CAAyC,KAAzC;AACA,mDAA+C,KAA/C;AAEA,SA1Be,eA0Bf,GA1Be,CA4Bf;AACA;;AACA,QAAMyN,YAAY,GAAGC,CAAC,OAAKxB,iBAAiB,CAA5C,uBAAsB,CAAtB;AACAuB,IAAAA,YAAY,CAAZA,EAAAA,CAAAA,oBAAAA,EAAsC,KAAtCA,iBAAAA;;;SAGJE,oBAAAA,SAAAA,iBAAAA,CAAAA,KAAAA,EAAAA,EAAAA,EAAyC;AACrC3N,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;AACAgM,IAAAA,QAAQ,WAAS4B,EAAE,CAAFA,IAAAA,CAAT,sBAAkCA,EAAE,CAAFA,IAAAA,CAAlC,QAH6B,WAG7B,CAAR5B,CAHqC,CAIrC;;AACAhM,IAAAA,KAAK,CAALA,MAAAA,CAAAA,SAAAA,GALqC,EAKrCA,CALqC,CAOrC;;AACA,QAAI,KAAJ,iBAA0BxD,wEAAAA,GAAAA,UAAAA,CAAqCoR,EAAE,CAAFA,IAAAA,CAArCpR,KAAAA,EAAoD,qBAApDA,QAAAA;AAC1B4E,IAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,MAAAA,EAAAA,aAA0DwM,EAAE,CAAFA,IAAAA,CAA1DxM,KAAAA,GAAAA,eAAAA;;;SAGJyM,iBAAAA,SAAAA,cAAAA,CAAAA,OAAAA,EAA8C;AAC1C,QAAIC,aAAa,GAAGhM,QAAQ,CAARA,aAAAA,CAApB,KAAoBA,CAApB;AACAK,IAAAA,0EAAAA,CAAAA,aAAAA,EAF0C,SAE1CA,EAF0C,CAG1C;;AACA,QAAIpB,OAAO,CAAPA,IAAAA,CAAAA,IAAAA,GAAAA,MAAAA,KAAJ,GAAsC;AAClC,UAAIgN,eAAe,GAAGjM,QAAQ,CAARA,aAAAA,CAAtB,KAAsBA,CAAtB;AACAK,MAAAA,0EAAAA,CAAAA,eAAAA,EAAAA,gBAAAA;AACA4L,MAAAA,eAAe,CAAfA,SAAAA,GAA4BhN,OAAO,CAAnCgN,OAAAA;AACAD,MAAAA,aAAa,CAAbA,WAAAA,CAAAA,eAAAA;AAJJ,WAKO;AAEH,UAAI/M,OAAO,CAAPA,IAAAA,KAAiBvE,wEAAAA,GAArB,cAAqBA,EAArB,EAAiE;AAC7D2F,QAAAA,0EAAAA,CAAAA,aAAAA,EAAAA,YAAAA;AADJ,aAEO;AACH,YAAI4L,gBAAe,GAAGjM,QAAQ,CAARA,aAAAA,CAAtB,KAAsBA,CAAtB;;AACAK,QAAAA,0EAAAA,CAAAA,gBAAAA,EAAAA,gBAAAA;AACA4L,QAAAA,gBAAe,CAAfA,SAAAA,GAA4BhN,OAAO,CAAPA,IAAAA,GAAAA,KAAAA,GAAuB+E,6CAAM,CAAC/E,OAAO,CAAR,SAAN+E,gBAAM,CAANA,CAAAA,MAAAA,CAAnDiI,aAAmDjI,CAAnDiI;AACAD,QAAAA,aAAa,CAAbA,WAAAA,CAAAA,gBAAAA;AACH;;AAED,UAAIE,SAAS,GAAGlM,QAAQ,CAARA,aAAAA,CAAhB,KAAgBA,CAAhB;;AACA,UAAIf,OAAO,CAAPA,IAAAA,KAAiBvE,wEAAAA,GAArB,cAAqBA,EAArB,EAAiE;AAC7D2F,QAAAA,0EAAAA,CAAAA,SAAAA,EAAAA,oBAAAA;AADJ,aAEO;AACHA,QAAAA,0EAAAA,CAAAA,SAAAA,EAAAA,iBAAAA;AACH;;AACD6L,MAAAA,SAAS,CAATA,SAAAA,GAAsBjN,OAAO,CAA7BiN,OAAAA;AACAF,MAAAA,aAAa,CAAbA,WAAAA,CAAAA,SAAAA;AACH;;AAED;AACA;;;SAGJG,uBAAAA,SAAAA,oBAAAA,CAAAA,OAAAA,EAAuC;AAAA;;AACnC9L,IAAAA,2EAAAA,CAA8B,KAA9BA,UAAAA;AACA,QAAIqL,SAA6B,GAAjC;AACAzG,IAAAA,OAAO,CAAPA,QAAAA,CAAAA,OAAAA,CAAyB,mBAAsB;AAC3CyG,MAAAA,SAAS,GAAG,MAAI,CAAJ,eAAZA,OAAY,CAAZA;AAJ+B,KAGnCzG,EAHmC,CAMnC;;AACA,mBAAe5E,kEAAAA,CAAAA,SAAAA;;;SAGnB+L,gBAAAA,SAAAA,aAAAA,CAAAA,OAAAA,EAAgC;AAC5BjC,IAAAA,cAAc,eAAalF,OAAO,CAApB,WAAdkF,YAAc,CAAdA;;AACA,QAAI,KAAJ,iBAA0B;AACtB,UAAI,kCAAkClF,OAAO,CAA7C,UAAwD;AACpD;AACAvK,QAAAA,wEAAAA,GAAAA,YAAAA,CAAuCuK,OAAO,CAFM,QAEpDvK,EAFoD,CAGpD;;AACA;AACH;AACJ;;;SAIL2R,wBAAAA,SAAAA,qBAAAA,GAA8B;AAC1B,QAAI,KAAJ,iBAA0B;AACtB3R,MAAAA,wEAAAA,GAAAA,YAAAA,CAAuC,qBADjB,QACtBA,EADsB,CAEtB;;AACA,gCAA0B,KAA1B;AACH;;AACD;;;SAGJ4R,oBAAAA,SAAAA,iBAAAA,CAAAA,GAAAA,EAAsC;AAClC;AACA;;;SAGIC,YAAR,0BAAgC;AAC5BrO,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;;AACA,QAAI,KAAJ,iBAA0B;AACtBxD,MAAAA,wEAAAA,GAAAA,SAAAA,CAAoC,qBAApCA,QAAAA;AACA;AACA;AACA;AACH;;;SAGG8R,kBAAR,2BAA0B;AACtB,QAAI,KAAJ,iBAA0B;AACtB,UAAI,KAAJ,WAAoB;AACpB,UAAI,KAAJ,WAAoB;AACpB,UAAI,KAAJ,mBAA4B;AAC5B,UAAI,KAAJ,iBAA0B;AAC1B,UAAI,KAAJ,gBAAyB;AAL7B,WAMO;AACH,UAAI,KAAJ,WAAoB;AACpB,UAAI,KAAJ,WAAoB;AACpB,UAAI,KAAJ,mBAA4B;AAC5B,UAAI,KAAJ,iBAA0B;AAC1B,UAAI,KAAJ,gBAAyB;AAC5B;;;SAIGC,eAAR,wBAAuB;AACnBpM,IAAAA,2EAAAA,CAA8B,KAA9BA,UAAAA;;;SAGJ7E,eAAAA,SAAAA,YAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,QAAAA,EAAqE;AACjE,QAAIwK,IAAI,KAAK1P,wDAAb,EAAgC;AAC5B;AACA,UAAMqV,YAAY,GAAGC,CAAC,OAAKxB,iBAAiB,CAFhB,qBAEN,CAAtB,CAF4B,CAG5B;;AACA,UAAIsC,UAAU,GAAGxT,+DAAAA,GAJW,mBAIXA,EAAjB,CAJ4B,CAK5B;;AACA,UAAMyT,gBAAqB,GAA3B;AACAC,MAAAA,QAAQ,CAARA,OAAAA,CAAiB,gBAAe;AAC5B,YAAMC,WAAW,GAAG;AAChBC,UAAAA,KAAK,EAAEtO,IAAI,CADK;AAEhB5C,UAAAA,KAAK,EAAE4C,IAAI,CAACnC;AAFI,SAApB,CAD4B,CAK5B;;AACA,YAAIqQ,UAAU,KAAKlO,IAAI,CAAvB,UAAkCmO,gBAAgB,CAAhBA,IAAAA,CANN,WAMMA,EANN,CAM0C;AAN1EC,OAAAA;AAQAjB,MAAAA,YAAY,CAAZA,YAAAA,CAA0B;AAACrN,QAAAA,MAAM,EAAEqO;AAAT,OAA1BhB;AACAA,MAAAA,YAAY,CAAZA,YAAAA,CAAAA,QAAAA,EAAoC;AAACoB,QAAAA,QAAQ,EAAT;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAApCrB;AACH;;;SAMLtQ,wBAAAA,SAAAA,qBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA+E;AAC3E,yCAAqC,iCAArC,IAAqC,CAArC;;;SAGJC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAmF;;SACnFC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EAAsG;;SAEtG0R,gCAAAA,SAAAA,6BAAAA,CAAAA,QAAAA,EAAyD;;SACzDC,2BAAAA,SAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA+D;;SAC/DC,0BAAAA,SAAAA,uBAAAA,CAAAA,MAAAA,EAAqD;AAAC;;;SAEtDxE,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDJ,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;;SACpEF,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SACjCQ,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;;;;;AA5V9CsB,kBACaC,SADbD,GACiC,YADjCA;AAAAA,kBAEaE,SAFbF,GAEiC,SAFjCA;AAAAA,kBAGaG,eAHbH,GAGuC,eAHvCA;AAAAA,kBAIaI,SAJbJ,GAIiC,SAJjCA;AAAAA,kBAKaK,aALbL,GAKqC,aALrCA;AAAAA,kBAMaM,WANbN,GAMmC,WANnCA;AAAAA,kBAOaO,uBAPbP,GAO+C,yBAP/CA;AAgWN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrXA;AAEA;AACA;AAGA;AACA;AAIA,IAAMF,QAAQ,GAAGlR,4CAAK,CAAtB,cAAsB,CAAtB;AACA,IAAMmR,cAAc,GAAGnR,4CAAK,CAA5B,qBAA4B,CAA5B;;IAEMoU;+CACF;;;AA+BA,0BAAc;AAAA;;AACV,qCAAMA,YAAY,CAAlB,0BADU,IACV,CADU,CAIV;;AAJU,UA7BJC,eA6BI,GA7B2B,IA6B3B;AAKV,uBAAkB,6CAAlB,KAAkB,EAAlB;AACA,kCAA6B,wDAA7B,KAA6B,EAA7B;AACA,iCAA4B,uDAA5B,KAA4B,EAA5B;AACA,8BAAyB,oDAAzB,KAAyB,EAAzB;AAEA1S,IAAAA,8FAAAA,GAAAA,WAAAA,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA;AAVU;AAWb;;;;SAEDwS,0BAAAA,SAAAA,uBAAAA,CAAAA,MAAAA,EAAqD;AAAE;;;SAEvD7B,uBAAAA,SAAAA,oBAAAA,CAAAA,GAAAA,EAAyC;AACrCpB,IAAAA,QAAQ,CAARA,2BAAQ,CAARA;AACA;;;SAIJ7C,mBAAAA,SAAAA,gBAAAA,GAAmB;AACf;;AACA;AAEA;;;SAGJC,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA2C;AACvC,WAAO9I,IAAI,CAAX;;;SAGJ+I,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAqD;AACjD,WAAO/I,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,CAAP,GAAOA,CAAP;;;SAGJuM,0BAAAA,SAAAA,uBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAiD;AAC7C,QAAI9P,MAAM,GAAG6O,+EAAb;;AACA,QAAI,KAAJ,iBAA0B;AACtB,UAAI,kCAAkCtL,IAAI,CAA1C,UAAqD;AACjDvD,QAAAA,MAAM,GAAG6O,6EAAT7O;AACH;AAEJ;;AACD;;;SAGJ4O,mCAAAA,SAAAA,gCAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA0D;AACtD,WAAO,mCAAP,IAAO,CAAP;;;SAIJE,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC;AACpCI,IAAAA,cAAc,CAAdA,kCAAc,CAAdA;AACAmD,IAAAA,QAAQ,GAAG5S,wEAAAA,GAAX4S,WAAW5S,EAAX4S;AACAnD,IAAAA,cAAc,CAAdA,QAAc,CAAdA;;AACA;;;SAGJoD,iBAAAA,SAAAA,cAAAA,CAAAA,QAAAA,EAAgC;AAC5B,QAAIjK,IAAI,GAAG5I,wEAAAA,GAAAA,UAAAA,CAAX,QAAWA,CAAX;AACA;AACA,2CAAsC,KAAtC;AACA;;;SAIJ2R,wBAAAA,SAAAA,qBAAAA,GAA8B;AAC1B,QAAI,KAAJ,iBAA0B;AACtB3R,MAAAA,wEAAAA,GAAAA,YAAAA,CAAuC,qBAAvCA,QAAAA;AACH;;AACD;;;SAGJ4R,oBAAAA,SAAAA,iBAAAA,CAAAA,GAAAA,EAAsC;AAClC;AACA,2CAAsC,KAAtC;AACA;;;SAGJtB,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA+C;AAC3C,WAAOxM,IAAI,CAAX;;;SAGJgK,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AACtD;;;SAGJC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAC7C/N,IAAAA,wEAAAA,GAAAA,SAAAA,CAAAA,YAAAA;;AACA,QAAI,wBAAyB,kCAA7B,cAA8E;AAC1E,+CAAwC,KAAxC;AACA;AACH;;AAED;;;SAIJ4N,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B,QAAI,KAAJ,iBAA0B;AACtB,+CAAwC,KAAxC;AACA;AACH;;;SAGLD,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SACjCE,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;;SACpEI,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDG,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;;SAChDF,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;;SAClDG,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;SACpDF,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAEhCoE,gCAAAA,SAAAA,6BAAAA,CAAAA,QAAAA,EAAyD;;SACzDC,2BAAAA,SAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA+D;;;EAnJxCvH;;AAArByH,aAKazC,uBALbyC,GAK8C,yBAL9CA;AAAAA,aAOanE,SAPbmE,GAOwC;AACtCvH,EAAAA,kBAAkB,EADoB;AAEtCC,EAAAA,kBAAkB,EAFoB;AAGtCC,EAAAA,wBAAwB,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAL;AAAepK,IAAAA,KAAK,EAAE;AAAtB,GAAD,CAHY;AAItCqK,EAAAA,cAAc,EAJwB;AAKtCC,EAAAA,KAAK,EALiC;AAMtCC,EAAAA,YAAY,EAN0B;AAOtCC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EADC;AAEPC,IAAAA,QAAQ,EAFD;AAGPC,IAAAA,MAAM,EAHC;AAIPC,IAAAA,OAAO,EAAE;AAJF,GAP2B;AAatCE,EAAAA,MAAM,EAAE;AACJC,IAAAA,gBAAgB,EADZ;AAEJC,IAAAA,eAAe,EAFX;AAGJC,IAAAA,kBAAkB,EAHd;AAIJC,IAAAA,MAAM,EAJF;AAKJoC,IAAAA,MAAM,EAAE;AACJC,MAAAA,aAAa,EADT;AAEJC,MAAAA,WAAW,EAAE;AAFT;AALJ;AAb8B,CAPxCgE;AAsJN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAGA,IAAM5H,OAAO,GAAGxM,4CAAK,CAArB,qBAAqB,CAArB;AACA,IAAMyM,aAAa,GAAGzM,4CAAK,CAA3B,4BAA2B,CAA3B;;IAEMwU;;;AA+CF,2CAAwC;AAAA;;AACpC,qCAAMA,iBAAiB,CAAvB,yBAAiDlX,wDAAjD,KADoC,IACpC,CADoC,CAGpC;;AACA,uBAAkB,6CAAlB,KAAkB,EAAlB;AACA,2BAAsB,iDAAtB,KAAsB,EAAtB;AACA,uCAAkC,6DAAlC,KAAkC,EAAlC;AACA,wCAAmC,8DAAnC,KAAmC,EAAnC;AACA,yCAAoC,+DAApC,KAAoC,EAApC;AACA,wCAAmC,8DAAnC,KAAmC,EAAnC;AACA,sCAAiC,4DAAjC,KAAiC,EAAjC;AACA,uCAAkC,6DAAlC,KAAkC,EAAlC;AAEAqE,IAAAA,8FAAAA,GAAAA,eAAAA,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA;AAboC;AAcvC;;;;SAED0M,mBAAAA,SAAAA,gBAAAA,GAAmB;AACf;;AACA;;;SAKJmC,6BAAAA,SAAAA,0BAAAA,CAAAA,SAAAA,EAAsD;AAClDhE,IAAAA,OAAO,CAAPA,+CAAO,CAAPA;AACA;;;SAGJiE,8BAAAA,SAAAA,2BAAAA,CAAAA,QAAAA,EAAoD;AAChDjE,IAAAA,OAAO,uCAAPA,YAAO,CAAPA;AACA;;;SAGJkE,+BAAAA,SAAAA,4BAAAA,CAAAA,QAAAA,EAAqD;AACjDlE,IAAAA,OAAO,uCAAPA,YAAO,CAAPA;AACA;;;SAGJmE,8BAAAA,SAAAA,2BAAAA,CAAAA,SAAAA,EAAuD;AACnDnE,IAAAA,OAAO,wCAAPA,SAAO,CAAPA;AACA;;;SAIJ8B,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA2C;AACvC,WAAO9I,IAAI,CAAX;;;SAIJ+I,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAqD;AACjD,WAAO/I,IAAI,CAAX;;;SAGJuM,0BAAAA,SAAAA,uBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAiD;AAC7C,QAAI9P,MAAM,GAAG6O,6EAAb,CAD6C,CAE7C;;AACA,QAAI,CAACpP,wEAAAA,GAAAA,cAAAA,CAAyC8D,IAAI,CAAlD,QAAK9D,CAAL,EAA8D;AAC1DO,MAAAA,MAAM,GAAG6O,+EAAT7O;AACH;;AACD;;;SAGJ4O,mCAAAA,SAAAA,gCAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA0D;AACtD,QAAI5O,MAAM,GAAG6O,6EAAb;AACArE,IAAAA,aAAa,4CAA0CjH,IAAI,CAFL,QAEzC,CAAbiH,CAFsD,CAGtD;;AACA,QAAI9K,8FAAAA,GAAAA,eAAAA,CAAqD6D,IAAI,CAA7D,QAAI7D,CAAJ,EAAyE;AACrE8K,MAAAA,aAAa,CAAbA,cAAa,CAAbA;AACAxK,MAAAA,MAAM,GAAG6O,6EAAT7O;AACH;;AACD,QAAIN,8FAAAA,GAAAA,aAAAA,CAAmD6D,IAAI,CAA3D,QAAI7D,CAAJ,EAAuE;AACnE8K,MAAAA,aAAa,CAAbA,YAAa,CAAbA;AACAxK,MAAAA,MAAM,GAAG6O,8EAAT7O;AACH;;AACD;;;SAMJ8O,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC;AAAA,4BACpC;;;AACA,QAAI2D,QAAc,GAAlB;AACA,QAAMnX,KAAW,yBAAG,KAAH,iCAAG,kCAAkCD,wDAAlC,CAApB;;AACA,eAAW;AACPC,MAAAA,KAAK,CAALA,OAAAA,CAAc,gBAAc;AACxB,YAAImE,wEAAAA,GAAAA,qBAAAA,CAAgDyE,IAAI,CAAxD,QAAIzE,CAAJ,EAAoE;AAChEgT,UAAAA,QAAQ,CAARA,IAAAA,CAAAA,IAAAA;AACH;AAHLnX,OAAAA;AAKH;;AAED;;;SAKJ8R,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SAEjCuB,4BAAAA,SAAAA,yBAAAA,CAAAA,SAAAA,EAAqD;AACjD;;;SAGJtB,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCC,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;AAChE;AACA,QAAIoF,UAAU,KAAK,8BAAnB,MAAuD;AACnD,UAAIjT,wEAAAA,GAAAA,mBAAAA,CAA8CgO,YAAY,CAA9D,QAAIhO,CAAJ,EAA0E;AACtE8K,QAAAA,OAAO,CAAIkD,YAAY,CAAhB,QAAIA,GAAXlD,gCAAO,CAAPA;AACA;AACH;;AACD9K,MAAAA,wEAAAA,GAAAA,oBAAAA,CAA+CgO,YAAY,CAA3DhO,QAAAA;AACH;;;SAGL8N,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AACtD;;;SAGJC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAC7CjD,IAAAA,OAAO,qBAAmBkD,YAAY,CAA/B,yBAAoDA,YAAY,CAAhE,KAAPlD,qBAAO,CAAPA;AACA9K,IAAAA,wEAAAA,GAAAA,2BAAAA,CAAsDgO,YAAY,CAAlEhO,QAAAA;;;SAGJiO,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDI,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;SAGpDD,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;AAC5C,QAAIpO,wEAAAA,GAAAA,qBAAAA,CAAgDuP,WAAW,CAA/D,QAAIvP,CAAJ,EAA2E;AACvE8K,MAAAA,OAAO,CAAIyE,WAAW,CAAf,QAAIA,GAAXzE,gCAAO,CAAPA;AACA;AAHwC,MAK5C;;;AACA9K,IAAAA,wEAAAA,GAAAA,sBAAAA,CAAiDuP,WAAW,CAA5DvP,QAAAA;;;SAGJkO,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;AAC9C,QAAMgF,QAAQ,GAAGjT,8FAAAA,GAAAA,iBAAAA,CAAuD+N,YAAY,CAApF,QAAiB/N,CAAjB;AACAzB,IAAAA,+DAAAA,GAAAA,cAAAA,CAAAA,QAAAA;;;SAGJ2P,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;;EA7LJlD;;AAA1B6H,kBACKvE,SADLuE,GACgC;AAC9B3H,EAAAA,kBAAkB,EADY;AAE9BC,EAAAA,kBAAkB,EAFY;AAG9BC,EAAAA,wBAAwB,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAL;AAAepK,IAAAA,KAAK,EAAE;AAAtB,GAAD,CAHI;AAI9BqK,EAAAA,cAAc,EAJgB;AAK9BC,EAAAA,KAAK,EALyB;AAM9BC,EAAAA,YAAY,EANkB;AAO9BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EADC;AAEPC,IAAAA,QAAQ,EAFD;AAGPC,IAAAA,MAAM,EAHC;AAIPC,IAAAA,OAAO,EAAE;AAJF,GAPmB;AAa9BC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,MAAM,EADH;AAEHC,IAAAA,QAAQ,EAFL;AAGHC,IAAAA,MAAM,EAHH;AAIHC,IAAAA,OAAO,EAAE;AAJN,GAbuB;AAmB9BE,EAAAA,MAAM,EAAE;AACJC,IAAAA,gBAAgB,EADZ;AAEJC,IAAAA,eAAe,EAFX;AAGJC,IAAAA,kBAAkB,EAHd;AAIJC,IAAAA,MAAM,EAJF;AAKJoC,IAAAA,MAAM,EAAE;AACJC,MAAAA,aAAa,EADT;AAEJC,MAAAA,WAAW,EAAE;AAFT,KALJ;AASJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,UAAU,EAAC,CAAC5Q,+DAAD,CADT;AAEF6Q,MAAAA,WAAW,EAAC,CAAC7Q,yDAAD;AAFV,KATF;AAaJqO,IAAAA,IAAI,EAAE;AACF9D,MAAAA,IAAI,EAAEvK,yDADJ;AAEFsO,MAAAA,IAAI,EAAEtO,+DAAwBI;AAF5B;AAbF,GAnBsB;AAqC9B2U,EAAAA,YAAY,EAAE,CACV;AACIzH,IAAAA,IAAI,EADR;AAEImD,IAAAA,aAAa,EAFjB;AAGIC,IAAAA,WAAW,EAAE;AAHjB,GADU;AArCgB,CADhCoE;AAiMN;;;;;;;;;;;;;;;;;;;;;;;;AC/MA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,IAAMK,SAAS,GAAG7U,4CAAK,CAAvB,kBAAuB,CAAvB;AAEA,IAAaiH,oBAAb;AAuCI,kCAAsB;AAAA,SAdduO,MAcc,GAdkB,IAclB;AAAA,SAbdC,gBAac,GAbgC,IAahC;AAAA,SAZdT,cAYc,GAZ6B,IAY7B;AAAA,SAXdU,OAWc,GAXmB,IAWnB;AAAA,SAVdC,YAUc,GAV2B,IAU3B;AAAA,SATdC,YASc,GATwB,IASxB;AAAA,SALdC,KAKc,GALe,IAKf;AAClB,sBAAkBjU,8FAAAA,EAAlB;AACA,wBAAoB1B,+DAAAA,GAApB,eAAoBA,EAApB;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AAEA,+CAA2C5C,wDAA3C;AACH;;AA7CL,qCA+CI,uBAAkD;AAC9C,QAAI,CAAE2J,oBAAoB,CAA1B,WAAuC;AACnCA,MAAAA,oBAAoB,CAApBA,SAAAA,GAAiC,IAAjCA,oBAAiC,EAAjCA;AACH;;AACD,WAAOA,oBAAoB,CAA3B;AAnDR;;AAAA;;AAAA,4BAsDI,4BAA0B;AACtB,SADsB,YACtB,GADsB,CAGtB;;AACA,iCAA6BD,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAJnD,qBAIOD,CAA7B,CAJsB,CAKtB;AACA;;AACA,QAAM2L,YAAY,GAAGC,CAAC,OAAK3L,oBAAoB,CAA/C,qBAAsB,CAAtB;AACA0L,IAAAA,YAAY,CAAZA,EAAAA,CAAAA,oBAAAA,EAAsC,KAAtCA,iBAAAA;AAEA/Q,IAAAA,8FAAAA,GAAAA,eAAAA,GAAAA,wBAAAA,CAA8EtE,6DAA9EsE,EAVsB,IAUtBA,EAVsB,CAYtB;AACA;;AACA,kBAAcoF,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAApBA,aAAAA,CAdhB,QAcRD,CAAd,CAdsB,CAetB;;AACA,4BAAwBA,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAApBA,aAAAA,CAhB1B,SAgBED,CAAxB,CAhBsB,CAiBtB;;AACA,0BAAsBA,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAApBA,aAAAA,CAlBxB,cAkBAD,CAAtB,CAlBsB,CAmBtB;;AACA,mBAAeA,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAApBA,aAAAA,CApBjB,KAoBPD,CAAf,CApBsB,CAqBtB;;AACA,wBAAoBA,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAApBA,aAAAA,CAtBtB,GAsBFD,CAApB,CAtBsB,CAuBtB;;AACA,wBAAoBA,QAAQ,CAARA,cAAAA,CAAwBC,oBAAoB,CAApBA,aAAAA,CAxBtB,UAwBFD,CAApB,CAxBsB,CA0BtB;;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACA,0BAAsB,yBA7BA,IA6BA,CAAtB,CA7BsB,CA+BtB;;AACA,QAAI,KAAJ,gBAAyB,8CAA8C,KAA9C;AACzB,QAAI,KAAJ,cAAuB,4CAA4C,KAA5C;;AACvB,QAAI,KAAJ,QAAiB;AACb,+CAAyC,iBAAW;AAChD9B,QAAAA,KAAK,CAALA,cAAAA;AADJ;AAGA,2CAAqC,KAArC;AACH;AA7FT;;AAAA,6BAgGI2N,SAAAA,iBAAAA,CAAAA,KAAAA,EAAAA,EAAAA,EAAyC;AACrC3N,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;AACA2P,IAAAA,SAAS,WAAS/B,EAAE,CAAFA,IAAAA,CAAT,sBAAkCA,EAAE,CAAFA,IAAAA,CAAlC,QAH4B,WAG5B,CAAT+B,CAHqC,CAIrC;;AACA3P,IAAAA,KAAK,CAALA,MAAAA,CAAAA,SAAAA,GALqC,EAKrCA,CALqC,CAOrC;;AACA,QAAItD,8FAAAA,GAAJ,YAAIA,EAAJ,EAAuD;AACnDA,MAAAA,8FAAAA,GAAAA,UAAAA,CAA8CkR,EAAE,CAAFA,IAAAA,CAA9ClR,KAAAA;AADJ,WAGK;AACD+G,MAAAA,KAAK,CAALA,gDAAK,CAALA;AACH;AA7GT;;AAAA,4BAiHImN,SAAAA,gBAAAA,CAAAA,KAAAA,EAAoC;AAChCjB,IAAAA,SAAS,CADuB,cACvB,CAATA,CADgC,CAEhC;;AACA,QAAI,yCAAyC,gBAA7C,YAA6C,EAA7C,EAA6E;AACzE;AACA;AACA,UAAI,CAAClL,OAAO,CAAZ,gDAAY,CAAZ,EAHyE,QAKzE;;AACA,sBANyE,aAMzE,GANyE,CAQzE;;AACA;AATJ,WAUO;AACH;AACA;AACA,UAAI,CAACA,OAAO,CAAZ,gDAAY,CAAZ,EAHG,QAKH;;AACA,sBANG,KAMH,GANG,CASH;;AACA;AACH;AAzIT;;AAAA,gCA4IIoM,SAAAA,oBAAAA,CAAAA,KAAAA,EAAwC;AACpClB,IAAAA,SAAS,CAATA,mBAAS,CAATA;;AACA,QAAI,gBAAJ,YAAI,EAAJ,EAAoC;AAChC;AADJ,WAEO;AACH;AACH;AAlJT;;AAAA,0BAqJI3C,SAAAA,cAAAA,CAAAA,KAAAA,EAA6B;AACzB2C,IAAAA,SAAS,CAATA,mCAAS,CAATA;;AACA,QAAI,yCAAyC,gBAA7C,YAA6C,EAA7C,EAA6E;AACzE;AACA,UAAM1C,iBAAiB,GAAGjN,KAAK,CAALA,YAAAA,CAAAA,OAAAA,CAA1B,8EAA0BA,CAA1B;AACA,UAAMkN,aAAa,GAAGC,IAAI,CAAJA,KAAAA,CAAtB,iBAAsBA,CAAtB;AACAwC,MAAAA,SAAS,CAATA,aAAS,CAATA;;AAEA,UAAIzC,aAAa,CAAbA,4EAAa,CAAbA,KAAkC1S,yDAAtC,EAA0D;AACtD;AACA,mCAA2B0S,aAAa,CAAxC;AACH;AACJ;AAjKT;;AAAA,wBAqKI,wBAAsB;AAClB,iBADkB,IAClB,CADkB,CAGlB;;AACA,QAAI,KAAJ,kBAA2B;;AAC3B,QAAI,KAAJ,gBAAyB;AACrB,sCAAgC,WAAWnL,oBAAoB,CAApBA,aAAAA,CAA3C;AACA;AACAI,MAAAA,0EAAAA,CAA6B,KAA7BA,cAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,MAAAA,0EAAAA,CAA6B,KAA7BA,cAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AACH;;AACD,QAAI,KAAJ,SAAkB,yBAAyB,wBAAzB,CAAyB,CAAzB;AAClB,QAAI,KAAJ,cAAuB,8BAA8BJ,oBAAoB,CAApBA,aAAAA,CAA9B;AACvB,QAAI,KAAJ,cAAuBI,2EAAAA,CAA8B,KAA9BA,YAAAA;AAlL/B;;AAAA,uBAuLI,qCAA4D;AAAA,QAA3BW,QAA2B;AAA3BA,MAAAA,QAA2B,GAAP,KAApBA;AAA2B,MACxD;;;AACA6M,IAAAA,SAAS,kCAATA,QAAS,CAATA;;AACA,QAAI,KAAJ,gBAAyB;AACrB,oBAAc;AACV,wCAAgC,aAAa5N,oBAAoB,CAApBA,aAAAA,CAA7C;AACAI,QAAAA,0EAAAA,CAA6B,KAA7BA,cAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACAA,QAAAA,0EAAAA,CAA6B,KAA7BA,cAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AAHJ,aAIO;AACH,wCAAgC,aAAaJ,oBAAoB,CAApBA,aAAAA,CAA7C;AACAI,QAAAA,0EAAAA,CAA6B,KAA7BA,cAAAA,EAAAA,aAAAA,EAAAA,IAAAA;AACAA,QAAAA,0EAAAA,CAA6B,KAA7BA,cAAAA,EAAAA,aAAAA,EAAAA,KAAAA;AACH;;AACD;AACH;;AACD,QAAI,KAAJ,SAAkB,yBAAyB,wBAAzB,IAAyB,CAAzB;AAtM1B;;AAAA,wBAyMI7E,SAAAA,YAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,QAAAA,EAAqE;AACjE,QAAIwK,IAAI,KAAK1P,wDAAb,EAAgC;AAC5B;AACA,UAAMqV,YAAY,GAAGC,CAAC,OAAK3L,oBAAoB,CAApBA,aAAAA,CAFC,qBAEN,CAAtB,CAF4B,CAG5B;;AACA,UAAIyM,UAAU,GAAGxT,+DAAAA,GAJW,mBAIXA,EAAjB,CAJ4B,CAK5B;;AACA,UAAMyT,gBAAqB,GAA3B;AACAC,MAAAA,QAAQ,CAARA,OAAAA,CAAiB,gBAAe;AAC5B,YAAMC,WAAW,GAAG;AAChBC,UAAAA,KAAK,EAAEtO,IAAI,CADK;AAEhB5C,UAAAA,KAAK,EAAE4C,IAAI,CAACnC;AAFI,SAApB,CAD4B,CAK5B;;AACA,YAAIqQ,UAAU,KAAKlO,IAAI,CAAvB,UAAkCmO,gBAAgB,CAAhBA,IAAAA,CANN,WAMMA,EANN,CAM0C;AAN1EC,OAAAA;AAQAjB,MAAAA,YAAY,CAAZA,YAAAA,CAA0B;AAACrN,QAAAA,MAAM,EAAEqO;AAAT,OAA1BhB;AACAA,MAAAA,YAAY,CAAZA,YAAAA,CAAAA,QAAAA,EAAoC;AAACoB,QAAAA,QAAQ,EAAT;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAApCrB;AAhBJ,WAkBO;AACH,UAAI9U,UAAsB,GAA1B;AACAgX,MAAAA,SAAS,CAATA,sBAAS,CAATA;AACAA,MAAAA,SAAS,CAATA,UAAS,CAATA;AACA,UAAI,KAAJ,gBAAyB,oCAJtB,UAIsB,EAJtB,CAMH;;AACA,UAAI,KAAJ,kBAA2B,uCAAqChX,UAAU,CAPvE,aAOwB,CAPxB,CASH;;AACA,UAAI,KAAJ,OAAgB;AACZ;AACA,YAAIiN,SAAc,GAFN,EAEZ,CAFY,CAGZ;;AACAjN,QAAAA,UAAU,CAAVA,IAAAA,CAAAA,OAAAA,CAAwB,yBAAkC;AACtDmY,UAAAA,GAAG,CAAHA,OAAAA,CAAY,+BAAsC;AAC9ClL,YAAAA,SAAS,CAATA,IAAAA,CAAe,wBAAfA,MAAe,CAAfA;AADJkL,WAAAA;AADJnY,SAAAA;AAKAgX,QAAAA,SAAS,CAATA,gBAAS,CAATA;AACAA,QAAAA,SAAS,CAVG,SAUH,CAATA,CAVY,CAWZ;;AACA,4CAAoCjT,8FAApC;AAZJ,aAcO;AACH;AAEA,YAAI,KAAJ,cAAuB;AACnB,cAAMiB,SAAS,GAAG,gBAAlB,oBAAkB,EAAlB;;AACA,yBAAe;AACXhF,YAAAA,UAAU,CAAVA,kBAAAA,GAAgC4M,kFAAAA,GAAAA,qBAAAA,CAAhC5M,SAAgC4M,CAAhC5M;AACH;;AACDA,UAAAA,UAAU,CAAVA,kBAAAA,CAAAA,IAAAA,GAAqCA,UAAU,CAA/CA,IAAAA;AACA,uBAAa,yDACT,KADS,cAETA,UAAU,CARK,kBAMN,CAAb,CANmB,CASnB;;AACA,4CAAkC,gBAAlC;AACH;AAtCF,QA0CH;;;AACA,UAAI,KAAJ,SAAkB,yBAAyB,wBAAwBA,UAAU,CAA3D,KAAyB,CAAzB;AACrB;AAxQT;;AAAA,wBA4QI,wBAA6B;AACzB,QAAI,KAAJ,OAAgB;AACZ,aAAO,WAAP,OAAO,EAAP;AADJ,WAEO;AACH;AACH;AAjRT;;AAAA,iCAoRIwE,SAAAA,qBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA+E;AAC3E,yCAAqC,iCAArC,IAAqC,CAArC;AArRR;;AAAA,8BAyRI,mCAAkD;AAC9C,QAAIJ,MAAM,GAAV;;AACA,QAAIyI,KAAK,KAAT,GAAiB;AACbzI,MAAAA,MAAM,GAANA,OAAAA;AADJ,WAEO;AACH,UAAIyI,KAAK,IAAT,IAAiB;AACb,YAAIuL,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAWxL,KAAK,GAA5B,IAAYwL,CAAZ;AACA,YAAIC,OAAO,GAAGD,IAAI,CAAJA,KAAAA,CAAWxL,KAAK,GAA9B,EAAcwL,CAAd;AACA,YAAIE,OAAO,GAAG1L,KAAK,GAAIuL,KAAK,GAAdvL,IAAAA,GAA0ByL,OAAO,GAA/C;;AACA,YAAIF,KAAK,GAAT,GAAe;AACXhU,UAAAA,MAAM,IAAOgU,KAAP,GAANhU,GAAAA;AACH;;AACD,YAAIkU,OAAO,GAAX,GAAiB;AACb,cAAIA,OAAO,GAAX,IAAkB;AACdlU,YAAAA,MAAM,oBAANA,GAAAA;AADJ,iBAEO;AACHA,YAAAA,MAAM,IAAOkU,OAAP,GAANlU,GAAAA;AACH;AALL,eAMO;AACHA,UAAAA,MAAM,IAANA,KAAAA;AACH;;AACD,YAAImU,OAAO,GAAX,GAAiB;AACb,cAAIA,OAAO,GAAX,IAAkB;AACdnU,YAAAA,MAAM,UAANA,OAAAA;AADJ,iBAEO;AACHA,YAAAA,MAAM,SAANA,OAAAA;AACH;AALL,eAMO;AACHA,UAAAA,MAAM,IAANA,IAAAA;AACH;AAxBL,aAyBO;AACHA,QAAAA,MAAM,GAANA,KAAAA;;AACA,YAAIyI,KAAK,GAAT,GAAe;AACX,cAAIA,KAAK,GAAT,IAAgB;AACZzI,YAAAA,MAAM,UAANA,KAAAA;AADJ,iBAEO;AACHA,YAAAA,MAAM,SAANA,KAAAA;AACH;AALL,eAMO;AACHA,UAAAA,MAAM,IAANA,IAAAA;AACH;AACJ;AACJ;;AACD;AApUR;;AAAA,mCAuUIK,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAmF,CAvUvF;;AAAA,mCAwUIC,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EAAsG,CAxU1G;;AAAA;AAAA;AAAa0E,qBAGK6N,aAHL7N,GAGqB;AACtB8N,EAAAA,QAAQ,EADc;AAEtBlS,EAAAA,SAAS,EAFa;AAGtBmS,EAAAA,cAAc,EAHQ;AAItBtK,EAAAA,KAAK,EAJiB;AAKtBuK,EAAAA,GAAG,EALmB;AAMtBpX,EAAAA,UAAU,EANY;AAOtBqX,EAAAA,SAAS,EAPa;AAQtBC,EAAAA,cAAc,EARQ;AAStBC,EAAAA,OAAO,EATe;AAUtBC,EAAAA,SAAS,EAVa;AAWtBC,EAAAA,qBAAqB,EAXC;AAYtBC,EAAAA,MAAM,EAAE;AAZc,CAHrBtO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbb;AACA;AACA;AACA;AAMA,IAAMiK,QAAQ,GAAGlR,4CAAK,CAAtB,qBAAsB,CAAtB;AACA,IAAMmR,cAAc,GAAGnR,4CAAK,CAA5B,4BAA4B,CAA5B;;IAEMqW;;;AA0BF,6BAAc;AAAA;;AACV,qCAAMA,eAAe,CAArB,uCADU,IACV,CADU,CAEV;;AAFU,UAzBJC,iBAyBI,GAzB4B,IAyB5B;AAGV,uBAAkB,6CAAlB,KAAkB,EAAlB;AAHU;AAIb;;;;SAEDjI,mBAAAA,SAAAA,gBAAAA,GAAmB;AACf;;AACA;AACA;;;SAIGuI,uBAAP,yCAA4C;AACxC1F,IAAAA,QAAQ,CAARA,gCAAQ,CAARA;AACAC,IAAAA,cAAc,CAAdA,SAAc,CAAdA;;AACA,mBAAe;AACX;AACA;AACH;;;SAGL5C,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAqD;AACjD,QAAIsI,MAAM,GAAV;AACAA,IAAAA,MAAM,kCAA8B,uBAA9B,cAA8D,uBAA9D,OAANA,QAAAA;AACAA,IAAAA,MAAM,2CAAuC7L,6CAAM,CAACxF,IAAI,CAAL,WAANwF,gBAAM,CAANA,CAAAA,MAAAA,CAAvC,uBAAuCA,CAAvC,GAAN6L,MAAAA;AACAA,IAAAA,MAAM,IAANA,iCAAAA;;AACA,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACD,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACD,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACD,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACD,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACD,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACD,QAAIrR,IAAI,CAAR,SAAkB;AACd,UAAIA,IAAI,CAAJA,MAAAA,GAAJ,GAAqB;AACjBqR,QAAAA,MAAM,IAAOrR,IAAI,CAAX,OAAOA,GAAP,GAAOA,GAAgBA,IAAI,CAA3B,MAAOA,GAAbqR,GAAAA;AACH;AACJ;;AACDA,IAAAA,MAAM,IAANA,MAAAA;AACA;;;SAGJ9F,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC;AACpCI,IAAAA,cAAc,CAAdA,yCAAc,CAAdA;;AACA,kBAAc;AACV,UAAImD,QAAQ,CAAZ,aAA0B;AACtB,yCAAiCA,QAAQ,CAAzC;AACH;AACJ;;;SAILrC,qBAAAA,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoD;AAChD;;;SAGJ3D,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAmD;AAC/C,WAAO9I,IAAI,CAAX;;;SAGJ6J,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SACjCC,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCC,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;;SAEpEC,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AACtD,WAAQ,0BAA0B7F,OAAO,CAAzC,mDAAyC,CAAzC;;;SAGJ8F,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAC7CyB,IAAAA,QAAQ,sBADqC,YACrC,CAARA,CAD6C,CAE7C;;AACA,QAAI,uBAAJ,aAAwC;AACpC,UAAIvO,KAAK,GAAG,6CAA6C;AAAA,eAAgBgB,KAAK,CAALA,EAAAA,KAAhB;AAAzD,OAAY,CAAZ;;AACA,UAAIhB,KAAK,IAAT,GAAgB;AACZ,yDADY,CACZ,EADY,CAEZ;;AACAzC,QAAAA,+DAAAA,GAAAA,8BAAAA,CAAwD,KAAxDA,iBAAAA,EAAAA,YAAAA;AACH;AACJ;;AACD,wBAAoB,KAApB;;;SAGJyP,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDG,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;;SAChDF,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;;SAClDG,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;SACpDF,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;;EAxINlD;;AAAxB0J,gBAEKE,sBAFLF,GAE4C;AAC1CxJ,EAAAA,kBAAkB,EADwB;AAE1CC,EAAAA,kBAAkB,EAFwB;AAG1CG,EAAAA,cAAc,EAH4B;AAI1CC,EAAAA,KAAK,EAJqC;AAK1CC,EAAAA,YAAY,EAL8B;AAM1CO,EAAAA,MAAM,EAAE;AACJC,IAAAA,gBAAgB,EADZ;AAEJC,IAAAA,eAAe,EAFX;AAGJC,IAAAA,kBAAkB,EAHd;AAIJC,IAAAA,MAAM,EAJF;AAKJoC,IAAAA,MAAM,EAAE;AACJC,MAAAA,aAAa,EADT;AAEJqG,MAAAA,UAAU,EAFN;AAGJpG,MAAAA,WAAW,EAAE;AAHT,KALJ;AAUJqG,IAAAA,UAAU,EAAE;AACRC,MAAAA,WAAW,EADH;AAERC,MAAAA,cAAc,EAAE;AAFR;AAVR;AANkC,CAF5CN;AA6IN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzJA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,IAAM7J,OAAO,GAAGxM,4CAAK,CAArB,qBAAqB,CAArB;AACA,IAAMyM,aAAa,GAAGzM,4CAAK,CAA3B,4BAA2B,CAA3B;;IAEM8W;;;AAwDF,wCAAwC;AAAA;;AACpC,qCAAMA,cAAc,CAApB,yBAA6CxZ,wDAA7C;AAEA,0BAHoC,EAGpC,CAHoC,CAKpC;;AACA,uBAAkB,6CAAlB,KAAkB,EAAlB;AACA,2BAAsB,iDAAtB,KAAsB,EAAtB;AACA,8BAAyB,oDAAzB,KAAyB,EAAzB;AACA,uCAAkC,6DAAlC,KAAkC,EAAlC;AACA,wCAAmC,8DAAnC,KAAmC,EAAnC;AACA,yCAAoC,+DAApC,KAAoC,EAApC;AACA,wCAAmC,8DAAnC,KAAmC,EAAnC;AACA,sCAAiC,4DAAjC,KAAiC,EAAjC;AACA,uCAAkC,6DAdE,KAcF,EAAlC,CAdoC,CAgBpC;;AACA,wBAAmB,8EAAnB,IAAmB,CAAnB;;AACA,+CAA0CA,qEAA1C;;AACAqE,IAAAA,8FAAAA,GAAAA,eAAAA,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA;AAEA6K,IAAAA,OAAO,CAAC,iCAAgClP,qEAAhC,CAAD,CAAPkP;AArBoC;AAuBvC;;;;SAIDgE,6BAAAA,SAAAA,0BAAAA,CAAAA,SAAAA,EAAsD;AAClDhE,IAAAA,OAAO,CAAPA,+CAAO,CAAPA;AACAA,IAAAA,OAAO,CAAPA,SAAO,CAAPA;AACA;AACA,oBAAgBlP,qEAAhB;;;SAGJmT,8BAAAA,SAAAA,2BAAAA,CAAAA,QAAAA,EAAoD;AAChDjE,IAAAA,OAAO,uCAAPA,YAAO,CAAPA;AACA,oBAAgBlP,qEAAhB;;;SAGJoT,+BAAAA,SAAAA,4BAAAA,CAAAA,QAAAA,EAAqD;AACjDlE,IAAAA,OAAO,uCAAPA,YAAO,CAAPA;AACA,oBAAgBlP,qEAAhB;;;SAGJqT,8BAAAA,SAAAA,2BAAAA,CAAAA,SAAAA,EAAuD;AACnDnE,IAAAA,OAAO,wCAAPA,SAAO,CAAPA;AACA,oBAAgBlP,qEAAhB;;;SAGJsT,4BAAAA,SAAAA,yBAAAA,CAAAA,SAAAA,EAAqD;AACjDpE,IAAAA,OAAO,sCAAPA,SAAO,CAAPA;AACA,oBAAgBlP,qEAAhB;;;SAGJ+Q,mBAAAA,SAAAA,gBAAAA,GAAmB;AACf,kDADe,IACf,EADe,CAEf;;;AACA,QAAMsE,YAAY,GAAGC,CAAC,OAAKkE,cAAc,CAAzC,iBAAsB,CAAtB;AACAnE,IAAAA,YAAY,CAAZA,EAAAA,CAAAA,oBAAAA,EAAsC,KAAtCA,iBAAAA;AAEA;;;SAGJrE,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA2C;AACvC,WAAO9I,IAAI,CAAX;;;SAIJ+I,8BAAAA,SAAAA,2BAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAqD;AACjD,WAAO/I,IAAI,CAAX;;;SAGJuM,0BAAAA,SAAAA,uBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAiD;AAC7C,QAAI9P,MAAM,GAAG6O,6EAAb;AACArE,IAAAA,aAAa,CAAbA,6BAAa,CAAbA;AACAA,IAAAA,aAAa,CAHgC,IAGhC,CAAbA,CAH6C,CAI7C;;AACA,QAAI,CAAC/K,wEAAAA,GAAAA,cAAAA,CAAyC8D,IAAI,CAAlD,QAAK9D,CAAL,EAA8D;AAC1DO,MAAAA,MAAM,GAAG6O,+EAAT7O;AACH;;AACD;;;SAGJ4O,mCAAAA,SAAAA,gCAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA0D;AACtD,QAAI5O,MAAM,GAAG6O,6EAAb;AACArE,IAAAA,aAAa,4CAA0CjH,IAAI,CAFL,QAEzC,CAAbiH,CAFsD,CAGtD;;AACA,QAAI9K,8FAAAA,GAAAA,eAAAA,CAAqD6D,IAAI,CAA7D,QAAI7D,CAAJ,EAAyE;AACrE8K,MAAAA,aAAa,CAAbA,cAAa,CAAbA;AACAxK,MAAAA,MAAM,GAAG6O,6EAAT7O;AACH;;AACD,QAAIN,8FAAAA,GAAAA,aAAAA,CAAmD6D,IAAI,CAA3D,QAAI7D,CAAJ,EAAuE;AACnE8K,MAAAA,aAAa,CAAbA,YAAa,CAAbA;AACAxK,MAAAA,MAAM,GAAG6O,8EAAT7O;AACH;;AACD;;;SAIJ4Q,oBAAAA,SAAAA,iBAAAA,CAAAA,KAAAA,EAAAA,EAAAA,EAAyC;AACrC3N,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAALA,eAAAA;AACAsH,IAAAA,OAAO,WAASsG,EAAE,CAAFA,IAAAA,CAAT,sBAAkCA,EAAE,CAAFA,IAAAA,CAAlC,QAH8B,WAG9B,CAAPtG,CAHqC,CAIrC;;AACAtH,IAAAA,KAAK,CAALA,MAAAA,CAAAA,SAAAA,GALqC,EAKrCA,CALqC,CAOrC;;AACA,QAAI,+BAA+B5H,qEAA/B,EAA+D;AAAC+F,MAAAA,EAAE,EAAEyP,EAAE,CAAFA,IAAAA,CAAQlQ;AAAb,KAA/D,EAAJ,2DAAI,CAAJ,EAAiG;AAEjG,QAAMjF,kBAAkB,GAAG,gCAAgCL,qEAAhC,CAA3B;AACAkP,IAAAA,OAAO,+BAA6BlP,qEAA7B,CAAPkP;;AACA,QAAI7O,kBAAkB,CAAlBA,MAAAA,IAA6BmZ,cAAc,CAA/C,WAA2D;AACvDtK,MAAAA,OAAO,CADgD,0CAChD,CAAPA,CADuD,CAEvD;;AACA,UAAMhH,IAAI,GAAG7H,kBAAkB,CAA/B,KAAaA,EAAb;AACA,2CAAqCL,qEAArC;AAhBiC,MAkBrC;;;AACA,uCAAmCA,qEAAnC,EAAmE;AAC/D+F,MAAAA,EAAE,EAAEyP,EAAE,CAAFA,IAAAA,CAD2D;AAE/D1M,MAAAA,QAAQ,EAAE0M,EAAE,CAAFA,IAAAA,CAAQgB;AAF6C,KAAnE;;;SAOJ/C,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAwC;AACpC,QAAI/D,IAAI,KAAK1P,qEAAb,EAA6C;AACzCkP,MAAAA,OAAO,CAAPA,8BAAO,CAAPA;AACA8H,MAAAA,QAAQ,GAAG,gCAAgChX,qEAAhC,CAAXgX;AACA9H,MAAAA,OAAO,CAAPA,QAAO,CAAPA;AACA;AACH;;AACD,QAAIQ,IAAI,KAAK1P,wDAAb,EAAgC;AAC5B;AACA;AACA,UAAIoW,UAAU,GAAGxT,+DAAAA,GAHW,mBAGXA,EAAjB,CAH4B,CAI5B;;AACA,UAAMyS,YAAY,GAAGC,CAAC,OAAKkE,cAAc,CALb,iBAKN,CAAtB,CAL4B,CAM5B;;AACA,UAAMnD,gBAAqB,GAA3B;AACAW,MAAAA,QAAQ,CAARA,OAAAA,CAAiB,gBAAe;AAC5B,YAAMT,WAAW,GAAG;AAChBC,UAAAA,KAAK,EAAEtO,IAAI,CADK;AAEhB5C,UAAAA,KAAK,EAAE4C,IAAI,CAACnC;AAFI,SAApB;AAIA,YAAIqQ,UAAU,KAAKlO,IAAI,CAAvB,UAAkCmO,gBAAgB,CAAhBA,IAAAA,CALN,WAKMA,EALN,CAK0C;AAL1EW,OAAAA;AAOA3B,MAAAA,YAAY,CAAZA,YAAAA,CAA0B;AAACrN,QAAAA,MAAM,EAAEqO;AAAT,OAA1BhB;AACAA,MAAAA,YAAY,CAAZA,YAAAA,CAAAA,QAAAA,EAAoC;AAACoB,QAAAA,QAAQ,EAAT;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAApCrB;AACH;;;SAKLpD,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;AAChE;AACA,QAAIoF,UAAU,KAAK,8BAAnB,MAAuD;AACnD,UAAIjT,wEAAAA,GAAAA,qBAAAA,CAAgDgO,YAAY,CAAhE,QAAIhO,CAAJ,EAA4E;AACxE8K,QAAAA,OAAO,CAAIkD,YAAY,CAAhB,QAAIA,GAAXlD,gCAAO,CAAPA;AACA;AACH;;AACD9K,MAAAA,wEAAAA,GAAAA,sBAAAA,CAAiDgO,YAAY,CAA7DhO,QAAAA;AAP4D,MAShE;;;AACA,QAAIiT,UAAU,KAAK,8BAAnB,MAAuD;AACnD,UAAIjT,wEAAAA,GAAAA,mBAAAA,CAA8CgO,YAAY,CAA9D,QAAIhO,CAAJ,EAA0E;AACtE8K,QAAAA,OAAO,CAAIkD,YAAY,CAAhB,QAAIA,GAAXlD,gCAAO,CAAPA;AACA;AACH;;AACD9K,MAAAA,wEAAAA,GAAAA,oBAAAA,CAA+CgO,YAAY,CAA3DhO,QAAAA;AACH;;;SAGL8N,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AACtD;;;SAGJC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;AAC7CjD,IAAAA,OAAO,yBAAuBkD,YAAY,CAAnC,yBAAwDA,YAAY,CAApE,KAAPlD,qBAAO,CAAPA;AACA,yCAAqClP,qEAArC;;;SAIJsS,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;AAC9C,QAAMgF,QAAQ,GAAGjT,8FAAAA,GAAAA,iBAAAA,CAAuD+N,YAAY,CAApF,QAAiB/N,CAAjB;AACAzB,IAAAA,+DAAAA,GAAAA,cAAAA,CAAAA,QAAAA;;;SAGJmP,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SACjCC,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCK,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDG,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;;SAChDD,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;;SAChCE,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;;EAzP3BpD;;AAAvBmK,eAIKC,iBAJLD,GAIgC,qBAJhCA;AAAAA,eAKKE,SALLF,GAKwB,EALxBA;AAAAA,eAOK7G,SAPL6G,GAOgC;AAC9BjK,EAAAA,kBAAkB,EADY;AAE9BC,EAAAA,kBAAkB,EAFY;AAG9BC,EAAAA,wBAAwB,EAAE,CAAC;AAACC,IAAAA,IAAI,EAAL;AAAepK,IAAAA,KAAK,EAAE;AAAtB,GAAD,CAHI;AAI9BqK,EAAAA,cAAc,EAJgB;AAK9BC,EAAAA,KAAK,EALyB;AAM9BC,EAAAA,YAAY,EANkB;AAO9BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,MAAM,EADC;AAEPC,IAAAA,QAAQ,EAFD;AAGPC,IAAAA,MAAM,EAHC;AAIPC,IAAAA,OAAO,EAAE;AAJF,GAPmB;AAa9BC,EAAAA,KAAK,EAAE;AACHJ,IAAAA,MAAM,EADH;AAEHC,IAAAA,QAAQ,EAFL;AAGHC,IAAAA,MAAM,EAHH;AAIHC,IAAAA,OAAO,EAAE;AAJN,GAbuB;AAmB9BE,EAAAA,MAAM,EAAE;AACJC,IAAAA,gBAAgB,EADZ;AAEJC,IAAAA,eAAe,EAFX;AAGJC,IAAAA,kBAAkB,EAHd;AAIJC,IAAAA,MAAM,EAJF;AAKJoC,IAAAA,MAAM,EAAE;AACJC,MAAAA,aAAa,EADT;AAEJC,MAAAA,WAAW,EAAE;AAFT,KALJ;AASJrC,IAAAA,IAAI,EAAE;AACF9D,MAAAA,IAAI,EAAEvK,yDADJ;AAEFsO,MAAAA,IAAI,EAAEtO,+DAAwBG;AAF5B;AATF,GAnBsB;AAiC9B4U,EAAAA,YAAY,EAAE,CACV;AACIzH,IAAAA,IAAI,EADR;AAEImD,IAAAA,aAAa,EAFjB;AAGIC,IAAAA,WAAW,EAAE;AAHjB,GADU,EAMV;AACIpD,IAAAA,IAAI,EADR;AAEImD,IAAAA,aAAa,EAFjB;AAGIC,IAAAA,WAAW,EAAE;AAHjB,GANU;AAjCgB,CAPhC0G;AA+PN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChRA;AAGA,IAAMG,SAAS,GAAGjX,4CAAK,CAAvB,QAAuB,CAAvB;;IAGMkX;;;;;SAEWC;iFAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,cAAAA,cADV,GAC2B;AACnBC,gBAAAA,MAAM,EADa;AAEnBC,gBAAAA,OAAO,EAAE;AAAC,kCAAgB;AAAjB,iBAFU;AAGnBC,gBAAAA,IAAI,EAAE,IAAI,CAAJ,UAAe;AAACpI,kBAAAA,KAAK,EAALA;AAAD,iBAAf;AAHa,eAAjBiI;AADV;AAAA,qBAO2BK,KAAK,MAPhC,cAOgC,CAPhC;;AAAA;AAOUD,cAAAA,QAPV,gBAOUA;AAPV,+CAQWA,QAAQ,CARnB,IAQWA,EARX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;AAWA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACWE,uBAAP,uCAA2D;AACvDT,IAAAA,SAAS,+BAA6BU,OAAO,CAAPA,eAAAA,CAA7B,sBAAsEA,OAAO,CAAPA,eAAAA,CAA/EV,MAAS,CAATA;;AACA,QAAI;AACA5E,MAAAA,IAAI,CAAJA,SAAAA,CAAesF,OAAO,CAAPA,eAAAA,CAAftF,MAAAA;AADJ,MAEE,cAAc;AACZ4E,MAAAA,SAAS,CAATA,sCAAS,CAATA;AACAA,MAAAA,SAAS,CAACU,OAAO,CAAPA,eAAAA,CAAD,QAATV,GAAS,CAATA;AACAU,MAAAA,OAAO,CAAPA,QAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAA4BA,OAAO,CAAnCA,SAAAA,EAA+CA,OAAO,CAAtDA,SAAAA;AACH;;AACD,QAAMP,cAAc,GAAG;AACnBC,MAAAA,MAAM,EADa;AAEnBC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAFU;AAGnBC,MAAAA,IAAI,EAAElF,IAAI,CAAJA,SAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAmBsF,OAAO,CAAPA,eAAAA,CAAnBtF,MAAAA,CAAAA;AAHa,KAAvB;AAMA,mBAAesF,OAAO,CAAPA,eAAAA,CAAf,qBAA4DA,OAAO,CAAnE,UAA8EA,OAAO,CAArF,WAAiGA,OAAO,CAAxG;;;SAGGC,sBAAP,sCAA0D;AACtDX,IAAAA,SAAS,mCAAiCU,OAAO,CAAPA,eAAAA,CAAjC,oBAAwEA,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAjFV,EAAS,CAATA;AACA,QAAMY,aAAa,GAAG;AAClBR,MAAAA,MAAM,EADY;AAElBC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAFS,KAAtB;AAIA,QAAIK,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAJ,IAAuCA,OAAO,CAAPA,eAAAA,CAAAA,GAAAA,IAAAA,MAAmCA,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAnCA,EAAAA;AAEvC,mBAAeA,OAAO,CAAPA,eAAAA,CAAf,oBAA2DA,OAAO,CAAlE,UAA6EA,OAAO,CAApF,WAAgGA,OAAO,CAAvG;;;SAGGG,yBAAP,yCAA6D;AACzDb,IAAAA,SAAS,sCAAoCU,OAAO,CAAPA,eAAAA,CAApC,oBAA2EA,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAApFV,EAAS,CAATA;AACA,QAAMc,aAAa,GAAG;AAClBV,MAAAA,MAAM,EADY;AAElBC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAFS,KAAtB;AAIA,QAAIK,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAJ,IAAuCA,OAAO,CAAPA,eAAAA,CAAAA,GAAAA,IAAAA,MAAmCA,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAnCA,EAAAA;AAEvC,mBAAeA,OAAO,CAAPA,eAAAA,CAAf,oBAA2DA,OAAO,CAAlE,UAA6EA,OAAO,CAApF,WAAgGA,OAAO,CAAvG;;;SAGGK,sBAAP,sCAAoD;AAChDf,IAAAA,SAAS,mCAAiCU,OAAO,CAAPA,eAAAA,CAAjC,oBAAwEA,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAjFV,EAAS,CAATA;AACA,QAAMgB,aAAa,GAAG;AAClBZ,MAAAA,MAAM,EADY;AAElBC,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB,OAFS;AAGlBC,MAAAA,IAAI,EAAElF,IAAI,CAAJA,SAAAA,CAAAA,QAAAA,CAAAA,EAAAA,EAAmBsF,OAAO,CAAPA,eAAAA,CAAnBtF,MAAAA,CAAAA;AAHY,KAAtB;AAKA,QAAIsF,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAJ,IAAuCA,OAAO,CAAPA,eAAAA,CAAAA,GAAAA,IAAAA,MAAmCA,OAAO,CAAPA,eAAAA,CAAAA,MAAAA,CAAnCA,EAAAA;AAEvC,mBAAeA,OAAO,CAAPA,eAAAA,CAAf,oBAA2DA,OAAO,CAAlE,UAA6EA,OAAO,CAApF,WAAgGA,OAAO,CAAvG;;;SAGIO,YAAR,oEAA4H;AACxHT,IAAAA,KAAK,MAALA,UAAK,CAALA,CAAAA,IAAAA,CACU,oBAAc;AAChBR,MAAAA,SAAS,wBAAsBO,QAAQ,CAAvCP,MAAS,CAATA;;AACA,UAAIO,QAAQ,CAARA,MAAAA,IAAAA,GAAAA,IAA0BA,QAAQ,CAARA,MAAAA,IAA9B,KAAsD;AAClD,eAAOA,QAAQ,CAAf,IAAOA,EAAP;AACH;;AACD,UAAIA,QAAQ,CAARA,MAAAA,KAAJ,KAA6B;AACzBP,QAAAA,SAAS,CAACO,QAAQ,CAAlBP,IAAUO,EAAD,CAATP;AACH;AARTQ,KAAAA,EAAAA,IAAAA,CAUU,gBAAU;AACZR,MAAAA,SAAS,CAATA,IAAS,CAATA;AACAkB,MAAAA,QAAQ,uBAARA,SAAQ,CAARA;AAZRV,KAAAA,EAAAA,KAAAA,CAcW,iBAAW;AACdR,MAAAA,SAAS,CAATA,KAAS,CAATA;AACAkB,MAAAA,QAAQ,uBAARA,SAAQ,CAARA;AAhBRV,KAAAA;;;;;;AAqBR,IAAMW,OAAO,GAAG,IAAhB,OAAgB,EAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3GA;AACA;AAEA;AAEA;AAEA,IAAMC,QAAQ,GAAGrY,4CAAK,CAAtB,QAAsB,CAAtB;;IAEMoP;kBAGYjP,cAAd,uBAA6C;AACzC,QAAI,CAAEiP,eAAe,CAArB,WAAkC;AAC9BA,MAAAA,eAAe,CAAfA,SAAAA,GAA4B,IAA5BA,eAA4B,EAA5BA;AACH;;AACD,WAAOA,eAAe,CAAtB;;;AAQJ,6BAAc;AACV;AACA;AACA;AACA;AACA;AAEA,mCAA+B,kCAA/B,IAA+B,CAA/B;AACH;;;;SAEMkJ,8BAAP,uDAAoE;AAChE;;;SAGGC,4BAAP,qDAAkE;AAC9D;;;SAGGC,wBAAP,iCAA+B;AAC3B,WAAO,mBAAP;;;SAGGC,0BAAP,mCAAiC;AAC7B,WAAO,qBAAP;;;SAGGC,kBAAP,6EAAyI;AAAA,QAApBC,UAAoB;AAApBA,MAAAA,UAAoB,GAAP,KAAbA;AAAoB;;AACrI,QAAIhB,OAAoB,GAAG;AACvBiB,MAAAA,GAAG,EADoB;AAEvB3O,MAAAA,IAAI,EAAE4O,oDAFiB;AAGvBC,MAAAA,MAAM,EAAE;AAAC3J,QAAAA,KAAK,EAAN;AAAe4J,QAAAA,SAAS,EAAEA;AAA1B,OAHe;AAIvBZ,MAAAA,QAAQ,EAJe;AAKvBa,MAAAA,mBAAmB,EAAEC;AALE,KAA3B;AAQA;;;SAGGC,uBAAP,qFAAiJ;AAAA,QAApBP,UAAoB;AAApBA,MAAAA,UAAoB,GAAP,KAAbA;AAAoB;;AAC7I,QAAIhB,OAAoB,GAAG;AACvBiB,MAAAA,GAAG,EADoB;AAEvB3O,MAAAA,IAAI,EAAE4O,oDAFiB;AAGvBC,MAAAA,MAAM,EAAE;AAACK,QAAAA,QAAQ,EAAT;AAAqBJ,QAAAA,SAAS,EAAEA;AAAhC,OAHe;AAIvBZ,MAAAA,QAAQ,EAJe;AAKvBa,MAAAA,mBAAmB,EAAEC;AALE,KAA3B;AAQA;;;SAGGG,gBAAP,gDAAmE;AAAA,QAApBT,UAAoB;AAApBA,MAAAA,UAAoB,GAAP,KAAbA;AAAoB,MAC/D;;;AACA,QAAMU,SAAS,GAAGhP,8DAAAA,EAAlB;AACAgO,IAAAA,QAAQ,4CAARA,SAAQ,CAARA;AACAA,IAAAA,QAAQ,cAARA,GAAQ,CAARA;;AAEA,oBAAgB;AACZ,UAAIiB,eAA8B,GAAG;AACjCC,QAAAA,eAAe,EADkB;AAEjCF,QAAAA,SAAS,EAFwB;AAGjCG,QAAAA,SAAS,EAAEA,sDAHsB;AAIjCrB,QAAAA,QAAQ,EAAE,KAAKsB;AAJkB,OAArC;AAMA;AACA,UAAI,KAAJ,wBAAiC;AARrC,WASO;AACH,UAAIH,gBAA8B,GAAG;AACjCC,QAAAA,eAAe,EADkB;AAEjCF,QAAAA,SAAS,EAFwB;AAGjCG,QAAAA,SAAS,EAAEA,wDAHsB;AAIjCrB,QAAAA,QAAQ,EAAE,KAAKsB;AAJkB,OAArC;AAMA;AACA,UAAI,KAAJ,0BAAmC;AACtC;;AACD;;;SAGUC;wFAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,cAAAA,SADV,GACkD,mBADlD,KACkD,EAAxCA;AACN,kBAAIA,SAAS,KAAb,WAA6B;AAC7B,kBAAIA,SAAS,KAAb,WAA6B;;AAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;SAMcC;0FAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACUD,cAAAA,SADV,GACkD,qBADlD,KACkD,EAAxCA;AACN,kBAAIA,SAAS,KAAb,WAA6B;AAC7B,kBAAIA,SAAS,KAAb,WAA6B;;AAHjC;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;SAMcE;iFAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,gBADR,GAC2B,4BAA4B,qBADvD,MACQA;;AADR;AAAA,oBAEWA,gBAAgB,GAF3B;AAAA;AAAA;AAAA;;AAGQzB,cAAAA,QAAQ,0DAHhB,gBAGgB,CAARA,CAHR,CAIQ;;AAJR,oBAKY,4BALZ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMkB,KANlB,oBAMkB,EANlB;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAOmB,8BAPnB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQkB,KARlB,sBAQkB,EARlB;;AAAA;AAUQyB,cAAAA,gBAAgB,GAAG,4BAA4B,qBAA/CA,MAAAA;AAVR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;SAcQL,0BAAR,2EAAuG;AACnG;AACA,QAAIM,OAAO,KAAKP,sDAAhB,EAAoC;AAAE;AAClC,UAAI,KAAJ,wBAAiC;AADrC,WAEO,IAAI,KAAJ,0BAAmC;;AAE1CnB,IAAAA,QAAQ,0GAN2F,UAM3F,CAARA,CANmG,CAOnG;;AACA,QAAM2B,UAAU,GAAG,0BAA0B,mBAAO;AAAA,aAAIC,OAAO,CAAPA,SAAAA,KAAJ;AAApD,KAAmB,CAAnB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB;AACA,UAAML,SAAS,GAAG,gBAAlB,UAAkB,CAAlB;AACA;AACAtB,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACAA,MAAAA,QAAQ,gDAA8CsB,SAAS,CAL9C,SAKT,CAARtB,CALiB,CAMjB;;AACAsB,MAAAA,SAAS,CAATA,eAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAAAA,UAAAA,EAAyDA,SAAS,CAATA,eAAAA,CAAzDA,mBAAAA;AACH;;;SAGGO,4BAAR,yCAAwD;AACpD7B,IAAAA,QAAQ,wDAAsD7S,IAAI,CAAlE6S,SAAQ,CAARA;AACAA,IAAAA,QAAQ,CAARA,IAAQ,CAARA;;AACA,QAAK7S,IAAI,CAAJA,eAAAA,CAAAA,GAAAA,KAAD,IAACA,IAAuCA,IAAI,CAAJA,eAAAA,CAAAA,MAAAA,IAAxC,IAACA,IAAgFA,IAAI,CAAJA,eAAAA,CAAAA,QAAAA,IAArF,MAA6H;AACzH,cAAQA,IAAI,CAAJA,eAAAA,CAAR;AACI,aAAKqT,oDAAL;AAAuB;AACnBT,YAAAA,qEAAAA,CAAAA,IAAAA;AACA;AACH;;AACD,aAAKS,mDAAL;AAAsB;AAClBT,YAAAA,oEAAAA,CAAAA,IAAAA;AACA;AACH;;AACD,aAAKS,sDAAL;AAAyB;AACrBT,YAAAA,uEAAAA,CAAAA,IAAAA;AACA;AACH;;AACD,aAAKS,mDAAL;AAAsB;AAClBT,YAAAA,oEAAAA,CAAAA,IAAAA;AACA;AACH;AAhBL;AAkBH;;;;;;AAIT;;;;;;;;;;;;;;;;AC9KA;;WAAYS;AAAAA,EAAAA,YAAAA,mBAAAA,KAAAA,SAAAA;AAAAA,EAAAA,YAAAA,kBAAAA,KAAAA,QAAAA;AAAAA,EAAAA,YAAAA,kBAAAA,KAAAA,QAAAA;AAAAA,EAAAA,YAAAA,qBAAAA,KAAAA,WAAAA;GAAAA,gBAAAA;;AAOZ;;WAAYW;AAAAA,EAAAA,UAAAA,qBAAAA,KAAAA,aAAAA;AAAAA,EAAAA,UAAAA,uBAAAA,KAAAA,eAAAA;GAAAA,cAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPZ;;IAGqBW;;;AACjB,sDAAsD;AAAA,WAClD,yBADkD,mBAClD,KADkD;IAItD;;;;;SACOE,OAAP,4DAAmI;AAAA;;AAAA,QAAvFC,SAAuF;AAAvFA,MAAAA,SAAuF,GAAnE,CAApBA;AAAuF;;AAAA,QAAhEC,OAAgE;AAAhEA,MAAAA,OAAgE,GAA9C,MAAlBA;AAAgE;;AAAA,QAAtCC,QAAsC;AAAtCA,MAAAA,QAAsC,GAAnB,IAAnBA;AAAsC;;AAC/H,QAAIC,WAAW,GAAG,yBAD6G,cAC7G,EAAlB,CAD+H,CAE/H;;AACA,QAAIC,YAAY,GAAhB;;AACA;AACI;AAAa;AACTA,UAAAA,YAAY,GAAZA,SAAAA;AACA;AACH;;AACD;AAAgB;AACZA,UAAAA,YAAY,GAAZA,YAAAA;AACA;AACH;;AACD;AAAgB;AACZA,UAAAA,YAAY,GAAZA,YAAAA;AACA;AACH;;AACD;AAAiB;AACbA,UAAAA,YAAY,GAAZA,WAAAA;AACA;AACH;;AACD;AAAS;AACLA,UAAAA,YAAY,GAAZA,SAAAA;AACH;AAnBL,KAJ+H,CA0B/H;;;AACA,QAAMC,aAAa,GAAG3T,QAAQ,CAARA,aAAAA,CAAtB,KAAsBA,CAAtB;AACA2T,IAAAA,aAAa,CAAbA,SAAAA,GAAAA,oBAAAA;AACAA,IAAAA,aAAa,CAAbA,KAAAA,CAAAA,GAAAA,GAA6BL,SAA7BK,GAAAA,IAAAA;AACAA,IAAAA,aAAa,CAAbA,YAAAA,CAAAA,MAAAA,EAAAA,OAAAA;AACAA,IAAAA,aAAa,CAAbA,YAAAA,CAAAA,eAAAA,EA/B+H,OA+B/HA,EA/B+H,CAiC/H;;AACA,QAAMC,SAAS,GAAG5T,QAAQ,CAARA,aAAAA,CAAlB,KAAkBA,CAAlB;AACA4T,IAAAA,SAAS,CAATA,SAAAA,GAAAA,6BAAAA,YAAAA;AAEA,QAAMC,aAAa,GAAG7T,QAAQ,CAARA,aAAAA,CAAtB,QAAsBA,CAAtB;AACA6T,IAAAA,aAAa,CAAbA,SAAAA,GAAAA,SAAAA;AACAA,IAAAA,aAAa,CAAbA,WAAAA,GAvC+H,KAuC/HA,CAvC+H,CAyC/H;;AACA,QAAMC,eAAe,GAAG9T,QAAQ,CAARA,aAAAA,CAAxB,QAAwBA,CAAxB;AACA8T,IAAAA,eAAe,CAAfA,SAAAA,GAAAA,iBAAAA;AACAA,IAAAA,eAAe,CAAfA,WAAAA,GAAAA,GAAAA;AACAA,IAAAA,eAAe,CAAfA,gBAAAA,CAAAA,OAAAA,EAA0C,YAAM;AAC5C,WAAI,CAAJ;AA9C2H,KA6C/HA,EA7C+H,CAkD/H;;AACA,QAAMC,WAAwB,GAAG/T,QAAQ,CAARA,aAAAA,CAAjC,KAAiCA,CAAjC;AACA+T,IAAAA,WAAW,CAAXA,SAAAA,GAAAA,YAAAA;AACAA,IAAAA,WAAW,CAAXA,WAAAA,GArD+H,OAqD/HA,CArD+H,CAwD/H;;AACAH,IAAAA,SAAS,CAATA,WAAAA,CAAAA,aAAAA;AACAA,IAAAA,SAAS,CAATA,WAAAA,CAAAA,eAAAA;AACAD,IAAAA,aAAa,CAAbA,WAAAA,CAAAA,SAAAA;AACAA,IAAAA,aAAa,CAAbA,WAAAA,CAAAA,WAAAA;AACAA,IAAAA,aAAa,CAAbA,SAAAA,CAAAA,GAAAA,CAAAA,QA7D+H,OA6D/HA,EA7D+H,CA+D/H;;AACA,QAAMK,WAA+B,GAAGhU,QAAQ,CAARA,cAAAA,CAAxC,WAAwCA,CAAxC;AACA,qBAAiBgU,WAAW,CAAXA,WAAAA,CAjE8G,aAiE9GA,EAjE8G,CAmE/H;AACA;;AACApI,IAAAA,CAAC,CAADA,eAAC,CAADA,CAAAA,KAAAA,CArE+H,MAqE/HA,EArE+H,CAuE/H;;AACA,QAAI4H,QAAQ,IAAZ,GAAmB;AACfA,MAAAA,QAAQ,GAARA,IAAAA;AACH;;AACDS,IAAAA,UAAU,CAAC,YAAM;AACb,WAAI,CAAJ;AADM,OAAVA,QAAU,CAAVA;AAGA;;;;EApF2Cb;;;;;;;;;;;;;;;;;ICDrBA,eAK1B,2CAAgE;AAC5D,cAAY,eAAZ,IAAY,CAAZ;AAEA,6BAH4D,mBAG5D,CAH4D,CAK5D;;AACA,qBAAmB,yBAAnB,cAAmB,EAAnB;EAGJ;;;;;;;;;;;;;;;;;;;AChBJ;;IAGMc;AACF,iCAAc,CACb;;;;SAEDC,qBAAAA,SAAAA,kBAAAA,CAAAA,OAAAA,EAAiD;AAC7C,WAAO,mEAAP,OAAO,CAAP;;;;;;AAIR,IAAMC,mBAAmB,GAAG,IAA5B,mBAA4B,EAA5B;AAEA;;;;;;;;;;;;;;;;;ACdA;AAEA,IAAa9U,mBAAb;AAAA,oCAGI,uBAAiD;AAC7C,QAAI,CAAEA,mBAAmB,CAAzB,WAAsC;AAClCA,MAAAA,mBAAmB,CAAnBA,SAAAA,GAAgC,IAAhCA,mBAAgC,EAAhCA;AACH;;AACD,WAAOA,mBAAmB,CAA1B;AAPR;;AAeI,iCAAc;AACV;AACA;AACA;AACA;AAEA,gBAAY,eAAZ,IAAY,CAAZ;AACH;;AAtBL;;AAAA,0BAwBI,0BAAgC;AAC5B,WAAO,KAAP;AAzBR;;AAAA,gBA4BI,iDAA+F;AAAA,QAAnDiU,OAAmD;AAAnDA,MAAAA,OAAmD,GAAjC,MAAlBA;AAAmD;;AAAA,QAAzBC,QAAyB;AAAzBA,MAAAA,QAAyB,GAAN,IAAnBA;AAAyB;;AAC3F,QAAMa,YAAY,GAAGD,+EAAAA,CAArB,IAAqBA,CAArB;AACA,QAAME,gBAAgB,GAAGD,YAAY,CAAZA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAkC,oBAAoB,KAAtDA,qBAAAA,EAAAA,OAAAA,EAAzB,QAAyBA,CAAzB;AACA;AACA;AAhCR;;AAAA,kBAmCI,kCAA6C;AAAA;;AACzC,QAAMrB,UAAU,GAAG,6BAA6B,mBAAO;AAAA,aAAIC,OAAO,KAAX;AAAvD,KAAmB,CAAnB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB,4CADiB,CACjB,EADiB,CAEjB;;AACA,6BAAuB,mCAA6B;AAChD;AACAsB,QAAAA,gBAAgB,CAAhBA,KAAAA,CAAAA,GAAAA,GAAgC,KAAI,CAAJ,wBAAhCA,KAAgC,GAAhCA,IAAAA;AAFJ;AAIH;;AACD,QAAMC,QAAQ,GAAGD,gBAAgB,CAAjC;AACA,QAAIC,QAAQ,KAAZ,MAAuBA,QAAQ,CAARA,WAAAA,CAAAA,gBAAAA;AACvB;AACA,QAAI,oBAAJ,GAA2B;AAhDnC;;AAAA;AAAA;AAoDA;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AAEA;AAMA;AACA;IAKKC;;WAAAA;AAAAA,EAAAA,WAAAA,uBAAAA,KAAAA,cAAAA;AAAAA,EAAAA,WAAAA,sBAAAA,KAAAA,aAAAA;GAAAA,eAAAA;;AAKL,IAAMC,QAAQ,GAAGzb,4CAAK,CAAtB,cAAsB,CAAtB;AAEA,IAAa0B,WAAb;AAgBI,yBAAsB;AAAA,SARZma,WAQY,GARY,EAQZ;AAAA,SAPZC,aAOY,GAPc,EAOd;AAAA,SANZC,aAMY,GANc,EAMd;AAAA,SAHd7S,eAGc,GAHI,EAGJ;AAAA,SAFd8S,cAEc,GAFsC,IAEtC;AAClBP,IAAAA,QAAQ,CAARA,oDAAQ,CAARA;AAEA;AACA;AACA;AACA,wBAAoB,8EANF,IAME,CAApB,CANkB,CAQlB;;AACAja,IAAAA,kEAAAA,GAAAA,eAAAA,CATkB,IASlBA,EATkB,CAWlB;;AACA,wBAAoB,uBAApB,IAAoB,CAApB;AACA,yBAAqB,wBAArB,IAAqB,CAArB;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,0BAAsB,yBAAtB,IAAsB,CAAtB;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACH;;AApCL,4BAsCI,uBAAyC;AACrC,QAAI,CAAEE,WAAW,CAAjB,WAA8B;AAC1BA,MAAAA,WAAW,CAAXA,SAAAA,GAAwB,IAAxBA,WAAwB,EAAxBA;AACH;;AACD,WAAOA,WAAW,CAAlB;AA1CR;;AAAA;;AAAA,+BA6CI,uCAA8D;AAC1D;AA9CR;;AAAA,mCAiDI,2CAAsE;AAClE;AAlDR;;AAAA,0BAqDI,kCAAwC;AACpC,WAAQ,6BAA6B;AAAA,aAAUsL,IAAI,KAAd;AAA7B,UAAR;AAtDR;;AAAA,2BAyDI5C,SAAAA,eAAAA,CAAAA,KAAAA,EAAuC;AACnC;AACA,mCAA+B;AAAA,aAAc6R,QAAQ,CAARA,0BAAAA,CAAd,KAAcA,CAAd;AAA/B;AA3DR;;AAAA,gCA8DI,wCAAoD;AAAA;;AAChD,QAAItZ,KAAK,GAAG,2BAA2B;AAAA,aAAa4J,OAAO,KAApB;AAAvC,KAAY,CAAZ;;AACA,QAAI5J,KAAK,GAAT,GAAe;AACX;AACA;AACA,qCAA+B;AAAA,eAAcsZ,QAAQ,CAARA,yBAAAA,CAAmC,KAAI,CAArD,aAAcA,CAAd;AAA/B;AACH;AApET;;AAAA,qCAuEI,6CAAyD;AAAA;;AACrD,QAAItZ,KAAK,GAAG,2BAA2B;AAAA,aAAa4J,OAAO,KAApB;AAAvC,KAAY,CAAZ;;AACA,QAAI5J,KAAK,IAAT,GAAgB;AACZ;AACA;AACA,qCAA+B;AAAA,eAAcsZ,QAAQ,CAARA,yBAAAA,CAAmC,MAAI,CAArD,aAAcA,CAAd;AAA/B;AACH;AA7ET;;AAAA,+BAiFI,uCAAsD;AAClD,WAAQ,2BAA2B;AAAA,aAAa1P,OAAO,KAApB;AAA3B,UAAR;AAlFR;;AAAA,kCAqFI,0CAAsD;AAAA;;AAClD,QAAI5J,KAAK,GAAG,6BAA6B;AAAA,aAAeuZ,SAAS,KAAxB;AAAzC,KAAY,CAAZ;;AACA,QAAIvZ,KAAK,GAAT,GAAe;AACX;AACA;AACA,qCAA+B;AAAA,eAAcsZ,QAAQ,CAARA,2BAAAA,CAAqC,MAAI,CAAvD,aAAcA,CAAd;AAA/B;AACH;AA3FT;;AAAA,uCA8FI,+CAA2D;AAAA;;AACvD,QAAItZ,KAAK,GAAG,6BAA6B;AAAA,aAAa4J,OAAO,KAApB;AAAzC,KAAY,CAAZ;;AACA,QAAI5J,KAAK,IAAT,GAAgB;AACZ;AACA;AACA,qCAA+B;AAAA,eAAcsZ,QAAQ,CAARA,2BAAAA,CAAqC,MAAI,CAAvD,aAAcA,CAAd;AAA/B;AACH;AApGT;;AAAA,iCAwGI,yCAAwD;AACpD,WAAQ,6BAA6B;AAAA,aAAU9V,IAAI,KAAd;AAA7B,UAAR;AAzGR;;AAAA,gCA4GI,gCAAwC;AACpC,qBAAW,KAAX;AA7GR;;AAAA,8BAgHI,8BAAsC;AAClC,qBAAW,KAAX;AAjHR;;AAAA,0BAoHI,kCAA8C;AAC1CsV,IAAAA,QAAQ,2BAARA,QAAQ,CAARA;AACA,2BAF0C,QAE1C,CAF0C,CAG1C;;AACA,QAAIU,SAAS,GAAG,iCAAiCza,WAAW,CAAXA,UAAAA,GAAyB,KAA1E,eAAgB,CAAhB;AACA+Z,IAAAA,QAAQ,CAARA,SAAQ,CAARA;;AACA,mBAAe;AACX;AAPsC,MAU1C;;;AACA,QAAII,WAAW,GAAG,iCAAiCna,WAAW,CAAXA,cAAAA,GAA6B,KAAhF,eAAkB,CAAlB;AACA+Z,IAAAA,QAAQ,CAARA,WAAQ,CAARA;;AACA,qBAAiB;AACb;AAdsC,MAiB1C;;;AACA,QAAIK,aAAa,GAAG,iCAAiCpa,WAAW,CAAXA,gBAAAA,GAA+B,KAApF,eAAoB,CAApB;AACA+Z,IAAAA,QAAQ,CAARA,aAAQ,CAARA;;AACA,uBAAmB;AACf;AACH;;AAED,+BAA2B;AAAA,aAAcQ,QAAQ,CAAtB,qBAAcA,EAAd;AAA3B;AA5IR;;AAAA,0BAiJI,0BAAgC;AAC5B,WAAO,KAAP;AAlJR;;AAAA,6BAqJI/R,SAAAA,iBAAAA,CAAAA,KAAAA,EAAyC;AACrC;AACA;AACA,QAAI3M,KAAK,CAALA,IAAAA,KAAemM,uDAAnB,EAAwC;AAExC,QAAI0S,GAAY,GAAG,yBAAyB7e,KAAK,CAAjD,IAAmB,CAAnB;AAEAke,IAAAA,QAAQ,yBAAuBle,KAAK,CAA5B,eAAuCA,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAA/Cke,GAA+Cle,CAAvC,CAARke;AACAW,IAAAA,GAAG,CAAHA,KAAAA,GAAY7e,KAAK,CARoB,QAQrC6e,CARqC,CASrC;;AACA,QAAIrR,OAAO,GAAG5F,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CAAvB,gBAAuBA,CAAD,CAAtB;AACA,QAAMqR,YAAY,GAAGrR,6CAAM,GAANA,MAAAA,CAArB,kBAAqBA,CAArB;AACA,QAAI/E,OAAgB,GAAG;AACnB+H,MAAAA,IAAI,EADe;AAEnBjD,MAAAA,OAAO,EAFY;AAGnBT,MAAAA,IAAI,EAAE/M,KAAK,CAHQ;AAInB+e,MAAAA,QAAQ,EAJW;AAKnBrS,MAAAA,IAAI,EAAEP,uDALa;AAMnBzD,MAAAA,OAAO,EAAK1I,KAAK,CAAV,QAAKA,GAAL,sBAAKA,GAAqC8e;AAN9B,KAAvB;AAQAD,IAAAA,GAAG,CAAHA,QAAAA,CAAAA,IAAAA,CAAAA,OAAAA;AACA;AAEA,+BAA2B;AAAA,aAAcH,QAAQ,CAARA,oBAAAA,CAAAA,GAAAA,EAAd,KAAcA,CAAd;AAA3B;AA5KR;;AAAA,4BA+KI9R,SAAAA,gBAAAA,CAAAA,KAAAA,EAAwC;AACpC;AACA,QAAI5M,KAAK,CAALA,IAAAA,KAAemM,uDAAnB,EAAwC;AACxC,QAAInM,KAAK,CAALA,QAAAA,KAAmB,KAAvB,iBAA6C;AAE7C,QAAI6e,GAAY,GAAG,yBAAyB7e,KAAK,CAAjD,IAAmB,CAAnB;AAEAke,IAAAA,QAAQ,yBAAuBle,KAAK,CAA5B,eAAuCA,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CAA/Cke,GAA+Cle,CAAvC,CAARke;AACAW,IAAAA,GAAG,CAAHA,KAAAA,GAAY7e,KAAK,CARmB,QAQpC6e,CARoC,CASpC;;AACA,QAAIrR,OAAO,GAAG5F,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CAAvB,gBAAuBA,CAAD,CAAtB;AACA,QAAMqR,YAAY,GAAGrR,6CAAM,GAANA,MAAAA,CAArB,kBAAqBA,CAArB;AACA,QAAI/E,OAAgB,GAAG;AACnB+H,MAAAA,IAAI,EADe;AAEnBjD,MAAAA,OAAO,EAFY;AAGnBT,MAAAA,IAAI,EAAE/M,KAAK,CAHQ;AAInB+e,MAAAA,QAAQ,EAJW;AAKnBrS,MAAAA,IAAI,EAAEP,uDALa;AAMnBzD,MAAAA,OAAO,EAAK1I,KAAK,CAAV,QAAKA,GAAL,oBAAKA,GAAmC8e;AAN5B,KAAvB;AAQAD,IAAAA,GAAG,CAAHA,QAAAA,CAAAA,IAAAA,CAAAA,OAAAA;AACA;AAEA,+BAA2B;AAAA,aAAcH,QAAQ,CAARA,oBAAAA,CAAAA,GAAAA,EAAd,KAAcA,CAAd;AAA3B;AAtMR;;AAAA,6BAyMIzS,SAAAA,iBAAAA,CAAAA,MAAAA,EAA4C;AACxC,QAAIC,MAAM,CAANA,IAAAA,KAAgBC,uDAApB,EADwC,QAGxC;;AACA,QAAI,CAAC,yBAAyBD,MAAM,CAApC,IAAK,CAAL,EAA4C;AACxCgS,MAAAA,QAAQ,sBAAoBhS,MAAM,CAAlCgS,IAAQ,CAARA;AACA,UAAMc,mBAAmB,GAAG,uBAAuB9S,MAAM,CAAzD,IAA4B,CAA5B;AACAgS,MAAAA,QAAQ,CAARA,MAAQ,CAARA;AACAA,MAAAA,QAAQ,CAARA,wFAAQ,CAARA;AAEA,UAAIe,cAAc,GAAlB;;AAEA,UAAI,CAAJ,qBAA0B;AACtB,mCAA2B,oBAAc;AACrC,cAAI,CAACP,QAAQ,CAARA,uBAAAA,CAAL,MAAKA,CAAL,EAA+C;AAC3CO,YAAAA,cAAc,GAAdA,KAAAA;AACH;AAHL;AAKH;;AACD,0BAAoB;AAEhB,YAAIvQ,OAAgB,GAAG,yBAAyBxC,MAAM,CAFtC,IAEO,CAAvB,CAFgB,CAGhB;;AACAwC,QAAAA,OAAO,CAAPA,IAAAA,GAAexC,MAAM,CAJL,IAIhBwC,CAJgB,CAMhB;;AACA,YAAIxC,MAAM,CAAV,UAAqB;AACjBA,UAAAA,MAAM,CAANA,QAAAA,CAAAA,OAAAA,CAAwB,oBAAsB;AAC1C,gBAAK,OAAO,CAAP,gBAAwB;AAAA,qBAAUtD,IAAI,KAAd;AAAzB,aAAC,IAAL,GAAgE8F,OAAO,CAAPA,KAAAA,CAAAA,IAAAA,CAAmBxC,MAAM,CAAzBwC,IAAAA;AADpExC,WAAAA;AAGH;;AAED,YAAK,OAAO,CAAP,gBAAwB;AAAA,iBAAUtD,IAAI,KAAKsD,MAAM,CAAzB;AAAzB,SAAC,IAAL,GAAmEwC,OAAO,CAAPA,KAAAA,CAAAA,IAAAA,CAAmBxC,MAAM,CAAzBwC,IAAAA;AAEnE;AACAwP,QAAAA,QAAQ,mBAAiBhS,MAAM,CAA/BgS,IAAQ,CAARA;AACAja,QAAAA,kEAAAA,GAAAA,QAAAA,CAAqC,KAArCA,cAAqC,EAArCA,EAA4DiI,MAAM,CAAlEjI,IAAAA,EAAyEkI,uDAAzElI;AACA,mCAA2B;AAAA,iBAAcya,QAAQ,CAARA,oBAAAA,CAAAA,OAAAA,EAAd,KAAcA,CAAd;AAA3B;AACH;AAlCL,WAoCO;AACHR,MAAAA,QAAQ,WAAShS,MAAM,CAAf,OAARgS,UAAQ,CAARA;AACH;AAnPT;;AAAA,wBAsPInS,SAAAA,YAAAA,CAAAA,QAAAA,EAAqC;AAAA;;AACjCmS,IAAAA,QAAQ,gCADyB,QACzB,CAARA,CADiC,CAEjC;;AACA,QAAI9Y,KAAK,GAAG,6BAA6B;AAAA,aAAUwD,IAAI,KAAd;AAAzC,KAAY,CAAZ;AACA,QAAIxD,KAAK,GAAT,GAAe;AACf8Y,IAAAA,QAAQ,CAAC,KAATA,aAAQ,CAARA;AAEA,mCAA+B;AAAA,aAAcQ,QAAQ,CAARA,0BAAAA,CAAoC,MAAI,CAAtD,aAAcA,CAAd;AAPE,KAOjC,EAPiC,CASjC;;AACA,QAAI,CAAC,yBAAD,QAAC,CAAD,IAAuC,2BAA3C,QAA2C,CAA3C,EAAiF;AAC7ER,MAAAA,QAAQ,sBAARA,aAAQ,CAARA;AACA,qCAA+B;AAAA,eAAcQ,QAAQ,CAARA,2BAAAA,CAAd,QAAcA,CAAd;AAA/B;AACH;AAnQT;;AAAA,yBAsQI1S,SAAAA,aAAAA,CAAAA,QAAAA,EAAsC;AAAA;;AAClC,QAAI5G,KAAK,GAAG,6BAA6B;AAAA,aAAUwD,IAAI,KAAd;AAAzC,KAAY,CAAZ;AACA,QAAIxD,KAAK,IAAT,GAAgB;AAEhB,mCAA+B;AAAA,aAAcsZ,QAAQ,CAARA,0BAAAA,CAAoC,MAAI,CAAtD,aAAcA,CAAd;AAJG,KAIlC,EAJkC,CAMlC;;AACA,QAAI,CAAC,yBAAD,QAAC,CAAD,IAAuC,2BAA3C,QAA2C,CAA3C,EAAiF;AAC7ER,MAAAA,QAAQ,sBAARA,cAAQ,CAARA;AACA,qCAA+B;AAAA,eAAcQ,QAAQ,CAARA,4BAAAA,CAAd,QAAcA,CAAd;AAA/B;AACH;AAhRT;;AAAA,0BAmRIjS,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,IAAAA,EAAmE;AAC/D,QAAIC,IAAI,KAAKP,uDAAb,EAD+D,QAE/D;;AACA,QAAItD,QAAQ,KAAK,KAAjB,iBAAuC;;AAGvC,QAAI,CAAC,yBAAL,QAAK,CAAL,EAAyC;AACrCqV,MAAAA,QAAQ,sBAARA,8BAAQ,CAARA;AACA,iCAA2B;AAAA,eAAcQ,QAAQ,CAARA,wBAAAA,CAAAA,IAAAA,EAAd,QAAcA,CAAd;AAA3B;AACH;AA5RT;;AAAA,kCAgSI,0CAAoE;AAChE;AAjSR;;AAAA,wBAoSI,4BAAwC;AACpC,QAAIhQ,OAAO,GAAG,yBAAd,IAAc,CAAd;AACAA,IAAAA,OAAO,CAAPA,gBAAAA,GAAAA,CAAAA;AACAA,IAAAA,OAAO,CAAPA,UAAAA,GAAqB9G,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CAA9BiB,gBAA8BjB,CAAD,CAA7BiB;AAEA;AAEA;AA3SR;;AAAA,sBA8SI,0BAAgD;AAC5C,QAAImQ,GAAmB,GAAvB;AACA,QAAIzZ,KAAK,GAAG,wBAAwB;AAAA,aAASyZ,GAAG,CAAHA,QAAAA,KAAT;AAApC,KAAY,CAAZ;AACA,QAAIzZ,KAAK,IAAT,GAAgByZ,GAAG,GAAG,cAANA,KAAM,CAANA;AAChB;AAlTR;;AAAA,0BAqTIK,SAAAA,cAAAA,CAAAA,OAAAA,EAAAA,UAAAA,EAAoE;AAAA,QAAnCC,UAAmC;AAAnCA,MAAAA,UAAmC,GAAb,KAAtBA;AAAmC;;AAChE,QAAIzW,OAAO,CAAPA,IAAAA,KAAiByD,uDAArB,EADgE,QACd;AAClD;;AACA,QAAIzD,OAAO,CAAPA,IAAAA,KAAiB,KAArB,cAAqB,EAArB,EAHgE,QAIhE;;AACA,QAAI,CAAC,yBAAyBA,OAAO,CAArC,IAAK,CAAL,EAA6C;AAEzC;AACA,UAAIgG,OAAO,GAAG,yBAAyBhG,OAAO,CAA9C,IAAc,CAAd;AACA,uDAAiDA,OAAO,CAAxD;AACA;AACAwV,MAAAA,QAAQ,CAARA,kBAAQ,CAARA;AACAA,MAAAA,QAAQ,CAARA,OAAQ,CAARA;AAEA,iCAA2B;AAAA,eAAcQ,QAAQ,CAARA,oBAAAA,CAAAA,OAAAA,EAAd,UAAcA,CAAd;AAA3B;AATJ,WAUO;AACHR,MAAAA,QAAQ,iCAA+BxV,OAAO,CAAtC,OAARwV,uCAAQ,CAARA;AACH;AAtUT;;AAAA,gCA0UI3R,SAAAA,oBAAAA,CAAAA,OAAAA,EAAyC;AAAA,uBACrC;;;AACAC,IAAAA,OAAO,CAAPA,OAAAA,CAAgB,kBAAwB;AACpC,YAAI,CAAJ;AADJA,KAAAA;AA5UR;;AAAA,iCAiVIH,SAAAA,qBAAAA,CAAAA,QAAAA,EAA2C;AAAA,uBACvC;;;AACAC,IAAAA,QAAQ,CAARA,OAAAA,CAAiB,mBAAsB;AACnC,YAAI,CAAJ;AADJA,KAAAA;AAGA,+BAA2B;AAAA,aAAcoS,QAAQ,CAARA,6BAAAA,CAAd,QAAcA,CAAd;AAA3B;AAtVR;;AAAA,oBAyVIU,SAAAA,QAAAA,CAAAA,IAAAA,EAA6B;AACzB,QAAI,wCAAJ,GADyB,QAC+B;;AACxD;AACAnb,IAAAA,kEAAAA,GAAAA,QAAAA,CAAqC,KAArCA,cAAqC,EAArCA,EAAAA,IAAAA,EAAkEkI,uDAAlElI;AA5VR;;AAAA,qBA+VI+R,SAAAA,SAAAA,CAAAA,IAAAA,EAA8B;AAC1B,QAAI,wCAAJ,GAD0B,QAC8B;;AACxD;AACA/R,IAAAA,kEAAAA,GAAAA,SAAAA,CAAsC,KAAtCA,cAAsC,EAAtCA,EAAAA,IAAAA,EAAmEkI,uDAAnElI;AAlWR;;AAAA,iBAqWIzD,SAAAA,KAAAA,GAAc;AAAA;;AACV,QAAI,wCAAJ,GADU,QAC8C;;AACxDyD,IAAAA,kEAAAA,GAAAA,KAAAA,CAAkC,KAFxB,cAEwB,EAAlCA,EAFU,CAGV;;AACAA,IAAAA,kEAAAA,GAJU,WAIVA,GAJU,CAKV;;AACA,0BAAsB,eAAS;AAC3B,UAAI4a,GAAG,CAAHA,IAAAA,KAAa1S,uDAAjB,EAAsC;AAClClI,QAAAA,kEAAAA,GAAAA,QAAAA,CAAqC,MAAI,CAAzCA,eAAAA,EAA2D4a,GAAG,CAA9D5a,QAAAA,EAAyEkI,uDAAzElI;AACH;AAHL;AA3WR;;AAAA,kBAkXIob,SAAAA,MAAAA,GAAe;AACX,QAAI,wCAAJ,GADW,QAC6C;;AACxDpb,IAAAA,kEAAAA,GAAAA,MAAAA,CAAmC,KAAnCA,cAAmC,EAAnCA;AApXR;;AAAA,yBAuXIqb,SAAAA,aAAAA,CAAAA,IAAAA,EAA4B;AACxB,QAAI,wCAAJ,GADwB,QACgC;;AACxDrb,IAAAA,kEAAAA,GAAAA,iBAAAA,CAAAA,IAAAA,EAAoD,KAApDA,cAAoD,EAApDA,EAA2EkI,uDAA3ElI;AAzXR;;AAAA,sBA6XIsb,SAAAA,UAAAA,CAAAA,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,qBAAAA,EAAAA,OAAAA,EAAiJ;AAAA,QAA5G7S,IAA4G;AAA5GA,MAAAA,IAA4G,GAAzFP,uDAAnBO;AAA4G;;AAAA,QAApE+S,qBAAoE;AAApEA,MAAAA,qBAAoE,GAAnC,KAAjCA;AAAoE;;AAAA,QAA5BC,OAA4B;AAA5BA,MAAAA,OAA4B,GAAV,EAAlBA;AAA4B;;AAC7I,QAAI,wCAAJ,GAD6I,QACrF;AACxD;;AACA,QAAI,yBAAJ,EAAI,CAAJ,EAH6I,QAI7I;;AACA,QAAMb,GAAY,GAAG,yBAArB,IAAqB,CAArB;;AACA,QAAI,GAAG,CAAH,gBAAoB;AAAA,aAAUjW,IAAI,KAAd;AAApB,SAAJ,GAAoD;AAChD3E,MAAAA,kEAAAA,GAAAA,UAAAA,CAAuC,KAAvCA,cAAuC,EAAvCA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,EAAAA,qBAAAA,EAAAA,OAAAA;AACH;AArYT;;AAAA,uBAwYI0b,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAAA,QAAAA,EAAAA,UAAAA,EAA8H;AAAA,QAAnFZ,QAAmF;AAAnFA,MAAAA,QAAmF,GAA9DpR,mDAArBoR;AAAmF;;AAC1H,QAAI,wCAAJ,GAA+C,OAD2E,IAC3E,CAD2E,CAC7D;;AAC7D,QAAIF,GAAG,GAAG,yBAFgH,IAEhH,CAAV,CAF0H,CAG1H;;AACA,QAAIrR,OAAO,GAAG5F,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CAAvB,gBAAuBA,CAAD,CAAtB;AACAxJ,IAAAA,kEAAAA,GAAAA,WAAAA,CAAwC,KAAxCA,cAAwC,EAAxCA,EAAAA,IAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAuFkI,uDAAvFlI,EAA4G0J,mDAA5G1J,EAL0H,EAK1HA,EAL0H,CAO1H;;AACA,QAAI,CAAJ,YAAiB4b,UAAU,GAAVA,EAAAA;AACjB,QAAIC,IAAa,GAAG;AAChBrP,MAAAA,IAAI,EAAE,KADU,cACV,EADU;AAEhB1D,MAAAA,IAAI,EAFY;AAGhBrE,MAAAA,OAAO,EAHS;AAIhB8E,MAAAA,OAAO,EAJS;AAKhBuR,MAAAA,QAAQ,EALQ;AAMhBrS,MAAAA,IAAI,EAAEP,uDANU;AAOhB0T,MAAAA,UAAU,EAAEA;AAPI,KAApB;AASA;AACA;AA3ZR;;AAAA,uBA8ZI,uBAAgC;AAC5B,qBAAW,KAAX;AA/ZR;;AAAA,6BAkaI,qCAA0D;AACtD,QAAIxI,QAAuB,GAA3B;;AACA,kBAAc;AACV6G,MAAAA,QAAQ,yBADE,QACF,CAARA,CADU,CAEV;;AACA,UAAIxP,OAAgB,GAAG,iCAAvB,QAAuB,CAAvB;AACA,iCAA2B;AAAA,eAAcgQ,QAAQ,CAARA,oBAAAA,CAAAA,OAAAA,EAAd,KAAcA,CAAd;AAJjB,OAIV,EAJU,CAOV;;AACAza,MAAAA,kEAAAA,GAAAA,UAAAA,CAAuC,KAAvCA,cAAuC,EAAvCA,EAAAA,QAAAA,EAAwEyK,OAAO,CAA/EzK,QAAAA,EAA0FkI,uDAA1FlI,EAAAA,KAAAA,EARU,EAQVA,EARU,CASV;;AACAA,MAAAA,kEAAAA,GAAAA,QAAAA,CAAqC,KAArCA,cAAqC,EAArCA,EAA4DyK,OAAO,CAAnEzK,QAAAA,EAA8EkI,uDAA9ElI;AACAoT,MAAAA,QAAQ,GAAG3I,OAAO,CAAlB2I,QAAAA;AACH;;AACD;AAjbR;;AAAA,oBAobI,oBAAyB;AACrB,qCAAiClT,WAAW,CAAXA,UAAAA,GAAyB,KAA1D,iBAAgF,KAAhF;AArbR;;AAAA,2BAwbI,2BAAgC;AAC5B,qCAAiCA,WAAW,CAAXA,cAAAA,GAA6B,KAA9D,iBAAoF,KAApF;AAzbR;;AAAA,6BA4bI,6BAAkC;AAC9B,qCAAiCA,WAAW,CAAXA,gBAAAA,GAA+B,KAAhE,iBAAsF,KAAtF;AA7bR;;AAAA,+BAgcI,mCAAmD;AAC/C;AACA,QAAIiB,KAAK,GAAG,wBAAwB;AAAA,aAASyZ,GAAG,CAAHA,QAAAA,KAAT;AAApC,KAAY,CAAZ;;AACA,QAAIzZ,KAAK,GAAT,GAAe;AACXyZ,MAAAA,GAAG,GAAG;AACFxH,QAAAA,QAAQ,EADN;AAEFrX,QAAAA,KAAK,EAAE,CAAC,KAFN,cAEM,EAAD,CAFL;AAGFsM,QAAAA,QAAQ,EAHN;AAIFyT,QAAAA,UAAU,EAAEnY,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CAJnB,gBAImBA,CAAD,CAJlB;AAKFuS,QAAAA,gBAAgB,EALd;AAMFtT,QAAAA,IAAI,EAAEP,uDAAmBqT;AANvB,OAANX;AAQA;AACA;AAVJ,WAWO;AACHA,MAAAA,GAAG,GAAG,cAANA,KAAM,CAANA;AACH;;AACD;AAjdR;;AAAA,uCAodI,+CAA+D;AAC3D,QAAIoB,QAAwB,GAA5B;AACA,QAAI7a,KAAK,GAAT;;AACA,WAAOA,KAAK,GAAG,cAAf,QAAqC;AACjC,UAAIyZ,GAAG,GAAG,cAAV,KAAU,CAAV;;AACA,UAAIA,GAAG,CAAHA,KAAAA,CAAAA,MAAAA,KAAJ,GAA4B;AACxB;AACA,YAAI,GAAG,CAAH,gBAAoB;AAAA,iBAAWxZ,KAAK,KAAhB;AAApB,cAAJ,GAA6D;AACzD4a,UAAAA,QAAQ,GAARA,GAAAA;AACA7a,UAAAA,KAAK,GAAG,cAARA,MAAAA;AACH;AACJ;;AACDA,MAAAA,KAAK;AACR;;AACD,QAAI,CAAJ,UAAe;AACX6a,MAAAA,QAAQ,GAAG;AACP5I,QAAAA,QAAQ,EAAEvK,8DAAAA,EADH;AAEP9M,QAAAA,KAAK,EAAE,CAAC,KAAD,cAAC,EAAD,EAFA,QAEA,CAFA;AAGPsM,QAAAA,QAAQ,EAHD;AAIPyT,QAAAA,UAAU,EAAEnY,QAAQ,CAAC6F,6CAAM,GAANA,MAAAA,CAJd,gBAIcA,CAAD,CAJb;AAKPuS,QAAAA,gBAAgB,EALT;AAMPtT,QAAAA,IAAI,EAAEP,uDAAmBqT;AANlB,OAAXS;AAQA;AACA;AACH;;AACD;AA9eR;;AAAA,6BAifI,iCAAwC;AACpC,QAAI7a,KAAK,GAAG,wBAAwB;AAAA,aAAkByZ,GAAG,CAAHA,QAAAA,KAAlB;AAApC,KAAY,CAAZ;AACA,WAAQzZ,KAAK,IAAb;AAnfR;;AAAA,yCAsfI,yCAAwC;AAAA;;AACpC,QAAI8a,WAAW,GAAf;AACA,0BAAsB,eAAS;AAC3BA,MAAAA,WAAW,IAAIrB,GAAG,CAAlBqB,gBAAAA;AADJ;AAGA;AA3fR;;AAAA,+BA8fI,2CAA4D;AACxDrB,IAAAA,GAAG,CAAHA,gBAAAA;AACAA,IAAAA,GAAG,CAAHA,QAAAA,CAAAA,IAAAA,CAAAA,OAAAA;AAEA;;AAEA,QAAInW,OAAO,CAAPA,IAAAA,KAAiB,KAArB,cAAqB,EAArB,EAA4C;AACxC,wBAAkBmW,GAAG,CADmB,QACxC,EADwC,CACP;AADrC,WAEO;AACH;AACH;AAxgBT;;AAAA,8CA2gBI,6DAA6E;AACzE,QAAIzZ,KAAK,GAAG,OAAO,CAAP,gBAAwB;AAAA,aAAUwD,IAAI,KAAd;AAApC,KAAY,CAAZ;;AACA,QAAIxD,KAAK,GAAT,GAAe;AACXsJ,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AACH;AA/gBT;;AAAA,yBAkhBI,6BAAoC;AAChC,QAAItJ,KAAK,GAAG,wBAAwB;AAAA,aAASyZ,GAAG,CAAHA,QAAAA,KAAT;AAApC,KAAY,CAAZ;;AACA,QAAIzZ,KAAK,IAAT,GAAgB;AACZ8Y,MAAAA,QAAQ,iCAARA,IAAQ,CAARA;AACA,UAAIxZ,MAAM,GAAG,4BAAb,CAAa,CAAb;AACAwZ,MAAAA,QAAQ,CAACxZ,MAAM,CAAfwZ,MAAQ,CAARA;AACA;AACH;AAzhBT;;AAAA;AAAA;AAAa/Z,YAEMga,UAFNha,GAEmB,oBAFnBA;AAAAA,YAGMia,cAHNja,GAGuB,uBAHvBA;AAAAA,YAIMka,gBAJNla,GAIyB,yBAJzBA;;;;;;;;;;;;;;;;;;;;ACvBb;AAEA;AACA;AACA;AAGA,IAAMgc,SAAS,GAAG1d,4CAAK,CAAvB,yBAAuB,CAAvB;AAEA,IAAa2B,sBAAb;AAOI,oCAAsB;AAAA,SALdgc,YAKc,GALU,KAKV;AAClB,uBAAmBjc,iEAAAA,EAAnB;AACA;AACA;AACA,6BAJkB,EAIlB,CAJkB,CAOlB;;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,sCAAkC,qCAAlC,IAAkC,CAAlC;AACA,uCAAmC,sCAAnC,IAAmC,CAAnC;AACA,wCAAoC,uCAApC,IAAoC,CAApC;AAEA;AACA;AACH;;AAtBL,uCAwBI,uBAAoD;AAChD,QAAI,CAAEC,sBAAsB,CAA5B,WAAyC;AACrCA,MAAAA,sBAAsB,CAAtBA,SAAAA,GAAmC,IAAnCA,sBAAmC,EAAnCA;AACH;;AACD,WAAOA,sBAAsB,CAA7B;AA5BR;;AAAA;;AAAA,oCA+BIuS,SAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA+D;AAC3D,QAAK,KAAL,cAD2D,QAG3D;;AACA5N,IAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,MAAAA,EAAAA,UAAAA,QAAAA,GAAAA,2CAAAA,EAAAA,MAAAA,EAAAA,IAAAA;AAnCR;;AAAA,mCAuCI6N,SAAAA,uBAAAA,CAAAA,MAAAA,EAAqD;AACjD,QAAIlS,MAAM,GADuC,IACjD,CADiD,CAGjD;;AACA,QAAIwH,MAAM,CAANA,IAAAA,KAAgBC,yDAApB,EAA2C;AAE3C,QAAK,KAAD,YAAC,IAAuB,CAACD,MAAM,CAAnC,uBAA4D;;AAE5D,QAAIA,MAAM,CAAV,uBAAkC,CAC9B;AACA;AAFJ,WAIO;AACH;AACAnD,MAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,WAAAA,EAAAA,UAA4DmD,MAAM,CAAlEnD,IAAAA,GAAAA,mBAAAA,EAAAA,MAAAA,EAAAA,IAAAA;AACH;;AAED;AAxDR;;AAAA,uBA2DI,+BAAgD;AAC5C;AA5DR;;AAAA,2BA+DI,mCAAwD;AACpD;AAhER;;AAAA,2BAmEI,wCAA6C;AAAA,QAAtBsX,aAAsB;AAAtBA,MAAAA,aAAsB,GAAN,IAAhBA;AAAsB;;AACzC;AApER;;AAAA,yBAuEI,kDAAwE;AAAA,QAAjCC,eAAiC;AAAjCA,MAAAA,eAAiC,GAAN,IAA3BA;AAAiC;;AACpE,yBAAqB;AACjB;AADJ,WAEO;AACH;AACH;AA5ET;;AAAA,yBA+EI,+CAAqE;AAAA,QAA9BC,YAA8B;AAA9BA,MAAAA,YAA8B,GAAN,IAAxBA;AAA8B;;AACjE,sBAAkB;AACd;AADJ,WAEO;AACH;AACH;AApFT;;AAAA,2BAuFI,mCAAkD;AAC9C,WAAO,uCAAP,QAAO,CAAP;AAxFR;;AAAA,yBA2FI,iCAAgD;AAC5C,WAAO,qCAAP,QAAO,CAAP;AA5FR;;AAAA,iCA+FIzK,SAAAA,qBAAAA,GAAwB;AACpB,+BAA2B;AAAA,aAAc4I,QAAQ,CAAtB,qBAAcA,EAAd;AAA3B;AAhGR;;AAAA,gCAmGI3J,SAAAA,oBAAAA,CAAAA,GAAAA,EAAAA,UAAAA,EAA6D;AAAA,QAA1BoK,UAA0B;AAA1BA,MAAAA,UAA0B,GAAb,KAAbA;AAA0B;;AACzDgB,IAAAA,SAAS,CAATA,yBAAS,CAATA;AACAA,IAAAA,SAAS,CAFgD,GAEhD,CAATA,CAFyD,CAGzD;;AACA,+BAA2B;AAAA,aAAczB,QAAQ,CAARA,oBAAAA,CAAAA,GAAAA,EAAd,UAAcA,CAAd;AAJ8B,KAIzD,EAJyD,CAMzD;;AACA,QAAI,KAAJ,cAAuB;;AAEvB,QAAI,CAAJ,YAAiB;AACb;AACA,UAAIG,GAAG,CAAHA,QAAAA,CAAAA,MAAAA,GAAJ,GAA6B;AACzB,YAAM2B,cAAc,GAAG3B,GAAG,CAAHA,QAAAA,CAAaA,GAAG,CAAHA,QAAAA,CAAAA,MAAAA,GAApC,CAAuBA,CAAvB;AACA9V,QAAAA,qFAAAA,GAAAA,IAAAA,CAAuCyX,cAAc,CAArDzX,IAAAA,EAA4DyX,cAAc,CAA1EzX,OAAAA,EAAAA,SAAAA,EAAAA,IAAAA;AACH;AACJ;AAlHT;;AAAA,sCAqHIkK,SAAAA,0BAAAA,CAAAA,SAAAA,EAAsD;AAClDkN,IAAAA,SAAS,CAATA,gCAAS,CAATA;AACAA,IAAAA,SAAS,CAFyC,SAEzC,CAATA,CAFkD,CAIlD;;AACA,mCAA+B;AAAA,aAAczB,QAAQ,CAARA,0BAAAA,CAAd,SAAcA,CAAd;AAA/B;AA1HR;;AAAA,uCA6HIxL,SAAAA,2BAAAA,CAAAA,QAAAA,EAAoD;AAChDiN,IAAAA,SAAS,uCADuC,YACvC,CAATA,CADgD,CAEhD;;AACA,mCAA+B;AAAA,aAAczB,QAAQ,CAARA,2BAAAA,CAAd,QAAcA,CAAd;AAHiB,KAGhD,EAHgD,CAKhD;;AACA,QAAI,KAAJ,cAAuB;AACvB3V,IAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,QAAAA,EAAAA,UAAAA,QAAAA,GAAAA,iBAAAA,EAAAA,SAAAA,EAAAA,IAAAA;AApIR;;AAAA,wCAuIIoK,SAAAA,4BAAAA,CAAAA,QAAAA,EAAqD;AACjDgN,IAAAA,SAAS,uCADwC,aACxC,CAATA,CADiD,CAEjD;;AACA,mCAA+B;AAAA,aAAczB,QAAQ,CAARA,4BAAAA,CAAd,QAAcA,CAAd;AAHkB,KAGjD,EAHiD,CAKjD;;AACA,QAAI,KAAJ,cAAuB;AACvB3V,IAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,QAAAA,EAAAA,UAAAA,QAAAA,GAAAA,kBAAAA,EAAAA,UAAAA,EAAAA,IAAAA;AA9IR;;AAAA,qCAkJIsK,SAAAA,yBAAAA,CAAAA,SAAAA,EAAqD;AACjD8M,IAAAA,SAAS,sCAATA,SAAS,CAATA;AACA,mCAA+B;AAAA,aAAczB,QAAQ,CAARA,yBAAAA,CAAd,SAAcA,CAAd;AAA/B;AApJR;;AAAA,uCAuJItL,SAAAA,2BAAAA,CAAAA,SAAAA,EAAuD;AACnD+M,IAAAA,SAAS,wCAATA,SAAS,CAATA;AACA,mCAA+B;AAAA,aAAczB,QAAQ,CAARA,2BAAAA,CAAd,SAAcA,CAAd;AAA/B;AAzJR;;AAAA,6BA4JI,qCAA0D;AACtD,WAAOva,iEAAAA,GAAAA,iBAAAA,CAAP,QAAOA,CAAP;AA7JR;;AAAA,6BAiKI4R,SAAAA,iBAAAA,CAAAA,GAAAA,EAAsC;AAClC,+BAA2B;AAAA,aAAc2I,QAAQ,CAARA,iBAAAA,CAAd,GAAcA,CAAd;AAA3B;AAlKR;;AAAA,yCAqKIhI,SAAAA,6BAAAA,CAAAA,QAAAA,EAAyD;AACrD;AACA,QAAI,KAAJ,cAAuB;AACvB,QAAIpK,QAAQ,CAARA,MAAAA,KAAJ,GAA2B;AAE3BvD,IAAAA,qFAAAA,GAAAA,IAAAA,CAAAA,2BAAAA,EAAAA,uBAAyFuD,QAAQ,CAAjGvD,MAAAA,GAAAA,sCAAAA;AA1KR;;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACTA;AAGA;AAEA,IAAM0X,MAAM,GAAGhe,4CAAK,CAApB,WAAoB,CAApB;;IAEMwB;gBAGYrB,cAAd,uBAA2C;AACvC,QAAI,CAAEqB,aAAa,CAAnB,WAAgC;AAC5BA,MAAAA,aAAa,CAAbA,SAAAA,GAA0B,IAA1BA,aAA0B,EAA1BA;AACH;;AACD,WAAOA,aAAa,CAApB;;;AAOJ,2BAAc;AAAA,SAFJyc,aAEI,GAF4B,EAE5B;AACV,8BAA0B,6BAA1B,IAA0B,CAA1B;AACA,2BAAuB,0BAAvB,IAAuB,CAAvB;AACA;AACA;AACA;AACA,8BAA0B,6BAA1B,IAA0B,CAA1B;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,+BAA2B,8BAA3B,IAA2B,CAA3B;AACA,+BAA2B,8BAA3B,IAA2B,CAA3B;AACA,6BAAyB,4BAAzB,IAAyB,CAAzB;AACA,2BAAuB,0BAAvB,IAAuB,CAAvB;AACA,4BAAwB,2BAAxB,IAAwB,CAAxB;AACA,+BAA2B,8BAA3B,IAA2B,CAA3B;AACA,oCAAgC,mCAAhC,IAAgC,CAAhC;AACH;;;;SAEMC,kBAAP,mCAAqD;AACjD;;;SAGGC,cAAP,+BAA6C;AACzCH,IAAAA,MAAM,CAANA,kBAAM,CAANA;AACA;AACAA,IAAAA,MAAM,CAHmC,4BAGnC,CAANA,CAHyC,CAIzC;;AACA,kBAAcI,EAAd;AACAJ,IAAAA,MAAM,CAANA,sBAAM,CAANA;AACA,8BAA0B,KAA1B;AACA,2BAAuB,KAAvB;AACA,4BAAwB,KAAxB;AACA,6BAAyB,KAAzB;AACA,+BAA2B,KAA3B;AACA,+BAA2B,KAA3B;AACA,6BAAyB,KAAzB;AACA,oCAAgC,KAAhC;AACA,2BAAuB,KAAvB;AACA,4BAAwB,KAAxB;AACA,+BAA2B,KAA3B;;;SAGGjgB,QAAP,yBAAqC;AACjC,8BAA0B;AAACqI,MAAAA,QAAQ,EAARA;AAAD,KAA1B;;;SAGGwW,SAAP,0BAAsC;AAClC,+BAA2B;AAACxW,MAAAA,QAAQ,EAARA;AAAD,KAA3B;;;SAGGuW,WAAP,wCAAoE;AAChE,iCAA6B;AAACvW,MAAAA,QAAQ,EAAT;AAAWkE,MAAAA,IAAI,EAAf;AAAiBL,MAAAA,IAAI,EAAJA;AAAjB,KAA7B;;;SAGGsJ,YAAP,yCAAqE;AACjE,iCAA6B;AAACnN,MAAAA,QAAQ,EAAT;AAAWkE,MAAAA,IAAI,EAAf;AAAiBL,MAAAA,IAAI,EAAJA;AAAjB,KAA7B;;;SAGG6S,aAAP,sFAAsL;AAAA,QAA5H7S,IAA4H;AAA5HA,MAAAA,IAA4H,GAAzGP,uDAAnBO;AAA4H;;AAAA,QAApF+S,qBAAoF;AAApFA,MAAAA,qBAAoF,GAAnD,KAAjCA;AAAoF;;AAAA,QAA5CC,OAA4C;AAA5CA,MAAAA,OAA4C,GAA1B,EAAlBA;AAA4C;;AAAA,QAAtBG,UAAsB;AAAtBA,MAAAA,UAAsB,GAAJ,EAAlBA;AAAsB;;AAClL,QAAIiB,SAAc,GAAG;AACjBrQ,MAAAA,IAAI,EADa;AAEjBsQ,MAAAA,EAAE,EAFe;AAGjBhU,MAAAA,IAAI,EAHa;AAIjBL,MAAAA,IAAI,EAJa;AAKjB+S,MAAAA,qBAAqB,EALJ;AAMjBC,MAAAA,OAAO,EANU;AAOjBG,MAAAA,UAAU,EAAEA;AAPK,KAArB;AASAY,IAAAA,MAAM,CAANA,gBAAM,CAANA;AACAA,IAAAA,MAAM,CAANA,SAAM,CAANA;AACA;;;SAGGd,cAAP,+EAA2J;AAAA,QAA5DZ,QAA4D;AAA5DA,MAAAA,QAA4D,GAAvCpR,mDAArBoR;AAA4D;;AAAA,QAAtBc,UAAsB;AAAtBA,MAAAA,UAAsB,GAAJ,EAAlBA;AAAsB;;AACvJ,QAAImB,UAAmB,GAAG;AACtBvQ,MAAAA,IAAI,EADkB;AAEtB1D,MAAAA,IAAI,EAFkB;AAGtBrE,MAAAA,OAAO,EAHe;AAItB8E,MAAAA,OAAO,EAJe;AAKtBuR,MAAAA,QAAQ,EALc;AAMtBrS,MAAAA,IAAI,EANkB;AAOtBmT,MAAAA,UAAU,EAAEA;AAPU,KAA1B;AASA;;;SAGGoB,cAAP,uBAAqB;AACjB;;;SAGGC,oBAAP,6CAAmE;AAC/D,sCAAkC;AAACnU,MAAAA,IAAI,EAAL;AAAO0D,MAAAA,IAAI,EAAX;AAAa/D,MAAAA,IAAI,EAAJA;AAAb,KAAlC;;;SAGIyU,qBAAR,qCAA+C;AAC3CV,IAAAA,MAAM,yBAANA,OAAM,CAANA;;AACA,QAAI;AACAA,MAAAA,MAAM,CADN,OACM,CAANA,CADA,CAEA;;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,OAAgBA,CAAhB;AACA,iCAA2B;AAAA,eAAcuM,QAAQ,CAARA,cAAAA,CAAd,OAAcA,CAAd;AAA3B;AAJJ,MAKE,YAAY;AACVZ,MAAAA,MAAM,CAANA,GAAM,CAANA;AACAA,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;SAGGa,mBAAR,mCAA6C;AACzCb,IAAAA,MAAM,uBAANA,OAAM,CAANA;AACA,+BAA2B;AAAA,aAAcY,QAAQ,CAARA,YAAAA,CAAd,OAAcA,CAAd;AAA3B;;;SAGIE,sBAAR,sCAAgD;AAC5Cd,IAAAA,MAAM,2BAANA,OAAM,CAANA;AACA,+BAA2B;AAAA,aAAcY,QAAQ,CAARA,eAAAA,CAAd,OAAcA,CAAd;AAA3B;;;SAGIG,oBAAR,oCAA8C;AAC1Cf,IAAAA,MAAM,wBAANA,OAAM,CAANA;AACA,+BAA2B;AAAA,aAAcY,QAAQ,CAARA,aAAAA,CAAd,OAAcA,CAAd;AAA3B;;;SAGII,sBAAR,mCAA6C;AACzChB,IAAAA,MAAM,6BAANA,IAAM,CAANA;;AACA,QAAI;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,IAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAANA,OAAM,CAANA;AACA,iCAA2B;AAAA,eAAcY,QAAQ,CAARA,iBAAAA,CAAd,OAAcA,CAAd;AAA3B;AAHJ,MAIE,YAAY;AACVZ,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;SAGGiB,sBAAR,mCAA6C;AACzCjB,IAAAA,MAAM,2BAANA,IAAM,CAANA;;AACA,QAAI;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,IAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAANA,OAAM,CAANA;AACA,iCAA2B;AAAA,eAAcY,QAAQ,CAARA,gBAAAA,CAAd,OAAcA,CAAd;AAA3B;AAHJ,MAIE,YAAY;AACVZ,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;SAGGkB,oBAAR,iCAA2C;AACvClB,IAAAA,MAAM,wBAANA,IAAM,CAANA;;AACA,QAAI;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,IAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAANA,OAAM,CAANA;AACA,iCAA2B;AAAA,eAAcY,QAAQ,CAARA,iBAAAA,CAAd,OAAcA,CAAd;AAA3B;AAHJ,MAIE,YAAY;AACVZ,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;SAGGmB,2BAAR,wCAAkD;AAC9CnB,IAAAA,MAAM,iCAANA,IAAM,CAANA;;AACA,QAAI;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,IAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAANA,OAAM,CAANA;AACA,iCAA2B;AAAA,eAAcY,QAAQ,CAARA,cAAAA,CAAwBD,OAAO,CAA/BC,IAAAA,EAAsCD,OAAO,CAA7CC,QAAAA,EAAwDD,OAAO,CAA7E,IAAcC,CAAd;AAA3B;AAHJ,MAIE,YAAY;AACVZ,MAAAA,MAAM,CAANA,GAAM,CAANA;AACAA,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;SAGGoB,kBAAR,kCAA4C;AACxCpB,IAAAA,MAAM,sBAANA,OAAM,CAANA;;AACA,QAAI;AACA;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,OAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAANA,OAAM,CAANA;AACA,iCAA2B;AAAA,eAAcY,QAAQ,CAARA,cAAAA,CAAd,OAAcA,CAAd;AAA3B;AAJJ,MAKE,YAAY;AACVZ,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;SAGGqB,mBAAR,gCAA0C;AACtCrB,IAAAA,MAAM,8BAANA,IAAM,CAANA;;AACA,QAAI;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,IAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAFN,OAEM,CAANA,CAFA,CAGA;;AACA,UAAIW,OAAO,CAAPA,OAAAA,IAAoBA,OAAO,CAAPA,OAAAA,CAAAA,MAAAA,GAAxB,GAAqD;AACjD,mCAA2B;AAAA,iBAAcC,QAAQ,CAARA,oBAAAA,CAA8BD,OAAO,CAAnD,OAAcC,CAAd;AAA3B;AACH;;AACD,UAAID,OAAO,CAAPA,QAAAA,IAAqBA,OAAO,CAAPA,QAAAA,CAAAA,MAAAA,GAAzB,GAAuD;AACnD,mCAA2B;AAAA,iBAAcC,QAAQ,CAARA,qBAAAA,CAA+BD,OAAO,CAApD,QAAcC,CAAd;AAA3B;AACH;AATL,MAUE,YAAY;AACVZ,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SACYsB,kBAAR,kCAA4C;AACxCtB,IAAAA,MAAM,CAANA,eAAM,CAANA;;AACA,QAAI;AACA,UAAMW,OAAO,GAAGtM,IAAI,CAAJA,KAAAA,CAAhB,OAAgBA,CAAhB;AACA2L,MAAAA,MAAM,CAANA,OAAM,CAANA;AACA,UAAI,kBAAJ,MAA4B;;AAC5B,UAAIW,OAAO,CAAPA,IAAAA,KAAiB,cAArB,cAAqB,EAArB,EAAqD;AACjDX,QAAAA,MAAM,CAANA,oCAAM,CAANA;AADJ,aAEO;AACHA,QAAAA,MAAM,CAANA,6DAAM,CAANA;AACA;AACH;AATL,MAWE,YAAY;AACVA,MAAAA,MAAM,CAANA,eAAM,CAANA;AACH;;;;;;AAIT;;;;;;;;;;;;;;;;ACzNA;;WAAY9S;AAAAA,EAAAA,SAAAA,kBAAAA,KAAAA,WAAAA;AAAAA,EAAAA,SAAAA,gBAAAA,KAAAA,SAAAA;AAAAA,EAAAA,SAAAA,kBAAAA,KAAAA,WAAAA;GAAAA,aAAAA;;AAMZ;;WAAYxB;AAAAA,EAAAA,WAAAA,sBAAAA,KAAAA,aAAAA;AAAAA,EAAAA,WAAAA,wBAAAA,KAAAA,eAAAA;GAAAA,eAAAA;;;;;;;;;;;;;;;;;;;ACnCZ;AAGA;AAEA;AAEA,IAAM6V,QAAQ,GAAGvf,4CAAK,CAAtB,kBAAsB,CAAtB;AAGA,IAAsBwf,oBAAtB;AAMI,6CAA2C;AAAA,SAJjCC,UAIiC,GAJX,IAIW;AAAA,SAHjCC,WAGiC,GAHX,EAGW;AACvC,oBAAgB,kEAAhB,WAAgB,CAAhB;AACA;AACA;AACA;AACH;;AAXL;;AAAA,0BAaIC,SAAAA,cAAAA,GAAuB;AACnB;AAdR;;AAAA,sBAiBIC,SAAAA,UAAAA,GAAmB;AACf;AAlBR;;AAAA,2CAsBI,2CAAyC;AACrC;AAvBR;;AAAA,uCA0BI,uCAAqC;AACjC;AA3BR;;AAAA,iDA8BIC,SAAAA,qCAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAAA,SAAAA,EAAAA,gBAAAA,EAAsK;AAAA,QAA9FC,SAA8F;AAA9FA,MAAAA,SAA8F,GAAlEC,sEAA5BD;AAA8F;;AAAA,QAArCG,gBAAqC;AAArCA,MAAAA,gBAAqC,GAAN,IAA/BA;AAAqC;;AAClK;AA/BR;;AAAA,oCAmCIC,SAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA4E;AACxE;AApCR;;AAAA,0BAuDI,+CAA+D;AAC3D;AACA;;;AACA,QAAMjH,KAAiB,GAAG;AACtBjM,MAAAA,IAAI,EADkB;AAEtBpK,MAAAA,KAAK,EAAEud;AAFe,KAA1B;AAIA;;AACA;;AACA,sEAAkEJ,sEAAlE;AACA;AAjER;;AAAA,0BAoEIK,SAAAA,cAAAA,CAAAA,IAAAA,EAAkC;AAC9B;;AACAb,IAAAA,QAAQ,uCAARA,IAAQ,CAARA;AACA,QAAIc,aAAa,GAHa,EAG9B,CAH8B,CAI9B;;AACA,QAAMpH,KAAiB,GAAG,eAA1B,IAA0B,CAA1B;;AACAoH,IAAAA,aAAa,GAAGpH,KAAK,CAArBoH,KAAAA;AACAd,IAAAA,QAAQ,8CAARA,IAAQ,CAARA;AACAA,IAAAA,QAAQ,CAARA,aAAQ,CAARA;AACA;AA7ER;;AAAA,0BAgFIe,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,kBAAAA,EAAAA,eAAAA,EAA6F;AAAA,QAAvCjV,eAAuC;AAAvCA,MAAAA,eAAuC,GAAZ,IAA3BA;AAAuC;;AACzF;;AACAkU,IAAAA,QAAQ,uCAARA,IAAQ,CAARA;AACAA,IAAAA,QAAQ,CAHiF,kBAGjF,CAARA,CAHyF,CAIzF;;AACA,QAAMtG,KAAiB,GAAG,eAA1B,IAA0B,CAA1B;;AACAA,IAAAA,KAAK,CAALA,KAAAA,GAAAA,kBAAAA;AACA,QAAI,KAAJ,YAAqB;AACrB,yBAAqB;AACrB;AAzFR;;AAAA,6BA4FIsH,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAA+E;AAAA,QAApCC,WAAoC;AAApCA,MAAAA,WAAoC,GAAb,KAAvBA;AAAoC,MAAE;;;AAC7E;;AACAjB,IAAAA,QAAQ,0CAFmE,IAEnE,CAARA,CAF2E,CAG3E;AACA;AACA;;AACA;;AACA,2DAAuDQ,mEAAvD;AAnGR;;AAAA,2BAsGIU,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAAyF;AAAE;AACvF;;AACA,QAAIxe,MAAM,GAAV;AACA,QAAMgX,KAAK,GAAG,oBAAd,IAAc,CAAd;AACA,QAAMe,UAAU,GAAG,KAAK,CAAL,UAAgB;AAAA,aAAkB0G,uBAAuB,UAAzC,IAAyC,CAAzC;AAAnC,KAAmB,CAAnB;AACAnB,IAAAA,QAAQ,uDAARA,UAAQ,CAARA;AACAA,IAAAA,QAAQ,CAARA,IAAQ,CAARA;;AACA,QAAIvF,UAAU,IAAd,GAAqB;AACjB/X,MAAAA,MAAM,GAAGgX,KAAK,CAAdhX,UAAc,CAAdA;AACH;;AACD;AAhHR;;AAAA,yBAmHI0e,SAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAA2F;AAAE;AACzF;;AACA,QAAI1e,MAAM,GAAV;AACA,QAAMgX,KAAK,GAAG,oBAAd,IAAc,CAAd;AACA,QAAMe,UAAU,GAAG,KAAK,CAAL,UAAgB;AAAA,aAAkB0G,uBAAuB,UAAzC,IAAyC,CAAzC;AAAnC,KAAmB,CAAnB;;AACA,QAAI1G,UAAU,IAAd,GAAqB;AACjB/X,MAAAA,MAAM,GAANA,IAAAA;AACH;;AACD;AA3HR;;AAAA,+BA8HI2e,SAAAA,mBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AACnH;;AACA,QAAI3e,MAAM,GAAV;AACA,QAAI4e,OAAO,GAAG,iCAHqG,uBAGrG,CAAd,CAHmH,CAInH;;AACAtB,IAAAA,QAAQ,CAARA,uCAAQ,CAARA;;AACA,mEANmH,WAMnH,EANmH,CAOnH;;;AACA,8DAA0DQ,qEAA1D;AACA;AAvIR;;AAAA,6BA0IIe,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAqH;AACjH;;AACA,QAAI7e,MAAM,GAAV;AACA,QAAI4e,OAAY,GAAG,iCAAnB,uBAAmB,CAAnB;AACAtB,IAAAA,QAAQ,CAARA,wCAAQ,CAARA;;AACA,iEALiH,WAKjH,EALiH,CAMjH;;;AACA,2DAAuDQ,qEAAvD;AACA;AAlJR;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAIA;AAGA,IAAMgB,SAAS,GAAG/gB,4CAAK,CAAvB,yBAAuB,CAAvB;AAOA,IAAakB,qBAAb;AAAA;;AAII,mCAAsB;AAAA;;AAClB;AACA;;AACA;;AAHkB;AAKrB;;AATL,sCAWI,uBAA4B;AACxB,QAAI,CAAEA,qBAAqB,CAA3B,WAAwC;AACpCA,MAAAA,qBAAqB,CAArBA,SAAAA,GAAkC,IAAlCA,qBAAkC,EAAlCA;AACH;;AACD,WAAOA,qBAAqB,CAA5B;AAfR;;AAAA;;AAAA,2BAkBI,4DAAwG;AAAA,QAA7C8f,OAA6C;AAA7CA,MAAAA,OAA6C,GAAzB,EAApBA;AAA6C;;AACpG,QAAIC,GAAuB,GAAG;AAC1BC,MAAAA,OAAO,EADmB;AAE1BF,MAAAA,OAAO,EAAEA;AAFiB,KAA9B;AAIA;AACA,QAAI,CAAJ,YAAiBpP,YAAY,CAAZA,cAAAA;AACjBmP,IAAAA,SAAS,CAATA,2CAAS,CAATA;AAzBR;;AAAA,sCA4BI,2CAA2D;AAAA;;AACvD,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,mBAAwB9H,KAAK,CAA7B,MAAoCkI,kBAAkB,CAA3D,OAAK,CAAL,EAAsE;AAClEA,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,0BAAAA,CAAAA,KAAAA;AACH;AAHL;AA7BR;;AAAA,qBAoCI,yBAA2C;AAAA;;AACvC,QAAIlI,KAAiB,GAAG;AACpBjM,MAAAA,IAAI,EADgB;AAEpBpK,MAAAA,KAAK,EAAE;AAFa,KAAxB;AAIA,+BAA2B,cAAQ;AAC/B,UAAI,CAAC,MAAI,CAAJ,mBAAwBqW,KAAK,CAA7B,MAAoCmI,EAAE,CAA3C,OAAK,CAAL,EAAsD;AAClDL,QAAAA,SAAS,6CAATA,IAAS,CAATA;AACAA,QAAAA,SAAS,CAACK,EAAE,CAAZL,OAAS,CAATA;;AACAK,QAAAA,EAAE,CAAFA,OAAAA,CAAAA,SAAAA,CAAAA,IAAAA;AACH;AAVkC,KAKvC,EALuC,CAavC;;AACA,QAAI,4BAAJ,GAAmC;AAC/BnI,MAAAA,KAAK,GAAG,wCAARA,IAAQ,CAARA;AACH;;AACD;AArDR;;AAAA,+BAwDI,mCAA+C;AAAA;;AAC3C,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,yBAA8BkI,kBAAkB,CAArD,OAAK,CAAL,EAAgE;AAC5DA,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,mBAAAA,CAAAA,IAAAA;AACH;AAHL;AAzDR;;AAAA,uCAgEI,4CAA4D;AAAA;;AACxD,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,mBAAwBlI,KAAK,CAA7B,MAAoCkI,kBAAkB,CAA3D,OAAK,CAAL,EAAsE;AAClEA,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,2BAAAA,CAAAA,KAAAA;AACH;AAHL;AAjER;;AAAA,sBAwEI,oCAAqD;AAAA;;AACjD,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,yBAA8BA,kBAAkB,CAArD,OAAK,CAAL,EAAgE;AAC5DJ,QAAAA,SAAS,8CAATA,IAAS,CAATA;AACAA,QAAAA,SAAS,CAACI,kBAAkB,CAA5BJ,OAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,QAAS,CAATA;;AACAI,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA;AACH;AANL;AAzER;;AAAA,2BAmFIE,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,WAAAA,EAAiF;AAAA;;AAAA,QAApCb,WAAoC;AAApCA,MAAAA,WAAoC,GAAb,KAAvBA;AAAoC;;AAC7E,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,yBAA8BW,kBAAkB,CAArD,OAAK,CAAL,EAAgE;AAC5DJ,QAAAA,SAAS,oFAATA,WAAS,CAATA;AACAA,QAAAA,SAAS,CAACI,kBAAkB,CAA5BJ,OAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,QAAS,CAATA;;AACAI,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,WAAAA;AACH;AANL;AApFR;;AAAA,gCA8FIG,SAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAyH;AAAA;;AACrH,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,yBAA8BH,kBAAkB,CAArD,OAAK,CAAL,EAAgE;AAC5DJ,QAAAA,SAAS,0DAATA,IAAS,CAATA;AACAA,QAAAA,SAAS,CAACI,kBAAkB,CAA5BJ,OAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,QAAS,CAATA;;AACAI,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA;AACH;AANL;AA/FR;;AAAA,8BAyGII,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AAAA;;AACnH,+BAA2B,8BAAwB;AAC/C,UAAI,CAAC,MAAI,CAAJ,yBAA8BJ,kBAAkB,CAArD,OAAK,CAAL,EAAgE;AAC5DJ,QAAAA,SAAS,yDAATA,IAAS,CAATA;AACAA,QAAAA,SAAS,CAACI,kBAAkB,CAA5BJ,OAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,QAAS,CAATA;;AACAI,QAAAA,kBAAkB,CAAlBA,OAAAA,CAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA;AACH;AANL;AA1GR;;AAAA,8BAoHI,2CAAqE;AACjE,QAAInH,UAAU,GAAG,OAAO,CAAP,UAAkB;AAAA,aAAYwH,MAAM,KAAlB;AAAnC,KAAiB,CAAjB;AACA,WAAQxH,UAAU,IAAlB;AAtHR;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAEA;AAGA,IAAMyH,WAAW,GAAGzhB,4CAAK,CAAzB,qBAAyB,CAAzB;;IAEqB0hB;;;AAIjB,2DAA0F;AAAA;;AACtF;AACA;AACA;AACA;;AAEA;;AACA,QAAIC,mBAAmB,GAAG,gBAA1B,uBAA0B,EAA1B;;AAEA,yBAAoB,+CAApB,KAAoB,EAApB;AACA,kCAA6B,wDAA7B,KAA6B,EAA7B;AACA,oCAA+B,0DAA/B,KAA+B,EAA/B;AACA,oCAA+B,0DAA/B,KAA+B,EAA/B;AAGAA,IAAAA,mBAAmB,CAAnBA,OAAAA,CAA4B,qBAAe;AACvC;AADJA,KAAAA;AAfsF;AAkBzF;;;;SAEDN,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,WAAAA,EAAiF;AAAA,QAApCb,WAAoC;AAApCA,MAAAA,WAAoC,GAAb,KAAvBA;AAAoC;;AAC7EiB,IAAAA,WAAW,uDAAXA,WAAW,CAAXA;AACA;;;SAIJG,YAAAA,SAAAA,SAAAA,CAAAA,IAAAA,EAAoC;AAChC;AACA;AACAH,IAAAA,WAAW,oBAAXA,IAAW,CAAXA;AACA;AACA,WAAO;AAACzU,MAAAA,IAAI,EAAL;AAAapK,MAAAA,KAAK,EAAE;AAApB,KAAP;;;SAIJ0e,uBAAAA,SAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAyH;AACrHG,IAAAA,WAAW,+BAAXA,IAAW,CAAXA;AACA;;;SAGJF,qBAAAA,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AACnHE,IAAAA,WAAW,6BAAXA,IAAW,CAAXA;AACA;;;SAGJI,sBAAAA,SAAAA,mBAAAA,CAAAA,IAAAA,EAAwC,GACvC;;;SACDC,6BAAAA,SAAAA,0BAAAA,CAAAA,KAAAA,EAAoD,GAClD;;;SACFC,8BAAAA,SAAAA,2BAAAA,CAAAA,KAAAA,EAAqD,GACnD;;;SACFC,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA8C,GAC5C;;;SACF1f,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAmF,GACjF;;;SACFC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EAAsG,GACpG;;;SAGFC,eAAAA,SAAAA,YAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,QAAAA,EAAqE;AACjE;AACA;AACAif,IAAAA,WAAW,+CAAXA,0BAAW,CAAXA;AACAA,IAAAA,WAAW,CAAXA,QAAW,CAAXA;AACA;;;SAGJpf,wBAAAA,SAAAA,qBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA+E;AAC3Eof,IAAAA,WAAW,kEAAXA,0BAAW,CAAXA;AACA;;;;EAzE8CjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXtD;AAEA;AAKA,IAAMyC,QAAQ,GAAGjiB,4CAAK,CAAtB,eAAsB,CAAtB;;IAEqBkiB;qEAGjB;;;AAGA,uDAAqD;AAAA;;AAAA,QAAlCE,eAAkC;AAAlCA,MAAAA,eAAkC,GAAP,KAA3BA;AAAkC;;AACjD;AADiD,UAF7CD,aAE6C,GAFnB,EAEmB;AAEjD,oBAAerd,MAAM,CAArB;AACA,yBAAqB,gBAAeA,MAAM,CAArB;AACrB;AAJiD;AAKpD;;6BAEa3E,cAAd,sCAA4D;AAAA,QAAlCiiB,eAAkC;AAAlCA,MAAAA,eAAkC,GAAP,KAA3BA;AAAkC;;AACxD,QAAI,CAAEF,0BAA0B,CAAhC,WAA6C;AACzCA,MAAAA,0BAA0B,CAA1BA,SAAAA,GAAuC,+BAAvCA,eAAuC,CAAvCA;AACH;;AACD,WAAOA,0BAA0B,CAAjC;;;;;SAGGL,sBAAP,mCAA+C;AAC3C,QAAI,+BAAJ,MAAyC;AACrC,sCAAgC;AAAC7U,QAAAA,IAAI,EAAL;AAAapK,QAAAA,KAAK,EAAE;AAApB,OAAhC;AACH;;;SAGEkf,6BAAP,2CAA2D;AACvDG,IAAAA,QAAQ,qCAAmChJ,KAAK,CAAhDgJ,IAAQ,CAARA;AACAA,IAAAA,QAAQ,CAARA,KAAQ,CAARA;AACA,QAAMI,mBAA2B,GAAGhQ,IAAI,CAAJA,SAAAA,CAAe4G,KAAK,CAAxD,KAAoC5G,CAApC;AACA4P,IAAAA,QAAQ,CAARA,mBAAQ,CAARA;AACA,yBAAqBhJ,KAAK,CAA1B;;;SAIG8I,8BAAP,4CAA4D;AACxD;;;SAGGH,YAAP,yBAA2C;AACvC,QAAIU,YAAY,GAAhB;AACAL,IAAAA,QAAQ,sCAARA,IAAQ,CAARA;AACA,QAAMM,gBAAgB,GAAG,qBAAzB,IAAyB,CAAzB;AACAN,IAAAA,QAAQ,CAARA,gBAAQ,CAARA;;AACA,QAAIM,gBAAgB,KAApB,MAA+B;AAC3BD,MAAAA,YAAY,GAAGjQ,IAAI,CAAJA,KAAAA,CAAfiQ,gBAAejQ,CAAfiQ;AACH;;AACD,WAAO;AAACtV,MAAAA,IAAI,EAAL;AAAapK,MAAAA,KAAK,EAAE0f;AAApB,KAAP;;;SAGGN,aAAP,oCAAqD;AACjD,oCAAgC;AAAChV,MAAAA,IAAI,EAAL;AAAapK,MAAAA,KAAK,EAAEgR;AAApB,KAAhC;;;SAGJyN,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,WAAAA,EAAiF;AAAA,QAApCb,WAAoC;AAApCA,MAAAA,WAAoC,GAAb,KAAvBA;AAAoC;;AAC7E,QAAI,CAAJ,aAAkB;;AAElB,QAAIvH,KAAiB,GAAG,eAAxB,IAAwB,CAAxB;;AACAgJ,IAAAA,QAAQ,2BAARA,IAAQ,CAARA;AACAA,IAAAA,QAAQ,CAARA,QAAQ,CAARA;AACAhJ,IAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,QAAAA;;AACA;;;SAGJqI,uBAAAA,SAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAyH;AACrH,QAAIrI,KAAiB,GAAG,eAAxB,IAAwB,CAAxB;;AACA,QAAMuJ,UAAU,GAAG,KAAK,CAAL,gBAAsB;AAAA,aAAkB9B,uBAAuB,UAAzC,QAAyC,CAAzC;AAAzC,KAAmB,CAAnB;;AACA,QAAI8B,UAAU,IAAd,GAAqB;AACjBP,MAAAA,QAAQ,+BAARA,IAAQ,CAARA;AACAA,MAAAA,QAAQ,CAARA,QAAQ,CAARA;AACAhJ,MAAAA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,CAAAA;AACH;;AACD;;;SAGJsI,qBAAAA,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AACnH,QAAItI,KAAiB,GAAG,eAAxB,IAAwB,CAAxB;;AACA,QAAMuJ,UAAU,GAAG,KAAK,CAAL,gBAAsB;AAAA,aAAkB9B,uBAAuB,UAAzC,QAAyC,CAAzC;AAAzC,KAAmB,CAAnB;;AACA,QAAI8B,UAAU,IAAd,GAAqB;AACjBvJ,MAAAA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,CAAAA,EAAAA,QAAAA;AACAgJ,MAAAA,QAAQ,6BAARA,IAAQ,CAARA;AACAA,MAAAA,QAAQ,CAARA,QAAQ,CAARA;AACH;;AACD;;;SAGJQ,mBAAAA,SAAAA,gBAAAA,CAAAA,SAAAA,EAA0C;;SAG1CC,0BAAAA,SAAAA,uBAAAA,GAAoC;AAChC,WAAO,KAAP;;;SAGJC,kBAAAA,SAAAA,eAAAA,CAAAA,SAAAA,EAA4C;AACxC;;;SAGGrhB,aAAP,4BAAoC;AAChC;;;;EAlGgDke;;;;;;;;;;;;;;;;;;;;;;;ACTxD;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;;AAGA,IAAMoD,aAAa,GAAG5iB,4CAAK,CAA3B,uBAA2B,CAA3B;AAsBA,IAAa6iB,sBAAb;AAKI,oCAAqB;AAAA,SAJXV,aAIW,GAJiB,EAIjB;AACjB,oBAAgB,kEAAhB,SAAgB,CAAhB;AACA;AACA;AAGA,8BAA0B,6BAA1B,IAA0B,CAA1B;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,iCAA6B,gCAA7B,IAA6B,CAA7B;AACA,+BAA2B,8BAA3B,IAA2B,CAA3B;AACH;;AAfL;;AAAA,mCAiBIO,SAAAA,uBAAAA,GAAoC;AAChC,QAAII,OAAiB,GAArB;AACA,+BAA2B,kBAAY;AACnCA,MAAAA,OAAO,CAAPA,IAAAA,CAAaC,MAAM,CAAnBD,SAAAA;AADJ;AAGA;AAtBR;;AAAA,2BAyBIH,SAAAA,eAAAA,CAAAA,SAAAA,EAA4C;AACxC,QAAI1gB,MAAM,GAAV;AACA,QAAI+X,UAAU,GAAG,6BAA6B;AAAA,aAAY+I,MAAM,CAANA,SAAAA,KAAZ;AAA9C,KAAiB,CAAjB;;AACA,QAAI/I,UAAU,IAAd,GAAqB;AACjB/X,MAAAA,MAAM,GAAG,sBAATA,UAAS,CAATA;AACH;;AACD;AA/BR;;AAAA,2BAkCI+gB,SAAAA,eAAAA,CAAAA,SAAAA,EAAyC;AACrC,QAAIhJ,UAAU,GAAG,6BAA6B;AAAA,aAAY+I,MAAM,CAANA,SAAAA,KAAZ;AAA9C,KAAiB,CAAjB;;AACA,QAAI/I,UAAU,IAAd,GAAqB;AACjB;AACH;AAtCT;;AAAA,4BAyCIyI,SAAAA,gBAAAA,CAAAA,SAAAA,EAA0C;AACtC,QAAIzI,UAAU,GAAG,6BAA6B;AAAA,aAAY+I,MAAM,CAANA,SAAAA,KAAZ;AAA9C,KAAiB,CAAjB;;AACA,QAAI/I,UAAU,IAAd,GAAqB;AACjB;AACH;AA7CT;;AAAA,sBAgDI,4BAAsC;AAClC;AACA,QAAIiJ,YAAuB,GAA3B;AACA,+BAA2B,sBAAgB;AACvCA,MAAAA,YAAY,CAAZA,IAAAA,CAAAA,KAAAA;AADJ;AAGA;AAtDR;;AAAA,sCAyDInB,SAAAA,0BAAAA,CAAAA,KAAAA,EAAoD;AAAE;AAzD1D;;AAAA,qBA4DIF,SAAAA,SAAAA,CAAAA,IAAAA,EAAoC;AAChCgB,IAAAA,aAAa,kBAAbA,IAAa,CAAbA;;AACA,QAAI,qBAAJ,IAAI,CAAJ,EAAgC;AAC5BA,MAAAA,aAAa,yBAAbA,oCAAa,CAAbA;AADJ,WAEO;AACH,UAAIG,MAAgB,GAAG,kCAAvB,IAAuB,CAAvB;;AACA,UAAIA,MAAM,CAAV,UAAqB;AACjB,YAAI5T,KAAK,GAAG4T,MAAM,CAANA,IAAAA,CAAZ;AACA,YAAMG,WAAwB,GAAG;AAC7BtK,UAAAA,GAAG,EAAEmK,MAAM,CADkB;AAE7B9Y,UAAAA,IAAI,EAAE4O,4DAFuB;AAG7BC,UAAAA,MAAM,EAAE;AAAC3J,YAAAA,KAAK,EAALA;AAAD,WAHqB;AAI7BgJ,UAAAA,QAAQ,EAAE,KAJmB;AAK7Ba,UAAAA,mBAAmB,EAAEhM;AALQ,SAAjC;AAOA4V,QAAAA,aAAa,oDAAbA,IAAa,CAAbA;AACAxT,QAAAA,4EAAAA,GAAAA,aAAAA,CAAAA,WAAAA,EAAAA,IAAAA;AAVJ,aAYO;AACHwT,QAAAA,aAAa,iCAAbA,IAAa,CAAbA;AACH;AACJ;;AACD,QAAI3J,KAAiB,GAAG;AAACjM,MAAAA,IAAI,EAAL;AAAapK,MAAAA,KAAK,EAAE;AAApB,KAAxB;AACA;AAnFR;;AAAA,+BAsFIif,SAAAA,mBAAAA,CAAAA,IAAAA,EAAwC;AAAE;AAtF9C;;AAAA,uCAyFIE,SAAAA,2BAAAA,CAAAA,KAAAA,EAAqD;AAAE;AAzF3D;;AAAA,sBA4FIC,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA8C;AAAE;AA5FpD;;AAAA,2BA+FIX,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,WAAAA,EAAiF;AAAA,QAApCb,WAAoC;AAApCA,MAAAA,WAAoC,GAAb,KAAvBA;AAAoC;;AAC7E,qBAD6E,QACpD;;AACzBoC,IAAAA,aAAa,qBAAbA,IAAa,CAAbA;AACAA,IAAAA,aAAa,CAAbA,QAAa,CAAbA;AACA,QAAIG,MAAgB,GAAG,kCAAvB,IAAuB,CAAvB;;AACA,QAAIA,MAAM,CAAV,UAAqB;AACjB,UAAI5J,QAAa,GAAjB;AACAA,MAAAA,QAAQ,CAAC4J,MAAM,CAANA,IAAAA,CAAT5J,MAAQ,CAARA,GAAAA,EAAAA;AAEA,UAAM+J,WAAwB,GAAG;AAC7BtK,QAAAA,GAAG,EAAEmK,MAAM,CADkB;AAE7B9Y,QAAAA,IAAI,EAAE4O,4DAFuB;AAG7BC,QAAAA,MAAM,EAAE;AAACK,UAAAA,QAAQ,EAARA;AAAD,SAHqB;AAI7BhB,QAAAA,QAAQ,EAAE,KAJmB;AAK7Ba,QAAAA,mBAAmB,EAAEhM;AALQ,OAAjC;AAOAoC,MAAAA,4EAAAA,GAAAA,aAAAA,CAAAA,WAAAA,EAAAA,IAAAA;AAXJ,WAaO;AACHwT,MAAAA,aAAa,iCAAbA,IAAa,CAAbA;AACH;AAnHT;;AAAA,gCAsHItB,SAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAyH;AACrH,qBADqH,QAC5F;;AACzBsB,IAAAA,aAAa,uBAAbA,IAAa,CAAbA;AACAA,IAAAA,aAAa,CAAbA,QAAa,CAAbA;AACA,QAAIG,MAAgB,GAAG,kCAAvB,IAAuB,CAAvB;;AACA,QAAIA,MAAM,CAAV,UAAqB;AACjB,UAAI5J,QAAa,GAAjB;AACAA,MAAAA,QAAQ,CAAC4J,MAAM,CAANA,IAAAA,CAAT5J,OAAQ,CAARA,GAAAA,EAAAA;AAEA,UAAM+J,WAAwB,GAAG;AAC7BtK,QAAAA,GAAG,EAAEmK,MAAM,CADkB;AAE7B9Y,QAAAA,IAAI,EAAE4O,4DAFuB;AAG7BC,QAAAA,MAAM,EAAE;AAACK,UAAAA,QAAQ,EAARA;AAAD,SAHqB;AAI7BhB,QAAAA,QAAQ,EAAE,KAJmB;AAK7Ba,QAAAA,mBAAmB,EAAEhM;AALQ,OAAjC;AAOAoC,MAAAA,4EAAAA,GAAAA,aAAAA,CAAAA,WAAAA,EAAAA,IAAAA;AAXJ,WAaO;AACHwT,MAAAA,aAAa,iCAAbA,IAAa,CAAbA;AACH;AA1IT;;AAAA,8BA6IIrB,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AACnH,qBADmH,QAC1F;;AACzBqB,IAAAA,aAAa,uBAAbA,IAAa,CAAbA;AACAA,IAAAA,aAAa,CAAbA,QAAa,CAAbA;AACA,QAAIG,MAAgB,GAAG,kCAAvB,IAAuB,CAAvB;;AACA,QAAIA,MAAM,CAAV,UAAqB;AACjB,UAAI5J,QAAa,GAAjB;AACAA,MAAAA,QAAQ,CAAC4J,MAAM,CAANA,IAAAA,CAAT5J,OAAQ,CAARA,GAAAA,EAAAA;AAEA,UAAM+J,WAAwB,GAAG;AAC7BtK,QAAAA,GAAG,EAAEmK,MAAM,CADkB;AAE7B9Y,QAAAA,IAAI,EAAE4O,4DAFuB;AAG7BC,QAAAA,MAAM,EAAE;AAACK,UAAAA,QAAQ,EAARA;AAAD,SAHqB;AAI7BhB,QAAAA,QAAQ,EAAE,KAJmB;AAK7Ba,QAAAA,mBAAmB,EAAEhM;AALQ,OAAjC;AAOAoC,MAAAA,4EAAAA,GAAAA,aAAAA,CAAAA,WAAAA,EAAAA,IAAAA;AAXJ,WAaO;AACHwT,MAAAA,aAAa,iCAAbA,IAAa,CAAbA;AACH;AAjKT;;AAAA,oCAoKI1C,SAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA4E;AACxE;AArKR;;AAAA,6BAwKIK,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAuE;AACnE;AAzKR;;AAAA,sBA4KIX,SAAAA,UAAAA,GAAmB;AACf;AA7KR;;AAAA,2BAgLIa,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAAyF;AACrF,UAAM0C,KAAK,CAAX,iBAAW,CAAX;AAjLR;;AAAA,0BAoLI/C,SAAAA,cAAAA,CAAAA,IAAAA,EAAkC;AAC9B;AArLR;;AAAA,iDAwLIP,SAAAA,qCAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAAA,SAAAA,EAAAA,gBAAAA,EAAgI;AAC5H;AAzLR;;AAAA,yBA4LIc,SAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAA2F;AACvF;AA7LR;;AAAA,+BAgMIC,SAAAA,mBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AACnH;;AACA;AAlMR;;AAAA,0BAqMIN,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,kBAAAA,EAAAA,eAAAA,EAAsF,CArM1F;;AAAA,0BAwMIX,SAAAA,cAAAA,GAAuB;AACnB;AAzMR;;AAAA,6BA4MImB,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAqH;AACjH;;AACA;AA9MR;;AAAA,wCAiNI,4CAAqD;AACjD,QAAIiC,MAAgB,GAAG;AACnBxiB,MAAAA,SAAS,EADU;AAEnBC,MAAAA,MAAM,EAFa;AAGnBC,MAAAA,IAAI,EAAE;AACFK,QAAAA,OAAO,EADL;AAEFH,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFH,QAAAA,IAAI,EAAE;AALJ,OAHa;AAUnBK,MAAAA,IAAI,EAAE;AACFD,QAAAA,OAAO,EADL;AAEFH,QAAAA,MAAM,EAFJ;AAGFC,QAAAA,OAAO,EAHL;AAIFC,QAAAA,MAAM,EAJJ;AAKFH,QAAAA,IAAI,EAAE;AALJ,OAVa;AAiBnBM,MAAAA,QAAQ,EAAE;AAjBS,KAAvB;AAmBA,QAAIgZ,UAAU,GAAG,6BAA6B;AAAA,aAAY+I,MAAM,CAANA,SAAAA,KAAZ;AAA9C,KAAiB,CAAjB;;AACA,QAAI/I,UAAU,IAAd,GAAqB;AACjB+I,MAAAA,MAAM,GAAG,mBAATA,UAAS,CAATA;AACH;;AACD;AAzOR;;AAAA,iCA4OI,kEAAsF;AAClFH,IAAAA,aAAa,0FAAbA,kBAAa,CAAbA;;AACA,QAAI3f,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClC2f,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACH;AAhPT;;AAAA,iCAmPI,kEAAsF;AAClFA,IAAAA,aAAa,0FAAbA,kBAAa,CAAbA;;AACA,QAAI3f,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClC2f,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACH;AAvPT;;AAAA,+BA0PI,gEAAoF;AAChFA,IAAAA,aAAa,wFAAbA,eAAa,CAAbA;;AACA,QAAI3f,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClC2f,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACA,UAAIG,MAAgB,GAAG,kCAAvB,mBAAuB,CAAvB;AACA,UAAIK,aAAa,GAAGL,MAAM,CAANA,IAAAA,CAApB;AACA;AACA,+EAAyEhiB,IAAI,CAAJA,IAAAA,CAAzE,aAAyEA,CAAzE,EAAmGgf,sEAAnG;AACH;AAlQT;;AAAA,8BAqQI,+DAAmF;AAC/E6C,IAAAA,aAAa,uFAAbA,eAAa,CAAbA;;AACA,QAAI3f,MAAM,IAANA,GAAAA,IAAiBA,MAAM,IAA3B,KAAoC;AAAE;AAClC2f,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACA,qFAA+E7C,mEAA/E;AACH;AA1QT;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AAIA,IAAMsD,SAAS,GAAGrjB,4CAAK,CAAvB,kBAAuB,CAAvB;AAEA;;IACMoB;;;AAIF,sCAAqB;AAAA;;AACjB;AACA;AACA;AAHiB;AAIpB;;2BAEajB,cAAd,uBAA4B;AACxB,QAAI,CAAEiB,wBAAwB,CAA9B,WAA2C;AACvCA,MAAAA,wBAAwB,CAAxBA,SAAAA,GAAqC,IAArCA,wBAAqC,EAArCA;AACH;;AACD,WAAOA,wBAAwB,CAA/B;;;;;SAGGygB,sBAAP,mCAAyC;AACrC,QAAI7H,UAAU,GAAG,gCAAgC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAAxD,KAAiB,CAAjB;;AACA,QAAID,UAAU,GAAd,GAAoB;AAChB,UAAIf,KAAiB,GAAG;AACpBjM,QAAAA,IAAI,EADgB;AAEpBpK,QAAAA,KAAK,EAAE;AAFa,OAAxB;AAIA;AACH;;;SAGEkf,6BAAP,2CAA2D;AACvDuB,IAAAA,SAAS,gCAATA,IAAS,CAATA;AACAA,IAAAA,SAAS,CAACpK,KAAK,CAAfoK,KAAS,CAATA;AACA;;;SAGGtB,8BAAP,4CAA4D;AACxD,QAAI/H,UAAkB,GAAG,gCAAgC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAiBhB,KAAK,CAA1B;AAAhE,KAAyB,CAAzB;;AACA,QAAIe,UAAU,IAAd,GAAqB;AACjBqJ,MAAAA,SAAS,+BAATA,IAAS,CAATA;AACAA,MAAAA,SAAS,CAACpK,KAAK,CAAfoK,KAAS,CAATA;AACA;AACH;;;SAGEzB,YAAP,yBAA2C;AACvC;AACA,QAAI3I,KAAiB,GAAG,2BAA2B,mBAAO;AAAA,aAAIgB,OAAO,CAAPA,IAAAA,KAAJ;AAA1D,KAAwB,CAAxB;AACAoJ,IAAAA,SAAS,6BAATA,IAAS,CAATA;AACAA,IAAAA,SAAS,CAACpK,KAAK,CAAfoK,KAAS,CAATA;AACA;;;SAGGrB,aAAP,uCAAwD;AACpD,QAAIhI,UAAkB,GAAG,gCAAgC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAAhE,KAAyB,CAAzB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB,UAAIf,KAAiB,GAAG,sBAAxB,UAAwB,CAAxB;AACAoK,MAAAA,SAAS,4BAATA,IAAS,CAATA;AACAA,MAAAA,SAAS,CAACpK,KAAK,CAAfoK,KAAS,CAATA;AACApK,MAAAA,KAAK,CAALA,KAAAA,GAAAA,WAAAA;AACH;;;SAGLoI,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,WAAAA,EAAiF;AAAA,QAApCb,WAAoC;AAApCA,MAAAA,WAAoC,GAAb,KAAvBA;AAAoC;;AAC7E,QAAI,CAAJ,aAD6E,QACnD;;AAC1B,QAAIxG,UAAkB,GAAG,gCAAgC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAAhE,KAAyB,CAAzB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB,UAAIf,KAAiB,GAAG,sBAAxB,UAAwB,CAAxB;AACAoK,MAAAA,SAAS,2BAATA,IAAS,CAATA;AACAA,MAAAA,SAAS,CAATA,QAAS,CAATA;AACApK,MAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,QAAAA;AACH;;;SAGLqI,uBAAAA,SAAAA,oBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAyH;AACrH,QAAItH,UAAkB,GAAG,gCAAgC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAAhE,KAAyB,CAAzB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB,UAAIf,KAAiB,GAAG,sBAAxB,UAAwB,CAAxB;AACA,UAAMuJ,UAAU,GAAG,KAAK,CAAL,gBAAsB;AAAA,eAAkB9B,uBAAuB,UAAzC,QAAyC,CAAzC;AAAzC,OAAmB,CAAnB;;AACA,UAAI8B,UAAU,IAAd,GAAqB;AACjBa,QAAAA,SAAS,+BAATA,IAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,QAAS,CAATA;AACApK,QAAAA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,CAAAA;AACH;AACJ;;;SAGLsI,qBAAAA,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,uBAAAA,EAAAA,WAAAA,EAAuH;AACnH,QAAIvH,UAAkB,GAAG,gCAAgC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAAhE,KAAyB,CAAzB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB,UAAIf,KAAiB,GAAG,sBAAxB,UAAwB,CAAxB;AACA,UAAMuJ,UAAU,GAAG,KAAK,CAAL,gBAAsB;AAAA,eAAkB9B,uBAAuB,UAAzC,QAAyC,CAAzC;AAAzC,OAAmB,CAAnB;;AACA,UAAI8B,UAAU,IAAd,GAAqB;AACjBvJ,QAAAA,KAAK,CAALA,KAAAA,CAAAA,MAAAA,CAAAA,UAAAA,EAAAA,CAAAA,EAAAA,QAAAA;AACAoK,QAAAA,SAAS,6BAATA,IAAS,CAATA;AACAA,QAAAA,SAAS,CAATA,QAAS,CAATA;AACH;AAPL,WAQO;AACH;AACH;;;;EAjG8B7D;;AAsGvC;;;;;;;;;;;;;;;;;;AC7GA;AAEA;AAEA,IAAMD,QAAQ,GAAGvf,4CAAK,CAAtB,wBAAsB,CAAtB;;IAEMsjB;AAKF,6CAAwC;AAAA,SAH9BC,kBAG8B,GAHA,KAGA;AACpC;AACA;AACH;;;;SAEM5D,iBAAP,0BAAwB;AACpB;;;SAGGC,aAAP,sBAAoB;AAChB;;;SAGJC,wCAAAA,SAAAA,qCAAAA,CAAAA,IAAAA,EAAAA,aAAAA,EAAAA,SAAAA,EAAAA,gBAAAA,EAAsK;AAAA,QAA9FC,SAA8F;AAA9FA,MAAAA,SAA8F,GAAlEC,sEAA5BD;AAA8F;;AAAA,QAArCG,gBAAqC;AAArCA,MAAAA,gBAAqC,GAAN,IAA/BA;AAAqC;;AAClKV,IAAAA,QAAQ,kDAARA,IAAQ,CAARA;;AACA,QAAI,KAAJ,oBAA6B;AACzBA,MAAAA,QAAQ,CAARA,kCAAQ,CAARA;AACA;AACH;;AACD,QAAMvF,UAAU,GAAG,oCAAoC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAA9D,KAAmB,CAAnB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjBuF,MAAAA,QAAQ,2EAARA,SAAQ,CAARA;AACA;;AACA,UAAMiE,sBAAsB,GAAG,0BAA/B,UAA+B,CAA/B;;AACA,WAAK,IAAI7gB,KAAK,GAAd,GAAoBA,KAAK,GAAG6gB,sBAAsB,CAAtBA,SAAAA,CAA5B,QAAqE7gB,KAArE,IAA8E;AAC1E4c,QAAAA,QAAQ,oDAARA,cAAQ,CAARA;AACA,YAAMtD,QAAQ,GAAGuH,sBAAsB,CAAtBA,SAAAA,CAAjB,KAAiBA,CAAjB;;AACA;AACI,eAAMzD,sEAAN;AAAoC;AAChC9D,cAAAA,QAAQ,CAARA,YAAAA,CAAsB,KAAtBA,WAAAA,EAAAA,IAAAA,EAAAA,aAAAA;AACA;AACH;;AACD,eAAM8D,mEAAN;AAAiC;AAC7B9D,cAAAA,QAAQ,CAARA,qBAAAA,CAA+B,KAA/BA,WAAAA,EAAAA,IAAAA,EAAAA,aAAAA;AACA;AACH;;AACD,eAAM8D,qEAAN;AAAmC;AAC/B9D,cAAAA,QAAQ,CAARA,uBAAAA,CAAiC,KAAjCA,WAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,EAAAA,aAAAA;AACA;AACH;;AACD,eAAM8D,qEAAN;AAAmC;AAC/B9D,cAAAA,QAAQ,CAARA,uBAAAA,CAAiC,KAAjCA,WAAAA,EAAAA,IAAAA,EAAAA,aAAAA;AACA;AACH;AAhBL;AAmBH;AACJ;AACJ;AAED;AACJ;AACA;AACA;AACA;AACA;;;SACIiE,2BAAAA,SAAAA,wBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA4E;AACxE;AACAX,IAAAA,QAAQ,+CAARA,IAAQ,CAARA;AACA,QAAMvF,UAAU,GAAG,oCAAoC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAA9D,KAAmB,CAAnB;;AACA,QAAID,UAAU,IAAd,GAAqB;AACjB,UAAIwJ,sBAAsB,GAAG,0BAA7B,UAA6B,CAA7B;AACAA,MAAAA,sBAAsB,CAAtBA,SAAAA,CAAAA,IAAAA,CAAAA,QAAAA;AACH;;;SAGGC,6BAAR,0CAAiD;AAC7C,QAAMzJ,UAAU,GAAG,oCAAoC,mBAAO;AAAA,aAAIC,OAAO,CAAPA,IAAAA,KAAJ;AAA9D,KAAmB,CAAnB;;AACA,QAAID,UAAU,GAAd,GAAoB;AAChB,UAAM0J,sBAAsB,GAAG;AAC3B1W,QAAAA,IAAI,EADuB;AAE3B2W,QAAAA,SAAS,EAAE;AAFgB,OAA/B;AAIA;AACH;;;;;;AAKT;;;;;;;;;;;;;;;ACpFA;;WAAY5D;AAAAA,EAAAA,eAAAA,2BAAAA,KAAAA,cAAAA;AAAAA,EAAAA,eAAAA,6BAAAA,KAAAA,gBAAAA;AAAAA,EAAAA,eAAAA,6BAAAA,KAAAA,gBAAAA;AAAAA,EAAAA,eAAAA,8BAAAA,KAAAA,iBAAAA;GAAAA,mBAAAA;;;;;;;;;;;;;;;;;;;ACPZ;AAEA;AAEA,IAAM6D,cAAc,GAAG5jB,4CAAK,CAA5B,kBAA4B,CAA5B;AAEA,IAAayK,eAAb;AAGI,6BAAsB,CACrB;;AAJL,gCAMI,uBAA6C;AACzC,QAAI,CAAEA,eAAe,CAArB,WAAkC;AAC9BA,MAAAA,eAAe,CAAfA,SAAAA,GAA4B,IAA5BA,eAA4B,EAA5BA;AACH;;AACD,WAAOA,eAAe,CAAtB;AAVR;;AAAA;;AAAA,iCAaI,0CAAyD;AACrD,QAAI5H,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7B,aAAO,KAAP,kBAAO,EAAP;AACH;;AACD,QAAIA,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7B,aAAO,KAAP,oBAAO,EAAP;AACH;;AACD,WAAO,kCAAP,SAAO,CAAP;AApBR;;AAAA,qCAuBI,8CAA+D;AAC3D,QAAIA,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7B,aAAO,KAAP,sBAAO,EAAP;AACH;;AACD,QAAIA,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7B,aAAO,KAAP,wBAAO,EAAP;AACH;;AACD,WAAO,sCAAP,SAAO,CAAP;AA9BR;;AAAA,uBAiCI,4CAAgE;AAC5D,QAAIA,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7B,aAAO,wBAAP,UAAO,CAAP;AACH;;AACD,QAAIA,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7B,aAAO,0BAAP,UAAO,CAAP;AACH;;AACD,WAAO,wBAAP,UAAO,CAAP;AAxCR;;AAAA,wCA2CI,6DAAqF;AACjF,QAAIZ,MAAM,GAAV;;AACA,QAAIY,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7BZ,MAAAA,MAAM,GAANA,IAAAA;AACA;AACH;;AACD,QAAIY,SAAS,CAATA,MAAAA,KAAJ,QAAiC;AAC7BZ,MAAAA,MAAM,GAANA,IAAAA;AACA;AACH;;AACD,WAViF,MAUjF,CAViF,CAUlE;AArDvB;;AAAA,8BAwDI,8BAAkC;AAC9B,QAAI4hB,QAAQ,GAAG;AACXC,MAAAA,UAAU,EADC;AAEXC,MAAAA,UAAU,EAFC;AAGXC,MAAAA,UAAU,EAHC;AAIXC,MAAAA,kBAAkB,EAJP;AAKXC,MAAAA,eAAe,EALJ;AAMXC,MAAAA,aAAa,EANF;AAOXC,MAAAA,KAPW,8BAOwB;AAC/B,YAAKC,MAAM,KAAP,CAACA,IAAkBA,MAAM,KAAzB,CAACA,IAAoCrO,GAAG,KAA5C,GAAqD;AACjD,iBAAO;AACHsO,YAAAA,QAAQ,EADL;AAEHC,YAAAA,SAAS,EAAE;AAFR,WAAP;AAIH;;AACD,YAAIF,MAAM,GAAV,GAAgB;AACZ,cAAKrO,GAAG,KAAJ,CAACA,IAAeA,GAAG,KAAnB,CAACA,IAA8BA,GAAG,KAAtC,GAA+C;AAC3C,mBAAO;AACHuO,cAAAA,SAAS,EADN;AAEHC,cAAAA,YAAY,EAAE;AAFX,aAAP;AAIH;;AACD,cAAKxO,GAAG,KAAJ,CAACA,IAAeA,GAAG,KAAvB,GAAgC;AAC5B,mBAAO;AACHuO,cAAAA,SAAS,EADN;AAEHC,cAAAA,YAAY,EAAE;AAFX,aAAP;AAIH;;AACD,cAAKxO,GAAG,KAAR,GAAiB;AACb,mBAAO;AACHuO,cAAAA,SAAS,EADN;AAEHC,cAAAA,YAAY,EAAE;AAFX,aAAP;AAIH;;AACD,cAAKxO,GAAG,KAAR,GAAiB;AACb,mBAAO;AACHuO,cAAAA,SAAS,EADN;AAEHC,cAAAA,YAAY,EAAE;AAFX,aAAP;AAIH;AACJ;AAEJ;AAzCU,KAAf;AA2CAZ,IAAAA,cAAc,CAAdA,QAAc,CAAdA;AACA;AArGR;;AAAA,gCAwGI,gCAAoC;AAChC,QAAIC,QAAQ,GAAG;AACXC,MAAAA,UAAU,EADC;AAEXC,MAAAA,UAAU,EAFC;AAGXC,MAAAA,UAAU,EAHC;AAIXC,MAAAA,kBAAkB,EAJP;AAKXC,MAAAA,eAAe,EALJ;AAMXC,MAAAA,aAAa,EANF;AAOXC,MAAAA,KAPW,8BAOwB;AAC/B,YAAKC,MAAM,KAAP,CAACA,IAAkBA,MAAM,KAAzB,CAACA,IAAoCrO,GAAG,KAA5C,IAAsD;AAClD,iBAAO;AACHsO,YAAAA,QAAQ,EADL;AAEHC,YAAAA,SAAS,EAAE;AAFR,WAAP;AAIH;;AACD,YAAIF,MAAM,GAANA,CAAAA,KAAJ,GAAsB;AAClB,cAAIrO,GAAG,GAAHA,CAAAA,KAAJ,GAAmB;AACf,mBAAO;AACHuO,cAAAA,SAAS,EAAE;AADR,aAAP;AAGH;AACJ;AAEJ;AAtBU,KAAf;AAwBAX,IAAAA,cAAc,CAAdA,QAAc,CAAdA;AACA;AAlIR;;AAAA,oCAqII,oCAA0C;AACtC,WAAO,CACH,sDADG,EACH,CADG,EAEH,yCAFG,EAEH,CAFG,EAGH,0CAHG,EAGH,CAHG,EAIH,yCAJG,EAIH,CAJG,EAKH,0CALG,EAKH,CALG,EAMH,yCANG,EAMH,CANG,EAOH,0CAPG,EAOH,CAPG,EAQH,yCARG,EAQH,CARG,EASH,0CATG,EASH,CATG,EAUH,yCAVG,EAUH,CAVG,EAWH,0CAXG,EAWH,CAXG,EAYH,yCAZG,EAYH,CAZG,EAaH,0CAbG,EAaH,CAbG,EAcH,yCAdG,EAcH,CAdG,EAeH,0CAfG,EAeH,CAfG,EAgBH,yCAhBG,EAgBH,CAhBG,EAiBH,0CAjBG,EAiBH,CAjBG,EAkBH,yCAlBG,EAkBH,CAlBG,EAmBH,0CAnBG,EAmBH,CAnBG,EAoBH,0CApBG,EAoBH,CApBG,EAqBH,0CArBG,EAqBH,CArBG,EAsBH,0CAtBJ,EAsBI,CAtBG,CAAP;AAtIR;;AAAA,kCAgKI,kCAAwC;AACpC,WAAO,CACH,wCADG,KACH,CADG,EAEH,2BAFG,GAEH,CAFG,EAGH,2BAHG,GAGH,CAHG,EAIH,0BAJG,GAIH,CAJG,EAKH,2BALG,GAKH,CALG,EAMH,0BANG,GAMH,CANG,EAOH,0BAPG,GAOH,CAPG,EAQH,2BARG,GAQH,CARG,EASH,6BATJ,GASI,CATG,CAAP;AAjKR;;AAAA,wCA8KI,iDAA0D;AACtD,WAAO;AACH;AACA;AACAE,MAAAA,UAAU,EAHP;AAIHC,MAAAA,UAAU,EAJP;AAKHC,MAAAA,UAAU,EALP;AAMHC,MAAAA,kBAAkB,EANf;AAOHC,MAAAA,eAAe,EAPZ;AAQHC,MAAAA,aAAa,EARV;AASHM,MAAAA,aAAa,EAAE,CACX;AACIC,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OADW,EAQX;AACIE,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OARW,EAeX;AACIE,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OAfW,EAsBX;AACIE,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OAtBW,EA6BX;AACIE,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OA7BW,EAoCX;AACIE,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OApCW,EA2CX;AACIE,QAAAA,cAAc,EADlB;AAEIC,QAAAA,iBAAiB,EAFrB;AAGIC,QAAAA,iBAAiB,EAHrB;AAII3a,QAAAA,IAAI,EAJR;AAKIua,QAAAA,YAAY,EAAE;AALlB,OA3CW;AATZ,KAAP;AA/KR;;AAAA,4CA+OI,qDAAgE;AAC5D,WAAO,CACH,2CADG,KACH,CADG,EAEH,+BAFG,GAEH,CAFG,EAGH,+BAHG,GAGH,CAHG,EAIH,+BAJG,GAIH,CAJG,EAKH,+BALG,GAKH,CALG,EAMH,+BANG,GAMH,CANG,EAOH,+BAPG,GAOH,CAPG,EAQH,+BARG,GAQH,CARG,EASH,+BATG,GASH,CATG,EAUH,+BAVG,GAUH,CAVG,EAWH,+BAXG,GAWH,CAXG,EAYH,+BAZJ,GAYI,CAZG,CAAP;AAhPR;;AAAA,8BAgQI,wCAAwD;AACpD,QAAIpZ,QAAQ,GAAG;AACX/H,MAAAA,EAAE,EAAExF,UAAU,CADH;AAEXgnB,MAAAA,QAAQ,EAAExS,IAAI,CAAJA,SAAAA,CAFC,UAEDA,CAFC;AAGXyS,MAAAA,SAAS,EAAE9Z,6CAAM,GAANA,MAAAA,CAHA,gBAGAA,CAHA;AAIX+Z,MAAAA,OAAO,EAJI;AAKXtnB,MAAAA,MAAM,EAAE;AALG,KAAf,CADoD,CAQpD;AACA;AACA;;AACA,QAAMunB,WAAqB,GAAGnnB,UAAU,CAAVA,IAAAA,CAXsB,CAWtBA,CAA9B,CAXoD,CAYpD;;AACA,QAAMJ,MAAa,GAAGI,UAAU,CAAVA,IAAAA,CAAgBA,UAAU,CAAVA,IAAAA,CAAAA,MAAAA,GAbc,CAa9BA,CAAtB,CAboD,CAepD;;AACAJ,IAAAA,MAAM,CAANA,OAAAA,CAAe,wBAAiB;AAC5B,UAAMwnB,MAAM,GAAG9f,QAAQ,CAAvB,KAAuB,CAAvB;;AACA,UAAI0J,KAAK,CAAT,MAAS,CAAT,EAAmB;AACfpR,QAAAA,MAAM,CAANA,KAAM,CAANA,GAAAA,CAAAA;AADJ,aAGK;AACDA,QAAAA,MAAM,CAANA,KAAM,CAANA,GAAAA,MAAAA;AACH;AAvB+C,KAgBpDA,EAhBoD,CA0BpD;;AACA2N,IAAAA,QAAQ,CAARA,OAAAA,GA3BoD,WA2BpDA,CA3BoD,CA4BpD;;AACAA,IAAAA,QAAQ,CAARA,MAAAA,GAAAA,MAAAA;AACA;AA9RR;;AAAA,8BAiSI,wCAAwD;AACpD,QAAIA,QAAQ,GAAG;AACX/H,MAAAA,EAAE,EAAExF,UAAU,CADH;AAEXgnB,MAAAA,QAAQ,EAAExS,IAAI,CAAJA,SAAAA,CAFC,UAEDA,CAFC;AAGXyS,MAAAA,SAAS,EAAE9Z,6CAAM,GAANA,MAAAA,CAHA,gBAGAA,CAHA;AAIX+Z,MAAAA,OAAO,EAJI;AAKXtnB,MAAAA,MAAM,EAAE;AALG,KAAf,CADoD,CAQpD;AACA;AACA;;AACA,QAAMunB,WAAqB,GAAGnnB,UAAU,CAAVA,IAAAA,CAXsB,CAWtBA,CAA9B,CAXoD,CAYpD;;AACA,QAAMJ,MAAa,GAAGI,UAAU,CAAVA,IAAAA,CAAgBA,UAAU,CAAVA,IAAAA,CAAAA,MAAAA,GAAtC,CAAsBA,CAAtB;;AAEA,SAAK,IAAI8E,KAAK,GAAd,GAAoBA,KAAK,GAAGqiB,WAAW,CAAvC,QAAgDriB,KAAhD,IAAyD;AACrD;AACAyI,MAAAA,QAAQ,CAARA,OAAAA,CAAAA,IAAAA,CAAsB4Z,WAAW,CAAjC5Z,KAAiC,CAAjCA;AACA,UAAI6Z,MAAM,GAAG9f,QAAQ,CAAC1H,MAAM,CAA5B,KAA4B,CAAP,CAArB;;AACA,UAAIoR,KAAK,CAAT,MAAS,CAAT,EAAmB;AACfoW,QAAAA,MAAM,GAANA,CAAAA;AALiD,QAOrD;;;AACA7Z,MAAAA,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AAEH;;AACDwY,IAAAA,cAAc,CAAdA,0BAAc,CAAdA;AACAA,IAAAA,cAAc,CAAdA,QAAc,CAAdA;AACA;AA7TR;;AAAA,gCAgUI,0CAA0D;AACtD,QAAIxY,QAAQ,GAAG;AACX/H,MAAAA,EAAE,EAAExF,UAAU,CADH;AAEXgnB,MAAAA,QAAQ,EAAExS,IAAI,CAAJA,SAAAA,CAFC,UAEDA,CAFC;AAGXyS,MAAAA,SAAS,EAAE9Z,6CAAM,GAANA,MAAAA,CAHA,gBAGAA,CAHA;AAIX+Z,MAAAA,OAAO,EAJI;AAKXtnB,MAAAA,MAAM,EAAE;AALG,KAAf,CADsD,CAQtD;AACA;AACA;;AACA,QAAMunB,WAAqB,GAAGnnB,UAAU,CAAVA,IAAAA,CAXwB,CAWxBA,CAA9B,CAXsD,CAYtD;AACA;;AACA,QAAMJ,MAAa,GAAGI,UAAU,CAAVA,IAAAA,CAAgBA,UAAU,CAAVA,IAAAA,CAAAA,MAAAA,GAAtC,CAAsBA,CAAtB;;AAEA,SAAK,IAAI8E,KAAK,GAAd,GAAoBA,KAAK,GAAGqiB,WAAW,CAAvC,QAAgDriB,KAAK,IAArD,GAA4D;AACxD;AACAyI,MAAAA,QAAQ,CAARA,OAAAA,CAAAA,IAAAA,CAAsB4Z,WAAW,CAAjC5Z,KAAiC,CAAjCA;AACA,UAAI6Z,MAAM,GAAG9f,QAAQ,CAAC1H,MAAM,CAA5B,KAA4B,CAAP,CAArB;;AACA,UAAIoR,KAAK,CAAT,MAAS,CAAT,EAAmB;AACfoW,QAAAA,MAAM,GAANA,CAAAA;AALoD,QAOxD;;;AACA7Z,MAAAA,QAAQ,CAARA,MAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AAEH;;AACDwY,IAAAA,cAAc,CAAdA,6BAAc,CAAdA;AACAA,IAAAA,cAAc,CAAdA,QAAc,CAAdA;AACA;AA7VR;;AAAA,qCAgWI,+CAA8D;AAC1D,QAAIsB,KAAK,GAAT;;AACA,QAAIC,UAAU,GAAd,GAAoB;AAChB,UAAIA,UAAU,GAAd,IAAqBA,UAAU,GAAVA,EAAAA;;AACrB,aAAOA,UAAU,GAAjB,GAAuB;AACnBD,QAAAA,KAAK,IAALA,UAAAA;AACAC,QAAAA,UAAU;AACb;AACJ;;AACD;AAzWR;;AAAA,gCA4WI,0CAAqD;AACjD;AACA,SAAK,IAAIxiB,KAAK,GAAd,GAAoBA,KAAK,GAAzB,GAA+BA,KAA/B,IAAwC;AACpC;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,UAAIuiB,KAAa,GARmB,CAQpC,CARoC,CASpC;;AACA,UAAID,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA9C,CAAsB9E,CAAD,CAArB;AACA,UAAI,CAACgR,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAK,IAXM,MAWhBA,CAXgB,CAYpC;;AACAD,MAAAA,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA1CsiB,CAAkBpnB,CAAD,CAAjBonB;AACA,UAAI,CAACpW,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAK,IAdM,MAchBA,CAdgB,CAepC;;AACAD,MAAAA,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA1CsiB,CAAkBpnB,CAAD,CAAjBonB;AACA,UAAI,CAACpW,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAK,IAjBM,MAiBhBA,CAjBgB,CAmBpC;;AACAD,MAAAA,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA1CsiB,CAAkBpnB,CAAD,CAAjBonB;AACA,UAAI,CAACpW,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAK,IArBM,MAqBhBA,CArBgB,CAsBpC;;AACAD,MAAAA,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA1CsiB,CAAkBpnB,CAAD,CAAjBonB;AACA,UAAI,CAACpW,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAK,IAxBM,MAwBhBA,CAxBgB,CA0BpC;;AACAD,MAAAA,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA1CsiB,CAAkBpnB,CAAD,CAAjBonB;AACA,UAAI,CAACpW,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAK,IA5BM,MA4BhBA,CA5BgB,CA8BpC;;AACAD,MAAAA,MAAM,GAAG9f,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAA1CsiB,CAAkBpnB,CAAD,CAAjBonB;AACA,UAAI,CAACpW,KAAK,CAAV,MAAU,CAAV,EAAoBqW,KAAK,IAAI,+BAhCO,MAgCP,CAATA,CAhCgB,CAkCpC;;AACArnB,MAAAA,UAAU,CAAVA,IAAAA,CAAAA,CAAAA,EAAmB8E,KAAK,GAAxB9E,CAAAA,IAAAA,KAAAA;AACH;AAlZT;;AAAA,kCAqZI,4CAAuD;AACnD;AACA,SAAK,IAAI8E,KAAK,GAAd,GAAoBA,KAAK,GAAzB,IAAgCA,KAAK,IAArC,GAA4C;AACxC;AACZ;AACA;AACA;AACA;AACA;AACA;AACY,UAAIuiB,KAAa,GAAjB;;AAGA,WAAK,IAAIE,KAAK,GAAd,GAAoBA,KAAK,IAAzB,IAAiCA,KAAjC,IAA0C;AACtC,YAAIpP,GAAG,GAAG,YAD4B,CACtC,CADsC,CAEtC;;AACA,YAAIqP,SAAS,GAAGlgB,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,GAAAA,EAHa,KAGbA,CAAD,CAAxB,CAHsC,CAItC;;AACA,YAAIynB,YAAY,GAAGngB,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAAA,GAAAA,EAAqB8E,KAAK,GALhB,CAKV9E,CAAD,CAA3B,CALsC,CAMtC;;AACA,YAAI0nB,WAAW,GAAGpgB,QAAQ,CAACtH,UAAU,CAAVA,IAAAA,CAAgBmY,GAAG,GAAnBnY,CAAAA,EAAyB8E,KAAK,GAPnB,CAOX9E,CAAD,CAA1B,CAPsC,CAQtC;;AACA,YAAI,CAACgR,KAAK,CAAN,SAAM,CAAN,IAAqB,CAACA,KAAK,CAA/B,YAA+B,CAA/B,EAA+C;AAC3C,cAAKwW,SAAS,KAAV,CAACA,IAAqBC,YAAY,KAAtC,GAA+C;AAC3CJ,YAAAA,KAAK,IAAIE,KAAK,GAAdF,EAAAA;AACH;;AACD,cAAIG,SAAS,KAAb,cAAgC;AAC5BH,YAAAA,KAAK,IAAI,KAATA,SAAAA;AACH;;AACD,cAAKG,SAAS,GAAV,CAACA,IAAmBA,SAAS,KAAjC,cAAqD;AACjDH,YAAAA,KAAK,IAAI,KAAKhP,IAAI,CAAJA,GAAAA,CAASmP,SAAS,GAAhCH,YAAchP,CAAdgP;AACH;;AACD,cAAI,CAACrW,KAAK,CAAV,WAAU,CAAV,EAAyBqW,KAAK,IAALA,WAAAA;AAC5B;AA/BmC,QAkCxC;;;AACArnB,MAAAA,UAAU,CAAVA,IAAAA,CAAAA,EAAAA,EAAoB8E,KAAK,GAAzB9E,CAAAA,IAAAA,KAAAA;AACH;AA3bT;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAGA;AACA;AAUA;AAEA,IAAM2nB,QAAQ,GAAGxlB,4CAAK,CAAtB,SAAsB,CAAtB;AACA,IAAMylB,eAAe,GAAGzlB,4CAAK,CAA7B,gBAA6B,CAA7B;;IAE8B2M;AAY1B,2DAAuG;AAAA,SAF7FqO,WAE6F,GAF7D,IAE6D;AACnG;AACA;AACA;AACA,0BAAsB,IAJ6E,8DAI7E,EAAtB,CAJmG,CAMnG;;AACA,wBAAoB,uBAP+E,IAO/E,CAApB,CAPmG,CASnG;;AACA,0BAAsB,yBAAtB,IAAsB,CAAtB;AACA,0BAAsB,yBAAtB,IAAsB,CAAtB;AACA,gCAA4B,+BAA5B,IAA4B,CAA5B;AACA,8BAA0B,6BAA1B,IAA0B,CAA1B;AACA,sBAAkB,qBAdiF,IAcjF,CAAlB,CAdmG,CAgBnG;;AACA,QAAI,qBAAqB,KAAzB,WAAyC,2CAA2C,KAA3C;AAE5C;;;;SAEDlJ,mBAAAA,SAAAA,gBAAAA,CAAAA,QAAAA,EAAyC;AACrC;;;SAGJzD,mBAAAA,SAAAA,gBAAAA,GAAyB;AACrB;;;SAGG7L,eAAP,mDAA4E;AACxE;;;SAGJH,wBAAAA,SAAAA,qBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,SAAAA,EAA+E;AAC3E,QAAI,qBAAqB,KAAzB,WAAyC,sBAAsB,iCAAtB,IAAsB,CAAtB;;;SAG7CC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAmF;AAC/E,QAAI,qBAAqB,KAAzB,WAAyC,sBAAsB,iCAAtB,IAAsB,CAAtB;;;SAG7CC,0BAAAA,SAAAA,uBAAAA,CAAAA,WAAAA,EAAAA,IAAAA,EAAAA,WAAAA,EAAAA,YAAAA,EAAsG;AAClG,QAAI,qBAAqB,KAAzB,WAAyC,sBAAsB,iCAAtB,IAAsB,CAAtB;;;SAGnCuM,iBAAV,+BAAkD;AAC9C5J,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAFyC,eAE9CA,GAF8C,CAG9C;;AACA,QAAMygB,MAAM,GAAGzgB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0B,cAJK,KAI/BA,CAAf,CAJ8C,CAK9C;;AACA,QAAM0gB,UAAU,GAAG1gB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0ByH,YAAY,CANX,WAM3BzH,CAAnB,CAN8C,CAQ9C;;AACAugB,IAAAA,eAAe,+CAAfA,UAAe,CAAfA;AACA,QAAII,WAAW,GAV+B,EAU9C,CAV8C,CAW9C;;AACAA,IAAAA,WAAW,CAAC,cAAZA,KAAW,CAAXA,GAAAA,MAAAA;AACAJ,IAAAA,eAAe,CAAfA,WAAe,CAAfA;;AAEA,QAAI,qBAAqB,KAAzB,WAAyC;AACrC,UAAI/V,YAAY,GAAG,kCAAkC,KAAlC,wBAA+D,KAAlF,4BAAmB,CAAnB;AACA,wBAAkB;AACrB;;;SAGKoW,uBAAV,qCAAwD;AACpD5gB,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAF+C,eAEpDA,GAFoD,CAGpD;;AACA,QAAMygB,MAAM,GAAGzgB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0B,cAJW,KAIrCA,CAAf,CAJoD,CAKpD;;AACA,QAAM0gB,UAAU,GAAG1gB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0ByH,YAAY,CANL,WAMjCzH,CAAnB,CANoD,CAQpD;;AACAugB,IAAAA,eAAe,yDAAfA,UAAe,CAAfA;AACA,QAAII,WAAW,GAVqC,EAUpD,CAVoD,CAWpD;;AACAA,IAAAA,WAAW,CAAC,cAAZA,KAAW,CAAXA,GAAAA,MAAAA;AACAJ,IAAAA,eAAe,CAAfA,WAAe,CAAfA;;AAEA,QAAI,qBAAqB,KAAzB,WAAyC;AACrC,UAAI/V,YAAY,GAAG,kCAAkC,KAAlC,wBAA+D,KAAlF,4BAAmB,CAAnB;;AACA,wBAAkB;AACd,YAAMqW,YAAY,GAAG,4CAArB,YAAqB,CAArB;;AACA,0BAAkB;AACd;AACH;AACJ;AAPL,WASK;AACD;AACA,UAAMA,aAAY,GAAG,4CAArB,MAAqB,CAArB;;AACA,yBAAkB;AACd;AACH;AAEJ;;;SAGKC,qBAAV,mCAAsD;AAClD9gB,IAAAA,KAAK,CAALA,cAAAA;AACAA,IAAAA,KAAK,CAF6C,eAElDA,GAFkD,CAGlD;;AACA,QAAMygB,MAAM,GAAGzgB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0B,cAJS,KAInCA,CAAf,CAJkD,CAKlD;;AACA,QAAM0gB,UAAU,GAAG1gB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0ByH,YAAY,CANP,WAM/BzH,CAAnB,CANkD,CAOlD;;AACA,QAAMyP,UAAU,GAAGzP,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAR+B,4EAQ/BA,CAAnB,CARkD,CAUlD;;AACAugB,IAAAA,eAAe,yDAAfA,UAAe,CAAfA;AACA,QAAII,WAAW,GAZmC,EAYlD,CAZkD,CAalD;;AACAA,IAAAA,WAAW,CAAC,cAAZA,KAAW,CAAXA,GAAAA,MAAAA;AACAJ,IAAAA,eAAe,CAAfA,WAAe,CAAfA;;AAEA,QAAI,qBAAqB,KAAzB,WAAyC;AACrC,UAAI/V,YAAY,GAAG,kCAAkC,KAAlC,wBAA+D,KAAlF,4BAAmB,CAAnB;;AACA,wBAAkB;AACd;AACH;AACJ;;;SAIKuW,cAAV,4BAA6C;AACzC;AACA,QAAMN,MAAM,GAAGzgB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0B,cAFA,KAE1BA,CAAf,CAFyC,CAGzC;;AACA,QAAM0gB,UAAU,GAAG1gB,KAAK,CAALA,MAAAA,CAAAA,YAAAA,CAA0ByH,YAAY,CAJhB,WAItBzH,CAAnB,CAJyC,CAMzC;;AACAugB,IAAAA,eAAe,yDAAfA,UAAe,CAAfA;AAEA,QAAII,WAAW,GAT0B,EASzC,CATyC,CAUzC;;AACAA,IAAAA,WAAW,CAAC,cAAZA,KAAW,CAAXA,GAAAA,MAAAA;AAEA,QAAInW,YAAY,GAAhB;;AAEA,QAAI,qBAAqB,KAAzB,WAAyC;AACrCA,MAAAA,YAAY,GAAG,kCAAkC,KAAlC,wBAA+D,KAA9EA,4BAAe,CAAfA;;AACA,wBAAkB;AAAA,2DACd;;;AACAA,QAAAA,YAAY,CAAZA,+DAAY,CAAZA,GAAAA,CAAAA,qBAAAA,GAA+B,qBAA/BA,IAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAA+B,sBAFjB,IAEdA,CAFc,CAGd;;AACAA,QAAAA,YAAY,CAAZA,+DAAY,CAAZA,GAAAA,CAAAA,sBAAAA,GAA+B,qBAA/BA,IAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAA+B,uBAA/BA,IAAAA;AACH;AACJ;;AACD;;;SAMJlB,+BAAAA,SAAAA,4BAAAA,CAAAA,KAAAA,EAAAA,KAAAA,EAA4D;AACxD,WAAO0X,+DAAM,QAAb,KAAa,CAAb;;;SAGJnU,0BAAAA,SAAAA,uBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA2D;AACvD,WAAOjB,gEAAP;;;SAGJD,mCAAAA,SAAAA,gCAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoE;AAChE,WAAOC,gEAAP;;;SAGJkB,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAA+C;AAC3C;;;SAGJC,qBAAAA,SAAAA,kBAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAoD;AAChD;;;SAGJlB,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAA8C;AAC1C;;;SAGMoV,iBAAV,+BAA2C;AACvCX,IAAAA,QAAQ,CAARA,YAAQ,CAARA;AACAC,IAAAA,eAAe,CAACvgB,KAAK,CAArBugB,MAAe,CAAfA;AACA,QAAM1kB,IAAI,GAAGsR,IAAI,CAAJA,SAAAA,CAAe,iBAA5B,KAA4B,CAAfA,CAAb;AACAoT,IAAAA,eAAe,CAJwB,IAIxB,CAAfA,CAJuC,CAKvC;;AACAvgB,IAAAA,KAAK,CAALA,YAAAA,CAAAA,OAAAA,CAAAA,iEAAAA,EAAAA,IAAAA;;;SAGMkhB,sBAAV,yCAAoE;AAAA;;AAChEZ,IAAAA,QAAQ,CAARA,iCAAQ,CAARA;AACAA,IAAAA,QAAQ,CAARA,IAAQ,CAARA;AAEA,QAAMa,eAAe,GAAG,6BAAxB,IAAwB,CAAxB;AAEA,QAAIC,OAAoB,GAAGtf,QAAQ,CAARA,aAAAA,CAAuB,cAAlD,kBAA2BA,CAA3B;AACAK,IAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,cAAtCA,cAAAA;AACAA,IAAAA,uEAAAA,CAAAA,OAAAA,EAAmC,cAAnCA,wBAAAA;AACAif,IAAAA,OAAO,CAAPA,YAAAA,CAAqB,cAArBA,KAAAA,EAAAA,eAAAA;AACAA,IAAAA,OAAO,CAAPA,YAAAA,CAAqB3Z,YAAY,CAAjC2Z,WAAAA,EAA8C,cAVkB,YAUhEA,EAVgE,CAWhE;;AACA,QAAIC,MAAM,GAAV;;AACA,QAAI,qBAAJ,kBAA2C;AACvC,UAAIrT,SAAsB,GAAGlM,QAAQ,CAARA,aAAAA,CAA7B,KAA6BA,CAA7B;AACAK,MAAAA,0EAAAA,CAAAA,SAAAA,EAAwC,qBAAxCA,gBAAAA;AACA6L,MAAAA,SAAS,CAATA,YAAAA,CAAuB,cAAvBA,KAAAA,EAAAA,eAAAA;AACAA,MAAAA,SAAS,CAATA,YAAAA,CAAuBvG,YAAY,CAAnCuG,WAAAA,EAAgD,cAAhDA,YAAAA;AAGAqT,MAAAA,MAAM,GAAGvf,QAAQ,CAARA,aAAAA,CAAuB,qBAAhCuf,eAASvf,CAATuf;AACAlf,MAAAA,0EAAAA,CAAAA,MAAAA,EAAoC,qBAApCA,kBAAAA;AACAkf,MAAAA,MAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;AACAA,MAAAA,MAAM,CAANA,YAAAA,CAAoB5Z,YAAY,CAAhC4Z,WAAAA,EAA6C,cAA7CA,YAAAA;AAEArT,MAAAA,SAAS,CAATA,WAAAA,CAAAA,MAAAA;;AAEA,UAAI,qBAAJ,YAAqC;AACjC,YAAIsT,KAAK,GAAGxf,QAAQ,CAARA,aAAAA,CAAuB,gCAAnC,WAAYA,CAAZ;AACAK,QAAAA,0EAAAA,CAAAA,KAAAA,EAAoC,gCAApCA,cAAAA;AACAmf,QAAAA,KAAK,CAALA,YAAAA,CAAAA,KAAAA,EAA0B,8BAA1BA,IAA0B,CAA1BA;AACAF,QAAAA,OAAO,CAAPA,WAAAA,CAAAA,KAAAA;AACH;;AAED,UAAIG,SAAS,GAAGzf,QAAQ,CAARA,aAAAA,CAAhB,KAAgBA,CAAhB;AACAkM,MAAAA,SAAS,CAATA,WAAAA,CAAAA,SAAAA;;AAEA,UAAI,qBAAJ,OAAgC;AAC5B,YAAMwT,UAAU,GAAG,yBAAnB,IAAmB,CAAnB;;AACA,YAAIA,UAAU,GAAd,GAAoB;AAChB,cAAIC,OAAoB,GAAG3f,QAAQ,CAARA,aAAAA,CAAuB,2BAAlD,WAA2BA,CAA3B;AACAK,UAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,2BAAtCA,cAAAA;AACAA,UAAAA,uEAAAA,CAAAA,OAAAA,EAAmC,2BAAnCA,iBAAAA;AACAsf,UAAAA,OAAO,CAAPA,YAAAA,CAAqB,cAArBA,KAAAA,EAAAA,eAAAA;AACAA,UAAAA,OAAO,CAAPA,YAAAA,CAAqBha,YAAY,CAAjCga,WAAAA,EAA8C,cAA9CA,YAAAA;AACAF,UAAAA,SAAS,CAATA,WAAAA,CAAAA,OAAAA;AACAE,UAAAA,OAAO,CAAPA,SAAAA,GAAAA,uBAAAA,UAAAA,GAAAA,oBAAAA;AACH;AACJ;;AAED,UAAI,cAAJ,cAAgC;AAC5B,2CAAmC,uBAAiB;AAChD,cAAIC,MAAmB,GAAG5f,QAAQ,CAARA,aAAAA,CAA1B,QAA0BA,CAA1B;AACA4f,UAAAA,MAAM,CAANA,YAAAA,CAAAA,MAAAA,EAAAA,QAAAA;AACAvf,UAAAA,0EAAAA,CAAAA,MAAAA,EAAqCwf,WAAW,CAAhDxf,aAAAA;;AACA,cAAIwf,WAAW,CAAf,YAA4B;AACzBD,YAAAA,MAAM,CAANA,SAAAA,GAAmBC,WAAW,CAA9BD,UAAAA;AACF;;AACD,cAAIC,WAAW,CAAf,aAA6B;AACzB,gBAAIC,MAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;AACAK,YAAAA,0EAAAA,CAAAA,MAAAA,EAAqCwf,WAAW,CAAhDxf,WAAAA;AACAyf,YAAAA,MAAM,CAANA,YAAAA,CAAoB,KAAI,CAAJ,SAApBA,KAAAA,EAAAA,eAAAA;AACAA,YAAAA,MAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,KAAI,CAAJ,SAA7CA,YAAAA;AACAA,YAAAA,MAAM,CAANA,YAAAA,CAAAA,4EAAAA,EAAgDD,WAAW,CAA3DC,IAAAA;AACAF,YAAAA,MAAM,CAANA,WAAAA,CAAAA,MAAAA;AACH;;AACDA,UAAAA,MAAM,CAANA,YAAAA,CAAoB,KAAI,CAAJ,SAApBA,KAAAA,EAAAA,eAAAA;AACAA,UAAAA,MAAM,CAANA,YAAAA,CAAoBja,YAAY,CAAhCia,WAAAA,EAA6C,KAAI,CAAJ,SAA7CA,YAAAA;AACAA,UAAAA,MAAM,CAANA,YAAAA,CAAAA,4EAAAA,EAAgDC,WAAW,CAA3DD,IAAAA;AAEAA,UAAAA,MAAM,CAANA,gBAAAA,CAAAA,OAAAA,EAAiC,iBAAW;AACxC1hB,YAAAA,KAAK,CAALA,cAAAA;AACAA,YAAAA,KAAK,CAALA,eAAAA;;AACA,iBAAI,CAAJ;AAHJ0hB,WAAAA;AAKAH,UAAAA,SAAS,CAATA,WAAAA,CAAAA,MAAAA;AAxBJ;AA0BH;;AACD,UAAI,qBAAJ,QAAiC;AAC7B,YAAIM,cAA2B,GAAG/f,QAAQ,CAARA,aAAAA,CAAlC,QAAkCA,CAAlC;AACA+f,QAAAA,cAAc,CAAdA,YAAAA,CAAAA,MAAAA,EAAAA,QAAAA;AACA1f,QAAAA,0EAAAA,CAAAA,cAAAA,EAA6C,4BAA7CA,aAAAA;;AACA,YAAI,4BAAJ,YAA4C;AACzC0f,UAAAA,cAAc,CAAdA,SAAAA,GAA2B,4BAA3BA,UAAAA;AACF;;AACD,YAAI,4BAAJ,aAA6C;AACzC,cAAID,MAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;AACAK,UAAAA,0EAAAA,CAAAA,MAAAA,EAAqC,4BAArCA,WAAAA;AACAyf,UAAAA,MAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;AACAA,UAAAA,MAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;AACAC,UAAAA,cAAc,CAAdA,WAAAA,CAAAA,MAAAA;AACH;;AACDA,QAAAA,cAAc,CAAdA,YAAAA,CAA4B,cAA5BA,KAAAA,EAAAA,eAAAA;AACAA,QAAAA,cAAc,CAAdA,YAAAA,CAA4Bpa,YAAY,CAAxCoa,WAAAA,EAAqD,cAArDA,YAAAA;AACAA,QAAAA,cAAc,CAAdA,gBAAAA,CAAAA,OAAAA,EAAyC,iBAAW;AAChD7hB,UAAAA,KAAK,CAALA,cAAAA;AACAA,UAAAA,KAAK,CAALA,eAAAA;;AACA,eAAI,CAAJ;AAHJ6hB,SAAAA;AAKAN,QAAAA,SAAS,CAATA,WAAAA,CAAAA,cAAAA;AACH;;AACDH,MAAAA,OAAO,CAAPA,WAAAA,CAAAA,SAAAA;;AAEA,UAAI,qBAAJ,MAA+B;AAC3BA,QAAAA,OAAO,CAAPA,YAAAA,CAAAA,WAAAA,EAAAA,MAAAA;AACAA,QAAAA,OAAO,CAAPA,gBAAAA,CAAAA,WAAAA,EAAsC,KAAtCA,cAAAA;AA5FmC,QA8FvC;;;AACA,UAAI,qBAAJ,QAAiC;AAC7BA,QAAAA,OAAO,CAAPA,gBAAAA,CAAAA,OAAAA,EAAkC,KAAlCA,cAAAA;AACH;AA9G2D,MAkHhE;;;AACAC,IAAAA,MAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;AACAA,IAAAA,MAAM,CAANA,YAAAA,CAAoB5Z,YAAY,CAAhC4Z,WAAAA,EAA6C,cAA7CA,YAAAA;AACA,QAAMS,WAAW,GAAG,uCAApB,IAAoB,CAApB;AACAT,IAAAA,MAAM,CAANA,SAAAA,GAtHgE,WAsHhEA,CAtHgE,CAuHhE;;AACA,QAAI,cAAJ,WAA6B;AACzB,UAAMU,QAAQ,GAAG,mCAAjB,IAAiB,CAAjB;AACA,UAAMC,cAAc,GAAG,4CAAvB,IAAuB,CAAvB;;AACA;AACI,aAAKpW,gEAAL;AAAsB;AAClB0U,YAAAA,QAAQ,CAARA,4BAAQ,CAARA;AACAne,YAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,MAAAA;;AACA,gBAAI,uBAAuB,oBAA3B,QAAuD;AACnD,kBAAIyf,OAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,cAAAA,0EAAAA,CAAAA,OAAAA,EAAqC,oBAArCA,MAAAA;;AACAyf,cAAAA,OAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,cAAAA,OAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,cAAAA,MAAM,CAANA,WAAAA,CAAAA,OAAAA;AACH;;AAED;AACI,mBAAKzV,iEAAL;AAAuB;AACnBzJ,kBAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,MAAAA,EAAAA,KAAAA;AACAA,kBAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,OAAAA,EAAAA,IAAAA;;AACA,sBAAI,uBAAuB,oBAA3B,SAAwD;AACpD,wBAAIyf,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,oBAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,OAAAA;;AACAyf,oBAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,oBAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,oBAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;;AACD;AACH;;AACD,mBAAKzV,gEAAL;AAAsB;AAClB,sBAAI,uBAAuB,oBAA3B,QAAuD;AACnD,wBAAIgW,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,oBAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,MAAAA;;AACAyf,oBAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,oBAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,oBAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;AACJ;AArBL;;AAwBA;AACH;;AACD,aAAKzV,gEAAL;AAAsB;AAClB0U,YAAAA,QAAQ,+BAARA,EAAQ,CAARA;AACAne,YAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,MAAAA;;AACA,gBAAI,uBAAuB,oBAA3B,QAAuD;AACnD,kBAAIyf,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,cAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,MAAAA;;AACAyf,cAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,cAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,cAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;;AAED;AACI,mBAAKzV,iEAAL;AAAuB;AACnBzJ,kBAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,MAAAA,EAAAA,KAAAA;AACAA,kBAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,OAAAA,EAAAA,IAAAA;;AACA,sBAAI,uBAAuB,oBAA3B,SAAwD;AACpD,wBAAIyf,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,oBAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,OAAAA;;AACAyf,oBAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,oBAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,oBAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;;AACD;AACH;AAZL;;AAcA;AACH;;AACD,aAAKzV,kEAAL;AAAwB;AACpB0U,YAAAA,QAAQ,iCAARA,EAAQ,CAARA;AACAne,YAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,QAAAA;;AACA,gBAAI,uBAAuB,oBAA3B,UAAyD;AACrD,kBAAIyf,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,cAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,QAAAA;;AACAyf,cAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,cAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,cAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;;AAED;AACI,mBAAKzV,iEAAL;AAAuB;AACnB,sBAAI,uBAAuB,oBAA3B,SAAwD;AACpDzJ,oBAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,QAAAA,EAAAA,KAAAA;AACAA,oBAAAA,0EAAAA,CAAAA,OAAAA,EAAsC,wBAAtCA,OAAAA,EAAAA,IAAAA;;AACA,wBAAIyf,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,oBAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,OAAAA;;AACAyf,oBAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,oBAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,oBAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;;AACD;AACH;;AACD,mBAAKzV,gEAAL;AAAsB;AAClB,sBAAI,uBAAuB,oBAA3B,QAAuD;AACnD,wBAAIgW,QAAM,GAAG9f,QAAQ,CAARA,aAAAA,CAAb,GAAaA,CAAb;;AACAK,oBAAAA,0EAAAA,CAAAA,QAAAA,EAAqC,oBAArCA,MAAAA;;AACAyf,oBAAAA,QAAM,CAANA,YAAAA,CAAoB,cAApBA,KAAAA,EAAAA,eAAAA;;AACAA,oBAAAA,QAAM,CAANA,YAAAA,CAAoBna,YAAY,CAAhCma,WAAAA,EAA6C,cAA7CA,YAAAA;;AACAP,oBAAAA,MAAM,CAANA,WAAAA,CAAAA,QAAAA;AACH;;AACD;AACH;AAtBL;;AAwBA;AACH;AArGL;AAuGH;;AACD;;;SAGMY,wBAAV,+CAAmE;AAAA;;AAC/D3B,IAAAA,QAAQ,qCAARA,EAAQ,CAARA;AACAA,IAAAA,QAAQ,CAFuD,QAEvD,CAARA,CAF+D,CAG/D;;AACA,QAAM4B,MAAM,GAAGpgB,QAAQ,CAARA,cAAAA,CAAwB,cAAvC,kBAAeA,CAAf;AACA,gBAAYK,2EAAAA,CALmD,MAKnDA,EALmD,CAO/D;;AACAiN,IAAAA,QAAQ,CAARA,GAAAA,CAAa,uBAA8B;AACvC,UAAMgS,OAAO,GAAG,MAAI,CAAJ,0BADuB,IACvB,CAAhB,CADuC,CAEvC;;;AACAd,MAAAA,QAAQ,kCAAgC,MAAI,CAAJ,wBAAxCA,IAAwC,CAAhC,CAARA;AACA,kBAAY4B,MAAM,CAANA,WAAAA,CAAAA,OAAAA;AAJhB9S,KAAAA;;;SAQJzC,iBAAAA,SAAAA,cAAAA,CAAAA,SAAAA,EAA6C;AACzC;;AACA,QAAI,qBAAJ,MAA+B;AAC3BwV,MAAAA,SAAS,CAATA,gBAAAA,CAAAA,UAAAA,EAAuC,iBAAW;AAC9CniB,QAAAA,KAAK,CAALA,cAAAA;AADJmiB,OAAAA;AAGAA,MAAAA,SAAS,CAATA,gBAAAA,CAAAA,MAAAA,EAAmC,KAAnCA,UAAAA;AAEH;;;SAILC,aAAAA,SAAAA,UAAAA,CAAAA,KAAAA,EAAyB;AACrB9B,IAAAA,QAAQ,CADa,YACb,CAARA,CADqB,CAErB;;AACA,QAAMrT,iBAAiB,GAAGjN,KAAK,CAALA,YAAAA,CAAAA,OAAAA,CAA1B,iEAA0BA,CAA1B;AACA,QAAMkN,aAAa,GAAGC,IAAI,CAAJA,KAAAA,CAAtB,iBAAsBA,CAAtB;AACAoT,IAAAA,eAAe,CALM,aAKN,CAAfA,CALqB,CAOrB;;AACA,QAAM8B,iBAAiB,GAAGnV,aAAa,CAAvC,+DAAuC,CAAvC;AACA,QAAMoV,iBAAiB,GAAGpV,aAAa,CAAvC,+DAAuC,CAAvC;AACAoT,IAAAA,QAAQ,0DAARA,iBAAQ,CAARA;;AACA,QAAI,qBAAJ,MAA+B;AAC3B,UAAMiC,UAAU,GAAI,gDAAgD;AAAA,eAAgBC,UAAU,KAA1B;AAAhD,YAApB;AACA,UAAIpX,UAAU,GAAd;;AACA,sBAAgB;AACZ,YAAI,0BAAJ,YAA0C;AACtCA,UAAAA,UAAU,GAAI,+CAA+C;AAAA,mBAAUtC,IAAI,KAAd;AAA/C,gBAAdsC,CAAAA;AACH;;AACDmV,QAAAA,eAAe,kDAAfA,UAAe,CAAfA;;AACA,YAAIgC,UAAU,IAAd,YAA8B;AAC1B;AACH;AACJ;AACJ;;;;;;AAleqB9a,aAEZ+Y,WAFY/Y,GAEE,aAFFA;;;;;;;;;;;;;;;;;;;;;ACWvB,IAAMgb,gBAAuB,GAA7B;AACA,IAAMC,cAAqB,GAA3B;AACA,IAAMC,cAAqB,GAA3B;AA6BA,IAAMC,2BAAkC,GAAxC;AASP;;WAAYhX;AAAAA,EAAAA,SAAAA,kBAAAA,KAAAA,WAAAA;AAAAA,EAAAA,SAAAA,kBAAAA,KAAAA,WAAAA;AAAAA,EAAAA,SAAAA,oBAAAA,KAAAA,aAAAA;AAAAA,EAAAA,SAAAA,mBAAAA,KAAAA,YAAAA;GAAAA,aAAAA;;AAoBZ;;WAAYnF;AAAAA,EAAAA,gBAAAA,sBAAAA,KAAAA,QAAAA;AAAAA,EAAAA,gBAAAA,wBAAAA,KAAAA,UAAAA;AAAAA,EAAAA,gBAAAA,uBAAAA,KAAAA,SAAAA;AAAAA,EAAAA,gBAAAA,yBAAAA,KAAAA,WAAAA;GAAAA,oBAAAA;;;;;;;;;;;;;;;;AC3FZ;;IAIMJ;AAIF,uCAA0C;AACtC;AACA,iBAFsC,EAEtC,CAFsC,CAGtC;;AACA,qBAAiB,oBAAjB,IAAiB,CAAjB;AACA,qBAAiB,oBAAjB,IAAiB,CAAjB;AACH;;;;SAEMwc,UAAP,+BAAmD;AAC/C,QAAMC,aAAa,GAAGhhB,QAAQ,CAARA,cAAAA,CAAwB+b,MAAM,CAApD,WAAsB/b,CAAtB;;AACA,uBAAmB;AACfihB,MAAAA,IAAI,CAAJA,cAAAA,CAAAA,aAAAA;AACH;;AACD;AACAA,IAAAA,IAAI,CAAJA,gBAAAA,CAAAA,IAAAA;;;SAIG5Z,mBAAP,4BAA0B;AAAE;AACxB;AACA,mBAFsB,IAEtB,EAFsB,CAItB;;AACA,QAAM6Z,WAAW,GAAGlhB,QAAQ,CAARA,cAAAA,CAAwB,WAA5C,EAAoBA,CAApB;AACA,QAAIkhB,WAAW,KAAf,MAA0B;AAE1B,QAAMC,aAAa,GAAGD,WAAW,CAAXA,aAAAA,CAAtB,QAAsBA,CAAtB;;AACA,uBAAmB;AACfC,MAAAA,aAAa,CAAbA,gBAAAA,CAAAA,OAAAA,EAAwC,KAAxCA,SAAAA;AACH;;AAED,uBAAmB,gBAAU;AACzBF,MAAAA,IAAI,CAAJA,gBAAAA;AADJ;;;SAKGG,YAAP,0BAAsC;AAClC,eAAWljB,KAAK,CAALA,cAAAA;AACX;;;SAGGmjB,YAAP,0BAAsC;AAAC;AACnC,QAAIC,IAAI,GAAG,WAAX;;AACA,QAAIxjB,MAAM,CAANA,UAAAA,GAAJ,KAA6B;AACzBwjB,MAAAA,IAAI,GAAJA,KAAAA;AACH;;AACD,QAAIxjB,MAAM,CAANA,UAAAA,GAAJ,KAA6B;AACzBwjB,MAAAA,IAAI,GAAJA,MAAAA;AACH;;AACD;;;SAGIC,WAAR,iCAA8C;AAC1C,QAAML,WAAW,GAAGlhB,QAAQ,CAARA,cAAAA,CAAwB,WAA5C,EAAoBA,CAApB;AACA,QAAIkhB,WAAW,KAAf,MAA0B;;AAE1B,YAAQ,WAAR;AACI,WAAKvc,qEAAL;AAA2B;AACvBuc,UAAAA,WAAW,CAAXA,KAAAA,CAAAA,KAAAA,GAAAA,aAAAA;AACA;AACH;;AACD,WAAKvc,sEAAL;AAA4B;AACxBuc,UAAAA,WAAW,CAAXA,KAAAA,CAAAA,KAAAA,GAAAA,aAAAA;AACA;AACH;;AACD,WAAKvc,uEAAL;AAA6B;AACzBuc,UAAAA,WAAW,CAAXA,KAAAA,CAAAA,MAAAA,GAAAA,aAAAA;AACA;AACH;;AACD,WAAKvc,oEAAL;AAA0B;AACtBuc,UAAAA,WAAW,CAAXA,KAAAA,CAAAA,MAAAA,GAAAA,aAAAA;AACA;AACH;AAhBL;;;SAoBJ7Y,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;;SACjCE,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAoE;;SACpEC,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AAAC;;;SAC3DC,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAiD;;SACjDE,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAqD;;SACrDC,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAkD;;SAClDG,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAoD;;SACpDD,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD,CAAE;AAElD;AACJ;AACA;;;SAEID,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B;;;SAEJP,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B;;;;;;AAMR;;;;;;;;;;;;;;;ICxGMkZ;AAKF,mCAAqB;AAAA,SAHXjF,kBAGW,GAHmB,KAGnB;AACjB;AACH;;;;SAEMkF,cAAP,+BAA0C;AACtC;;;SAGG9I,iBAAP,0BAAwB;AACpB;;;SAGGC,aAAP,sBAAoB;AAChB;;;SAGJnQ,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA+C;AAC3C,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAcwM,QAAQ,CAARA,WAAAA,CAAAA,IAAAA,EAAd,YAAcA,CAAd;AAA3B;AACH;;;SAGLtM,kBAAAA,SAAAA,eAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAmD;AAC/C,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAcsM,QAAQ,CAARA,eAAAA,CAAAA,IAAAA,EAAd,YAAcA,CAAd;AAA3B;AACH;;;SAGLrM,eAAAA,SAAAA,YAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAAgD;AAC5C,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAcqM,QAAQ,CAARA,YAAAA,CAAAA,IAAAA,EAAd,YAAcA,CAAd;AAA3B;AACH;;;SAGL5M,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAiC;AAC7B,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAc4M,QAAQ,CAARA,cAAAA,CAAd,IAAcA,CAAd;AAA3B;AACH;;;SAGL1M,aAAAA,SAAAA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,YAAAA,EAAiE;AAC7D,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAc0M,QAAQ,CAARA,UAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAd,YAAcA,CAAd;AAA3B;AACH;;;SAGLzM,oBAAAA,SAAAA,iBAAAA,CAAAA,IAAAA,EAAAA,YAAAA,EAA0D;AACtD,QAAIvN,MAAM,GAD4C,IACtD,CADsD,CACnC;;AACnB,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B,oBAAc;AACrC,YAAI,CAAEga,QAAQ,CAARA,iBAAAA,CAAAA,IAAAA,EAAN,YAAMA,CAAN,EAAsD;AAClDha,UAAAA,MAAM,GAANA,KAAAA;AACH;AAHL;AAKH;;AACD;;;SAGJqN,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAc2M,QAAQ,CAARA,aAAAA,CAAd,IAAcA,CAAd;AAA3B;AACH;;;SAGLpM,gBAAAA,SAAAA,aAAAA,CAAAA,IAAAA,EAAgC;AAC5B,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAcoM,QAAQ,CAARA,aAAAA,CAAd,IAAcA,CAAd;AAA3B;AACH;;;SAGLnM,cAAAA,SAAAA,WAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAgD;AAC5C,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAcmM,QAAQ,CAARA,WAAAA,CAAAA,IAAAA,EAAd,WAAcA,CAAd;AAA3B;AACH;;;SAGLlM,iBAAAA,SAAAA,cAAAA,CAAAA,IAAAA,EAAAA,cAAAA,EAAsD;AAClD,QAAI,CAAC,KAAL,oBAA8B;AAC1B,iCAA2B;AAAA,eAAckM,QAAQ,CAARA,cAAAA,CAAAA,IAAAA,EAAd,cAAcA,CAAd;AAA3B;AACH;;;;;;AAKT;;;;;;;;;;;;;;;IC1FMyM;AACF,yBAAc,CACb;;;;SAEDC,mBAAAA,SAAAA,gBAAAA,CAAAA,SAAAA,EAA0C;AACtC,QAAM1O,OAA2B,GAAGjT,QAAQ,CAARA,cAAAA,CAApC,SAAoCA,CAApC;;AACA,QAAIiT,OAAO,KAAX,MAAsB;AAClBA,MAAAA,OAAO,CAAPA,cAAAA,CAAuB;AACnB2O,QAAAA,KAAK,EADc;AAEnBC,QAAAA,QAAQ,EAAE;AAFS,OAAvB5O;AAIH;;;SAGL6O,oBAAAA,SAAAA,iBAAAA,CAAAA,OAAAA,EAA8C;AAC1C,iBAAa;AACT7O,MAAAA,OAAO,CAAPA,SAAAA,GAAoBA,OAAO,CAAPA,YAAAA,GAAuBA,OAAO,CAA9BA,YAAAA,GAApBA,GAAAA;AACH;;;SAGL8O,uBAAAA,SAAAA,oBAAAA,CAAAA,OAAAA,EAAiD;AAC7C,iBAAa;AACT9O,MAAAA,OAAO,CAAPA,cAAAA,CAAuB;AACnB4O,QAAAA,QAAQ,EAAE;AADS,OAAvB5O;AAGAA,MAAAA,OAAO,CAAPA,SAAAA,GAAoBA,OAAO,CAAPA,YAAAA,GAAuBA,OAAO,CAA9BA,YAAAA,GAApBA,GAAAA;AACH;;;SAGL+O,iBAAAA,SAAAA,cAAAA,CAAAA,OAAAA,EAA2C;AACvC/O,IAAAA,OAAO,CAAPA,cAAAA,CAAuB;AACnB2O,MAAAA,KAAK,EADc;AAEnBC,MAAAA,QAAQ,EAAE;AAFS,KAAvB5O;;;SAMJgP,WAAAA,SAAAA,QAAAA,CAAAA,OAAAA,EAAqC;AACjChP,IAAAA,OAAO,CAAPA,cAAAA,CAAuB;AACnB2O,MAAAA,KAAK,EAAE;AADY,KAAvB3O;;;SAKJiP,oBAAAA,SAAAA,iBAAAA,CAAAA,OAAAA,EAA8C;AAC1C,QAAIjP,OAAO,IAAIA,OAAO,CAAtB,YAAmC;AAC/B,aAAOA,OAAO,CAAd,YAA2B;AACvB,YAAMkP,SAA2B,GAAGlP,OAAO,CAA3C;AACA,uBAAeA,OAAO,CAAPA,WAAAA,CAAAA,SAAAA;AAClB;AACJ;;;SAGLmP,mBAAAA,SAAAA,gBAAAA,CAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QAAAA,EAA4F;AAAA,QAAhCC,QAAgC;AAAhCA,MAAAA,QAAgC,GAAZ,IAApBA;AAAgC;;AACxF,QAAMC,OAAO,GAAGC,WAAW,CAAXA,KAAAA,CAAhB,GAAgBA,CAAhB;AACAD,IAAAA,OAAO,CAAPA,OAAAA,CAAgB,sBAAgB;AAC5B,UAAIE,UAAU,CAAVA,IAAAA,GAAAA,MAAAA,GAAJ,GAAkC;AAC9B,sBAAc;AACVvP,UAAAA,OAAO,CAAPA,SAAAA,CAAAA,GAAAA,CAAAA,UAAAA;AADJ,eAEO;AACHA,UAAAA,OAAO,CAAPA,SAAAA,CAAAA,MAAAA,CAAAA,UAAAA;AACH;AACJ;AAPLqP,KAAAA;;;SAWJG,gBAAAA,SAAAA,aAAAA,CAAAA,OAAAA,EAAAA,UAAAA,EAAyE;AACrE,oBAAgB;AACZC,MAAAA,UAAU,CAAVA,OAAAA,CAAmB,qBAAoB;AACnCzP,QAAAA,OAAO,CAAPA,YAAAA,CAAqB0P,SAAS,CAA9B1P,IAAAA,EAAqC0P,SAAS,CAA9C1P,KAAAA;AADJyP,OAAAA;AAGH;;;;;;AAKT,IAAMriB,WAAW,GAAG,IAApB,WAAoB,EAApB;AAEA;;;;;;;;;;;;;;;;;AC5EO,8BAAiD;AACpD,SAAQoH,KAAK,CAALA,EAAAA,KAAaC,KAAK,CAA1B;AACH;AAEM,sCAAyD;AAC5D,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;AAEM,kCAAqD;AACxD,SAAQD,KAAK,CAALA,MAAAA,KAAiBC,KAAK,CAA9B;AACH;;;;;;;;;;;;;;;ICZKkb;AACF,kBAAc,CACb;;;;SAEDC,cAAAA,SAAAA,WAAAA,GAAsB;AAClB,WAAO,wDAAwD,aAAO;AAClE,UAAMC,CAAC,GAAG5T,IAAI,CAAJA,MAAAA,KAAAA,EAAAA,GAAV;AACA,UAAM6T,CAAC,GAAGC,CAAC,IAADA,GAAAA,GAAAA,CAAAA,GAAgBF,CAAC,GAADA,GAAAA,GAA1B;AACA,aAAOC,CAAC,CAADA,QAAAA,CAAP,EAAOA,CAAP;AAHJ,KAAO,CAAP;;;;;;AAQR,IAAM1f,IAAI,GAAG,IAAb,IAAa,EAAb;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,IAAM+f,MAAM,GAAGpqB,4CAAK,CAAC,KAAD,CAApB;;IAEMqqB;;;AAKF;AAEA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKpR,KAAL,GAAa;AACTzb,MAAAA,UAAU,EAAE;AADH,KAAb,CAHU,CAMV;;AACA,UAAK8sB,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,+BAApB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,+BAArB;AACA,UAAKE,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BF,IAA3B,+BAA7B;AAEA,UAAKG,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BH,IAA1B,+BAA5B;AACA,UAAK1kB,cAAL,GAAsB,MAAKA,cAAL,CAAoB0kB,IAApB,+BAAtB;AACA,UAAKI,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBJ,IAAzB,+BAA3B;AAEA,UAAKjD,UAAL,GAAkB,MAAKA,UAAL,CAAgBiD,IAAhB,+BAAlB;AAEA,UAAKK,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BL,IAA1B,+BAA5B;AACA,UAAKM,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BN,IAA1B,+BAA5B;AACA,UAAKO,qBAAL,GAA6B,MAAKA,qBAAL,CAA2BP,IAA3B,+BAA7B;AACA,UAAKQ,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBR,IAAtB,+BAAxB;AAEArqB,IAAAA,+DAAA,GAAyBG,oBAAzB,gCAAoDyE,MAAM,CAACkmB,YAA3D;AAtBU;AAuBb;;;;SAEMvoB,wBAAP,+BAA6B2P,aAA7B,EAAiD;AAC7C;AACAlS,IAAAA,+DAAA,GAAyBuC,qBAAzB,CAA+C2P,aAA/C;AACH;;SAEDhQ,iBAAA,0BAAiB;AACb,WAAOlC,+DAAA,GAAyB8B,iBAAzB,EAAP;AACH;;SAED2G,QAAA,eAAMsiB,KAAN,EAAqBC,OAArB,EAAsC;AAClC,SAAKC,OAAL,CAAaC,WAAb,GAA2BH,KAA3B;AACA,SAAK/X,SAAL,CAAekY,WAAf,GAA6BF,OAA7B,CAFkC,CAGlC;;AACA,SAAKG,OAAL,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BtsB,sDAA9B,EAJkC,CAKlC;;AACA,SAAKosB,OAAL,CAAaC,SAAb,CAAuBE,GAAvB,CAA2BvsB,sDAA3B;AACH;;SAEDwsB,SAAA,kBAAS;AAAA;;AACLrB,IAAAA,MAAM,CAAC,eAAD,CAAN,CADK,CAEL;;AACA,QAAI5sB,UAAiB,GAAG,KAAKyb,KAAL,CAAWzb,UAAnC;AACA4sB,IAAAA,MAAM,CAAC5sB,UAAD,CAAN;AAEA,QAAMkuB,KAAK,GAAGluB,UAAU,CAACmuB,GAAX,CAAe,UAACC,KAAD,EAAQjpB,KAAR;AAAA,0BACzB,iDAAC,qEAAD;AACI,WAAG,EAAEA,KADT;AAEI,iBAAS,EAAEipB,KAFf;AAGI,yBAAiB,EAAE,MAAI,CAACb,gBAH5B;AAII,8BAAsB,EAAE7qB,+DAAA,GAAyBmE,wBAJrD;AAKI,mCAA2B,EAAE,MAAI,CAAComB,qBALtC;AAMI,8BAAsB,EAAE,MAAI,CAACK;AANjC,QADyB;AAAA,KAAf,CAAd;AAWA,wBACI;AAAK,eAAS,EAAC;AAAf,oBACI;AAAK,eAAS,EAAC;AAAf,OACKY,KADL,CADJ,CADJ;AAOH;;SAEDpB,eAAA,sBAAaplB,KAAb,EAAgC;AAC5B;AACA,SAAKmmB,OAAL,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BtsB,sDAA9B,EAF4B,CAG5B;;AACA,SAAKosB,OAAL,CAAaC,SAAb,CAAuBE,GAAvB,CAA2BvsB,sDAA3B;AACAiG,IAAAA,KAAK,CAAC2mB,cAAN;AACH;;SAEDrB,gBAAA,uBAActlB,KAAd,EAAiC;AAC7B;AACA,SAAKmmB,OAAL,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BtsB,sDAA9B,EAF6B,CAG7B;;AACA,SAAKosB,OAAL,CAAaC,SAAb,CAAuBE,GAAvB,CAA2BvsB,sDAA3B;AACAiG,IAAAA,KAAK,CAAC2mB,cAAN;AACA,QAAIxoB,EAAE,GAAG,KAAKgoB,OAAL,CAAaS,YAAb,CAA0B5rB,kEAA1B,CAAT;AACAmD,IAAAA,EAAE,GAAG8B,QAAQ,CAAC9B,EAAD,CAAb;AACA+mB,IAAAA,MAAM,8BAA4B/mB,EAA5B,CAAN,CAR6B,CAS7B;;AACA,QAAM2B,0BAA0B,GAAG,KAAKiU,KAAL,CAAWzb,UAA9C;AACA,QAAImF,KAAK,GAAGqC,0BAA0B,CAAC+mB,SAA3B,CAAqC,UAACzoB,IAAD;AAAA,aAAeA,IAAI,CAACP,MAAL,KAAgBM,EAA/B;AAAA,KAArC,CAAZ;;AACA,QAAIV,KAAK,IAAI,CAAb,EAAgB;AACZ,UAAME,SAAS,GAAGmC,0BAA0B,CAACrC,KAAD,CAA5C;AACAzC,MAAAA,+DAAA,GAAyBqE,6BAAzB,CAAuD1B,SAAvD;AACH;AACJ;;SAEDioB,wBAAA,+BAAsB5lB,KAAtB,EAAyC;AACrCA,IAAAA,KAAK,CAAC2mB,cAAN,GADqC,CAErC;;AACA,QAAIjqB,wGAAA,GAAmCoqB,mBAAnC,EAAJ,EAA8D;AAC1D,UAAIriB,OAAO,CAAC,6FAAD,CAAX,EAA4G;AACxG/H,QAAAA,wGAAA,GAAmCqqB,aAAnC;AACH,OAFD,MAEO;AACH;AACA;AACH;AACJ;;AAED,SAAKC,eAAL,GAZqC,CAarC;;AACA,QAAI7oB,EAAE,GAAG6B,KAAK,CAACO,MAAN,CAAaqmB,YAAb,CAA0B5rB,kEAA1B,CAAT;AACAkqB,IAAAA,MAAM,wCAAsC/mB,EAAtC,CAAN;;AACA,QAAIA,EAAJ,EAAQ;AACJ;AACAA,MAAAA,EAAE,GAAG8B,QAAQ,CAAC9B,EAAD,CAAb,CAFI,CAGJ;;AACA,UAAM2B,0BAA0B,GAAG,KAAKiU,KAAL,CAAWzb,UAA9C;AACA,UAAImF,KAAK,GAAGqC,0BAA0B,CAAC+mB,SAA3B,CAAqC,UAACzoB,IAAD;AAAA,eAAeA,IAAI,CAACP,MAAL,KAAgBM,EAA/B;AAAA,OAArC,CAAZ;;AACA,UAAIV,KAAK,IAAI,CAAb,EAAgB;AACZ,YAAME,SAAS,GAAGmC,0BAA0B,CAACrC,KAAD,CAA5C;AACAynB,QAAAA,MAAM,CAACvnB,SAAD,CAAN;AACAjB,QAAAA,wGAAA,GAAmCuqB,eAAnC,CAAmDtpB,SAAnD;AACA,aAAKupB,oCAAL,CAA0C,KAA1C;AACH;AACJ;AACJ;;SAED3B,wBAAA,+BAAsBvlB,KAAtB,EAAyC;AACrCA,IAAAA,KAAK,CAAC2mB,cAAN,GADqC,CAErC;AACA;;AACA,QAAIxoB,EAAE,GAAG6B,KAAK,CAACO,MAAN,CAAaqmB,YAAb,CAA0B5rB,kEAA1B,CAAT;AACAkqB,IAAAA,MAAM,iCAA+B/mB,EAA/B,CAAN;;AACA,QAAIA,EAAJ,EAAQ;AACJ;AACAA,MAAAA,EAAE,GAAG8B,QAAQ,CAAC9B,EAAD,CAAb,CAFI,CAGJ;;AACA,UAAM2B,0BAA0B,GAAG,KAAKiU,KAAL,CAAWzb,UAA9C;AACA,UAAImF,KAAK,GAAGqC,0BAA0B,CAAC+mB,SAA3B,CAAqC,UAACzoB,IAAD;AAAA,eAAeA,IAAI,CAACP,MAAL,KAAgBM,EAA/B;AAAA,OAArC,CAAZ;;AACA,UAAIV,KAAK,IAAI,CAAb,EAAgB;AACZ,YAAME,SAAS,GAAGmC,0BAA0B,CAACrC,KAAD,CAA5C;;AACA,YAAIE,SAAS,CAACwpB,SAAV,IAAwBxpB,SAAS,CAACwpB,SAAV,KAAwBhvB,0DAApD,EAA0E;AACtE+sB,UAAAA,MAAM,iCAA+B/mB,EAA/B,+DAAN;;AACA,cAAInD,+DAAA,GAAyB6B,UAAzB,EAAJ,EAA2C;AACvC;AACA,iBAAKspB,OAAL,CAAakB,YAAb,CAA0BrsB,kEAA1B,EAAqDmD,EAArD;AACA,iBAAKsF,KAAL,CAAc9F,SAAS,CAACmK,IAAxB,UAAiCnK,SAAS,CAAC2pB,IAA3C,QAAoD,uEAApD;AACH,WAJD,MAIO;AACHpC,YAAAA,MAAM,iCAA+B/mB,EAA/B,sGAAN,CADG,CAEH;;AACAnD,YAAAA,+DAAA,GAAyBsE,0BAAzB,CAAoD3B,SAApD;AAEH;AACJ,SAZD,MAYO;AACHunB,UAAAA,MAAM,iCAA+B/mB,EAA/B,mDAAN,CADG,CAEH;;AACAnD,UAAAA,+DAAA,GAAyBsE,0BAAzB,CAAoD3B,SAApD;AACH;AACJ;AACJ;AACJ;;SAEK4pB;qFAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACIrC,cAAAA,MAAM,CAAC,qBAAD,CAAN;AAGA,mBAAKsC,WAAL,GAAmB,IAAI7gB,4EAAJ,EAAnB,CAJJ,CAKI;;AACA,mBAAK8gB,QAAL,GAAgB,IAAIvY,oEAAJ,EAAhB;AACA,mBAAKsY,WAAL,CAAiB3E,OAAjB,CAAyB,KAAK4E,QAA9B,EAAuC;AAAClS,gBAAAA,WAAW,EAAE5O,uGAA2CG;AAAzD,eAAvC;AAEM4gB,cAAAA,WATV,GASwB,IAAIxb,0EAAJ,CAAsBlR,+DAAA,GAAyB4B,eAAzB,EAAtB,CATxB;AAUI,mBAAK4qB,WAAL,CAAiB3E,OAAjB,CAAyB6E,WAAzB,EAAqC;AAACnS,gBAAAA,WAAW,EAAE5O,sGAA0CI;AAAxD,eAArC;AACA,mBAAK0gB,QAAL,CAAc7a,gBAAd,CAA+B8a,WAA/B;AAEA,mBAAKF,WAAL,CAAiBre,gBAAjB;AAGA,mBAAKwe,iBAAL,GAAyB,IAAIzgB,6EAAJ,EAAzB,CAhBJ,CAiBI;;AACMC,cAAAA,cAlBV,GAkB2B,IAAIyK,sEAAJ,CAAmB5W,+DAAA,GAAyB4B,eAAzB,EAAnB,CAlB3B;AAmBI,mBAAK+qB,iBAAL,CAAuB9E,OAAvB,CAA+B1b,cAA/B,EAA8C;AAACoO,gBAAAA,WAAW,EAAErO,8GAAkDC;AAAhE,eAA9C;AACMygB,cAAAA,cApBV,GAoB2B,IAAItY,0EAAJ,CAAsBtU,+DAAA,GAAyB4B,eAAzB,EAAtB,CApB3B;AAqBI,mBAAK+qB,iBAAL,CAAuB9E,OAAvB,CAA+B+E,cAA/B,EAA8C;AAACrS,gBAAAA,WAAW,EAAErO,0GAA8CE;AAA5D,eAA9C;AACM0E,cAAAA,YAtBV,GAsByB,IAAIhB,wEAAJ,CAAoB9P,+DAAA,GAAyB4B,eAAzB,EAApB,CAtBzB;AAuBI,mBAAK+qB,iBAAL,CAAuB9E,OAAvB,CAA+B/W,YAA/B,EAA4C;AAACyJ,gBAAAA,WAAW,EAAErO,uGAA2CG;AAAzD,eAA5C;AACA,mBAAKsgB,iBAAL,CAAuBxe,gBAAvB;AAGA,mBAAK0e,gBAAL,GAAwB,IAAIzhB,kFAAJ,EAAxB;AACM0hB,cAAAA,SA5BV,GA4BsB,IAAItgB,sEAAJ,EA5BtB;AA6BI,mBAAKqgB,gBAAL,CAAsBhF,OAAtB,CAA8BiF,SAA9B,EAAwC;AAACvS,gBAAAA,WAAW,EAACnP,mGAAuC1N;AAApD,eAAxC;AACA,mBAAKmvB,gBAAL,CAAsB1e,gBAAtB;AACA2e,cAAAA,SAAS,CAAClb,gBAAV,CAA2B,IAA3B;AAEA,mBAAKmb,iBAAL,GAAyB,IAAI/gB,8EAAJ,EAAzB;AACA,mBAAKghB,UAAL,GAAkB,IAAI7W,wEAAJ,EAAlB;AACA,mBAAK4W,iBAAL,CAAuBlF,OAAvB,CAA+B,KAAKmF,UAApC,EAA+C;AAACzS,gBAAAA,WAAW,EAACvO,0FAA8B5H;AAA3C,eAA/C;AACA,mBAAK2oB,iBAAL,CAAuB5e,gBAAvB;AAGApH,cAAAA,mGAAA,GAAmCoH,gBAAnC,GAvCJ,CAwCI;;AACA,kBAAIrH,QAAJ,EAAc;AACV;AACAA,gBAAAA,QAAQ,CAACmmB,cAAT,CAAwBxuB,mEAAxB,EAAsDmT,gBAAtD,CAAuE,OAAvE,EAAgF,KAAK6Y,mBAArF,EAFU,CAGV;;AACA3jB,gBAAAA,QAAQ,CAACmmB,cAAT,CAAwBxuB,8DAAxB,EAAiDmT,gBAAjD,CAAkE,OAAlE,EAA2E,KAAK4Y,oBAAhF,EAJU,CAKV;;AACA,qBAAK0C,kBAAL,GAA0BpmB,QAAQ,CAACmmB,cAAT,CAAwBxuB,wDAAxB,CAA1B,CANU,CAQV;;AACA,qBAAKyuB,kBAAL,CAAwBtb,gBAAxB,CAAyC,OAAzC,EAAkD,KAAKjM,cAAvD,EATU,CAUV;;AACAmB,gBAAAA,QAAQ,CAACmmB,cAAT,CAAwBxuB,kEAAxB,EAAqDmT,gBAArD,CAAsE,OAAtE,EAA+E,KAAK8Y,oBAApF,EAXU,CAYV;;AACA5jB,gBAAAA,QAAQ,CAACmmB,cAAT,CAAwBxuB,gEAAxB,EAAmDmT,gBAAnD,CAAoE,OAApE,EAA6E,KAAK+Y,oBAAlF;AACH,eAvDL,CAyDI;AACA;;;AACA,mBAAKQ,OAAL,GAAerkB,QAAQ,CAACmmB,cAAT,CAAwBluB,oDAAxB,CAAf,CA3DJ,CA4DI;;AACA,mBAAKksB,OAAL,GAAenkB,QAAQ,CAACmmB,cAAT,CAAwBluB,oDAAxB,CAAf,CA7DJ,CA8DI;;AACA,mBAAKiU,SAAL,GAAiBlM,QAAQ,CAACmmB,cAAT,CAAwBluB,sDAAxB,CAAjB,CA/DJ,CAgEI;;AACA,mBAAKouB,WAAL,GAAmBrmB,QAAQ,CAACmmB,cAAT,CAAwBluB,2DAAxB,CAAnB,CAjEJ,CAkEI;;AACA,mBAAKquB,YAAL,GAAoBtmB,QAAQ,CAACmmB,cAAT,CAAwBluB,4DAAxB,CAApB,CAnEJ,CAoEI;;AACA,mBAAKsuB,UAAL,GAAkBvmB,QAAQ,CAACmmB,cAAT,CAAwBluB,0DAAxB,CAAlB,CArEJ,CAuEI;;AACA,kBAAI,KAAKouB,WAAT,EAAsB,KAAKA,WAAL,CAAiBvb,gBAAjB,CAAkC,OAAlC,EAA2C,KAAKwY,YAAhD;AACtB,kBAAI,KAAKgD,YAAT,EAAuB,KAAKA,YAAL,CAAkBxb,gBAAlB,CAAmC,OAAnC,EAA4C,KAAK0Y,aAAjD;AACvB,kBAAI,KAAK+C,UAAT,EAAqB,KAAKA,UAAL,CAAgBzb,gBAAhB,CAAiC,OAAjC,EAA0C,KAAKwY,YAA/C,EA1EzB,CA4EI;AACA;;AACA,mBAAK9U,MAAL,GAAcxO,QAAQ,CAACmmB,cAAT,CAAwB,MAAxB,CAAd,CA9EJ,CA+EI;;AACA,mBAAKvX,YAAL,GAAoB5O,QAAQ,CAACmmB,cAAT,CAAwB,gBAAxB,CAApB;;AACA,kBAAI,KAAK3X,MAAT,EAAiB;AACb,qBAAKA,MAAL,CAAY1D,gBAAZ,CAA6B,UAA7B,EAAyC,UAAC5M,KAAD,EAAW;AAACA,kBAAAA,KAAK,CAAC2mB,cAAN;AAAwB,iBAA7E;AACA,qBAAKrW,MAAL,CAAY1D,gBAAZ,CAA6B,MAA7B,EAAqC,KAAKwV,UAA1C;AACH,eApFL,CAsFI;;;AACA1lB,cAAAA,wGAAA,GAAmCN,UAAnC,CAA8C,IAA9C;AACApB,cAAAA,+DAAA,GAAyBoB,UAAzB;;AAxFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;SA2FA4qB,kBAAA,2BAAkB;AACd,SAAKQ,WAAL,CAAiBtE,SAAjB,CAA2B,IAA3B;AACA,SAAKyE,iBAAL,CAAuBzE,SAAvB,CAAiC,IAAjC;AACA,SAAK2E,gBAAL,CAAsB3E,SAAtB,CAAgC,IAAhC;AACH;;SAEDwC,uBAAA,8BAAqB1lB,KAArB,EAAwC;AACpC,SAAKknB,oCAAL,CAA0C,IAA1C;AACH;;SAEDvB,uBAAA,8BAAqB3lB,KAArB,EAAwC;AACpC,SAAKknB,oCAAL,CAA0C,KAA1C;AACH;;SAED1B,uBAAA,8BAAqBxlB,KAArB,EAAmC;AAC/BklB,IAAAA,MAAM,CAAC,2BAAD,CAAN;AACAllB,IAAAA,KAAK,CAAC2mB,cAAN,GAF+B,CAG/B;AACA;;AACA,QAAI,CAAC3rB,+DAAA,GAAyB6B,UAAzB,EAAL,EAA4C;AACxC;AACA+C,MAAAA,MAAM,CAAC4G,QAAP,CAAgB8hB,IAAhB,GAAuB1vB,uDAAvB;AACA;AACH;;AACD,SAAK+uB,iBAAL,CAAuBxE,SAAvB,CAAiCnjB,KAAjC;AACH;;SAED6lB,mBAAA,0BAAiB7lB,KAAjB,EAA+B;AAC3BklB,IAAAA,MAAM,mCAAN;AACAllB,IAAAA,KAAK,CAAC2mB,cAAN,GAF2B,CAG3B;;AACA,QAAIxoB,EAAE,GAAG6B,KAAK,CAACO,MAAN,CAAaqmB,YAAb,CAA0B5rB,kEAA1B,CAAT;AACAkqB,IAAAA,MAAM,sCAAoC/mB,EAApC,CAAN;;AACA,QAAIA,EAAJ,EAAQ;AACJ;AACAA,MAAAA,EAAE,GAAG8B,QAAQ,CAAC9B,EAAD,CAAb,CAFI,CAGJ;;AACA,UAAM2B,0BAA0B,GAAG,KAAKiU,KAAL,CAAWzb,UAA9C;AACA,UAAImF,KAAK,GAAGqC,0BAA0B,CAAC+mB,SAA3B,CAAqC,UAACzoB,IAAD;AAAA,eAAeA,IAAI,CAACP,MAAL,KAAgBM,EAA/B;AAAA,OAArC,CAAZ;;AACA,UAAIV,KAAK,IAAI,CAAb,EAAgB;AACZ,YAAME,SAAS,GAAGmC,0BAA0B,CAACrC,KAAD,CAA5C;AACA,aAAKuqB,UAAL,CAAgBtW,oBAAhB,CAAqC/T,SAArC;AACA,aAAKoqB,iBAAL,CAAuB5E,SAAvB,CAAiC,IAAjC;AACH;AACJ;AACJ;;SAEDxiB,iBAAA,wBAAe+O,QAAf,EAAwC;AACpCwV,IAAAA,MAAM,CAAC,oBAAD,CAAN,CADoC,CAEpC;AACA;AACA;;AACA,QAAI,CAAClqB,+DAAA,GAAyB6B,UAAzB,EAAL,EAA4C;AACxC;AACA+C,MAAAA,MAAM,CAAC4G,QAAP,CAAgB8hB,IAAhB,GAAuB1vB,uDAAvB;AACA;AACH;;AACD,SAAK4uB,WAAL,CAAiBrE,SAAjB,CAA2B,IAA3B;;AACA,QAAIzT,QAAJ,EAAc;AACV,WAAK+X,QAAL,CAAcpY,cAAd,CAA6BK,QAA7B;AACH;AACJ;;SAED+V,sBAAA,6BAAoBzlB,KAApB,EAAkC;AAC9BklB,IAAAA,MAAM,CAAC,+BAAD,CAAN;AACAllB,IAAAA,KAAK,CAAC2mB,cAAN,GAF8B,CAG9B;;AACA,QAAI,CAAC3rB,+DAAA,GAAyB6B,UAAzB,EAAL,EAA4C;AACxC,WAAKmqB,eAAL,GADwC,CAExC;AACH;;AACD,SAAKa,gBAAL,CAAsB1E,SAAtB,CAAgCnjB,KAAhC;AACH;;SAEDuoB,eAAA,sBAAaC,QAAb,EAAqC;AACjC;AACA,QAAI7W,MAAM,GAAG,mCAAb;;AACA,QAAI6W,QAAQ,GAAG,CAAf,EAAkB;AACd7W,MAAAA,MAAM,+DAA2D6W,QAA3D,kBAAN;AACH;;AACD,QAAI,KAAKN,kBAAT,EAA6B,KAAKA,kBAAL,CAAwBO,SAAxB,QAAuC9W,MAAvC;AAChC;;SAEOyQ,aAAR,oBAAmBpiB,KAAnB,EAAiC;AAC7B;AACA,QAAMiN,iBAAiB,GAAGjN,KAAK,CAAC0oB,YAAN,CAAmBC,OAAnB,CAA2BlG,+EAA3B,CAA1B;AACAyC,IAAAA,MAAM,CAACjY,iBAAD,CAAN;AACA,QAAMC,aAAa,GAAGC,IAAI,CAACyb,KAAL,CAAW3b,iBAAX,CAAtB;AACAiY,IAAAA,MAAM,CAAChY,aAAD,CAAN,CAL6B,CAM7B;;AACA,QAAIA,aAAa,CAACwV,6EAAD,CAAb,KAAkCloB,8DAAtC,EAA+D;AAC3D0S,MAAAA,aAAa,CAACrP,MAAd,GAAuBoC,QAAQ,CAACiN,aAAa,CAACrP,MAAf,CAA/B;AACA,WAAKN,qBAAL,CAA2B2P,aAA3B;AACH;AAEJ;;SAEOga,uCAAR,8CAA6C2B,cAA7C,EAAsE;AAClE,QAAIA,cAAJ,EAAoB;AAChB,UAAI,KAAKvY,MAAT,EAAiBnO,0EAAA,CAA6B,KAAKmO,MAAlC,EAA0C,QAA1C,EAAoD,KAApD;AACjB,UAAI,KAAKA,MAAT,EAAiBnO,0EAAA,CAA6B,KAAKmO,MAAlC,EAA0C,SAA1C,EAAqD,IAArD;AACjB,UAAI,KAAKI,YAAT,EAAuBvO,0EAAA,CAA6B,KAAKuO,YAAlC,EAAgD,QAAhD,EAA0D,IAA1D;AACvB,UAAI,KAAKA,YAAT,EAAuBvO,0EAAA,CAA6B,KAAKuO,YAAlC,EAAgD,SAAhD,EAA2D,KAA3D;AAC1B,KALD,MAKO;AACH,UAAIhU,wGAAA,GAAmCoqB,mBAAnC,EAAJ,EAA8D;AAC1D,YAAI,KAAKxW,MAAT,EAAiBnO,0EAAA,CAA6B,KAAKmO,MAAlC,EAA0C,QAA1C,EAAoD,IAApD;AACjB,YAAI,KAAKA,MAAT,EAAiBnO,0EAAA,CAA6B,KAAKmO,MAAlC,EAA0C,SAA1C,EAAqD,KAArD;AACjB,YAAI,KAAKI,YAAT,EAAuBvO,0EAAA,CAA6B,KAAKuO,YAAlC,EAAgD,QAAhD,EAA0D,KAA1D;AACvB,YAAI,KAAKA,YAAT,EAAuBvO,0EAAA,CAA6B,KAAKuO,YAAlC,EAAgD,SAAhD,EAA2D,IAA3D;AAC1B;AACJ;AACJ;;SAEDvG,iBAAA,wBAAe4Y,IAAf,EAAiC,CAAE;;SACnC3Y,gBAAA,uBAAc2Y,IAAd,EAAgC,CAAE;;SAClCpY,gBAAA,uBAAcoY,IAAd,EAAgC,CAAE;;SAClC1Y,aAAA,oBAAW0Y,IAAX,EAAuBtT,UAAvB,EAA2CjF,YAA3C,EAAoE,CAAE;;SACtEF,oBAAA,2BAAkByY,IAAlB,EAA8BvY,YAA9B,EAA0D;AACtD,WAAO,IAAP;AACH;;SAEDD,cAAA,qBAAYwY,IAAZ,EAAwBvY,YAAxB,EAAiD,CAAE;;SACnDK,iBAAA,wBAAekY,IAAf,EAA2BvY,YAA3B,EAAoD,CAAE;;SACtDC,kBAAA,yBAAgBsY,IAAhB,EAA4BvY,YAA5B,EAAqD,CAAE;;SACvDI,cAAA,qBAAYmY,IAAZ,EAAwBhX,WAAxB,EAAgD,CAAE;;SAElDrB,eAAA,sBAAaqY,IAAb,EAAyBvY,YAAzB,EAAkD;AAC9C;AACAA,IAAAA,YAAY,CAAC3M,MAAb,GAAsBoC,QAAQ,CAACuK,YAAY,CAAC3M,MAAd,CAA9B;AACA,SAAKN,qBAAL,CAA2BiN,YAA3B;AACH;;;EA9Zcua,+CAmanB;AACA;AACA;AACA;AACA;;;AACAe,YAAY,CAAChrB,KAAb,GAAqB,GAArB;AACAA,kDAAA,GAAYiuB,OAAO,CAACC,IAAR,CAAa3D,IAAb,CAAkB0D,OAAlB,CAAZ,EAEA;;AACA,IAAMhU,OAAO,gBAAG,iDAAC,IAAD;AAAM,WAAS,EAAC;AAAhB,EAAhB;AAEAiQ,6CAAA,CAAgBjQ,OAAhB,EAAyBjT,QAAQ,CAACmmB,cAAT,CAAwB,MAAxB,CAAzB;;;;;;;;;;;;;;;;;;;;AC7cA;AACA;AAEA;AACA;AAEA,IAAMgB,QAAQ,GAAGnuB,4CAAK,CAAC,uBAAD,CAAtB,EAGA;;AACe,SAASmqB,aAAT,OAAoI;AAAA,MAA5GtnB,SAA4G,QAA5GA,SAA4G;AAAA,MAAjGurB,iBAAiG,QAAjGA,iBAAiG;AAAA,MAA9EC,sBAA8E,QAA9EA,sBAA8E;AAAA,MAAtDC,2BAAsD,QAAtDA,2BAAsD;AAAA,MAAzBC,sBAAyB,QAAzBA,sBAAyB;;AAC/I,MAAI1rB,SAAJ,EAAe;AACXsrB,IAAAA,QAAQ,iBAAetrB,SAAS,CAACE,MAAzB,CAAR;AAEA,QAAIyrB,SAAS,gBAAG,2EACZ;AAAQ,UAAI,EAAC,QAAb;AACQ,eAAS,EAAC,2CADlB;AAEQ,uBAAe3rB,SAAS,CAACE,MAFjC;AAEyC,aAAO,EAAEsrB;AAFlD,0BAGwB,CAACnuB,+DAAA,GAAyB6B,UAAzB,EAAD,GAAyC,SAAzC,GAAqD,EAH7E,mCAII;AAAG,eAAS,EAAC;AAAb,MAJJ,aADY,eAOZ;AAAQ,UAAI,EAAC,QAAb;AACQ,eAAS,EAAC,2CADlB;AAEQ,uBAAec,SAAS,CAACE,MAFjC;AAEyC,aAAO,EAAEurB;AAFlD,uDAGyC;AAAG,eAAS,EAAC;AAAb,MAHzC,CAPY,CAAhB;AAcA,QAAIG,YAAY,gBACZ;AAAQ,UAAI,EAAC,QAAb;AACQ,eAAS,EAAC,2CADlB;AAEQ,uBAAe5rB,SAAS,CAACE,MAFjC;AAEyC,aAAO,EAAEurB;AAFlD,+BAG6B,CAACpuB,+DAAA,GAAyB6B,UAAzB,EAAD,GAAyC,SAAzC,GAAqD,EAHlF,mCAII;AAAG,eAAS,EAAC;AAAb,MAJJ,aADJ;AAQA,QAAI2sB,qBAAqB,gBACrB;AAAQ,UAAI,EAAC,QAAb;AACQ,eAAS,EAAC,kDADlB;AAEQ,uBAAe7rB,SAAS,CAACE,MAFjC;AAEyC,aAAO,EAAEwrB;AAFlD,sDAII;AAAG,eAAS,EAAC;AAAb,MAJJ,aADJ,CAzBW,CAiCX;;AACA,QAAII,UAAU,GAAG,CAAjB;;AACA,QAAI9rB,SAAS,CAAC+rB,WAAd,EAA2B;AACvBD,MAAAA,UAAU,GAAG9rB,SAAS,CAAC+rB,WAAV,CAAsBC,MAAnC;AACH,KArCU,CAwCnB;;;AACQ,QAAIC,aAAa,gBAAG;AAAG,eAAS,EAAC;AAAb,MAApB;AACA,QAAIC,UAAU,gBAAG;AAAM,uBAAelsB,SAAS,CAACE,MAA/B;AAAuC,eAAS,EAAC,kCAAjD;AACM,aAAO,EAAEqrB;AADf,mBAC2CO,UAD3C,CAAjB;;AAGA,QAAK9rB,SAAS,CAACwpB,SAAX,IAA0BxpB,SAAS,CAACwpB,SAAV,KAAwBhvB,2DAAtD,EAA6E;AACzE,UAAM4xB,MAAM,4CAA0CpsB,SAAS,CAACE,MAAhE;AAEA,0BACI;AAAK,iBAAS,EAAC;AAAf,sBACI;AAAK,iBAAS,EAAC;AAAf,sBACI;AAAG,YAAI,EAAEksB,MAAT;AAAiB,cAAM,EAAC;AAAxB,sBAAiC;AAAK,iBAAS,EAAC,cAAf;AAA8B,WAAG,EAAEpsB,SAAS,CAACqsB,KAA7C;AACK,WAAG,EAAC;AADT,QAAjC,CADJ,eAGI;AAAK,iBAAS,EAAC;AAAf,sBACI;AAAI,iBAAS,EAAC;AAAd,SAA4BrsB,SAAS,CAACmK,IAAtC,QAA8CnK,SAAS,CAAC2pB,IAAxD,QAAkE3pB,SAAS,CAACwpB,SAAV,KAAwBhvB,0DAAzB,IAAkDwF,SAAS,CAACwpB,SAAV,KAAwBhvB,iEAA3E,GAA0GyxB,aAA1G,GAA0H,EAA1L,OAAiMjsB,SAAS,CAACwpB,SAAV,KAAwBhvB,0DAAzB,IAAkDwF,SAAS,CAACwpB,SAAV,KAAwBhvB,iEAA3E,GAA0G0xB,UAA1G,GAAuH,EAAtT,eAAyT,4DAAzT,OAAiU7uB,+DAAA,GAAyB6B,UAAzB,EAAD,GAA4Cc,SAAS,CAACwpB,SAAV,KAAwBhvB,0DAAzB,GAAgDoxB,YAAhD,GAA+DD,SAA1G,GAAuHC,YAAvb,CADJ,eAGI;AAAG,iBAAS,EAAC;AAAb,SAA0B5rB,SAAS,CAACusB,WAApC,CAHJ,eAKI;AAAG,iBAAS,EAAC;AAAb,sBACI;AAAO,iBAAS,EAAC;AAAjB,wBACgBvsB,SAAS,CAACwsB,WAD1B,SAC0CxsB,SAAS,CAACysB,WADpD,uBACoE,4DADpE,eAEczsB,SAAS,CAAC0sB,UAFxB,SAEuC1sB,SAAS,CAAC2sB,UAFjD,eAGK3sB,SAAS,CAAC4sB,MAHf,eAGsB,4DAHtB,kBAIiB5sB,SAAS,CAAC6sB,UAJ3B,CADJ,CALJ,CAHJ,eAiBI;AAAK,iBAAS,EAAC;AAAf,mBACW7sB,SAAS,CAAC8sB,IADrB,cACmC9sB,SAAS,CAAC+sB,YAD7C,YACiE/sB,SAAS,CAACgtB,WAD3E,0BAC8F,4DAD9F,EAEKnB,qBAFL,CAjBJ,CADJ,CADJ;AA0BH,KA7BD,MA6BO;AACH,0BACI;AAAK,iBAAS,EAAC;AAAf,sBACI;AAAK,iBAAS,EAAC;AAAf,sBACI;AAAK,iBAAS,EAAC,cAAf;AAA8B,WAAG,EAAC,kBAAlC;AAAqD,WAAG,EAAC;AAAzD,QADJ,eAEI;AAAK,iBAAS,EAAC;AAAf,sBACI;AAAI,iBAAS,EAAC;AAAd,SAA4B7rB,SAAS,CAACmK,IAAtC,QAA8CnK,SAAS,CAAC2pB,IAAxD,OADJ,eAEI;AAAG,iBAAS,EAAC;AAAb,sBAFJ,eAGI;AAAG,iBAAS,EAAC;AAAb,sBACI;AAAO,iBAAS,EAAC;AAAjB,sBADJ,CAHJ,CAFJ,eAWI;AAAK,iBAAS,EAAE;AAAhB,sBAXJ,CADJ,CADJ;AAkBH;AACJ,GA9FD,MA8FO;AACH,wBACI;AAAK,eAAS,EAAC;AAAf,oBACI;AAAK,eAAS,EAAC;AAAf,MADJ,CADJ;AAMH;AACJ;;;;;;;;;;ACjnnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/component/controller/CallManager.ts","webpack://template-feo-react-babel/./src/component/controller/ScoreSheetController.ts","webpack://template-feo-react-babel/./src/component/sidebar/BoardGameSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ScoreSheetsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/view/BGGSearchView.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/ScoreSheetDetailView.ts","webpack://template-feo-react-babel/./src/component/view/ScoreSheetsView.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/state/GraphQLApiStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/template/TemplateManager.ts","webpack://template-feo-react-babel/./src/ui-framework/AbstractView.ts","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/ui-framework/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/ui-framework/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/util/UUID.ts","webpack://template-feo-react-babel/./src/App.tsx","webpack://template-feo-react-babel/./src/component/view/BoardGameView.tsx","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/handsontable/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/global","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any | null;\n    timer: number,\n    data: any[] | null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\nexport const STATE_NAMES = {\n    users: 'users',\n    boardGames: 'boardGames',\n    scores: 'scores',\n    selectedEntry: 'selectedEntry',\n    recentUserSearches: 'recentUserSearches',\n    bggSearchResults: 'bggSearchResults',\n    scoreSheet: 'scoreSheet'\n}\n\nexport const API_Config = {\n    login: '/login',\n    graphQL: '/graphql',\n    bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n    bggSearchCallById: {\n        queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n        resultName: 'getBoardGameDetails',\n    },\n    findUsers: {\n        queryString: 'query {findUsers {id, username}}',\n        resultName: 'findUsers',\n    },\n    addToMyCollection: {\n        queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n        resultName: 'addToMyCollection',\n    },\n    removeFromMyCollection: {\n        queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n        resultName: 'removeFromMyCollection'\n    },\n    getMyBoardGameCollection: {\n        queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scoresheets {id, player1, score1, player2, score2, player3, score3, player4, score4, player5, score5, player6, score6, player7, score7, createdOn}}}',\n        resultName: 'getMyBoardGameCollection',\n    },\n    addScoreSheetToBoardGame: {\n        queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}}',\n        resultName: 'addScoreSheetToBoardGame'\n    },\n    removeScoreSheet: {\n        queryString: 'mutation removeSheet($sheetId: String!) {removeScoreSheet(sheetId: $sheetId) {result}}',\n        resultName: 'removeFromMyCollection'\n    },\n};\n\nexport const NAVIGATION = {\n    showMyCollection: 'navigationItemMyCollection',\n    boardGameSearchId: 'navigationItemBoardGameSearch',\n    userSearchId: 'navigationItemUserSearch',\n    chatId: 'navigationItemChat',\n    showScoreSheet: 'navigationItemScoreSheet',\n\n}\n\nexport const ALERT = {\n    modalId: \"alert\",\n    titleId: \"alert-title\",\n    contentId: \"alert-content\",\n    cancelButtonId: \"alert-cancel\",\n    confirmButtonId: \"alert-confirm\",\n    closeButtonId: \"alert-close\",\n    hideClass: \"d-none\",\n    showClass: \"d-block\",\n}\n\nexport const DRAGGABLE = {\n    typeBoardGame: 'boardGame',\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites'\n}\n\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {API_Config, Decorator, STATE_NAMES} from \"./AppTypes\";\nimport Downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {ScoreSheetController} from \"./component/controller/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n    public static eventDataKeyId:string =  'board-game-id';\n\n\n    constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: STATE_NAMES.users,\n                apiURL: this.getServerAPIURL() + API_Config.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: API_Config.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: API_Config.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [STATE_NAMES.recentUserSearches, STATE_NAMES.boardGames, STATE_NAMES.scores], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n        }\n        let currentGameList: any[] = this.displayedBoardGamesStateManager.getStateByName(STATE_NAMES.boardGames);\n        currentGameList = this.cleanupBoardGameState(currentGameList);\n\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: currentGameList});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.bggSearchCallById.queryString, {gameId: boardGame.gameId}, this.callbackBoardGameDetails, STATE_NAMES.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[API_Config.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[API_Config.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game: any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n\n                if (updatingBoardGame.scoresheets) {\n                    const cb = (data: any, status: number, associatedStateName: string) => {\n                    };\n\n                    // add the scoresheets to database\n                    updatingBoardGame.scoresheets.forEach((scoreSheet: any) => {\n                        this.convertScoreSheetToApiCallFormat(scoreSheet);\n                        Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                            {userId: this.getCurrentUser(), boardGameId: updatingBoardGame.id, sheet: scoreSheet},\n                            cb,\n                            STATE_NAMES.scoreSheet,\n                            false);\n                        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n                        scoreSheet.decorator = Decorator.Persisted;\n\n                    });\n\n                }\n\n                this.applicationView.setState({boardGames: currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(STATE_NAMES.boardGames, updatingBoardGame, isSameGame, false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[API_Config.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[API_Config.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame: any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n\n                this.decorateScoreSheets(boardGame);\n\n                let index = currentGameList.findIndex((game: any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >= 0}`);\n                if (index >= 0) {\n                    const locallySaveBoardGame = currentGameList[index];\n\n                    cLoggerDetail(`in current state, replacing`);\n                    // copy any locally saved score sheets to the database object\n                    this.copyLocallySavedScoreSheetsToBoardGame(boardGame, locallySaveBoardGame);\n\n                    // replace the current entry\n                    currentGameList.splice(index, 1, boardGame);\n                } else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            currentGameList = this.cleanupBoardGameState(currentGameList);\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames: currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentGameList, false);\n        }\n    }\n\n    scoreSheetAddedToBoardGame(boardGame: any, scoreSheet: any) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                {userId: this.getCurrentUser(), boardGameId: boardGame.id, sheet: scoreSheet},\n                cb,\n                STATE_NAMES.scoreSheet,\n                false);\n            scoreSheet.decorator = Decorator.Persisted;\n        } else {\n            scoreSheet.decorator = Decorator.PersistedLocally;\n        }\n        // convert the scoresheet into the usual received format from the database\n        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    scoreSheetRemovedFromBoardGame(boardGame: any, scoreSheetId: string) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.removeScoreSheet.queryString,\n                {sheetId: scoreSheetId},\n                cb,\n                STATE_NAMES.scoreSheet,\n                false);\n        }\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(STATE_NAMES.boardGames, boardGame, true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            let scoreSheets = boardGame.scoresheets;\n                            delete boardGame.scoresheets;\n\n                            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                STATE_NAMES.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                            boardGame.scoresheets = scoreSheets;\n\n\n                        } else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                STATE_NAMES.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private cleanupBoardGameState(boardGames: any[]): any[] { // lets tidy up any duplicates, keeping Persisted ones by preference\n        let cleanedUpList: any[] = [];\n        boardGames.forEach((boardGame) => {\n            // is already in the list?\n            let index = cleanedUpList.findIndex((game) => game.gameId === boardGame.gameId);\n            if (index >= 0) { // found in the list\n                // is this a persisted board game?\n                let existingListGame = cleanedUpList[index]\n                if (existingListGame.decorator && existingListGame.decorator === Decorator.Persisted) {\n                    // leave the persisted version in the cleaned up list\n                } else {\n                    // do we have persisted game to replace the one in the list\n                    if (boardGame.decorator && boardGame.decorator === Decorator.Persisted) {\n                        // replace the existing one with this one\n                        cleanedUpList.splice(index, 1, boardGame);\n                    } else {\n                        // just leave the one there, neither are persisted to a database\n                    }\n                }\n            } else {\n                // not found yet, add to list\n                cleanedUpList.push(boardGame);\n            }\n\n        });\n        return cleanedUpList;\n\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.getMyBoardGameCollection.queryString, {userId: this.getLoggedInUserId()}, this.callbackGetCollection, STATE_NAMES.boardGames, false);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    private removeBoardGameFromState(boardGame: any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index, 1);\n            this.applicationView.setState({boardGames: currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(STATE_NAMES.boardGames, currentBoardGamesOnDisplay, false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n    private decorateScoreSheets(boardGame: any) {\n        if (boardGame) {\n            if (boardGame.scoresheets) {\n                boardGame.scoresheets.forEach((sheet: any) => {\n                    sheet.decorator = Decorator.Persisted;\n                })\n            } else {\n                boardGame.scoresheets = [];\n            }\n        }\n    }\n\n    private copyLocallySavedScoreSheetsToBoardGame(target: any, source: any) {\n        if (source.scoresheets) {\n            let toSave: any[] = [];\n            source.scoresheets.forEach((sheet: any) => {\n                // is the scoresheet already in the target?\n                let index = target.scoresheets.findIndex((item: any) => item.id === sheet.id);\n                if (index < 0) {\n                    sheet.decorator = Decorator.PersistedLocally;\n                    target.scoresheets.push(sheet);\n                    toSave.push(sheet);\n                }\n            });\n\n            // do we have any sheets to save?\n            if (toSave.length > 0) {\n                const cb = (data: any, status: number, associatedStateName: string) => {\n                };\n\n                toSave.forEach((sheetToSave: any) => {\n                    this.convertScoreSheetToApiCallFormat(sheetToSave);\n\n\n                    Downloader.getInstance().addQLApiRequest(API_Config.graphQL, API_Config.addScoreSheetToBoardGame.queryString,\n                        {userId: this.getCurrentUser(), boardGameId: target.id, sheet: sheetToSave},\n                        cb,\n                        this.config.stateNames.scoreSheet,\n                        false);\n\n                    this.convertScoreSheetToDatabaseFormat(sheetToSave);\n                    sheetToSave.decorator = Decorator.Persisted;\n                });\n            }\n        }\n    }\n\n    private convertScoreSheetToDatabaseFormat(scoreSheet: any) {\n        if (scoreSheet.players) {\n            if (scoreSheet.players.length >= 1) {\n                scoreSheet.player1 = scoreSheet.players[0];\n                scoreSheet.score1 = scoreSheet.scores[0];\n            }\n            if (scoreSheet.players.length >= 2) {\n                scoreSheet.player2 = scoreSheet.players[1];\n                scoreSheet.score2 = scoreSheet.scores[1];\n            }\n            if (scoreSheet.players.length >= 3) {\n                scoreSheet.player3 = scoreSheet.players[2];\n                scoreSheet.score3 = scoreSheet.scores[2];\n            }\n            if (scoreSheet.players.length >= 4) {\n                scoreSheet.player4 = scoreSheet.players[3];\n                scoreSheet.score4 = scoreSheet.scores[3];\n            }\n            if (scoreSheet.players.length >= 5) {\n                scoreSheet.player5 = scoreSheet.players[4];\n                scoreSheet.score5 = scoreSheet.scores[4];\n            }\n            if (scoreSheet.players.length >= 6) {\n                scoreSheet.player6 = scoreSheet.players[5];\n                scoreSheet.score6 = scoreSheet.scores[5];\n            }\n            if (scoreSheet.players.length >= 7) {\n                scoreSheet.player7 = scoreSheet.players[6];\n                scoreSheet.score7 = scoreSheet.scores[6];\n            }\n\n        }\n    }\n\n    private convertScoreSheetToApiCallFormat(scoreSheet: any) {\n        delete scoreSheet.decorator;\n        delete scoreSheet.player1;\n        delete scoreSheet.score1;\n        delete scoreSheet.player2;\n        delete scoreSheet.score2;\n        delete scoreSheet.player3;\n        delete scoreSheet.score3;\n        delete scoreSheet.player4;\n        delete scoreSheet.score4;\n        delete scoreSheet.player5;\n        delete scoreSheet.score5;\n        delete scoreSheet.player6;\n        delete scoreSheet.score6;\n        delete scoreSheet.player7;\n        delete scoreSheet.score7;\n    }\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n}\n\nexport default Controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport Controller from \"../../Controller\";\nimport {ScoreSheetDetailView} from \"../view/ScoreSheetDetailView\";\n\nconst callLogger = debug('call-manager');\n\nexport class CallManager {\n    private static _instance: CallManager;\n    \n\n    public static getInstance(): CallManager {\n        if (!(CallManager._instance)) {\n            CallManager._instance = new CallManager();\n        }\n        return CallManager._instance;\n    }\n\n    private peer: any | null = null;\n    private webrtcDiv: HTMLElement | null = null;\n    private myVideoStream: MediaStream | null = null;\n    private myVideo: HTMLVideoElement | null = null;\n    private currentUserList:string[];\n    \n    private constructor() {\n        this.callUser = this.callUser.bind(this);\n        this.currentUserList = [];\n    }\n\n    private startPeerConnection() {\n        if (Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore  - is for the WebRTC peer via Nodejs\n            this.peer = new Peer(Controller.getInstance().getLoggedInUsername(), {path: '/peerjs', host: '/', debug: 2, secure:true});\n            //this.peer = new Peer(Controller.getInstance().getLoggedInUsername(), {path: '/peerjs', host: '/', port: '3000', debug:1, secure:false});\n            this.peer.on('open', (id:any) => {\n                callLogger('My peer ID is: ' + id);\n            });\n        }\n    }\n    \n    public initialise() {\n        this.startPeerConnection();\n        // @ts-ignore\n        this.webrtcDiv = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.webrtc);\n        //this.reset();\n    }\n\n    public startScoreSheet() {\n        try {\n            if (Controller.getInstance().isLoggedIn()) {\n                if (navigator.mediaDevices.getUserMedia) {\n                    callLogger('Starting scoresheet stream');\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        callLogger('Scoresheet stream started - adding video element');\n                        this.myVideoStream = stream;\n                        this.addVideoStream(Controller.getInstance().getLoggedInUsername(), this.myVideoStream, true);\n                    });\n\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Non-secure context or no camera capability`);\n        }\n    }\n    \n    public reset() {\n        callLogger('Reset');\n        if (this.currentUserList && this.currentUserList.length > 0) {\n            callLogger('Removing previous users');\n            this.currentUserList.forEach((user) => {\n                callLogger('Removing previous user ${user}');\n                this.removeUser(user);\n            })\n        }\n        if (this.webrtcDiv) browserUtil.removeAllChildren(this.webrtcDiv);\n        this.currentUserList = [];\n        if (this.peer) {\n            callLogger('Stopping video stream');\n            //this.peer.disconnect();\n            if (this.myVideoStream) {\n                this.myVideoStream.getTracks().forEach((track) => track.stop());\n            }\n            if (this.myVideo) this.myVideo.srcObject = null;\n            this.myVideoStream = null;\n        }\n    }\n\n    private addVideoStream(username: string, stream: MediaStream, isCurrentUser = false) {\n        // check to see if they are already there\n        let index = this.currentUserList.findIndex((user) => user === username);\n        if (index >= 0) return;\n\n        this.currentUserList.push(username);\n\n        const videoCardHolder = document.createElement('div');\n        videoCardHolder.setAttribute(\"id\", username);\n        browserUtil.addRemoveClasses(videoCardHolder, 'col-sm-12 col-md-4 col-lg-2');\n        const videoCard = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCard,'card');\n        const videoCardTitle = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardTitle, 'card-header');\n        videoCardTitle.innerHTML = `<h5 class=\"card-title\">${username}</h5>`;\n        const videoCardBody = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardBody, 'card-body p-0 text-center');\n        const video = document.createElement('video');\n        browserUtil.addRemoveClasses(video, 'video ');\n\n        videoCard.appendChild(videoCardTitle);\n        videoCard.appendChild(videoCardBody);\n        videoCardBody.appendChild(video);\n\n        if (isCurrentUser) {\n            const videoCardFooter = document.createElement('div');\n            browserUtil.addRemoveClasses(videoCardFooter, 'card-footer');\n            const footerContent = document.createElement('div');\n            browserUtil.addRemoveClasses(footerContent,'d-flex w-100 justify-content-between mt-2');\n            const stopVideoButton = document.createElement('button');\n            stopVideoButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(stopVideoButton,'btn btn-circle btn-warning');\n            stopVideoButton.innerHTML = '<i class=\"fas fa-video-slash\"></i>';\n            const muteMicButton = document.createElement('button');\n            muteMicButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(muteMicButton,'btn btn-circle btn-warning');\n            muteMicButton.innerHTML = '<i class=\"fa fa-microphone\"></i>';\n\n            footerContent.appendChild(stopVideoButton);\n            footerContent.appendChild(muteMicButton);\n\n            videoCardFooter.appendChild(footerContent);\n\n            videoCard.appendChild(videoCardFooter);\n\n            stopVideoButton.addEventListener('click',() => {\n                const isPaused = video.paused;\n                if (isPaused) {\n                    video.play();\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',true);\n\n                }\n                else {\n                    video.pause();\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',false);\n                }\n\n            });\n            muteMicButton.addEventListener('click',() => {\n                const isMuted = video.muted;\n                if (isMuted) {\n                    video.muted = false;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',true);\n\n                }\n                else {\n                    video.muted = true;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',false);\n                }\n\n            });\n\n            this.myVideo = video;\n        }\n\n        videoCardHolder.appendChild(videoCard);\n        video.srcObject = stream;\n        video.addEventListener(\"loadedmetadata\", () => {\n            video.play();\n            if (this.webrtcDiv) this.webrtcDiv.append(videoCardHolder);\n        });\n    };\n\n    public callUser(userId: string) {\n        callLogger(`Asked to call user ${userId}`);\n        if (userId === Controller.getInstance().getLoggedInUsername()) return; // don't call ourself\n        let numberOfAttempts:number = 0;\n\n        let index = this.currentUserList.findIndex((user) => user === userId); // don't call the same users\n        if (index >= 0) return;\n        // wait a small time for the sockets and peer to sync\n        const interval = setInterval(() => {\n            callLogger(`Calling user ${userId}`);\n            if (this.myVideoStream) {\n                const call = this.peer.call(userId, this.myVideoStream);\n                if (call) {\n                    call.on('stream', (userVideoStream: any) => {\n                        callLogger(`User ${userId} answered, showing stream`);\n                        this.addVideoStream(userId, userVideoStream, false);\n                    });\n                    clearInterval(interval);\n                }\n                else {\n                    // try again shortly\n                    numberOfAttempts ++;\n                    if (numberOfAttempts > 3) clearInterval(interval);\n                }\n            }\n        },5000);\n    };\n\n    public removeUser(userId:string) {\n        callLogger(`Asked to remove user ${userId}`);\n        let index = this.currentUserList.findIndex((user) => user === userId);\n        if (index >= 0) {\n            this.currentUserList.splice(index,1);\n        }\n        const userVideoCard = document.getElementById(userId);\n        if (userVideoCard) {\n            callLogger(`Asked to remove user ${userId} - removing video element`);\n            const videoEl:HTMLVideoElement|null = userVideoCard.querySelector(\".video\");\n            if (videoEl) {\n                videoEl.srcObject = null;\n            }\n\n            browserUtil.removeAllChildren(userVideoCard);\n            const parentNode = userVideoCard.parentNode;\n            if (parentNode) parentNode.removeChild(userVideoCard);\n        }\n    }\n\n    prepareToAnswerCallFrom(userId: string) {\n        try {\n            if (Controller.getInstance().isLoggedIn()) {\n                callLogger(`Preparing to answer call from ${userId}`);\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        this.myVideoStream = stream;\n                        this.addVideoStream(Controller.getInstance().getLoggedInUsername(), this.myVideoStream, true);\n                        callLogger(`Awaiting call from ${userId}`);\n                        this.peer.on('call', (call: any) => {\n                            callLogger(`Answering call from ${userId}`);\n                            call.answer(this.myVideoStream);\n                            call.on('stream', (userVideoStream: any) => {\n                                alert(\"Answered\");\n                                callLogger(`Have answered, showing stream`);\n                                this.addVideoStream(userId, userVideoStream, false);\n                            });\n                        });\n                    });\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Insecure context or no video capability`);\n        }\n\n    }\n}","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../../socket/Types\";\nimport {ChatReceiver} from \"../../socket/ChatReceiver\";\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport {ScoreSheetDetailView} from \"../view/ScoreSheetDetailView\";\nimport {ScoreSheet, STATE_NAMES} from \"../../AppTypes\";\nimport uuid from \"../../util/UUID\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {StateManager} from \"../../state/StateManager\";\nimport moment from \"moment\";\nimport Controller from \"../../Controller\";\nimport {TemplateManager} from \"../../template/TemplateManager\";\nimport {CallManager} from \"./CallManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport SocketManager from \"../../socket/SocketManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    private static _instance: ScoreSheetController;\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n    public static SOURCE_View: string = 'ssv';\n\n    private applicationView: any | null = null;\n    private currentScoreRoom: string | null = null;\n    private currentlySelectedBoardGame: any | null = null;\n    private currentScoreSheet: ScoreSheet | null = null;\n    private currentUsername: string = '';\n    private isRoomCreator: boolean = false;\n    private stateManager: StateManager;\n    private currentUsersInScoreSheet: string[] = [];\n    private intervalTimer: number = -1;\n\n\n\n    private constructor() {\n        this.stateManager = new MemoryBufferStateManager();\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n        this.isSheetOwner = this.isSheetOwner.bind(this);\n        this.inviteUser = this.inviteUser.bind(this);\n        this.getCurrentRoom = this.getCurrentRoom.bind(this);\n        this.getSelectedBoardGame = this.getSelectedBoardGame.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimerStoppedByAnotherUser = this.stopTimerStoppedByAnotherUser.bind(this);\n        this.isTimerGoing = this.isTimerGoing.bind(this);\n        this.reset = this.reset.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    public getCurrentRoom(): string | null {\n        return this.currentScoreRoom;\n    }\n\n    receiveLogin(username: string): void {\n    }\n\n    receiveLogout(username: string): void {\n    }\n\n    public setCurrentUser(username: string): void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView: any) {\n        this.applicationView = applicationView;\n        CallManager.getInstance().initialise();\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreSheet) {\n            sscLogger(`Received invite - already in score sheet - declining`);\n            // are we already in this score sheet?\n            if (this.currentScoreSheet.room !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                SocketManager.getInstance().sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`)) {\n                SocketManager.getInstance().sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n\n        }\n\n        // prepare to receive a call\n        CallManager.getInstance().prepareToAnswerCallFrom(invite.from);\n\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Score Sheet', `Joining score sheet`, 'info', 7000);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ScoreSheet);\n        this.currentScoreRoom = invite.room;\n        this.currentlySelectedBoardGame = invite.attachment.boardGame;\n        this.currentScoreSheet = invite.attachment.scoreSheet;\n\n        Controller.getInstance().addBoardGameToDisplay(invite.attachment.boardGame);\n\n        // check to see if the timer should be going\n        if (this.isTimerGoing()) {\n            this.stopTimerStoppedByAnotherUser();\n            this.startTimer();\n        }\n        // ask the view to initialise with these values\n        ScoreSheetDetailView.getInstance().stateChanged(\"\", \"\", this.currentScoreSheet);\n\n\n\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n    public getSelectedBoardGame(): any | null {\n        return this.currentlySelectedBoardGame;\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message: Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        invites.forEach((invite: Invitation) => {\n            if (invite.type === InviteType.ScoreSheet) {  // only process offline invites to scoresheet\n                this.receiveInvitation(invite);\n            }\n        });\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        sscLogger(`Receive decline for room ${room} from ${username}`);\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                NotificationManager.getInstance().show('Score Sheet', `User ${username} declined the invitation.`, 'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.addUserToScoreSheet(users.username);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `User ${users.username} joined the scoresheet.`, 'message', 120000);\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index, 1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `User ${users.username} left the scoresheet.`, 'warning', 100000);\n    }\n\n    receiveUserList(users: string[]): void {\n    } // will be managed in the transfer of sheet data\n\n    public endScoreSheet(): void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet, true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    public startScoreSheet(boardGame: any): void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: TemplateManager.getInstance().getScoreSheetTemplate(boardGame),\n                timer: 0,\n                timerGoing: false,\n                data: TemplateManager.getInstance().getScoreSheetStartingData(boardGame),\n                isFinished: false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            CallManager.getInstance().startScoreSheet();\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(STATE_NAMES.scoreSheet, this.currentScoreSheet, true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) SocketManager.getInstance().joinChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n\n        }\n    }\n\n    public hasActiveScoreSheet(): boolean {\n        let result = false;\n        if (this.currentScoreRoom && (this.currentScoreRoom !== null)) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username: string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.isRoomCreator) {\n                NotificationManager.getInstance().show(this.currentlySelectedBoardGame.name, `You have invited user ${username} to the scoresheet`, 'message');\n                SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, this.currentScoreRoom, InviteType.ScoreSheet, true, this.currentlySelectedBoardGame.name, {\n                    scoreSheet: this.currentScoreSheet,\n                    boardGame: this.currentlySelectedBoardGame\n                });\n            } else {\n                alert(\"Only the score sheet creator can invite other users.\");\n            }\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        sscLogger(`'Handling receive message`);\n        sscLogger(message);\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet: ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n\n                    // @ts-ignore\n                    if (this.currentScoreSheet) {\n                        let timerWasGoing = this.currentScoreSheet.timerGoing;\n                        this.currentScoreSheet.room = message.room;\n                        this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                        this.currentScoreSheet.data = scoreSheet.data;\n                        this.currentScoreSheet.timer = (scoreSheet.timer > this.currentScoreSheet.timer) ? scoreSheet.timer : this.currentScoreSheet.timer;\n                        this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                        this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                        this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n\n                        // has the timer changed?\n                        if (scoreSheet.timerGoing) {\n                            if (timerWasGoing) {\n                                // both timers going, no need to do anything\n                            } else {\n                                // timer is going with another user, but we aren't going - start timer\n                                this.stopTimerStoppedByAnotherUser();\n                                this.startTimer();\n                            }\n                        } else { // timer not going at the other users end\n                            if (timerWasGoing) {\n                                // our timer is active - pause it\n                                this.stopTimerStoppedByAnotherUser();\n                            } else {\n                                // neither timer going\n                            }\n                        }\n\n\n                    }\n                    sscLogger('Updated score sheet');\n                    sscLogger(this.currentScoreSheet);\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet, true);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        // reset the view\n                        ScoreSheetDetailView.getInstance().resetDisplay();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner(): boolean {\n        return this.isRoomCreator;\n    }\n\n    public createScoreSheetFromTable(): ScoreSheet | null {\n        let scoreSheet: ScoreSheet | null = null;\n        let tableData = ScoreSheetDetailView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: (this.currentlySelectedBoardGame) ? TemplateManager.getInstance().getScoreSheetTemplate(this.currentlySelectedBoardGame) : null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet: ScoreSheet, isFinished: boolean = false): void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            socketManager.sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        // @ts-ignore\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer++;\n                ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n            } else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n                }\n            }\n        }, 1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            this.intervalTimer = -1;\n\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet, false);\n            }\n        }\n    }\n\n    public userChangedValue(value: any, source: string) {\n        sscLogger(`Handling user changed value ${source}`)\n        if (source === ScoreSheetController.SOURCE_View) return;\n\n        // is the source an edit?\n        if (source !== 'edit') return;\n\n        let scoreSheet: ScoreSheet | null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            sscLogger(`Letting the template manager change any values`);\n            const changedByTM: boolean = TemplateManager.getInstance().transformDataAfterUserChange(this.currentlySelectedBoardGame, scoreSheet);\n            if (changedByTM) {\n                sscLogger(scoreSheet);\n            }\n\n            this.saveCurrentScoreSheet(scoreSheet, changedByTM);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet, false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                SocketManager.getInstance().leaveChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n            }\n            this.reset();\n            this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n        }\n    }\n\n    protected addUserToScoreSheet(username: string): void {\n        if (Controller.getInstance().isLoggedIn()) {\n            sscLogger(`Calling user ${username}`);\n            CallManager.getInstance().callUser(username);\n        }\n    }\n\n    protected removeUserFromScoreSheet(username: string): void {\n        sscLogger(`Removing user ${username}`);\n        CallManager.getInstance().removeUser(username);\n    }\n\n    private reset(): void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n        this.stopTimerStoppedByAnotherUser();\n        CallManager.getInstance().reset();\n    }\n\n    private isLoggedIn(): boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet: ScoreSheet) {\n        sscLogger('Handling save');\n\n        // add the data to the selected board game\n        if (this.currentlySelectedBoardGame) {\n            const saveData = TemplateManager.getInstance().getSaveData(this.currentlySelectedBoardGame, scoreSheet);\n            sscLogger(saveData);\n            if (!this.currentlySelectedBoardGame.scoresheets) {\n                this.currentlySelectedBoardGame.scoresheets = [];\n            }\n            this.currentlySelectedBoardGame.scoresheets.push(saveData);\n            Controller.getInstance().scoreSheetAddedToBoardGame(this.currentlySelectedBoardGame, saveData);\n        }\n    }\n\n    private saveCurrentScoreSheet(scoreSheet: ScoreSheet, informListeners: boolean = true) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(STATE_NAMES.scoreSheet, this.currentScoreSheet, informListeners);\n    }\n\n    private stopTimerStoppedByAnotherUser() {\n        sscLogger(`Handling timer stopped by another user`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) ScoreSheetDetailView.getInstance().updateTimer(this.currentScoreSheet.timer, true);\n        }\n        this.intervalTimer = -1;\n    }\n\n}\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass BoardGameSearchSidebar extends SidebarViewContainer {\n    private static BGGSEARCH_SidebarPrefs:SidebarPrefs = {\n        id:'boardGameSearchSidebar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    public static bggSearchResults = 'bggSearchResults';\n\n    constructor() {\n        super(BoardGameSearchSidebar.BGGSEARCH_SidebarPrefs);\n    }\n}\n\nexport default BoardGameSearchSidebar;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ScoreSheetsSidebar extends SidebarViewContainer {\n    private static SidebarPrefs:SidebarPrefs = {\n        id:'scoreSheetSidebar',\n        expandedSize:'40%',\n        location: SidebarLocation.bottom\n    }\n\n    public static scoreSheets = 'scoreSheets';\n\n    constructor() {\n        super(ScoreSheetsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ScoreSheetsSidebar;\n","import SidebarViewContainer from '../../ui-framework/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport DownloadManager from \"../../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {API_Config, DRAGGABLE, STATE_NAMES} from \"../../AppTypes\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from \"../../ui-framework/View\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BGGSearchView extends AbstractView implements ViewListener{\n    // @ts-ignore\n    private formEl: HTMLElement;\n    // @ts-ignore\n    private queryEl: HTMLInputElement;\n    // @ts-ignore\n    private buttonEl: HTMLButtonElement;\n\n    private static BGGSEARCH_ViewConfig:ViewDOMConfig = {\n        resultsContainerId:'bggSearchResults',\n        resultsElementType:'a',\n        resultsElementAttributes:[{name:'href',value:'#'}],\n        resultsClasses:'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId:'gameId',\n        dataSourceId:'bggSearch',\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active:'list-group-item-info',\n            warning:'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-dice',\n            inactive: 'fas fa-dice',\n            active:'fas fa-dice',\n            warning:'fas fa-dice'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType:'span',\n            textElementClasses:'mb-1',\n            select: true,\n            drag: {\n                type: DRAGGABLE.typeBoardGame,\n                from: 'boardGameSearch'\n            }\n        },\n    }\n\n    static BGGSEARCH_Form:string = 'bggSearch';\n    static BGGSEARCH_Query:string = 'queryText';\n    static BGGSEARCH_Search:string = 'bggSearchButton';\n\n    constructor() {\n        super(BGGSearchView.BGGSEARCH_ViewConfig,new MemoryBufferStateManager(),STATE_NAMES.bggSearchResults);\n\n        // handler binding\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n    }\n\n    public handleSearchResultsCB(data: any, status: number, associatedStateName: string): void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            if (this.stateManager && this.stateName) this.stateManager.setStateByName(this.stateName, data.data.findBoardGames, true);\n        }\n    }\n\n    onDocumentLoaded() {\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = document.getElementById(BGGSearchView.BGGSEARCH_Form);\n        // @ts-ignore\n        this.buttonEl = document.getElementById(BGGSearchView.BGGSEARCH_Search);\n        // @ts-ignore\n        this.queryEl = document.getElementById(BGGSearchView.BGGSEARCH_Query);\n\n        this.formEl.addEventListener('submit', this.handleSearch);\n\n        this.addEventListener(this);\n\n        super.onDocumentLoaded();\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    compareStateItemsForEquality(item1: any, item2: any): boolean {\n        let result = false;\n        if (item1.gameId && item2.gameId) {\n            const parsed1 = parseInt(item1.gameId);\n            const parsed2 = parseInt(item2.gameId);\n            if (!isNaN(parsed1) && !isNaN(parsed2)) {\n                item1.gameId = parsed1;\n                item2.gameId = parsed2;\n                result = (item1.gameId === item2.gameId);\n            }\n        }\n        return result;\n    }\n\n\n    eventClickItem(event: MouseEvent) {\n        super.eventClickItem(event);\n        //this.applicationView.addBoardGameToDisplay(boardGame);\n        this.eventForwarder.hideRequested(this);\n    }\n\n\n    private changeSearchButton(enable: boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        } else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\", \"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event: Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = API_Config.bggSearchCall;\n        DownloadManager.getInstance().addQLApiRequest(API_Config.graphQL, query, {queryString: queryText}, this.handleSearchResultsCB, STATE_NAMES.bggSearchResults);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {    }\n    itemDeleteStarted(view: View, selectedItem: any): boolean {return true;}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        /* listen for our own deletes as we are expected to implement them */\n        vLoggerDetail(`Handling delete of board game search result for game ${selectedItem.gameId}`);\n        this.stateManager?.removeItemFromState(STATE_NAMES.bggSearchResults,selectedItem,this.compareStateItemsForEquality,true);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n}\n\nexport default BGGSearchView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES} from \"../../AppTypes\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport { View } from '../../ui-framework/View';\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractView implements ChatUserEventListener, ViewListener {\n    private static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'blockedUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'user-id',\n        dataSourceId: 'blockedUsers',\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateView('',{});\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForStateItem(name: string, item: any): string {\n        return item.username;\n    }\n\n    updateView(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateView(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n}\n\nexport default BlockedUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport notifier from \"../../notification/NotificationManager\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {DRAGGABLE, STATE_NAMES} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, ViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: ViewListener): void {}\n\n    getIdForStateItem(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForStateItem(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareStateItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForStateItem(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForStateItem(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValue(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImage(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateView(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem} deselected`);\n        if (this.selectedChatLog && (selectedItem === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(selectedItem.roomName);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem} selected`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(selectedItem);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n    handleUserDrop(event: Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/View\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogsView extends AbstractView implements ChatEventListener,ViewListener {\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static chatFastSearchUserNames:string = 'chatFastSearchUserNames';\n\n    private static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'chatLogs',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'room',\n        dataSourceId: 'chatLogs',\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,null, null);\n\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateView('', {})\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n\n        this.updateView('', {});\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with chat manager`);\n        newState = ChatManager.getInstance().getChatLogs();\n        csLoggerDetail(newState);\n        super.updateView(name, newState);\n    }\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        this.eventForwarder.itemSelected(this,this.selectedChatLog);\n        this.updateView('',{});\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateView('', {});\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.eventForwarder.itemSelected(this,this.selectedChatLog);\n        this.updateView('', {});\n    }\n\n    getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        ChatManager.getInstance().leaveChat(selectedItem);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem)) {\n            this.eventForwarder.itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n\n        this.updateView('', {});\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            this.eventForwarder.itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n}\n\nexport default ChatLogsView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/View\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractView implements ChatUserEventListener,ViewListener {\n    static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'favouriteUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'user-id',\n        dataSourceId: 'blockedUsers',\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateView('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateView('',{});\n    }\n\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateView(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateView(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateView('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n}\n\nexport default FavouriteUserView;\n","import StateChangeListener from \"../../state/StateChangeListener\";\nimport {ScoreSheetController} from \"../controller/ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {DRAGGABLE, ScoreSheet, STATE_NAMES} from \"../../AppTypes\";\nimport {TemplateManager} from \"../../template/TemplateManager\";\nimport {StateManager} from \"../../state/StateManager\";\nimport Controller from \"../../Controller\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE} from \"../../ui-framework/ConfigurationTypes\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetDetailView implements StateChangeListener {\n    private static _instance: ScoreSheetDetailView;\n\n    public static ScoreSheetDom = {\n            dropZone: \"scoreSheetZone\",\n            boardGame: \"selectedBoardGame\",\n            startStopTimer: \"startStopTimer\",\n            timer: \"timerDisplay\",\n            end: \"leaveScoreSheet\",\n            scoreSheet: \"scoreSheet\",\n            iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n            iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n            iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n            iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n            ssFastSearchUserNames: 'ssFastSearchUserNames',\n            webrtc: 'webrtc'\n        }\n\n\n\n\n    // @ts-ignore\n    protected ssFastSearchUserNames: HTMLElement;\n    private stateManager: StateManager;\n\n    private thisEl: HTMLDivElement | null = null;\n    private boardGameTitleEl: HTMLHeadingElement | null = null;\n    private startStopTimer: HTMLButtonElement | null = null;\n    private timerEl: HTMLDivElement | null = null;\n    private endOrLeaveEl: HTMLButtonElement | null = null;\n    private scoreSheetEl: HTMLDivElement | null = null;\n\n\n\n    private table: Handsontable | null = null;\n    private controller: ScoreSheetController;\n    private config: any;\n\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n        this.stateManager = Controller.getInstance().getStateManager();\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    public static getInstance(): ScoreSheetDetailView {\n        if (!(ScoreSheetDetailView._instance)) {\n            ScoreSheetDetailView._instance = new ScoreSheetDetailView();\n        }\n        return ScoreSheetDetailView._instance;\n    }\n\n    public onDocumentLoaded() {\n        this.resetDisplay();\n\n        // @ts-ignore\n        this.ssFastSearchUserNames = document.getElementById(ScoreSheetDetailView.ssFastSearchUserNames);\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ScoreSheetDetailView.ssFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.scoreSheet, this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(ScoreSheetDetailView.ScoreSheetDom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click', this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click', this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {\n                event.preventDefault()\n            });\n            this.thisEl.addEventListener('drop', this.handleUserDrop);\n        }\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        ssvLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected, and is scoresheet owner\n        if (ScoreSheetController.getInstance().isSheetOwner()) {\n            ScoreSheetController.getInstance().inviteUser(ui.item.label);\n        }\n        else {\n            alert (\"Only the score sheet creator can invite users.\");\n        }\n    }\n\n\n    handleEndOrLeave(event: MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        } else {\n            // leaving the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event: MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        } else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event: Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    public resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) {\n            this.startStopTimer.innerHTML = 'Start ' + ScoreSheetDetailView.ScoreSheetDom.iconStart;\n            this.startStopTimer.setAttribute(\"disabled\", \"true\");\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = ScoreSheetDetailView.ScoreSheetDom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n\n\n    }\n\n    public updateTimer(time: number, isPaused: boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + ScoreSheetDetailView.ScoreSheetDom.iconStart;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n            } else {\n                this.startStopTimer.innerHTML = 'Pause   ' + ScoreSheetDetailView.ScoreSheetDom.iconInProgress;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', true);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', false);\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ScoreSheetDetailView.ScoreSheetDom.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n\n        } else {\n            let scoreSheet: ScoreSheet = newValue;\n            ssvLogger(`Processing new state`);\n            ssvLogger(scoreSheet);\n            if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n            // update the board game name\n            if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n            // update the table\n            if (this.table) {\n                // process the data in the state change, will be array of array (rows) into what the table wants\n                let tableData: any = [];\n                // @ts-ignore\n                scoreSheet.data.forEach((row: any[], rowIndex: number) => {\n                    row.forEach((column: any, columnIndex: number) => {\n                        tableData.push([rowIndex, columnIndex, column]);\n                    });\n                });\n                ssvLogger(`Table data is `);\n                ssvLogger(tableData);\n                // @ts-ignore\n                this.table.setDataAtCell(tableData, ScoreSheetController.SOURCE_View);\n\n            } else {\n                // create a new table\n\n                if (this.scoreSheetEl) {\n                    const boardGame = this.controller.getSelectedBoardGame();\n                    if (boardGame) {\n                        scoreSheet.sheetLayoutOptions = TemplateManager.getInstance().getScoreSheetTemplate(boardGame);\n                    }\n                    scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                    this.table = new Handsontable(\n                        this.scoreSheetEl,\n                        scoreSheet.sheetLayoutOptions);\n                    // @ts-ignore\n                    this.table.addHook('afterChange', this.controller.userChangedValue);\n                }\n            }\n\n\n            // update the timer\n            if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n        }\n\n    }\n\n    public getTableData(): any[] {\n        if (this.table) {\n            return this.table.getData();\n        } else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n\n    private createTimerDisplay(timer: number): string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        } else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer / 3600);\n                let minutes = Math.floor(timer / 60);\n                let seconds = timer - (hours * 3600) - (minutes * 60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    } else {\n                        result += `${minutes}:`\n                    }\n                } else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    } else {\n                        result += `${seconds}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            } else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    } else {\n                        result += `${timer}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            }\n        }\n        return result;\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n}","import debug from 'debug';\nimport moment from \"moment\";\nimport Controller from \"../../Controller\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from \"../../ui-framework/View\";\n\n\nconst csLogger = debug('score-sheet-sidebar');\nconst csLoggerDetail = debug('score-sheet-sidebar:detail');\n\nclass ScoreSheetsView extends AbstractView implements ViewListener{\n    protected selectedBoardGame: any | null = null;\n    static SCORESHEETS_ViewConfig:ViewDOMConfig = {\n        resultsContainerId:'scoreSheets',\n        resultsElementType:'div',\n        resultsClasses:'text-white bg-info col-sm-6 col-md-3 col-lg-2 score-card',\n        keyId:'id',\n        dataSourceId:'scoreSheet',\n        detail: {\n            containerClasses: 'card-img-overlay',\n            textElementType:'div',\n            textElementClasses:'ml-2',\n            select: true,\n            delete: {\n                buttonClasses: 'btn btn-rounded btn-warning ml-6 mt-4',\n                buttonText:'Delete&nbsp;',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            background: {\n                elementType: 'img',\n                elementClasses: 'score-card-img'\n            }\n        },\n    }\n\n\n    constructor() {\n        super(ScoreSheetsView.SCORESHEETS_ViewConfig,null,null);\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n        this.updateView('', {});\n    }\n\n\n    public setSelectedBoardGame(boardGame: any) {\n        csLogger(`setting selected board game to`);\n        csLoggerDetail(boardGame);\n        if (boardGame) {\n            this.selectedBoardGame = boardGame;\n            this.updateView('', boardGame);\n        }\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">${this.selectedBoardGame.name} (${this.selectedBoardGame.year})</h5>`;\n        buffer += `<p class=\"card-text\">Played On: ${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</p>`;\n        buffer += `<p class=\"card-text\">Scores: `;\n        if (item.player1) {\n            if (item.score1 > 0) {\n                buffer += `${item.player1}:${item.score1} `;\n            }\n        }\n        if (item.player2) {\n            if (item.score2 > 0) {\n                buffer += `${item.player2}:${item.score2} `;\n            }\n        }\n        if (item.player3) {\n            if (item.score3 > 0) {\n                buffer += `${item.player3}:${item.score3} `;\n            }\n        }\n        if (item.player4) {\n            if (item.score4 > 0) {\n                buffer += `${item.player4}:${item.score4} `;\n            }\n        }\n        if (item.player5) {\n            if (item.score5 > 0) {\n                buffer += `${item.player5}:${item.score5} `;\n            }\n        }\n        if (item.player6) {\n            if (item.score6 > 0) {\n                buffer += `${item.player6}:${item.score6} `;\n            }\n        }\n        if (item.player7) {\n            if (item.score7 > 0) {\n                buffer += `${item.player7}:${item.score7} `;\n            }\n        }\n        buffer += `</p>`;\n        return buffer;\n    }\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with selected board game`);\n        if (newState) {\n            if (newState.scoresheets) {\n                this.createResultsForState(name, newState.scoresheets);\n            }\n        }\n\n    }\n\n    getBackgroundImage(name: string, item: any): string {\n        return './img/scorecard-vertical.jpg';\n    }\n\n    getIdForStateItem(name: string, item: any): string {\n        return item.id;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        return (this.selectedBoardGame && confirm(\"Are you sure you want to delete this Score Sheet?\"));\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Handling delete ${selectedItem}`);\n        // remove the sheet from the selected board game\n        if (this.selectedBoardGame.scoresheets) {\n            let index = this.selectedBoardGame.scoresheets.findIndex((sheet: any) => sheet.id === selectedItem);\n            if (index >= 0) {\n                this.selectedBoardGame.scoresheets.splice(index, 1);\n                // let the controller know to remove from the database if the user is logged in\n                Controller.getInstance().scoreSheetRemovedFromBoardGame(this.selectedBoardGame, selectedItem);\n            }\n        }\n        this.updateView('', this.selectedBoardGame);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    showRequested(view: View): void {}\n\n\n}\n\nexport default ScoreSheetsView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {Modifier, ViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES} from \"../../AppTypes\";\nimport AbstractView from \"../../ui-framework/AbstractView\";\nimport {ViewListener} from \"../../ui-framework/ViewListener\";\nimport {View} from \"../../ui-framework/View\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchView extends AbstractView implements ChatUserEventListener,ViewListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: ViewDOMConfig = {\n        resultsContainerId: 'recentUserSearches',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'user-id',\n        dataSourceId: 'recentUserSearches',\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'blocked',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash',\n\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateView(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        this.addEventListener(this);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateView(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, isSame, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n\n}\n\nexport default UserSearchView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = uuid.getUniqueId();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import moment from \"moment\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport debug from 'debug';\n\nconst templateLogger = debug('template-manager');\n\nexport class TemplateManager {\n    private static _instance: TemplateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): TemplateManager {\n        if (!(TemplateManager._instance)) {\n            TemplateManager._instance = new TemplateManager();\n        }\n        return TemplateManager._instance;\n    }\n\n    public getScoreSheetTemplate(boardGame: any): any | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiTemplate();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingTemplate();\n        }\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    public getScoreSheetStartingData(boardGame: any): any[] | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiStartingData();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingStartingData();\n        }\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    public getSaveData(boardGame: any, scoreSheet: ScoreSheet): any {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiSaveData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingSaveData(scoreSheet);\n        }\n        return this.getDefaultSaveData(scoreSheet);\n    }\n\n    public transformDataAfterUserChange(boardGame: any, scoreSheet: ScoreSheet): boolean {\n        let result = false;\n        if (boardGame.gameId === 270314) {\n            result = true;\n            this.transformOhanamiData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            result = true;\n            this.transformSkullKingData(scoreSheet);\n        }\n        return result; // do nothing unless for a specific game\n    }\n\n    private getOhanamiTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 8)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column > 1) {\n                    if ((row === 1) || (row === 2) || (row === 4)) {\n                        return {\n                            className: 'bg-ohanami-blue',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 3) || (row === 5)) {\n                        return {\n                            className: 'bg-ohanami-green',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 6)) {\n                        return {\n                            className: 'bg-ohanami-grey',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 7)) {\n                        return {\n                            className: 'bg-ohanami-pink',\n                            forceNumeric: true,\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 21)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column % 2 === 0) {\n                    if (row % 2 === 0) {\n                        return {\n                            className: 'bg-readonly',\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingStartingData(): any[] {\n        return [\n            ['Round', '', 'P 1', '', 'P 2', '', 'P 3', '', 'P 4', ''],\n            ['1', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['2', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['3', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['4', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['5', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['6', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['7', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['8', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['9', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['10', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['Total', '', '', '', '', '', '', '', '', '']\n        ];\n    }\n\n    private getOhanamiStartingData(): any[] {\n        return [\n            ['Round', 'Mult.', 'P 1', 'P 2', 'P 3', 'P 4'],\n            ['1', 'x3', '0', '0', '0', '0'],\n            ['2', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['3', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['', 'x7', '0', '0', '0', '0'],\n            ['', 'var', '0', '0', '0', '0'],\n            ['Total', '', '0', '0', '0', '0']\n        ];\n    }\n\n    private getDefaultScoreSheetTemplate(boardGame: any): any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn: 0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame: any): any[] {\n        return [\n            ['P 1', 'P 2', 'P 3', 'P 4', 'P 5', 'P 6', 'P 7'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n        ];\n    }\n\n    private getDefaultSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        // ensure the scores are numbers\n        scores.forEach((score,index) => {\n            const parsed = parseInt(score);\n            if (isNaN(parsed)) {\n                scores[index] = 0;\n            }\n            else {\n                scores[index] = parsed;\n            }\n        })\n\n        // @ts-ignore\n        saveData.players = playerNames;\n        // @ts-ignore\n        saveData.scores = scores;\n        return saveData;\n    }\n\n    private getOhanamiSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first two columns\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 2; index < playerNames.length; index++) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for ohanami is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private getSkullKingSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first three columns, every second column\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // last row is the scores, following the same pattern as the playr names\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 3; index < playerNames.length; index += 2) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for skull king is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private calculateOhanamiPinkScore(numOfCards: number): number {\n        let score = 0;\n        if (numOfCards > 0) {\n            if (numOfCards > 15) numOfCards = 15;\n            while (numOfCards > 0) {\n                score += numOfCards;\n                numOfCards--;\n            }\n        }\n        return score;\n    }\n\n    private transformOhanamiData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 0; index < 4; index++) {\n            /*\n             *  for each player the score is the sum of\n             *  3 x row 1, 2, and 4\n             *  4 x row 3 and 5\n             *  7 x row 6\n             *  row 7 is complicated\n             */\n            let score: number = 0;\n            // @ts-ignore\n            let parsed = parseInt(scoreSheet.data[1][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[2][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[4][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[3][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[5][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[6][index + 2]);\n            if (!isNaN(parsed)) score += (7 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[7][index + 2]);\n            if (!isNaN(parsed)) score += this.calculateOhanamiPinkScore(parsed);\n\n            // @ts-ignore\n            scoreSheet.data[8][index + 2] = score;\n        }\n    }\n\n    private transformSkullKingData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 2; index < 10; index += 2) {\n            /*\n             *  for each player the score is the sum of\n             *  each bid score plus a bonus\n             *  if bid is 0, and actual is 0, score is 10 x round\n             *  if bid is x, and actual is x, score is 20 x bid\n             *  if bid ix x, and actual is y (x != y), score is 10 x abs(x-y)\n             */\n            let score: number = 0;\n\n\n            for (let round = 1; round <= 10; round++) {\n                let row = 2 * round - 1;\n                // @ts-ignore\n                let parsedBid = parseInt(scoreSheet.data[row][index]);\n                // @ts-ignore\n                let parsedActual = parseInt(scoreSheet.data[row][index + 1])\n                // @ts-ignore\n                let parsedBonus = parseInt(scoreSheet.data[row + 1][index + 1]);\n                // @ts-ignore\n                if (!isNaN(parsedBid) && !isNaN(parsedActual)) {\n                    if ((parsedBid === 0) && (parsedActual === 0)) {\n                        score += round * 10;\n                    }\n                    if (parsedBid === parsedActual) {\n                        score += 20 * parsedBid;\n                    }\n                    if ((parsedBid > 0) && (parsedBid !== parsedActual)) {\n                        score -= 10 * Math.abs(parsedBid - parsedActual);\n                    }\n                    if (!isNaN(parsedBonus)) score += parsedBonus;\n                }\n            }\n\n            // @ts-ignore\n            scoreSheet.data[21][index + 1] = score;\n        }\n\n    }\n}","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\nimport ViewListenerForwarder from \"./ViewListenerForwarder\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    Modifier,\n    ViewDOMConfig,\n} from \"./ConfigurationTypes\";\nimport {ViewListener} from \"./ViewListener\";\nimport {View} from \"./View\";\nimport {isSame} from \"../util/EqualityFunctions\";\n\nconst avLogger = debug('view-ts');\nconst avLoggerDetails = debug('view-ts-detail');\n\nexport default abstract class AbstractView implements StateChangeListener, View {\n\n    public static DATA_SOURCE = 'data-source';\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected stateManager: StateManager|null;\n    protected stateName: string|null;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement|null = null;\n\n    protected constructor(uiConfig: ViewDOMConfig, stateManager: StateManager|null, stateName:string|null) {\n        this.uiConfig = uiConfig;\n        this.stateManager = stateManager;\n        this.stateName = stateName;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        // setup state listener\n        if (this.stateManager && this.stateName) this.stateManager.addChangeListenerForName(this.stateName,this);\n\n    }\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.eventForwarder.documentLoaded(this);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (this.stateManager && this.stateName) this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (this.stateManager && this.stateName) this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (this.stateManager && this.stateName) this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    protected eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        // @ts-ignore\n        avLoggerDetails(`Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        if (this.stateManager && this.stateName) {\n            let selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n            if (selectedItem) this.eventForwarder.itemSelected(this, selectedItem);\n        }\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        // @ts-ignore\n        avLoggerDetails(`Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        if (this.stateManager && this.stateName) {\n            let selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n            if (selectedItem) {\n                const shouldDelete = this.eventForwarder.itemDeleteStarted(this, selectedItem);\n                if (shouldDelete) {\n                    this.eventForwarder.itemDeleted(this, selectedItem);\n                }\n            }\n        }\n        else {\n            // no statemanager - send the id to the listener\n            const shouldDelete = this.eventForwarder.itemDeleteStarted(this, itemId);\n            if (shouldDelete) {\n                this.eventForwarder.itemDeleted(this, itemId);\n            }\n\n        }\n    }\n\n    protected eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n        // @ts-ignore\n        avLoggerDetails(`Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        if (this.stateManager && this.stateName) {\n            let selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n            if (selectedItem) {\n                this.eventForwarder.itemAction(this, actionName, selectedItem);\n            }\n        }\n    }\n\n\n    protected getDragData(event: DragEvent): any {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        // @ts-ignore\n        avLoggerDetails(`Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n\n        let selectedItem = {};\n\n        if (this.stateManager && this.stateName) {\n            selectedItem = this.stateManager.findItemInState(this.stateName, compareWith, this.compareStateItemsForEquality);\n            if (selectedItem) {\n                // @ts-ignore\n                selectedItem[DRAGGABLE_TYPE] = this.uiConfig.detail.drag?.type;\n                // @ts-ignore\n                selectedItem[DRAGGABLE_FROM] = this.uiConfig.detail.drag?.from;\n            }\n        }\n        return selectedItem;\n    }\n\n    abstract getIdForStateItem(name: string, item: any): string;\n    abstract getDisplayValueForStateItem(name: string, item: any): string;\n\n    compareStateItemsForEquality(item1:any, item2:any) :boolean {\n        return isSame(item1,item2);\n    }\n\n    getModifierForStateItem(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImage(name: string, item: any): string {\n        return '';\n    }\n\n    updateView(name: string, newState: any): void {\n        this.createResultsForState(name, newState);\n    }\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('drag start');\n        avLoggerDetails(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        avLoggerDetails(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n    }\n\n    protected createResultForItem(name: string, item: any): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n\n        let childEl: HTMLElement = document.createElement(this.uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, this.uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, this.uiConfig.resultsElementAttributes);\n        childEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (this.uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, this.uiConfig.detail.containerClasses);\n            contentEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n\n\n            textEl = document.createElement(this.uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,this.uiConfig.detail.textElementClasses);\n            textEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (this.uiConfig.detail.background) {\n                let imgEl = document.createElement(this.uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, this.uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.getBackgroundImage(name, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (this.uiConfig.detail.badge) {\n                const badgeValue = this.getBadgeValue(name, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(this.uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, this.uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, this.uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (this.uiConfig.extraActions) {\n                this.uiConfig.extraActions.forEach((extraAction) => {\n                    let action: HTMLElement = document.createElement('button');\n                    action.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                    if (extraAction.buttonText) {\n                       action.innerHTML = extraAction.buttonText;\n                    }\n                    if (extraAction.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n                        action.appendChild(iconEl);\n                    }\n                    action.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                    action.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                    action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n\n                    action.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventActionClicked(event);\n                    });\n                    buttonsEl.appendChild(action);\n                });\n            }\n            if (this.uiConfig.detail.delete) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, this.uiConfig.detail.delete.buttonClasses);\n                if (this.uiConfig.detail.delete.buttonText) {\n                   deleteButtonEl.innerHTML = this.uiConfig.detail.delete.buttonText;\n                }\n                if (this.uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, this.uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (this.uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (this.uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        textEl.innerHTML = displayText;\n        // add modifiers for patient state\n        if (this.uiConfig.modifiers) {\n            const modifier = this.getModifierForStateItem(name, item);\n            const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger('Abstract View: normal item');\n                    browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.normal);\n                    if (this.uiConfig.icons && this.uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.normal);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.warning, true);\n                            if (this.uiConfig.icons && this.uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.warning);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (this.uiConfig.icons && this.uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.active);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger('Abstract View: active item', 10);\n                    browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.active);\n                    if (this.uiConfig.icons && this.uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.active);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.warning, true);\n                            if (this.uiConfig.icons && this.uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.warning);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger('Abstract View: inactive item', 10);\n                    browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.inactive);\n                    if (this.uiConfig.icons && this.uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.inactive);\n                        iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (this.uiConfig.icons && this.uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, this.uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.warning);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (this.uiConfig.icons && this.uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, this.uiConfig.icons.active);\n                                iconEl.setAttribute(this.uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(AbstractView.DATA_SOURCE,this.uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        // remove the previous items from list\n        const viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name, item);\n            // add draggable actions\n            avLogger(`Abstract View: Adding child ${this.getIdForStateItem(name,item)}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n        if (this.uiConfig.detail.drop) {\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    handleDrop(event: Event) {\n        avLogger('drop event');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.detail.drop) {\n            const acceptType = (this.uiConfig.detail.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.detail.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.detail.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this,draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","export type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type Deletable = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string\n}\n\nexport type Badgeable = {\n    elementType:string,\n    elementAttributes?:[Attribute],\n    elementClasses:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Background = {\n    elementType:string,\n    elementClasses:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    badge?:Badgeable,\n    delete?:Deletable,\n    drag?:Draggable,\n    background?:Background,\n    drop?:Droppable\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId:string,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    dataSourceId:string,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\n\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"./ConfigurationTypes\";\nimport {View} from \"./View\";\nimport {ViewListener} from \"./ViewListener\";\n\nclass SidebarViewContainer implements ViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View,config:SidebarViewConfig) {\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDeleteStarted(view: View, selectedItem: any): boolean {return false;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import {ViewListener} from \"./ViewListener\";\nimport {View} from \"./View\";\n\nclass ViewListenerForwarder implements ViewListener {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener:ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view:View,selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view,selectedItem));\n        }\n    }\n\n    itemDragStarted(view:View,selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDragStarted(view,selectedItem));\n        }\n    }\n\n    itemSelected(view:View,selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemSelected(view,selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view:View,actionName:string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view,actionName,selectedItem));\n        }\n    }\n\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.itemDeleteStarted(view,selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view,droppedItem));\n        }\n    }\n\n    itemDeselected(view: View, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeselected(view,deselectedItem));\n        }\n    }\n\n}\n\nexport default ViewListenerForwarder;","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1: any, item2: any): boolean {\n    return (item1.gameId === item2.gameId);\n}\n","class UUID {\n    constructor() {\n    }\n\n    getUniqueId(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = Math.random() * 16 | 0;\n            const v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport BoardGameView from \"./component/view/BoardGameView\";\nimport {ALERT, API_Config, Decorator, DRAGGABLE, NAVIGATION} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/controller/ScoreSheetController\";\nimport {ScoreSheetDetailView} from \"./component/view/ScoreSheetDetailView\";\nimport ScoreSheetsView from \"./component/view/ScoreSheetsView\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ScoreSheetsSidebar from \"./component/sidebar/ScoreSheetsSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport BoardGameSearchSidebar from \"./component/sidebar/BoardGameSearchSidebar\";\nimport BGGSearchView from \"./component/view/BGGSearchView\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE} from \"./ui-framework/ConfigurationTypes\";\nimport {ViewListener} from \"./ui-framework/ViewListener\";\nimport {View} from \"./ui-framework/View\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component implements UnreadMessageCountListener,ViewListener {\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private bggSearchSidebar: BoardGameSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private scoreSheetSidebar: ScoreSheetsSidebar;\n    // @ts-ignore\n    private scoresView: ScoreSheetsView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            boardGames: [],\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n        this.handleShowScores = this.handleShowScores.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    public addBoardGameToDisplay(draggedObject: any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        Controller.getInstance().addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    alert(title: string, content: string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames: any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index: number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={this.handleShowScores}\n                addToCollectionHandler={Controller.getInstance().addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(ALERT.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(ALERT.hideClass);\n        event.preventDefault();\n        let id = this.modalEl.getAttribute(Controller.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            Controller.getInstance().removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event: MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            } else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n    handleDeleteBoardGame(event: MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (Controller.getInstance().isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(Controller.eventDataKeyId, id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    } else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        Controller.getInstance().removeBoardGameFromDisplay(boardGame);\n\n                    }\n                } else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    Controller.getInstance().removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatSidebar = new ChatRoomsSidebar();\n        // add the views to the chat side bar\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView,{containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView,{containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n\n        this.chatSidebar.onDocumentLoaded();\n\n\n        this.userSearchSidebar = new UserSearchSidebar();\n        // add the subviews for the user search\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches,{containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers,{containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers,{containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n\n\n        this.bggSearchSidebar = new BoardGameSearchSidebar();\n        const bggSearch = new BGGSearchView();\n        this.bggSearchSidebar.addView(bggSearch,{containerId:BoardGameSearchSidebar.bggSearchResults})\n        this.bggSearchSidebar.onDocumentLoaded();\n        bggSearch.addEventListener(this);\n\n        this.scoreSheetSidebar = new ScoreSheetsSidebar();\n        this.scoresView = new ScoreSheetsView();\n        this.scoreSheetSidebar.addView(this.scoresView,{containerId:ScoreSheetsSidebar.scoreSheets});\n        this.scoreSheetSidebar.onDocumentLoaded();\n\n\n        ScoreSheetDetailView.getInstance().onDocumentLoaded();\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(NAVIGATION.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(ALERT.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(ALERT.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(ALERT.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(ALERT.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(ALERT.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(ALERT.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click', this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click', this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click', this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {event.preventDefault();});\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        Controller.getInstance().initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.bggSearchSidebar.eventHide(null);\n    }\n\n    handleShowCollection(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowScores(event: Event) {\n        logger(`Handling show board game scores`);\n        event.preventDefault();\n        // @ts-ignore\n        let id = event.target.getAttribute(Controller.eventDataKeyId);\n        logger(`Handling Show board game scores ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                this.scoresView.setSelectedBoardGame(boardGame);\n                this.scoreSheetSidebar.eventShow(null);\n            }\n        }\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    handleShowBGGSearch(event: Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchSidebar.eventShow(event);\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    private handleDrop(event: Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeBoardGame) {\n            draggedObject.gameId = parseInt(draggedObject.gameId);\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection: boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', false);\n        } else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    showRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDeleteStarted(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    itemSelected(view: View, selectedItem: any): void {\n        // add a new board game to the display\n        selectedItem.gameId = parseInt(selectedItem.gameId);\n        this.addBoardGameToDisplay(selectedItem);\n    }\n\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts  chat-sidebar chat-sidebar:detail board-game-search-sidebar board-game-search-sidebar:detail ';\n//localStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts chat-sidebar chat-sidebar:detail socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts template-manager' ;\n//localStorage.debug = 'score-sheet-controller call-manager peer';\nlocalStorage.debug = '*';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","import React from \"react\";\nimport debug from 'debug';\n\nimport Controller from \"../../Controller\";\nimport {Decorator} from \"../../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler, startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!Controller.getInstance().isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!Controller.getInstance().isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-2 w-100\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"fas fa-list-alt\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scoresheets) {\n            scoreCount = boardGame.scoresheets.length;\n        }\n\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-info ml-1'\n                               onClick={showScoresHandler}>Scores: {scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n            const bggURL = `https://boardgamegeek.com/boardgame/${boardGame.gameId}`;\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <a href={bggURL} target=\"_blank\"><img className=\"card-img-top\" src={boardGame.image}\n                                                              alt=\"Card image cap\"></img></a>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? favouriteIcon : ''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? scoreBadge : ''}<br/> {(Controller.getInstance().isLoggedIn()) ? ((boardGame.decorator === Decorator.Persisted) ? deleteButton : addButton) : deleteButton}\n                            </h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                            <p className=\"card-text\">Loading...</p>\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Loading...\n                                </small>\n                            </p>\n                        </div>\n                        <div className={\"card-footer text-right text-muted\"}>\n                            Loading...\n                        </div>\n                    </div>\n                </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","var map = {\n\t\"./af\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/handsontable/node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["Decorator","STATE_NAMES","users","boardGames","scores","selectedEntry","recentUserSearches","bggSearchResults","scoreSheet","API_Config","login","graphQL","bggSearchCall","bggSearchCallById","queryString","resultName","findUsers","addToMyCollection","removeFromMyCollection","getMyBoardGameCollection","addScoreSheetToBoardGame","removeScoreSheet","NAVIGATION","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","ALERT","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","DRAGGABLE","typeBoardGame","typeUser","fromUserSearch","fromFavourites","cLogger","debug","cLoggerDetail","Controller","getInstance","eventDataKeyId","connectToApplication","graphSM","stateName","apiURL","apis","find","create","destroy","update","findAll","data","isActive","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","initialise","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","ScoreSheetController","currentGameList","getStateManager","isLoggedIn","getLoggedInUserId","result","getLoggedInUsername","handleMessage","getCurrentUser","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","addBoardGameToDisplay","currentListOfGames","index","value","boardGame","Downloader","gameId","callbackBoardGameDetails","status","boardGameDetails","regex","callbackAddToCollection","id","game","updatingBoardGame","cb","userId","boardGameId","sheet","callbackRemoveFromCollection","callbackGetCollection","collectionData","locallySaveBoardGame","scoreSheetAddedToBoardGame","oldBoardGame","scoreSheetRemovedFromBoardGame","sheetId","scoreSheetId","addBoardGameToCollection","scoreSheets","removeBoardGameFromCollection","removeBoardGameFromDisplay","cleanupBoardGameState","cleanedUpList","existingListGame","downloadAndSyncSavedBoardGameCollection","getServerAPIURL","window","removeBoardGameFromState","currentBoardGamesOnDisplay","findBoardGameInStateFromEvent","event","parseInt","decorateScoreSheets","copyLocallySavedScoreSheetsToBoardGame","source","toSave","item","target","sheetToSave","convertScoreSheetToDatabaseFormat","convertScoreSheetToApiCallFormat","handleShowChat","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","user","username","stateObj","NotificationManager","callLogger","CallManager","peer","webrtcDiv","myVideoStream","myVideo","path","host","secure","document","ScoreSheetDetailView","navigator","audio","video","browserUtil","track","isCurrentUser","videoCardHolder","videoCard","videoCardTitle","videoCardBody","videoCardFooter","footerContent","stopVideoButton","muteMicButton","isPaused","isMuted","numberOfAttempts","interval","setInterval","call","clearInterval","userVideoCard","videoEl","parentNode","prepareToAnswerCallFrom","alert","sscLogger","SOURCE_View","applicationView","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","currentUsername","isRoomCreator","currentUsersInScoreSheet","intervalTimer","receiveLogin","receiveLogout","receiveInvitation","invite","InviteType","confirm","receiveQueuedMessages","messages","receiveQueuedInvites","invites","receiveDecline","type","receiveJoinedRoom","receivedLeftRoom","receiveUserList","uuid","room","boardGameName","sheetLayoutOptions","TemplateManager","timer","timerGoing","isFinished","timerWasGoing","tableData","created","moment","socketManager","Priority","changedByTM","saveData","informListeners","BoardGameSearchSidebar","SidebarViewContainer","BGGSEARCH_SidebarPrefs","expandedSize","location","SidebarLocation","left","ChatRoomsSidebar","SidebarPrefs","SidebarContainers","chatLogs","chatLog","ScoreSheetsSidebar","bottom","UserSearchSidebar","recentSearches","favourites","blocked","vLogger","vLoggerDetail","BGGSearchView","AbstractView","BGGSEARCH_ViewConfig","resultsContainerId","resultsElementType","resultsElementAttributes","name","resultsClasses","keyId","dataSourceId","modifiers","normal","inactive","active","warning","icons","detail","containerClasses","textElementType","textElementClasses","select","drag","from","BGGSEARCH_Form","BGGSEARCH_Query","BGGSEARCH_Search","handleSearchResultsCB","onDocumentLoaded","getIdForStateItem","getDisplayValueForStateItem","compareStateItemsForEquality","item1","item2","parsed1","parsed2","isNaN","eventClickItem","changeSearchButton","enable","handleSearch","queryText","query","DownloadManager","documentLoaded","hideRequested","itemAction","itemDeleteStarted","itemDeleted","selectedItem","itemDragStarted","itemSelected","showRequested","itemDropped","itemDeselected","BlockedUserView","DOMConfig","delete","buttonClasses","iconClasses","drop","acceptFrom","acceptTypes","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","getSecondaryModifierForStateItem","Modifier","updateView","blockedUsers","droppedItem","csLogger","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","stateManager","setContainedBy","addEventListener","getModifierForStateItem","getBadgeValue","getBackgroundImage","handleUserDrop","draggedObjectJSON","draggedObject","JSON","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","messageEl","fastSearchEl","$","eventUserSelected","ui","addChatMessage","chatMessageEl","messageSenderEl","contentEl","reRenderChatMessages","renderChatLog","handleChatLogsUpdated","handleChatStarted","leaveChat","checkCanComment","clearChatLog","myUsername","fastSearchValues","newValue","searchValue","label","disabled","minLength","handleOfflineMessagesReceived","handleInvitationDeclined","handleNewInviteReceived","ChatLogsView","selectedChatLog","newState","selectChatRoom","FavouriteUserView","extraActions","favUsers","actionName","roomName","ssvLogger","ScoreSheetDom","dropZone","startStopTimer","end","iconStart","iconInProgress","iconEnd","iconLeave","ssFastSearchUserNames","webrtc","thisEl","boardGameTitleEl","timerEl","endOrLeaveEl","scoreSheetEl","table","handleEndOrLeave","handleStartStopTimer","row","hours","Math","minutes","seconds","ScoreSheetsView","selectedBoardGame","SCORESHEETS_ViewConfig","buttonText","background","elementType","elementClasses","setSelectedBoardGame","buffer","UserSearchView","fastSearchInputId","dataLimit","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","response","fetch","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","dlLogger","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","requestId","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","element","initiateFetchForQueueItem","BootstrapNotification","Notification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","NotificationFactory","createNotification","notificationFactory","notification","notificationNode","parentEl","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","unreadListener","listener","favourite","savedLogs","log","joinDateTime","priority","didChatAlreadyExist","happyToProceed","receiveMessage","wasOffline","joinChat","logout","declineInvite","sendInvite","ChatRoom","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","lastViewed","numOfNewMessages","foundLog","unreadCount","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","configuration","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","graphSMLogger","GraphQLApiStateManager","results","config","setCompletedRun","runsComplete","jsonRequest","Error","dataAttribute","msManager","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","templateLogger","template","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","cells","column","readOnly","className","forceNumeric","columnSummary","destinationRow","destinationColumn","reversedRowCoords","jsonData","createdOn","players","playerNames","parsed","score","numOfCards","round","parsedBid","parsedActual","parsedBonus","avLogger","avLoggerDetails","DATA_SOURCE","itemId","dataSource","compareWith","eventDeleteClickItem","shouldDelete","eventActionClicked","getDragData","isSame","eventStartDrag","createResultForItem","resultDataKeyId","childEl","textEl","imgEl","buttonsEl","badgeValue","badgeEl","action","extraAction","iconEl","deleteButtonEl","displayText","modifier","secondModifier","createResultsForState","viewEl","container","handleDrop","droppedObjectType","droppedObjectFrom","acceptType","objectType","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","addView","viewContainer","view","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","ViewListenerForwarder","addListener","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","UUID","getUniqueId","r","v","c","React","ReactDOM","BoardGameView","logger","Root","cancelDelete","bind","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowBGGSearch","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","handleShowScores","localStorage","title","content","titleEl","textContent","modalEl","classList","remove","add","render","games","map","entry","preventDefault","getAttribute","findIndex","hasActiveScoreSheet","endScoreSheet","hideAllSideBars","startScoreSheet","switchBetweenCollectionAndScoreSheet","decorator","Persisted","setAttribute","year","componentDidMount","chatSidebar","chatView","chatLogView","userSearchSidebar","favouriteUsers","bggSearchSidebar","bggSearch","scoreSheetSidebar","scoresView","getElementById","chatNavigationItem","cancelBtnEl","confirmBtnEl","closeBtnEl","href","countChanged","newCount","innerHTML","dataTransfer","getData","parse","showCollection","Component","console","info","beLogger","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","deleteButton","startScoreSheetButton","scoreCount","scoresheets","length","favouriteIcon","scoreBadge","Incomplete","bggURL","image","PersistedLocally","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters"],"sourceRoot":""}