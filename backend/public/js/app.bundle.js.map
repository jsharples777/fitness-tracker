{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/handsontable/node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/App.tsx","webpack:///./src/AppTypes.ts","webpack:///./src/Controller.ts","webpack:///./src/SocketListenerDelegate.ts","webpack:///./src/component/AbstractView.ts","webpack:///./src/component/BoardGameSearchSidebarView.ts","webpack:///./src/component/BoardGameView.tsx","webpack:///./src/component/CallManager.ts","webpack:///./src/component/ChatSidebarView.ts","webpack:///./src/component/ScoreSheetController.ts","webpack:///./src/component/ScoreSheetSidebarView.ts","webpack:///./src/component/ScoreSheetView.ts","webpack:///./src/component/SidebarView.ts","webpack:///./src/component/UserSearchSidebarView.ts","webpack:///./src/network/ApiUtil.ts","webpack:///./src/network/DownloadManager.ts","webpack:///./src/network/Types.ts","webpack:///./src/notification/BootstrapNotification.ts","webpack:///./src/notification/Notification.ts","webpack:///./src/notification/NotificationFactory.ts","webpack:///./src/notification/NotificationManager.ts","webpack:///./src/socket/ChatManager.ts","webpack:///./src/socket/NotificationController.ts","webpack:///./src/socket/SocketManager.ts","webpack:///./src/socket/Types.ts","webpack:///./src/state/AbstractStateManager.ts","webpack:///./src/state/AggregateStateManager.ts","webpack:///./src/state/AsyncStateManagerWrapper.ts","webpack:///./src/state/BrowserStorageStateManager.ts","webpack:///./src/state/GraphQLApiStateManager.ts","webpack:///./src/state/MemoryBufferStateManager.ts","webpack:///./src/state/RESTApiStateManager.ts","webpack:///./src/state/StateChangedDelegate.ts","webpack:///./src/state/StateManager.ts","webpack:///./src/template/TemplateManager.ts","webpack:///./src/util/BrowserUtil.ts","webpack:///./src/util/EqualityFunctions.ts","webpack:///./src/util/UUID.ts"],"names":["logger","debug","Root","state","isLoggedIn","loggedInUserId","boardGames","scoreSheet","room","boardGameName","sheetLayoutOptions","timer","sheetData","stateNames","users","scores","selectedEntry","recentUserSearches","bggSearchResults","apis","login","graphQL","bggSearchCall","bggSearchCallById","queryString","resultName","findUsers","addToMyCollection","removeFromMyCollection","getMyBoardGameCollection","addScoreSheetToBoardGame","removeScoreSheet","ui","draggable","draggableDataKeyId","draggedType","draggedFrom","draggedTypeUser","draggedTypeBoardGame","draggedFromUserSearch","draggedFromBoardGameSearch","alert","modalId","titleId","contentId","cancelButtonId","confirmButtonId","closeButtonId","hideClass","showClass","navigation","showMyCollection","boardGameSearchId","userSearchId","chatId","showScoreSheet","chatSideBar","dom","sideBarId","resultsId","resultsElementType","resultsElementAttributes","resultsClasses","resultDataKeyId","resultLegacyDataKeyId","resultDataSourceId","modifierClassNormal","modifierClassInactive","modifierClassActive","modifierClassWarning","iconNormal","iconInactive","iconActive","iconWarning","isDraggable","isClickable","isDeleteable","deleteButtonClasses","deleteButtonText","deleteButtonIconClasses","hasBadge","resultContentDivClasses","resultContentTextElementType","resultContentTextClasses","badgeElementType","badgeElementAttributes","badgeClasses","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","userSearchSideBar","favouriteUsersId","blockedUsersId","favouriteUsersDropZone","blockedUsersDropZone","resultDataSourceValue","resultDataSourceFavUsers","resultDataSourceBlockedUsers","extra","fastSearchInputId","extraAction1Classes","extraAction1Text","extraAction1IconClasses","extraAction2Classes","extraAction2Text","extraAction2IconClasses","boardGameSearchSideBar","formId","queryId","buttonId","scoreSheetSideBar","hasBackgroundImage","imgElementType","imgClasses","dropZone","boardGame","startStopTimer","end","iconStart","iconInProgress","iconEnd","iconLeave","ssFastSearchUserNames","webrtc","uiPrefs","blogEntry","view","location","expandedSize","controller","events","eventDataKeyId","dataLimit","cancelDelete","bind","confirmDelete","handleDeleteBoardGame","handleShowUserSearch","handleShowChat","handleShowBGGSearch","handleDragOver","handleDrop","handleShowCollection","handleShowScoreSheet","handleStartScoreSheet","handleShowScores","connectToApplication","window","localStorage","addBoardGameToDisplay","draggedObject","getCurrentUser","getLoggedInUserId","title","content","titleEl","textContent","contentEl","modalEl","classList","remove","add","render","games","map","entry","index","addBoardGameToCollection","event","preventDefault","id","getAttribute","parseInt","currentBoardGamesOnDisplay","findIndex","game","gameId","removeBoardGameFromCollection","ScoreSheetController","getInstance","hasActiveScoreSheet","confirm","endScoreSheet","hideAllSideBars","target","startScoreSheet","switchBetweenCollectionAndScoreSheet","decorator","Decorator","Persisted","setAttribute","name","year","removeBoardGameFromDisplay","componentDidMount","chatView","ChatSidebarView","document","getStateManager","onDocumentLoaded","userSearchView","UserSearchSidebarView","bggSearchView","BoardGameSearchSidebarView","scoresView","ScoreSheetSidebarView","scoreSheetView","ScoreSheetView","setApplication","getElementById","addEventListener","chatNavigationItem","cancelBtnEl","confirmBtnEl","closeBtnEl","thisEl","scoreSheetEl","initialise","eventHide","href","eventShow","setSelectedBoardGame","roomName","selectChatRoom","countChanged","newCount","buffer","innerHTML","draggedObjectJSON","dataTransfer","getData","JSON","parse","showCollection","browserUtil","addRemoveClasses","React","Component","log","console","info","element","ReactDOM","cLogger","cLoggerDetail","Controller","apiStateManager","RESTApiStateManager","stateName","serverURL","api","isActive","graphSM","apiURL","find","create","destroy","update","findAll","data","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncDBSM","asyncQLSM","socketListerDelegate","socketManager","chatManager","ChatManager","NotificationController","currentGameList","result","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","currentListOfGames","value","downloader","callbackBoardGameDetails","status","boardGameDetails","regex","callbackAddToCollection","updatingBoardGame","cb","userId","boardGameId","sheet","callbackRemoveFromCollection","callbackGetCollection","collectionData","locallySaveBoardGame","scoreSheetAddedToBoardGame","oldBoardGame","scoreSheetRemovedFromBoardGame","sheetId","scoreSheetId","scoreSheets","cleanupBoardGameState","cleanedUpList","existingListGame","downloadAndSyncSavedBoardGameCollection","getServerAPIURL","removeBoardGameFromState","findBoardGameInStateFromEvent","decorateScoreSheets","copyLocallySavedScoreSheetsToBoardGame","source","toSave","item","sheetToSave","convertScoreSheetToDatabaseFormat","convertScoreSheetToApiCallFormat","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","user","username","stateObj","changedEntry","commentOn","notifier","deletedEntry","avLogger","AbstractView","applicationView","eventAction1Clicked","eventAction2Clicked","eventStartDrag","createResultForItem","dataSource","domConfig","legacyDataKeyId","childEl","textEl","imgEl","buttonBadgeEl","badgeValue","badgeEl","action","iconEl","deleteButtonEl","displayText","modifier","secondModifier","createResultsForState","viewEl","newState","vLogger","vLoggerDetail","handleSearchResultsCB","getIdForStateItem","getLegacyIdForStateItem","getDisplayValueForStateItem","getModifierForStateItem","getSecondaryModifierForStateItem","eventClickItem","updateView","getDragData","eventDeleteClickItem","getBadgeValue","getBackgroundImage","changeSearchButton","enable","handleSearch","queryText","query","SidebarView","beLogger","BoardGameView","showScoresHandler","addToCollectionHandler","removeFromCollectionHandler","startScoreSheetHandler","addButton","deleteButton","startScoreSheetButton","scoreCount","scoresheets","length","favouriteIcon","scoreBadge","Incomplete","bggURL","image","PersistedLocally","description","minPlayTime","maxPlayTime","minPlayers","maxPlayers","minAge","categories","rank","averageScore","numOfRaters","callLogger","CallManager","peer","webrtcDiv","myVideoStream","myVideo","path","host","secure","navigator","audio","video","track","isCurrentUser","videoCardHolder","videoCard","videoCardTitle","videoCardBody","videoCardFooter","footerContent","stopVideoButton","muteMicButton","isPaused","isMuted","numberOfAttempts","interval","setInterval","call","clearInterval","userVideoCard","videoEl","parentNode","prepareToAnswerCallFrom","csLogger","csLoggerDetail","selectedChatLog","stateManager","handleNewInviteReceived","handleUserDrop","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","Priority","messageEl","fastSearchEl","$","eventUserSelected","addChatMessage","chatMessageEl","messageSenderEl","moment","reRenderChatMessages","chatLog","renderChatLog","myUsername","fastSearchValues","searchValue","label","disabled","minLength","handleChatLogsUpdated","handleChatStarted","handleOfflineMessagesReceived","handleInvitationDeclined","leaveChat","checkCanComment","clearChatLog","sscLogger","currentScoreRoom","currentlySelectedBoardGame","currentScoreSheet","currentUsername","isRoomCreator","currentUsersInScoreSheet","intervalTimer","receiveLogin","receiveLogout","receiveInvitation","invite","InviteType","receiveQueuedMessages","messages","receiveQueuedInvites","invites","receiveDecline","type","receiveJoinedRoom","receivedLeftRoom","receiveUserList","uuid","TemplateManager","timerGoing","isFinished","timerWasGoing","tableData","created","changedByTM","saveData","informListeners","SOURCE_View","selectedBoardGame","ssvLogger","boardGameTitleEl","timerEl","endOrLeaveEl","table","handleEndOrLeave","handleStartStopTimer","newValue","row","hours","Math","minutes","seconds","sidePanelEl","closeButtonEl","size","showHide","handleFavouriteUserDrop","handleBlockedUserDrop","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","reRenderView","deleteFavouriteUser","deleteBlockedUser","deleteRecentSearchUser","renderFavouriteUsers","usernames","childElement","renderBlockedUsers","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","fetch","response","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","initiateFetchForQueueItem","BootstrapNotification","show","topOffset","context","duration","containerId","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","Notification","NotificationFactory","createNotification","notificationFactory","NotificationManager","notification","notificationNode","parentEl","UserStatus","cmLogger","blockedList","favouriteList","loggedInUsers","unreadListener","listener","blocked","favourite","savedLogs","joinDateTime","from","priority","didChatAlreadyExist","happyToProceed","receiveMessage","wasOffline","joinChat","logout","declineInvite","sendInvite","ChatRoom","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","lastViewed","numOfNewMessages","foundLog","unreadCount","chatLogKey","blockedListKey","favouriteListKey","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","SocketManager","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","useLocalStorage","configuration","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","graphSMLogger","GraphQLApiStateManager","results","config","setCompletedRun","runsComplete","jsonRequest","Error","dataAttribute","msManager","apiSMLogger","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","templateLogger","template","colHeaders","rowHeaders","licenseKey","manualColumnResize","manualRowResize","selectionMode","cells","column","readOnly","className","forceNumeric","columnSummary","destinationRow","destinationColumn","reversedRowCoords","jsonData","createdOn","players","playerNames","parsed","isNaN","score","numOfCards","round","parsedBid","parsedActual","parsedBonus","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","item1","item2","UUID","getUniqueId","r","v","c"],"mappings":";QAAA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA,QAAQ,oBAAoB;QAC5B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,iBAAiB,4BAA4B;QAC7C;QACA;QACA,kBAAkB,2BAA2B;QAC7C;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;QAEA;QACA;QACA;QACA;QACA,gBAAgB,uBAAuB;QACvC;;;QAGA;QACA;QACA;QACA;;;;;;;;;;;;ACvuG;;;;;;;;;;;ACnnSA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,IAAMA,MAAM,GAAGC,4CAAK,CAAC,KAAD,CAApB;;IAEMC,I;;;AAIF;AAEA;AAGA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA;AAEA;AAEA;AAGA,kBAAc;AAAA;;AACV;AACA;AACA,UAAKC,KAAL,GAAa;AACTC,gBAAU,EAAE,KADH;AAETC,oBAAc,EAAE,CAAC,CAFR;AAGTC,gBAAU,EAAE,EAHH;AAITC,gBAAU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","file":"app.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"vendor\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var map = {\n\t\"./af\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/handsontable/node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/handsontable/node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/handsontable/node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/handsontable/node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/handsontable/node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/handsontable/node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bn.js\": \"./node_modules/handsontable/node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/handsontable/node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/handsontable/node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/handsontable/node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/handsontable/node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/handsontable/node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/handsontable/node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/handsontable/node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/handsontable/node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/handsontable/node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/handsontable/node_modules/moment/locale/el.js\",\n\t\"./en-SG\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-SG.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-SG.js\",\n\t\"./en-au\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-il.js\",\n\t\"./en-nz\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/handsontable/node_modules/moment/locale/en-nz.js\",\n\t\"./eo\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/handsontable/node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-do.js\",\n\t\"./es-us\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/handsontable/node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/handsontable/node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/handsontable/node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/handsontable/node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/handsontable/node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/handsontable/node_modules/moment/locale/fi.js\",\n\t\"./fo\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/handsontable/node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/handsontable/node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/handsontable/node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/handsontable/node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/handsontable/node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/handsontable/node_modules/moment/locale/gl.js\",\n\t\"./gom-latn\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/handsontable/node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/handsontable/node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/handsontable/node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/handsontable/node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/handsontable/node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/handsontable/node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/handsontable/node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/handsontable/node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/handsontable/node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/handsontable/node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/handsontable/node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/handsontable/node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/handsontable/node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/handsontable/node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/handsontable/node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/handsontable/node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/handsontable/node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/handsontable/node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/handsontable/node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/handsontable/node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/handsontable/node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/handsontable/node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/handsontable/node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/handsontable/node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/handsontable/node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/handsontable/node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/handsontable/node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/handsontable/node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/handsontable/node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/handsontable/node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/handsontable/node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/handsontable/node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/handsontable/node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/handsontable/node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/handsontable/node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/handsontable/node_modules/moment/locale/nn.js\",\n\t\"./pa-in\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/handsontable/node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/handsontable/node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/handsontable/node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/handsontable/node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/handsontable/node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/handsontable/node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/handsontable/node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/handsontable/node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/handsontable/node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/handsontable/node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/handsontable/node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/handsontable/node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/handsontable/node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/handsontable/node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/handsontable/node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/handsontable/node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/handsontable/node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/handsontable/node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/handsontable/node_modules/moment/locale/th.js\",\n\t\"./tl-ph\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/handsontable/node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/handsontable/node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/handsontable/node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/handsontable/node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/handsontable/node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/handsontable/node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/handsontable/node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/handsontable/node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/handsontable/node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/handsontable/node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-tw\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/handsontable/node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/handsontable/node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport debug from 'debug';\n\nimport controller from './Controller';\nimport UserSearchSidebarView from \"./component/UserSearchSidebarView\";\nimport ChatSidebarView from \"./component/ChatSidebarView\";\nimport BoardGameSearchSidebarView from \"./component/BoardGameSearchSidebarView\";\nimport BoardGameView from \"./component/BoardGameView\";\nimport {Decorator} from \"./AppTypes\";\nimport browserUtil from \"./util/BrowserUtil\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {ScoreSheetView} from \"./component/ScoreSheetView\";\nimport ScoreSheetSidebarView from \"./component/ScoreSheetSidebarView\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\n\n\nconst logger = debug('app');\n\nclass Root extends React.Component implements UnreadMessageCountListener {\n    private titleEl: any;\n    private contentEl: any;\n    private modalEl: any;\n    // @ts-ignore\n    private commentView: CommentSidebarView;\n    // @ts-ignore\n    private detailsView: DetailsSidebarView;\n\n    // @ts-ignore\n    private userSearchView: UserSearchSidebarView;\n    // @ts-ignore\n    private bggSearchView: BoardGameSearchSidebarView;\n    // @ts-ignore\n    private chatView: ChatSidebarView;\n    // @ts-ignore\n    private scoreSheetView: ScoreSheetView;\n    // @ts-ignore\n    private scoresView: ScoreSheetSidebarView;\n\n    // @ts-ignore\n    private cancelBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private confirmBtnEl: HTMLElement | null;\n    // @ts-ignore\n    private closeBtnEl: HTMLElement | null;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private scoreSheetEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    constructor() {\n        // @ts-ignore\n        super();\n        this.state = {\n            isLoggedIn: false,\n            loggedInUserId: -1,\n            boardGames: [],\n            scoreSheet: {\n                room: '',\n                boardGameName: '',\n                sheetLayoutOptions: {},\n                timer: 0,\n                sheetData: {}\n            },\n            stateNames: {\n                users: 'users',\n                boardGames: 'boardGames',\n                scores: 'scores',\n                selectedEntry: 'selectedEntry',\n                recentUserSearches: 'recentUserSearches',\n                bggSearchResults: 'bggSearchResults',\n                scoreSheet: 'scoreSheet'\n            },\n            apis: {\n                login: '/login',\n                graphQL: '/graphql',\n                bggSearchCall: 'query search($queryString: String!) {findBoardGames(query: $queryString) {gameId, name, year}}',\n                bggSearchCallById: {\n                    queryString: 'query getDetails($gameId:Int!) {getBoardGameDetails(gameId:$gameId) {gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories}}',\n                    resultName: 'getBoardGameDetails',\n                },\n                findUsers: {\n                    queryString: 'query {findUsers {id, username}}',\n                    resultName: 'findUsers',\n                },\n                addToMyCollection: {\n                    queryString: 'mutation addBoardGame($userId: Int!, $boardGame: BoardGameDetailInput!){addToMyCollection(userId: $userId, boardGame: $boardGame) {id,gameId}}',\n                    resultName: 'addToMyCollection',\n                },\n                removeFromMyCollection: {\n                    queryString: 'mutation removeBoardGame($userId: Int!, $boardGameId: Int!) {removeFromMyCollection(userId: $userId, boardGameId: $boardGameId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n                getMyBoardGameCollection: {\n                    queryString: 'query myCollection($userId: Int!) {getMyBoardGameCollection(userId: $userId) {id,gameId,thumb,image,name,description,year, minPlayers, maxPlayers, minPlayTime, maxPlayTime, minAge, designers, artists, publisher, numOfRaters, averageScore, rank, categories,scoresheets {id, player1, score1, player2, score2, player3, score3, player4, score4, player5, score5, player6, score6, player7, score7, createdOn}}}',\n                    resultName: 'getMyBoardGameCollection',\n                },\n                addScoreSheetToBoardGame: {\n                    queryString: 'mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}}',\n                    resultName: 'addScoreSheetToBoardGame'\n                },\n                removeScoreSheet: {\n                    queryString: 'mutation removeSheet($sheetId: String!) {removeScoreSheet(sheetId: $sheetId) {result}}',\n                    resultName: 'removeFromMyCollection'\n                },\n\n\n            },\n            ui: {\n                draggable: {\n                    draggableDataKeyId: 'text/plain',\n                    draggedType: 'draggedType',\n                    draggedFrom: 'draggedFrom',\n                    draggedTypeUser: 'user',\n                    draggedTypeBoardGame: 'boardGame',\n                    draggedFromUserSearch: 'userSearch',\n                    draggedFromBoardGameSearch: 'boardGameSearch',\n                },\n                alert: {\n                    modalId: \"alert\",\n                    titleId: \"alert-title\",\n                    contentId: \"alert-content\",\n                    cancelButtonId: \"alert-cancel\",\n                    confirmButtonId: \"alert-confirm\",\n                    closeButtonId: \"alert-close\",\n                    hideClass: \"d-none\",\n                    showClass: \"d-block\",\n                },\n                navigation: {\n                    showMyCollection: 'navigationItemMyCollection',\n                    boardGameSearchId: 'navigationItemBoardGameSearch',\n                    userSearchId: 'navigationItemUserSearch',\n                    chatId: 'navigationItemChat',\n                    showScoreSheet: 'navigationItemScoreSheet',\n\n                },\n                chatSideBar: {\n                    dom: {\n                        sideBarId: 'chatSideBar',\n                        resultsId: 'chatLogs',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-comment list-group-item-action',\n                        resultDataKeyId: 'room',\n                        resultLegacyDataKeyId: 'room',\n                        resultDataSourceId: 'chatLogs',\n                        modifierClassNormal: '',\n                        modifierClassInactive: 'list-group-item-dark',\n                        modifierClassActive: 'list-group-item-primary',\n                        modifierClassWarning: '',\n                        iconNormal: '',\n                        iconInactive: '',\n                        iconActive: '',\n                        iconWarning: '',\n                        isDraggable: false,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-circle bg-warning btn-sm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses: 'text-black fas fa-sign-out-alt',\n                        hasBadge: true,\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        badgeElementType: 'span',\n                        badgeElementAttributes: [\n                            ['style', 'font-size:12pt'],\n                        ],\n                        badgeClasses: 'badge badge-pill badge-primary mr-1',\n                        newFormId: \"newMessage\",\n                        commentId: \"message\",\n                        submitCommentId: \"submitMessage\",\n                        chatLogId: 'chatLog',\n                        chatLogRoomId: 'chatLogRoom',\n                        leaveChatId: 'leaveChat',\n                        chatFastSearchUserNames: 'chatFastSearchUserNames'\n                    },\n                },\n                userSearchSideBar: {\n                    dom: {\n                        sideBarId: 'userSearchSideBar',\n                        resultsId: 'recentUserSearches',\n                        favouriteUsersId: 'favouriteUsers',\n                        blockedUsersId: 'blockedUsers',\n                        favouriteUsersDropZone: 'favouriteUsersDropZone',\n                        blockedUsersDropZone: 'blockedUsersDropZone',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'user-id',\n                        resultLegacyDataKeyId: 'legacy-user-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'recentUserSearches',\n                        resultDataSourceFavUsers: 'favouriteUsers',\n                        resultDataSourceBlockedUsers: 'blockedUsers',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-comment\"></i>',\n                        iconInactive: '   <i class=\"fas fa-comment\"></i>',\n                        iconActive: '   <i class=\"fas fa-heart\"></i>',\n                        iconWarning: '  <i class=\"fas fa-exclamation-circle\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                        deleteButtonText: '',\n                        deleteButtonIconClasses: 'fas fa-trash-alt',\n                        extra: {\n                            fastSearchInputId: 'fastSearchUserNames',\n                        },\n                        extraAction1Classes: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                        extraAction1Text: '',\n                        extraAction1IconClasses: 'fas fa-user-plus',\n                        extraAction2Classes: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                        extraAction2Text: '',\n                        extraAction2IconClasses: 'fas fa-user-slash'\n                    },\n                },\n                boardGameSearchSideBar: {\n                    dom: {\n                        sideBarId: 'boardGameSearchSidebar',\n                        resultsId: 'bggSearchResults',\n                        resultsElementType: 'a',\n                        resultsElementAttributes: [\n                            ['href', '#'],\n                        ],\n                        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'bggSearch',\n                        modifierClassNormal: 'list-group-item-primary',\n                        modifierClassInactive: 'list-group-item-light',\n                        modifierClassActive: 'list-group-item-info',\n                        modifierClassWarning: 'list-group-item-danger',\n                        iconNormal: '   <i class=\"fas fa-dice\"></i>',\n                        iconInactive: '   <i class=\"fas fa-dice\"></i>',\n                        iconActive: '   <i class=\"fas fa-dice\"></i>',\n                        iconWarning: '  <i class=\"fas fa-dice\"></i>',\n                        resultContentDivClasses: 'd-flex w-100 justify-content-between',\n                        resultContentTextElementType: 'span',\n                        resultContentTextClasses: 'mb-1',\n                        isDraggable: true,\n                        isClickable: true,\n                        formId: 'bggSearch',\n                        queryId: 'queryText',\n                        buttonId: 'bggSearchButton'\n                    },\n                },\n                scoreSheetSideBar: {\n                    dom: {\n                        sideBarId: 'scoreSheetSidebar',\n                        resultsId: 'scoreSheets',\n                        resultsElementType: 'div',\n                        resultsElementAttributes: [],\n                        resultsClasses: 'text-white bg-info col-sm-6 col-md-3 col-lg-2 score-card',\n                        resultDataKeyId: 'bgg-id',\n                        resultLegacyDataKeyId: 'bgg-id',\n                        resultDataSourceId: 'data-source',\n                        resultDataSourceValue: 'scoreSheet',\n                        modifierClassNormal: '',\n                        modifierClassInactive: '',\n                        modifierClassActive: '',\n                        modifierClassWarning: '',\n                        iconNormal: ' ',\n                        iconInactive: ' ',\n                        iconActive: ' ',\n                        iconWarning: ' ',\n                        isDraggable: false,\n                        isClickable: false,\n                        isDeleteable: true,\n                        deleteButtonClasses: 'btn btn-rounded btn-warning ml-6 mt-4',\n                        deleteButtonText: 'Delete&nbsp;',\n                        deleteButtonIconClasses: 'fas fa-trash-alt',\n                        resultContentDivClasses: 'card-img-overlay',\n                        resultContentTextElementType: 'div',\n                        resultContentTextClasses: 'ml-2',\n                        hasBackgroundImage: true,\n                        imgElementType: 'img',\n                        imgClasses: 'score-card-img',\n                    },\n                },\n                scoreSheet: {\n                    dom: {\n                        dropZone: \"scoreSheetZone\",\n                        boardGame: \"selectedBoardGame\",\n                        startStopTimer: \"startStopTimer\",\n                        timer: \"timerDisplay\",\n                        end: \"leaveScoreSheet\",\n                        scoreSheet: \"scoreSheet\",\n                        iconStart: \"<i class='fas fa-hourglass-start'></i>\",\n                        iconInProgress: \"<i class='fas fa-hourglass-half'></i>\",\n                        iconEnd: \"<i class='fas fa-hourglass-end'></i>\",\n                        iconLeave: \"<i class='fas fa-sign-out-alt'></i>\",\n                        ssFastSearchUserNames: 'ssFastSearchUserNames',\n                        webrtc: 'webrtc'\n\n                    }\n                }\n            },\n            uiPrefs: {\n                navigation: {},\n                blogEntry: {},\n                userSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                boardGameSearchSideBar: {\n                    view: {\n                        location: 'left',\n                        expandedSize: '35%',\n                    },\n                },\n                chatSideBar: {\n                    view: {\n                        location: 'right',\n                        expandedSize: '50%',\n                    },\n                },\n                scoreSheetSideBar: {\n                    view: {\n                        location: 'bottom',\n                        expandedSize: '30%',\n                    },\n                },\n            },\n            controller: {\n                events: {\n                    boardGames: {\n                        eventDataKeyId: 'board-game-id',\n                    },\n                },\n                dataLimit: {\n                    recentUserSearches: 10,\n                },\n            },\n        };\n        // event handlers\n        this.cancelDelete = this.cancelDelete.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n        this.handleDeleteBoardGame = this.handleDeleteBoardGame.bind(this);\n\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowBGGSearch = this.handleShowBGGSearch.bind(this);\n\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n\n        this.handleShowCollection = this.handleShowCollection.bind(this);\n        this.handleShowScoreSheet = this.handleShowScoreSheet.bind(this);\n        this.handleStartScoreSheet = this.handleStartScoreSheet.bind(this);\n        this.handleShowScores = this.handleShowScores.bind(this);\n\n        controller.connectToApplication(this, window.localStorage);\n    }\n\n    public addBoardGameToDisplay(draggedObject: any) {\n        // ok, we are just the dumb view, pass this onto the controller to work out the logic for us\n        controller.addBoardGameToDisplay(draggedObject);\n    }\n\n    getCurrentUser() {\n        return controller.getLoggedInUserId();\n    }\n\n    alert(title: string, content: string) {\n        this.titleEl.textContent = title;\n        this.contentEl.textContent = content;\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.hideClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.showClass);\n    }\n\n    render() {\n        logger(\"Rendering App\");\n        // @ts-ignore\n        let boardGames: any[] = this.state.boardGames;\n        logger(boardGames);\n\n        const games = boardGames.map((entry, index: number) =>\n            <BoardGameView\n                key={index}\n                boardGame={entry}\n                showScoresHandler={this.handleShowScores}\n                addToCollectionHandler={controller.addBoardGameToCollection}\n                removeFromCollectionHandler={this.handleDeleteBoardGame}\n                startScoreSheetHandler={this.handleStartScoreSheet}\n            />\n        );\n\n        return (\n            <div className=\"root container-fluid\">\n                <div className=\"card-group\">\n                    {games}\n                </div>\n            </div>\n        );\n    }\n\n    cancelDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n    }\n\n    confirmDelete(event: MouseEvent) {\n        // @ts-ignore\n        this.modalEl.classList.remove(this.state.ui.alert.showClass);\n        // @ts-ignore\n        this.modalEl.classList.add(this.state.ui.alert.hideClass);\n        event.preventDefault();\n        // @ts-ignore\n        let id = this.modalEl.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        id = parseInt(id);\n        logger(`Handling Delete with id ${id}`);\n        // @ts-ignore\n        const currentBoardGamesOnDisplay = this.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n        if (index >= 0) {\n            const boardGame = currentBoardGamesOnDisplay[index];\n            controller.removeBoardGameFromCollection(boardGame);\n        }\n    }\n\n    handleStartScoreSheet(event: MouseEvent) {\n        event.preventDefault();\n        // do we already have an active score sheet?\n        if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n            if (confirm(\"You already have an active score sheet, do you want to finish that one and start a new one?\")) {\n                ScoreSheetController.getInstance().endScoreSheet();\n            } else {\n                // user cancelled, finish\n                return;\n            }\n        }\n\n        this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling starting score sheet for ${id}`)\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                logger(boardGame);\n                ScoreSheetController.getInstance().startScoreSheet(boardGame);\n                this.switchBetweenCollectionAndScoreSheet(false);\n            }\n        }\n    }\n\n    handleDeleteBoardGame(event: MouseEvent) {\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Delete Board Game ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                if (boardGame.decorator && (boardGame.decorator === Decorator.Persisted)) {\n                    logger(`Handling Delete Board Game ${id} - persisted, confirming with user, but only if logged in`);\n                    if (controller.isLoggedIn()) {\n                        // @ts-ignore\n                        this.modalEl.setAttribute(this.state.controller.events.boardGames.eventDataKeyId, id);\n                        this.alert(`${boardGame.name} (${boardGame.year})`, \"Are you sure you want to delete this board game from your collection?\");\n                    } else {\n                        logger(`Handling Delete Board Game ${id} - IS persisted but not logged in, just deleting from local storage  asking controller to remove`);\n                        // not persisted yet, let the controller manage this one\n                        controller.removeBoardGameFromDisplay(boardGame);\n\n                    }\n                } else {\n                    logger(`Handling Delete Board Game ${id} - NOT persisted, asking controller to remove`);\n                    // not persisted yet, let the controller manage this one\n                    controller.removeBoardGameFromDisplay(boardGame);\n                }\n            }\n        }\n    }\n\n    async componentDidMount() {\n        logger('component Did Mount');\n\n\n        this.chatView = new ChatSidebarView(this, document, controller.getStateManager());\n        this.chatView.onDocumentLoaded();\n\n        this.userSearchView = new UserSearchSidebarView(this, document, controller.getStateManager());\n        this.userSearchView.onDocumentLoaded();\n\n\n        this.bggSearchView = new BoardGameSearchSidebarView(this, document, controller.getStateManager());\n        this.bggSearchView.onDocumentLoaded();\n\n        this.scoresView = new ScoreSheetSidebarView(this, document, controller.getStateManager());\n        this.scoresView.onDocumentLoaded();\n\n\n        this.scoreSheetView = ScoreSheetView.getInstance();\n        this.scoreSheetView.setApplication(this);\n        this.scoreSheetView.onDocumentLoaded(this);\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.boardGameSearchId).addEventListener('click', this.handleShowBGGSearch);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(this.state.ui.navigation.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showMyCollection).addEventListener('click', this.handleShowCollection);\n            // @ts-ignore\n            document.getElementById(this.state.ui.navigation.showScoreSheet).addEventListener('click', this.handleShowScoreSheet);\n        }\n\n        // alert modal dialog setup\n        // @ts-ignore\n        this.modalEl = document.getElementById(this.state.ui.alert.modalId);\n        // @ts-ignore\n        this.titleEl = document.getElementById(this.state.ui.alert.titleId);\n        // @ts-ignore\n        this.contentEl = document.getElementById(this.state.ui.alert.contentId);\n        // @ts-ignore\n        this.cancelBtnEl = document.getElementById(this.state.ui.alert.cancelButtonId);\n        // @ts-ignore\n        this.confirmBtnEl = document.getElementById(this.state.ui.alert.confirmButtonId);\n        // @ts-ignore\n        this.closeBtnEl = document.getElementById(this.state.ui.alert.closeButtonId);\n\n        // event listeners for the confirm delete of entry\n        if (this.cancelBtnEl) this.cancelBtnEl.addEventListener('click', this.cancelDelete);\n        if (this.confirmBtnEl) this.confirmBtnEl.addEventListener('click', this.confirmDelete);\n        if (this.closeBtnEl) this.closeBtnEl.addEventListener('click', this.cancelDelete);\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById('scoreSheetZone');\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', this.handleDragOver);\n            this.thisEl.addEventListener('drop', this.handleDrop);\n        }\n\n        // ok lets try get things done\n        ScoreSheetController.getInstance().initialise(this);\n        controller.initialise();\n    }\n\n    hideAllSideBars() {\n        this.chatView.eventHide(null);\n        this.userSearchView.eventHide(null);\n        this.bggSearchView.eventHide(null);\n    }\n\n    handleShowCollection(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    handleShowScoreSheet(event: MouseEvent) {\n        this.switchBetweenCollectionAndScoreSheet(false);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.userSearchView.eventShow(event);\n    }\n\n    handleShowScores(event: Event) {\n        logger(`Handling show board game scores`);\n        event.preventDefault();\n        // @ts-ignore\n        let id = event.target.getAttribute(this.state.controller.events.boardGames.eventDataKeyId);\n        logger(`Handling Show board game scores ${id}`);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            if (index >= 0) {\n                const boardGame = currentBoardGamesOnDisplay[index];\n                this.scoresView.setSelectedBoardGame(boardGame);\n                this.scoresView.eventShow(null);\n            }\n        }\n    }\n\n    handleShowChat(event: Event, roomName: string | null) {\n        logger('Handling Show Chat');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = this.state.apis.login;\n            return;\n        }\n        this.chatView.eventShow(event);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n    handleShowBGGSearch(event: Event) {\n        logger('Handling Show BGG Search View');\n        event.preventDefault();\n        // prevent anything from happening if we are not logged in\n        if (!controller.isLoggedIn()) {\n            this.hideAllSideBars();\n            // @ts-ignore\n        }\n        this.bggSearchView.eventShow(event);\n    }\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    private handleDragOver(event: DragEvent) {\n        event.preventDefault();\n    }\n\n    private handleDrop(event: Event) {\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.state.ui.draggable.draggableDataKeyId);\n        logger(draggedObjectJSON);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        logger(draggedObject);\n        // @ts-ignore\n        if (draggedObject[this.state.ui.draggable.draggedType] === this.state.ui.draggable.draggedTypeBoardGame) {\n            this.addBoardGameToDisplay(draggedObject);\n        }\n\n    }\n\n    private switchBetweenCollectionAndScoreSheet(showCollection: boolean) {\n        if (showCollection) {\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', false);\n            if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', true);\n            if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', false);\n        } else {\n            if (ScoreSheetController.getInstance().hasActiveScoreSheet()) {\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-none', true);\n                if (this.thisEl) browserUtil.addRemoveClasses(this.thisEl, 'd-block', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-none', false);\n                if (this.scoreSheetEl) browserUtil.addRemoveClasses(this.scoreSheetEl, 'd-block', true);\n            }\n        }\n    }\n\n}\n\n//localStorage.debug = 'app view-ts controller-ts socket-ts api-ts local-storage-ts state-manager-ts view-ts:blogentry view-ts:comments view-ts:details';\n//localStorage.debug = 'app controller-ts socket-ts api-ts local-storage-ts state-manager-ts indexeddb-ts user-search-sidebar user-search-sidebar:detail state-manager-ms state-manager-api state-manager-aggregate state-manager-async';\n//localStorage.debug = 'app controller-ts  chat-sidebar chat-sidebar:detail board-game-search-sidebar board-game-search-sidebar:detail ';\n//localStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts chat-sidebar chat-sidebar:detail socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts template-manager' ;\nlocalStorage.debug = 'score-sheet-controller call-manager peer';\ndebug.log = console.info.bind(console);\n\n// @ts-ignore\nconst element = <Root className=\"container-fluid justify-content-around\"/>;\n\nReactDOM.render(element, document.getElementById('root'));\n","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport type ScoreSheet = {\n    room: string,\n    boardGameName: string,\n    sheetLayoutOptions: any | null;\n    timer: number,\n    data: any[] | null,\n    isFinished: boolean,\n    timerGoing: boolean\n}\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport socketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {GraphQLApiStateManager} from \"./state/GraphQLApiStateManager\";\nimport {Decorator} from \"./AppTypes\";\nimport downloader from \"./network/DownloadManager\";\nimport BrowserStorageStateManager from \"./state/BrowserStorageStateManager\";\nimport {ScoreSheetController} from \"./component/ScoreSheetController\";\nimport {isSameGame} from \"./util/EqualityFunctions\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n    // @ts-ignore\n    protected displayedBoardGamesStateManager: StateManager;\n\n\n    constructor() {\n    }\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        this.config = this.applicationView.state;\n        // setup the API calls\n        let apiStateManager = RESTApiStateManager.getInstance();\n        apiStateManager.initialise([\n            {\n                stateName: this.config.stateNames.boardGames,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.entries,\n                isActive: true\n            },\n            {\n                stateName: this.config.stateNames.scores,\n                serverURL: this.getServerAPIURL(),\n                api: this.config.apis.comments,\n                isActive: true\n            }\n        ]);\n\n        let graphSM = new GraphQLApiStateManager();\n        graphSM.initialise([\n            {\n                stateName: this.config.stateNames.users,\n                apiURL: this.getServerAPIURL() + this.config.apis.graphQL,\n                apis: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.queryString,\n                },\n                data: {\n                    find: '',\n                    create: '',\n                    destroy: '',\n                    update: '',\n                    findAll: this.config.apis.findUsers.resultName,\n                },\n                isActive: true\n\n            }\n\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncDBSM = new AsyncStateManagerWrapper(aggregateSM, apiStateManager);\n        let asyncQLSM = new AsyncStateManagerWrapper(aggregateSM, graphSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncQLSM, [this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches, this.config.stateNames.boardGames, this.config.stateNames.scores], false);\n        aggregateSM.addStateManager(asyncDBSM, [this.config.stateNames.users, this.config.stateNames.boardGames, this.config.stateNames.scores, this.config.stateNames.selectedEntry, this.config.stateNames.recentUserSearches], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackBoardGameDetails = this.callbackBoardGameDetails.bind(this);\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n        this.removeBoardGameFromCollection = this.removeBoardGameFromCollection.bind(this);\n        this.removeBoardGameFromDisplay = this.removeBoardGameFromDisplay.bind(this);\n\n        // further state management\n        this.displayedBoardGamesStateManager = new BrowserStorageStateManager(true);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate(this.config);\n        socketManager.setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId() > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n            ScoreSheetController.getInstance().setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n\n\n            // load the users\n            this.getStateManager().getStateByName(this.config.stateNames.users);\n        }\n        let currentGameList: any[] = this.displayedBoardGamesStateManager.getStateByName(this.config.stateNames.boardGames);\n        currentGameList = this.cleanupBoardGameState(currentGameList);\n\n\n        // load board games from local storage if any\n        this.applicationView.setState({boardGames: currentGameList});\n\n        // download the current board game collection\n        this.downloadAndSyncSavedBoardGameCollection();\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): number {\n        let result = -1;\n        try {\n            // @ts-ignore\n            if (loggedInUserId) {\n                // @ts-ignore\n                result = loggedInUserId;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUsername) {\n                // @ts-ignore\n                result = loggedInUsername;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): number {\n        return this.getLoggedInUserId();\n    }\n\n    //  State Management listening\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item Added`);\n        cLogger(itemAdded);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n\n    /*\n    *  sockets -\n    *  Handling data changes by other users\n    *\n     */\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        cLogger(`State changed ${name} from ${managerName}  - item Removed`);\n        cLogger(itemRemoved);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        cLogger(`State changed ${name} from ${managerName} - item updated`);\n        cLogger(itemUpdated);\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - updating application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n\n    }\n\n    stateChanged(managerName: string, name: string, values: any) {\n        cLogger(`State changed ${name} from ${managerName} `);\n        cLogger(values);\n        // what has changed and by whom?\n        switch (managerName) {\n            case 'aggregate':\n            case 'memory': {\n                cLogger(`received state from ${managerName} for state ${name} - sending to application view`);\n                switch (name) {\n                    case this.config.stateNames.entries: {\n                        break;\n                    }\n                    case this.config.stateNames.comments: {\n                        break;\n                    }\n                    case this.config.stateNames.users: {\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n\n    // Data logic\n    public addBoardGameToDisplay(boardGame: any): void {\n        // this will just the basics of a board game from the search then click/dragged over\n        cLogger(`Handling addition of board game`);\n        cLogger(boardGame);\n\n        // don't add if already in the users display\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            cLogger(`Board game in display already`);\n            return;\n        }\n\n        // start with what we have and let the main view know, but mark it incomplete for partial rendering with user information\n        boardGame.decorator = Decorator.Incomplete;\n        currentListOfGames.push(boardGame);\n        cLogger(`Adding received board game to application`);\n        cLogger(boardGame);\n\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n        this.applicationView.setState({boardGames: currentListOfGames});\n\n        // now we need an API call to fill in the details\n        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.bggSearchCallById.queryString, {gameId: boardGame.gameId}, this.callbackBoardGameDetails, this.config.stateNames.boardGames, false);\n    }\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const boardGameDetails = data.data[this.config.apis.bggSearchCallById.resultName];\n            cLogger(boardGameDetails);\n            let regex = /&#10;/g;\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\\r\\n');\n            regex = /&ldquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&rdquo;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&quot;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n            regex = /&mdash;/g\n            boardGameDetails.description = boardGameDetails.description.replace(regex, '\"');\n\n\n            //this.getStateManager().addNewItemToState(this.config.stateNames.boardGames,data.data[this.config.apis.bggSearchCallById.resultName],true);\n            let currentListOfGames: any[] = this.applicationView.state.boardGames;\n            let index = currentListOfGames.findIndex((value) => value.gameId === boardGameDetails.gameId);\n            if (index >= 0) {\n                cLogger(`Updating application state`);\n                currentListOfGames.splice(index, 1, boardGameDetails);\n                cLogger(currentListOfGames);\n                boardGameDetails.decorator = Decorator.PersistedLocally;\n                this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n                this.applicationView.setState({boardGames: currentListOfGames});\n            } else {\n                cLogger(`Board game ${boardGameDetails.id} not found in current state`);\n            }\n\n        }\n\n    }\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.addToMyCollection.resultName];\n            cLogger(id);\n\n            // Find and update the board game in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            let index = currentGameList.findIndex((game: any) => game.gameId === id.gameId);\n            if (index >= 0) {\n                let updatingBoardGame = currentGameList[index];\n                cLogger(`Updating board game ${updatingBoardGame.gameId} with database id ${id.id} and new Persisted state`);\n                updatingBoardGame.decorator = Decorator.Persisted;\n                updatingBoardGame.id = id.id;\n\n                if (updatingBoardGame.scoresheets) {\n                    const cb = (data: any, status: number, associatedStateName: string) => {\n                    };\n\n                    // add the scoresheets to database\n                    updatingBoardGame.scoresheets.forEach((scoreSheet: any) => {\n                        this.convertScoreSheetToApiCallFormat(scoreSheet);\n                        downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                            {userId: this.getCurrentUser(), boardGameId: updatingBoardGame.id, sheet: scoreSheet},\n                            cb,\n                            this.config.stateNames.scoreSheet,\n                            false);\n                        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n                        scoreSheet.decorator = Decorator.Persisted;\n\n                    });\n\n                }\n\n                this.applicationView.setState({boardGames: currentGameList});\n                this.displayedBoardGamesStateManager.updateItemInState(this.config.stateNames.boardGames, updatingBoardGame, isSameGame, false);\n            }\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const id = data.data[this.config.apis.removeFromMyCollection.resultName];\n            cLogger(id);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n            const collectionData = data.data[this.config.apis.getMyBoardGameCollection.resultName];\n\n            // loop through the collection data and see if it already exists in the state\n            let currentGameList = this.applicationView.state.boardGames;\n            cLoggerDetail(`Starting with local state of ${currentGameList.length}`);\n            collectionData.forEach((boardGame: any) => {\n                boardGame.decorator = Decorator.Persisted;\n                cLoggerDetail(`Loading board game from collection `);\n                cLoggerDetail(boardGame);\n\n                this.decorateScoreSheets(boardGame);\n\n                let index = currentGameList.findIndex((game: any) => game.gameId === boardGame.gameId);\n                cLoggerDetail(`have found the board game locally? ${index >= 0}`);\n                if (index >= 0) {\n                    const locallySaveBoardGame = currentGameList[index];\n\n                    cLoggerDetail(`in current state, replacing`);\n                    // copy any locally saved score sheets to the database object\n                    this.copyLocallySavedScoreSheetsToBoardGame(boardGame, locallySaveBoardGame);\n\n                    // replace the current entry\n                    currentGameList.splice(index, 1, boardGame);\n                } else {\n                    cLoggerDetail(`not in current state, adding`);\n                    currentGameList.push(boardGame);\n                }\n            });\n            currentGameList = this.cleanupBoardGameState(currentGameList);\n            cLoggerDetail(`Ending with local state of ${currentGameList.length}`);\n            this.applicationView.setState({boardGames: currentGameList});\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentGameList, false);\n        }\n    }\n\n    scoreSheetAddedToBoardGame(boardGame: any, scoreSheet: any) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                {userId: this.getCurrentUser(), boardGameId: boardGame.id, sheet: scoreSheet},\n                cb,\n                this.config.stateNames.scoreSheet,\n                false);\n            scoreSheet.decorator = Decorator.Persisted;\n        } else {\n            scoreSheet.decorator = Decorator.PersistedLocally;\n        }\n        // convert the scoresheet into the usual received format from the database\n        this.convertScoreSheetToDatabaseFormat(scoreSheet);\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    scoreSheetRemovedFromBoardGame(boardGame: any, scoreSheetId: string) {\n        const cb = (data: any, status: number, associatedStateName: string) => {\n        };\n\n        if (this.isLoggedIn() && (boardGame.decorator && (boardGame.decorator === Decorator.Persisted))) {\n            //mutation addScore($userId: Int!, $boardGameId: Int!, $sheet: ScoreSheetInput) {addScoreSheetToBoardGame(userId: $userId, boardGameId: $boardGameId, sheet: $sheet){id}\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeScoreSheet.queryString,\n                {sheetId: scoreSheetId},\n                cb,\n                this.config.stateNames.scoreSheet,\n                false);\n        }\n\n        let currentListOfGames: any[] = this.applicationView.state.boardGames;\n        let index = currentListOfGames.findIndex((value) => value.gameId === boardGame.gameId);\n        if (index >= 0) {\n            const oldBoardGame = currentListOfGames[index];\n            boardGame.decorator = oldBoardGame.decorator;\n\n            cLogger(`Updating application state`);\n            currentListOfGames.splice(index, 1, boardGame);\n            cLogger(currentListOfGames);\n            this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentListOfGames, false);\n            this.applicationView.setState({boardGames: currentListOfGames});\n        } else {\n            cLogger(`Board game ${boardGame.id} not found in current state`);\n        }\n\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n        const boardGame: any | null = this.findBoardGameInStateFromEvent(event);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Persisted): {\n                        // already in collection, nothing to do\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.displayedBoardGamesStateManager.addNewItemToState(this.config.stateNames.boardGames, boardGame, true);\n                        // add the board game to my collection\n                        // now we need an API call to fill in the details\n                        delete boardGame.decorator;\n                        delete boardGame.id;\n                        if (this.isLoggedIn()) {\n                            let scoreSheets = boardGame.scoresheets;\n                            delete boardGame.scoresheets;\n\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addToMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGame: boardGame},\n                                this.callbackAddToCollection,\n                                this.config.stateNames.boardGames,\n                                true);\n                            boardGame.decorator = Decorator.Complete;\n                            boardGame.scoresheets = scoreSheets;\n\n\n                        } else {\n                            boardGame.decorator = Decorator.PersistedLocally;\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromCollection(boardGame: any) { // should be persisted\n        cLogger(`Handling Remove Board Game from collection with id ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Persisted): {\n                        // already in collection,\n                        this.removeBoardGameFromState(boardGame);\n                        if (this.isLoggedIn()) {\n                            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.removeFromMyCollection.queryString,\n                                {userId: this.getCurrentUser(), boardGameId: boardGame.gameId},\n                                this.callbackRemoveFromCollection,\n                                this.config.stateNames.boardGames,\n                                false);\n                        }\n                        break;\n                    }\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Complete): {\n                        // loaded and ready to save, but not yet saved, nothing to delete\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    removeBoardGameFromDisplay(boardGame: any) { // shouldn't be persisted yet\n        cLogger(`Handling Remove Board Game from display ${boardGame.gameId}`);\n        if (boardGame) {\n            if (boardGame.decorator) {\n                switch (boardGame.decorator) {\n                    case (Decorator.Incomplete): {\n                        // not ready to add to collection yet, do nothing\n                        break;\n                    }\n                    case (Decorator.Persisted):\n                    case (Decorator.PersistedLocally):\n                    case (Decorator.Complete): {\n                        // loaded and ready to save\n                        this.removeBoardGameFromState(boardGame);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    private cleanupBoardGameState(boardGames: any[]): any[] { // lets tidy up any duplicates, keeping Persisted ones by preference\n        let cleanedUpList: any[] = [];\n        boardGames.forEach((boardGame) => {\n            // is already in the list?\n            let index = cleanedUpList.findIndex((game) => game.gameId === boardGame.gameId);\n            if (index >= 0) { // found in the list\n                // is this a persisted board game?\n                let existingListGame = cleanedUpList[index]\n                if (existingListGame.decorator && existingListGame.decorator === Decorator.Persisted) {\n                    // leave the persisted version in the cleaned up list\n                } else {\n                    // do we have persisted game to replace the one in the list\n                    if (boardGame.decorator && boardGame.decorator === Decorator.Persisted) {\n                        // replace the existing one with this one\n                        cleanedUpList.splice(index, 1, boardGame);\n                    } else {\n                        // just leave the one there, neither are persisted to a database\n                    }\n                }\n            } else {\n                // not found yet, add to list\n                cleanedUpList.push(boardGame);\n            }\n\n        });\n        return cleanedUpList;\n\n    }\n\n    private downloadAndSyncSavedBoardGameCollection() {\n        if (this.isLoggedIn()) {\n            // start the call to retrieve the saved collection of board games\n            downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.getMyBoardGameCollection.queryString, {userId: this.getLoggedInUserId()}, this.callbackGetCollection, this.config.stateNames.boardGames, false);\n        }\n    }\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n    private removeBoardGameFromState(boardGame: any) {\n        const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n        let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === boardGame.gameId);\n        if (index >= 0) {\n            currentBoardGamesOnDisplay.splice(index, 1);\n            this.applicationView.setState({boardGames: currentBoardGamesOnDisplay});\n        }\n        // save locally\n        this.displayedBoardGamesStateManager.setStateByName(this.config.stateNames.boardGames, currentBoardGamesOnDisplay, false);\n    }\n\n    private findBoardGameInStateFromEvent(event: Event) {\n        let boardGame: any | null = null;\n        cLoggerDetail(`Finding board game id in event`);\n        // @ts-ignore\n        let id = event.target.getAttribute(this.config.controller.events.boardGames.eventDataKeyId);\n        cLoggerDetail(id);\n        if (id) {\n            // find the entry from the state manager\n            id = parseInt(id);\n            // @ts-ignore\n            const currentBoardGamesOnDisplay = this.applicationView.state.boardGames;\n            let index = currentBoardGamesOnDisplay.findIndex((game: any) => game.gameId === id);\n            cLoggerDetail(index);\n            if (index >= 0) {\n                boardGame = currentBoardGamesOnDisplay[index];\n            }\n        }\n        cLoggerDetail(boardGame);\n        return boardGame;\n    }\n\n    private decorateScoreSheets(boardGame: any) {\n        if (boardGame) {\n            if (boardGame.scoresheets) {\n                boardGame.scoresheets.forEach((sheet: any) => {\n                    sheet.decorator = Decorator.Persisted;\n                })\n            } else {\n                boardGame.scoresheets = [];\n            }\n        }\n    }\n\n    private copyLocallySavedScoreSheetsToBoardGame(target: any, source: any) {\n        if (source.scoresheets) {\n            let toSave: any[] = [];\n            source.scoresheets.forEach((sheet: any) => {\n                // is the scoresheet already in the target?\n                let index = target.scoresheets.findIndex((item: any) => item.id === sheet.id);\n                if (index < 0) {\n                    sheet.decorator = Decorator.PersistedLocally;\n                    target.scoresheets.push(sheet);\n                    toSave.push(sheet);\n                }\n            });\n\n            // do we have any sheets to save?\n            if (toSave.length > 0) {\n                const cb = (data: any, status: number, associatedStateName: string) => {\n                };\n\n                toSave.forEach((sheetToSave: any) => {\n                    this.convertScoreSheetToApiCallFormat(sheetToSave);\n\n\n                    downloader.addQLApiRequest(this.config.apis.graphQL, this.config.apis.addScoreSheetToBoardGame.queryString,\n                        {userId: this.getCurrentUser(), boardGameId: target.id, sheet: sheetToSave},\n                        cb,\n                        this.config.stateNames.scoreSheet,\n                        false);\n\n                    this.convertScoreSheetToDatabaseFormat(sheetToSave);\n                    sheetToSave.decorator = Decorator.Persisted;\n                });\n            }\n        }\n    }\n\n    private convertScoreSheetToDatabaseFormat(scoreSheet: any) {\n        if (scoreSheet.players) {\n            if (scoreSheet.players.length >= 1) {\n                scoreSheet.player1 = scoreSheet.players[0];\n                scoreSheet.score1 = scoreSheet.scores[0];\n            }\n            if (scoreSheet.players.length >= 2) {\n                scoreSheet.player2 = scoreSheet.players[1];\n                scoreSheet.score2 = scoreSheet.scores[1];\n            }\n            if (scoreSheet.players.length >= 3) {\n                scoreSheet.player3 = scoreSheet.players[2];\n                scoreSheet.score3 = scoreSheet.scores[2];\n            }\n            if (scoreSheet.players.length >= 4) {\n                scoreSheet.player4 = scoreSheet.players[3];\n                scoreSheet.score4 = scoreSheet.scores[3];\n            }\n            if (scoreSheet.players.length >= 5) {\n                scoreSheet.player5 = scoreSheet.players[4];\n                scoreSheet.score5 = scoreSheet.scores[4];\n            }\n            if (scoreSheet.players.length >= 6) {\n                scoreSheet.player6 = scoreSheet.players[5];\n                scoreSheet.score6 = scoreSheet.scores[5];\n            }\n            if (scoreSheet.players.length >= 7) {\n                scoreSheet.player7 = scoreSheet.players[6];\n                scoreSheet.score7 = scoreSheet.scores[6];\n            }\n\n        }\n    }\n\n    private convertScoreSheetToApiCallFormat(scoreSheet: any) {\n        delete scoreSheet.decorator;\n        delete scoreSheet.player1;\n        delete scoreSheet.score1;\n        delete scoreSheet.player2;\n        delete scoreSheet.score2;\n        delete scoreSheet.player3;\n        delete scoreSheet.score3;\n        delete scoreSheet.player4;\n        delete scoreSheet.score4;\n        delete scoreSheet.player5;\n        delete scoreSheet.score5;\n        delete scoreSheet.player6;\n        delete scoreSheet.score6;\n        delete scoreSheet.player7;\n        delete scoreSheet.score7;\n    }\n\n\n}\n\nconst controller = new Controller();\n\nexport default controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n    private config: any;\n\n    public constructor(config: any) {\n        this.config = config;\n    }\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = controller.getStateManager().findItemInState(this.config.stateNames.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.comments, stateObj, true);\n                            // find the entry in question\n                            const changedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, {id: stateObj.commentOn}, isSame);\n                            if (changedEntry) {\n                                notifier.show(changedEntry.title, `${username} added comment ${stateObj.content}`);\n                            }\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.entries, stateObj, true);\n                            notifier.show(stateObj.title, `${username} added new entry`);\n                            break;\n                        }\n                        case this.config.stateNames.users: {\n                            controller.getStateManager().addNewItemToState(this.config.stateNames.users, stateObj, true);\n                            notifier.show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.entries: {\n                            controller.getStateManager().updateItemInState(this.config.stateNames.entries, stateObj, isSame, true);\n                            // the entry could be selected by this (different user) but that would only be for comments, which is not what changed, so we are done\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case this.config.stateNames.comments: {\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.comments, stateObj, isSame, true);\n                            break;\n                        }\n                        case this.config.stateNames.entries: {\n                            let deletedEntry = controller.getStateManager().findItemInState(this.config.stateNames.entries, stateObj, isSame);\n                            controller.getStateManager().removeItemFromState(this.config.stateNames.entries, stateObj, isSame, true);\n                            notifier.show(deletedEntry.title, `${username} has deleted this entry.`, 'priority');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): number {\n        return controller.getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\nimport browserUtil from '../util/BrowserUtil';\nimport StateChangeListener from \"../state/StateChangeListener\";\nimport {StateManager} from \"../state/StateManager\";\n\nconst avLogger = debug('view-ts')\n\nexport default abstract class AbstractView implements StateChangeListener {\n    protected applicationView: any;\n    protected document: HTMLDocument;\n    protected uiConfig: any;\n    protected uiPrefs: any;\n\n    protected config: any;\n\n    protected stateManager: StateManager;\n\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        this.applicationView = applicationView;\n        this.document = document;\n        this.uiConfig = uiConfig;\n        this.uiPrefs = uiPrefs;\n        this.config = applicationView.state;\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.eventAction2Clicked = this.eventAction2Clicked.bind(this);\n        this.eventAction1Clicked = this.eventAction1Clicked.bind(this);\n    }\n\n    public abstract onDocumentLoaded(): void;\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateView(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        this.updateView(name, this.stateManager.getStateByName(name));\n    }\n\n    /* abstract */\n    protected abstract eventClickItem(event: MouseEvent): void;\n\n    protected abstract eventDeleteClickItem(event: MouseEvent): void;\n\n    protected eventAction1Clicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    protected eventAction2Clicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    protected abstract getDragData(event: DragEvent): any;\n\n    protected abstract getIdForStateItem(name: string, item: any): string;\n\n    protected abstract getLegacyIdForStateItem(name: string, item: any): string;\n\n    protected abstract getDisplayValueForStateItem(name: string, item: any): string;\n\n    protected abstract getModifierForStateItem(name: string, item: any): string;\n\n    protected abstract getSecondaryModifierForStateItem(name: string, item: any): string;\n\n    protected abstract getBadgeValue(name: string, item: any): number;\n\n    protected abstract getBackgroundImage(name: string, item: any): string;\n\n    protected abstract updateView(name: string, newState: any): void;\n\n    protected eventStartDrag(event: DragEvent) {\n        avLogger('Abstract View : drag start', 10);\n        const data = JSON.stringify(this.getDragData(event));\n        avLogger(data, 10);\n        // @ts-ignore\n        event.dataTransfer.setData(this.applicationView.state.ui.draggable.draggableDataKeyId, data);\n    }\n\n    protected createResultForItem(name: string, item: any, dataSource: any = null): HTMLElement {\n        avLogger('Abstract View : creating Result');\n        avLogger(item);\n        const domConfig = this.uiConfig.dom;\n\n        const resultDataKeyId = this.getIdForStateItem(name, item);\n        const legacyDataKeyId = this.getLegacyIdForStateItem(name, item);\n        if (!dataSource) {\n            dataSource = domConfig.resultDataSourceValue;\n        }\n\n\n        let childEl: HTMLElement = this.document.createElement(domConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, domConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, domConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (domConfig.resultContentDivClasses) {\n            let contentEl: HTMLElement = this.document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, domConfig.resultContentDivClasses);\n            contentEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            contentEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            contentEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n\n            textEl = this.document.createElement(domConfig.resultContentTextElementType);\n            browserUtil.addRemoveClasses(textEl, domConfig.resultContentTextClasses);\n            textEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n            textEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n            textEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n\n            contentEl.appendChild(textEl);\n\n            if (domConfig.hasBackgroundImage) {\n                let imgEl = this.document.createElement(domConfig.imgElementType);\n                browserUtil.addRemoveClasses(imgEl, domConfig.imgClasses);\n                imgEl.setAttribute('src', this.getBackgroundImage(name, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonBadgeEl = this.document.createElement('div');\n            contentEl.appendChild(buttonBadgeEl);\n\n            if (domConfig.hasBadge) {\n                const badgeValue = this.getBadgeValue(name, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = this.document.createElement(domConfig.badgeElementType);\n                    browserUtil.addRemoveClasses(badgeEl, domConfig.badgeClasses);\n                    badgeEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    badgeEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    buttonBadgeEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                    browserUtil.addAttributes(badgeEl, domConfig.badgeElementAttributes);\n                }\n            }\n\n            if (domConfig.extraAction1Classes) {\n                let action: HTMLElement = this.document.createElement('button');\n                action.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(action, domConfig.extraAction1Classes);\n                if (domConfig.extraAction1Text) {\n                    if (domConfig.extraAction1Text.trim().length > 0) {\n                        action.innerHTML = domConfig.extraAction1Text;\n                    }\n                }\n                if (domConfig.extraAction1IconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, domConfig.extraAction1IconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    action.appendChild(iconEl);\n                }\n                action.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                action.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                action.setAttribute(domConfig.resultDataSourceId, dataSource);\n                action.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventAction1Clicked(event);\n                });\n                buttonBadgeEl.appendChild(action);\n            }\n            if (domConfig.extraAction2Classes) {\n                let action: HTMLElement = this.document.createElement('button');\n                action.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(action, domConfig.extraAction2Classes);\n                if (domConfig.extraAction2Text) {\n                    if (domConfig.extraAction2Text.trim().length > 0) {\n                        action.innerHTML = domConfig.extraAction1Text;\n                    }\n                }\n                if (domConfig.extraAction2IconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, domConfig.extraAction2IconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    action.appendChild(iconEl);\n                }\n                action.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                action.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                action.setAttribute(domConfig.resultDataSourceId, dataSource);\n                action.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventAction2Clicked(event);\n                });\n                buttonBadgeEl.appendChild(action);\n            }\n            if (domConfig.isDeleteable) {\n                let deleteButtonEl: HTMLElement = this.document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, domConfig.deleteButtonClasses);\n                if (domConfig.deleteButtonText) {\n                    if (domConfig.deleteButtonText.trim().length > 0) {\n                        deleteButtonEl.innerHTML = domConfig.deleteButtonText;\n                    }\n                }\n                if (domConfig.deleteButtonIconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, domConfig.deleteButtonIconClasses);\n                    iconEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                    iconEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                    iconEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n                deleteButtonEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventDeleteClickItem(event);\n                });\n                buttonBadgeEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n        }\n\n\n        // add the key ids for selection\n        childEl.setAttribute(domConfig.resultDataKeyId, resultDataKeyId);\n        childEl.setAttribute(domConfig.resultLegacyDataKeyId, legacyDataKeyId);\n        childEl.setAttribute(domConfig.resultDataSourceId, dataSource);\n        const displayText = this.getDisplayValueForStateItem(name, item);\n        // add modifiers for patient state\n        const modifier = this.getModifierForStateItem(name, item);\n        const secondModifier = this.getSecondaryModifierForStateItem(name, item);\n        switch (modifier) {\n            case 'normal': {\n                avLogger('Abstract View: normal item');\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal);\n                if (domConfig.iconNormal !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconNormal;\n                } else {\n                    textEl.innerText = displayText;\n                }\n\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassNormal, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n\n                    }\n                }\n\n                break;\n            }\n            case 'active': {\n                avLogger('Abstract View: active item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive);\n                if (domConfig.iconActive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconActive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassActive, false);\n                        browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                        if (domConfig.iconWarning !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                }\n                break;\n            }\n            case 'inactive': {\n                avLogger('Abstract View: inactive item', 10);\n                browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive);\n                if (domConfig.iconInactive !== '') {\n                    textEl.innerHTML = displayText + '  ' + domConfig.iconInactive;\n                } else {\n                    textEl.innerText = displayText;\n                }\n                switch (secondModifier) {\n                    case 'warning': {\n                        if (domConfig.iconWarning !== '') {\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassInactive, false);\n                            browserUtil.addRemoveClasses(childEl, domConfig.modifierClassWarning, true);\n                            textEl.innerHTML += '  ' + domConfig.iconWarning;\n                        }\n                        break;\n                    }\n                    case 'normal': {\n                        break;\n                    }\n                    case 'active': {\n                        if (domConfig.iconActive !== '') {\n                            textEl.innerHTML += '  ' + domConfig.iconActive;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n        return childEl;\n    }\n\n    protected createResultsForState(name: string, newState: any): void {\n        avLogger('Abstract View : creating Results', 10);\n        avLogger(newState);\n        const domConfig = this.uiConfig.dom;\n        // remove the previous items from list\n        const viewEl = document.getElementById(domConfig.resultsId);\n        if (viewEl) browserUtil.removeAllChildren(viewEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createResultForItem(name, item);\n            // add draggable actions\n            if (domConfig.isDraggable) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventStartDrag);\n            }\n            // add selection actions\n            if (domConfig.isClickable) {\n                childEl.addEventListener('click', this.eventClickItem);\n            }\n            avLogger(`Abstract View: Adding child ${item.id}`);\n            if (viewEl) viewEl.appendChild(childEl);\n        });\n    }\n\n}\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSameGame} from '../util/EqualityFunctions';\nimport browserUtil from \"../util/BrowserUtil\";\nimport downloader from \"../network/DownloadManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst vLogger = debug('board-game-search-sidebar');\nconst vLoggerDetail = debug('board-game-search-sidebar:detail');\n\nclass BoardGameSearchSidebarView extends SidebarView {\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    private formEl: HTMLElement;\n    // @ts-ignore\n    private queryEl: HTMLInputElement;\n    // @ts-ignore\n    private buttonEl: HTMLButtonElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.boardGameSearchSideBar, applicationView.state.uiPrefs.boardGameSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleSearchResultsCB = this.handleSearchResultsCB.bind(this);\n\n        // register state change listening\n        this.localisedSM = new MemoryBufferStateManager();\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.bggSearchResults, this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults));\n    }\n\n    public handleSearchResultsCB(data: any, status: number, associatedStateName: string): void {\n        this.changeSearchButton(true);\n        vLogger(`callback for bgg search ${associatedStateName} with status ${status} - `);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            vLoggerDetail(data);\n            vLoggerDetail(data.data.findBoardGames);\n            this.localisedSM.setStateByName(this.config.stateNames.bggSearchResults, data.data.findBoardGames, true);\n        }\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // get a link to the search button and search field and form\n        // @ts-ignore\n        this.formEl = this.document.getElementById(this.uiConfig.dom.formId);\n        // @ts-ignore\n        this.buttonEl = this.document.getElementById(this.uiConfig.dom.buttonId);\n        // @ts-ignore\n        this.queryEl = this.document.getElementById(this.uiConfig.dom.queryId);\n\n        this.formEl.addEventListener('submit', this.handleSearch);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.gameId;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return `${item.name} (${item.year})     `;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} clicked from ${dataSource}`);\n\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        if (boardGame) {\n            this.applicationView.addBoardGameToDisplay(boardGame);\n        }\n        this.eventHide(null);\n\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.bggSearchResults) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.bggSearchResults);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target.innerText} with id ${boardGameId} dragging`);\n        let boardGame = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {gameId: parseInt(boardGameId)}, isSameGame);\n        vLoggerDetail(boardGame);\n        boardGame[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeBoardGame;\n        boardGame[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromBoardGameSearch;\n        return boardGame;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const boardGameId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`Board Game ${event.target} with id ${boardGameId} delete clicked from ${dataSource}`);\n\n        let boardGame: any = this.localisedSM.findItemInState(this.config.stateNames.bggSearchResults, {id: parseInt(boardGameId)}, isSameGame);\n        vLogger(boardGameId);\n        if (boardGame) {\n            this.localisedSM.removeItemFromState(this.config.stateNames.bggSearchResults, boardGame, isSameGame, true);\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    private changeSearchButton(enable: boolean = false) {\n        browserUtil.removeAllChildren(this.buttonEl);\n        if (enable) {\n            if (this.buttonEl) this.buttonEl.removeAttribute(\"disabled\");\n            if (this.buttonEl) this.buttonEl.innerHTML = 'Search';\n        } else {\n            if (this.buttonEl) this.buttonEl.setAttribute(\"disabled\", \"true\");\n            if (this.buttonEl) this.buttonEl.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>  Loading...';\n        }\n    }\n\n    private handleSearch(event: Event) {\n        vLogger(`Handling search`);\n        event.preventDefault();\n        event.stopPropagation();\n        // do we have anything to search for?\n        let queryText = this.queryEl.value.trim();\n        if (queryText.length == 0) return;\n\n        // ok, have a search term, lets start a search\n        this.changeSearchButton(false);\n\n        // get the query string from state obj\n        let query = this.config.apis.bggSearchCall;\n\n\n        downloader.addQLApiRequest(this.config.apis.graphQL, query, {queryString: queryText}, this.handleSearchResultsCB, this.config.stateNames.bggSearchResults);\n    }\n\n\n}\n\nexport default BoardGameSearchSidebarView;\n","import React from \"react\";\nimport debug from 'debug';\n\nimport controller from \"../Controller\";\nimport {Decorator} from \"../AppTypes\";\n\nconst beLogger = debug('view-ts:boardgameview');\n\n\n// @ts-ignore\nexport default function BoardGameView({boardGame, showScoresHandler, addToCollectionHandler, removeFromCollectionHandler, startScoreSheetHandler}) {\n    if (boardGame) {\n        beLogger(`Board Game ${boardGame.gameId}`);\n\n        let addButton = <div>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={addToCollectionHandler}>\n                &nbsp;&nbsp;Add to {!controller.isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"fas fa-star\"></i>&nbsp;&nbsp;\n            </button>\n            <button type=\"button\"\n                    className=\"btn-primary btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from Display&nbsp;<i className=\"fas fa-trash-alt\"></i>\n            </button>\n        </div>\n\n        let deleteButton =\n            <button type=\"button\"\n                    className=\"btn-warning btn-sm rounded p-1 mt-1 w-100\"\n                    board-game-id={boardGame.gameId} onClick={removeFromCollectionHandler}>\n                &nbsp;&nbsp;Remove from {!controller.isLoggedIn() ? 'Browser' : ''} Collection &nbsp;\n                <i className=\"far fa-star\"></i>&nbsp;&nbsp;\n            </button>\n\n        let startScoreSheetButton =\n            <button type=\"button\"\n                    className=\"btn-secondary btn-sm rounded p-1 mr-2 mt-2 w-100\"\n                    board-game-id={boardGame.gameId} onClick={startScoreSheetHandler}>\n                &nbsp;&nbsp;Start Score Sheet &nbsp;\n                <i className=\"fas fa-list-alt\"></i>&nbsp;&nbsp;\n            </button>\n\n        // do we have any scores?\n        let scoreCount = 0;\n        if (boardGame.scoresheets) {\n            scoreCount = boardGame.scoresheets.length;\n        }\n\n\n//        let overlay = <div className=\"card-img-overlay\">\n        let favouriteIcon = <i className=\"fas fa-star text-black\"></i>\n        let scoreBadge = <span board-game-id={boardGame.gameId} className='badge badge-pill badge-info ml-1'\n                               onClick={showScoresHandler}>Scores: {scoreCount}</span>\n\n        if ((boardGame.decorator) && (boardGame.decorator !== Decorator.Incomplete)) {\n            const bggURL = `https://boardgamegeek.com/boardgame/${boardGame.gameId}`;\n\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <a href={bggURL} target=\"_blank\"><img className=\"card-img-top\" src={boardGame.image}\n                                                              alt=\"Card image cap\"></img></a>\n                        <div className=\"card-body scroll\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? favouriteIcon : ''} {((boardGame.decorator === Decorator.Persisted) || (boardGame.decorator === Decorator.PersistedLocally)) ? scoreBadge : ''}<br/> {(controller.isLoggedIn()) ? ((boardGame.decorator === Decorator.Persisted) ? deleteButton : addButton) : deleteButton}\n                            </h5>\n                            <p className=\"card-text\">{boardGame.description}</p>\n\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Play Time: {boardGame.minPlayTime} - {boardGame.maxPlayTime} min<br/>\n                                    Players: {boardGame.minPlayers} - {boardGame.maxPlayers} Min Age:\n                                    {boardGame.minAge}<br/>\n                                    Categories: {boardGame.categories}\n                                </small>\n                            </p>\n                        </div>\n                        <div className=\"card-footer text-right text-muted\">\n                            Rank: {boardGame.rank} Score: {boardGame.averageScore} from {boardGame.numOfRaters} raters<br/>\n                            {startScoreSheetButton}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top\" src=\"/img/spinner.gif\" alt=\"Card image cap\"></img>\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{boardGame.name} ({boardGame.year}) </h5>\n                            <p className=\"card-text\">Loading...</p>\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">\n                                    Loading...\n                                </small>\n                            </p>\n                        </div>\n                        <div className={\"card-footer text-right text-muted\"}>\n                            Loading...\n                        </div>\n                    </div>\n                </div>);\n        }\n    } else {\n        return (\n            <div className=\"col-sm-12 col-md-6 col-lg-4 col-xl-3 p-2\">\n                <div className=\"card\">\n                </div>\n            </div>\n        );\n    }\n}\n\n\n","import controller from \"../Controller\";\nimport debug from 'debug';\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst callLogger = debug('call-manager');\n\nexport class CallManager {\n    private static _instance: CallManager;\n    \n\n    public static getInstance(): CallManager {\n        if (!(CallManager._instance)) {\n            CallManager._instance = new CallManager();\n        }\n        return CallManager._instance;\n    }\n\n    private peer: any | null = null;\n    private webrtcDiv: HTMLElement | null = null;\n    private myVideoStream: MediaStream | null = null;\n    private myVideo: HTMLVideoElement | null = null;\n    private currentUserList:string[];\n    \n    private constructor() {\n        this.callUser = this.callUser.bind(this);\n        this.currentUserList = [];\n    }\n\n    private startPeerConnection() {\n        if (controller.isLoggedIn()) {\n            // @ts-ignore  - is for the WebRTC peer via Nodejs\n            this.peer = new Peer(controller.getLoggedInUsername(), {path: '/peerjs', host: '/', debug: 2, secure:true});\n            //this.peer = new Peer(controller.getLoggedInUsername(), {path: '/peerjs', host: '/', port: '3000', debug:1, secure:false});\n            this.peer.on('open', (id:any) => {\n                callLogger('My peer ID is: ' + id);\n            });\n        }\n    }\n    \n    public initialise(applicationView:any) {\n        this.startPeerConnection();\n        // @ts-ignore\n        this.webrtcDiv = document.getElementById(applicationView.state.ui.scoreSheet.dom.webrtc);\n        //this.reset();\n    }\n\n    public startScoreSheet() {\n        try {\n            if (controller.isLoggedIn()) {\n                if (navigator.mediaDevices.getUserMedia) {\n                    callLogger('Starting scoresheet stream');\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        callLogger('Scoresheet stream started - adding video element');\n                        this.myVideoStream = stream;\n                        this.addVideoStream(controller.getLoggedInUsername(), this.myVideoStream, true);\n                    });\n\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Non-secure context or no camera capability`);\n        }\n    }\n    \n    public reset() {\n        callLogger('Reset');\n        if (this.currentUserList && this.currentUserList.length > 0) {\n            callLogger('Removing previous users');\n            this.currentUserList.forEach((user) => {\n                callLogger('Removing previous user ${user}');\n                this.removeUser(user);\n            })\n        }\n        if (this.webrtcDiv) browserUtil.removeAllChildren(this.webrtcDiv);\n        this.currentUserList = [];\n        if (this.peer) {\n            callLogger('Stopping video stream');\n            //this.peer.disconnect();\n            if (this.myVideoStream) {\n                this.myVideoStream.getTracks().forEach((track) => track.stop());\n            }\n            if (this.myVideo) this.myVideo.srcObject = null;\n            this.myVideoStream = null;\n        }\n    }\n\n    private addVideoStream(username: string, stream: MediaStream, isCurrentUser = false) {\n        // check to see if they are already there\n        let index = this.currentUserList.findIndex((user) => user === username);\n        if (index >= 0) return;\n\n        this.currentUserList.push(username);\n\n        const videoCardHolder = document.createElement('div');\n        videoCardHolder.setAttribute(\"id\", username);\n        browserUtil.addRemoveClasses(videoCardHolder, 'col-sm-12 col-md-4 col-lg-2');\n        const videoCard = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCard,'card');\n        const videoCardTitle = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardTitle, 'card-header');\n        videoCardTitle.innerHTML = `<h5 class=\"card-title\">${username}</h5>`;\n        const videoCardBody = document.createElement('div');\n        browserUtil.addRemoveClasses(videoCardBody, 'card-body p-0 text-center');\n        const video = document.createElement('video');\n        browserUtil.addRemoveClasses(video, 'video ');\n\n        videoCard.appendChild(videoCardTitle);\n        videoCard.appendChild(videoCardBody);\n        videoCardBody.appendChild(video);\n\n        if (isCurrentUser) {\n            const videoCardFooter = document.createElement('div');\n            browserUtil.addRemoveClasses(videoCardFooter, 'card-footer');\n            const footerContent = document.createElement('div');\n            browserUtil.addRemoveClasses(footerContent,'d-flex w-100 justify-content-between mt-2');\n            const stopVideoButton = document.createElement('button');\n            stopVideoButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(stopVideoButton,'btn btn-circle btn-warning');\n            stopVideoButton.innerHTML = '<i class=\"fas fa-video-slash\"></i>';\n            const muteMicButton = document.createElement('button');\n            muteMicButton.setAttribute('type','button');\n            browserUtil.addRemoveClasses(muteMicButton,'btn btn-circle btn-warning');\n            muteMicButton.innerHTML = '<i class=\"fa fa-microphone\"></i>';\n\n            footerContent.appendChild(stopVideoButton);\n            footerContent.appendChild(muteMicButton);\n\n            videoCardFooter.appendChild(footerContent);\n\n            videoCard.appendChild(videoCardFooter);\n\n            stopVideoButton.addEventListener('click',() => {\n                const isPaused = video.paused;\n                if (isPaused) {\n                    video.play();\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',true);\n\n                }\n                else {\n                    video.pause();\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(stopVideoButton,'btn-warning',false);\n                }\n\n            });\n            muteMicButton.addEventListener('click',() => {\n                const isMuted = video.muted;\n                if (isMuted) {\n                    video.muted = false;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',false);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',true);\n\n                }\n                else {\n                    video.muted = true;\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-success',true);\n                    browserUtil.addRemoveClasses(muteMicButton,'btn-warning',false);\n                }\n\n            });\n\n            this.myVideo = video;\n        }\n\n        videoCardHolder.appendChild(videoCard);\n        video.srcObject = stream;\n        video.addEventListener(\"loadedmetadata\", () => {\n            video.play();\n            if (this.webrtcDiv) this.webrtcDiv.append(videoCardHolder);\n        });\n    };\n\n    public callUser(userId: string) {\n        callLogger(`Asked to call user ${userId}`);\n        if (userId === controller.getLoggedInUsername()) return; // don't call ourself\n        let numberOfAttempts:number = 0;\n\n        let index = this.currentUserList.findIndex((user) => user === userId); // don't call the same users\n        if (index >= 0) return;\n        // wait a small time for the sockets and peer to sync\n        const interval = setInterval(() => {\n            callLogger(`Calling user ${userId}`);\n            if (this.myVideoStream) {\n                const call = this.peer.call(userId, this.myVideoStream);\n                if (call) {\n                    call.on('stream', (userVideoStream: any) => {\n                        callLogger(`User ${userId} answered, showing stream`);\n                        this.addVideoStream(userId, userVideoStream, false);\n                    });\n                    clearInterval(interval);\n                }\n                else {\n                    // try again shortly\n                    numberOfAttempts ++;\n                    if (numberOfAttempts > 3) clearInterval(interval);\n                }\n            }\n        },5000);\n    };\n\n    public removeUser(userId:string) {\n        callLogger(`Asked to remove user ${userId}`);\n        let index = this.currentUserList.findIndex((user) => user === userId);\n        if (index >= 0) {\n            this.currentUserList.splice(index,1);\n        }\n        const userVideoCard = document.getElementById(userId);\n        if (userVideoCard) {\n            callLogger(`Asked to remove user ${userId} - removing video element`);\n            const videoEl:HTMLVideoElement|null = userVideoCard.querySelector(\".video\");\n            if (videoEl) {\n                videoEl.srcObject = null;\n            }\n\n            browserUtil.removeAllChildren(userVideoCard);\n            const parentNode = userVideoCard.parentNode;\n            if (parentNode) parentNode.removeChild(userVideoCard);\n        }\n    }\n\n    prepareToAnswerCallFrom(userId: string) {\n        try {\n            if (controller.isLoggedIn()) {\n                callLogger(`Preparing to answer call from ${userId}`);\n                if (navigator.mediaDevices.getUserMedia) {\n                    navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                        video: true,\n                    }).then((stream) => {\n                        this.myVideoStream = stream;\n                        this.addVideoStream(controller.getLoggedInUsername(), this.myVideoStream, true);\n                        callLogger(`Awaiting call from ${userId}`);\n                        this.peer.on('call', (call: any) => {\n                            callLogger(`Answering call from ${userId}`);\n                            call.answer(this.myVideoStream);\n                            call.on('stream', (userVideoStream: any) => {\n                                alert(\"Answered\");\n                                callLogger(`Have answered, showing stream`);\n                                this.addVideoStream(userId, userVideoStream, false);\n                            });\n                        });\n                    });\n                }\n            }\n        }\n        catch (err) {\n            callLogger(err);\n            callLogger(`Insecure context or no video capability`);\n        }\n\n    }\n}","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {ChatEventListener} from \"../socket/ChatEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../socket/Types\";\nimport controller from \"../Controller\";\nimport notifier from \"../notification/NotificationManager\";\n\n\nconst csLogger = debug('chat-sidebar');\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatSidebarView extends SidebarView implements ChatEventListener {\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected selectedChatLog: ChatLog | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.chatSideBar, applicationView.state.uiPrefs.chatSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.eventHide = this.eventHide.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    handleUserDrop(event: Event) {\n        csLogger('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLogger(draggedObject);\n\n            if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                notifier.show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n        this.updateView('', {})\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(this.uiConfig.dom.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(this.uiConfig.dom.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(this.uiConfig.dom.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(this.uiConfig.dom.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(this.uiConfig.dom.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(this.uiConfig.dom.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(this.uiConfig.dom.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.chatFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n\n        this.updateView('', {});\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        notifier.show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'inactive';\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = 'active';\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n        this.updateView('', {});\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} clicked from ${dataSource}`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    public selectChatRoom(room: string) {\n        csLoggerDetail(`Chat Log with id ${room} selected`);\n        this.selectedChatLog = ChatManager.getInstance().getChatLog(room);\n        if (this.selectedChatLog) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // except for the users already in the chat\n            csLoggerDetail(`Updating the fast user search`)\n            csLoggerDetail(newState);\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.chatFastSearchUserNames}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            if (newState) {\n                newState.forEach((item: any) => {\n                    const searchValue = {\n                        label: item.username,\n                        value: item.id,\n                    };\n                    // @ts-ignore\n                    if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n                });\n                fastSearchEl.autocomplete({source: fastSearchValues});\n                fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n            }\n\n        } else {\n            csLoggerDetail(`Updating state with chat manager`);\n            newState = ChatManager.getInstance().getChatLogs();\n            csLoggerDetail(newState);\n            this.createResultsForState(name, newState);\n            this.checkCanComment();\n\n        }\n    }\n\n    getDragData(event: DragEvent) {\n\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.updateView('', {});\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n        this.updateView('', {});\n    }\n\n    eventHide(event: Event | null) {\n        super.eventHide(event);\n        // deselect the selected chat\n        if (this.selectedChatLog) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const room = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        // @ts-ignore\n        csLoggerDetail(`Chat Log ${event.target} with id ${room} deleted from ${dataSource}`);\n\n        if (room) {\n            let log: ChatLog | null = ChatManager.getInstance().getChatLog(room);\n            if (log) {\n                ChatManager.getInstance().leaveChat(room);\n                if (this.selectedChatLog && (this.selectedChatLog.roomName === room)) {\n                    this.selectedChatLog = null;\n                    this.clearChatLog();\n                    this.checkCanComment();\n                }\n                this.updateView('', {});\n            }\n        }\n\n\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n        this.updateView('', {});\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n\n}\n\nexport default ChatSidebarView;\n","import debug from 'debug';\n\nimport {Invitation, InviteType, JoinLeft, Message, Priority} from \"../socket/Types\";\nimport {ChatReceiver} from \"../socket/ChatReceiver\";\nimport notifier from \"../notification/NotificationManager\";\nimport {ScoreSheetView} from \"./ScoreSheetView\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport uuid from \"../util/UUID\";\nimport socketManager from \"../socket/SocketManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport {StateManager} from \"../state/StateManager\";\nimport moment from \"moment\";\nimport controller from \"../Controller\";\nimport {TemplateManager} from \"../template/TemplateManager\";\nimport {CallManager} from \"./CallManager\";\nimport MemoryBufferStateManager from \"../state/MemoryBufferStateManager\";\n\nconst sscLogger = debug('score-sheet-controller');\n\nexport class ScoreSheetController implements ChatReceiver {\n    public static SOURCE_View: string = 'ssv';\n\n    private static _instance: ScoreSheetController;\n    private applicationView: any | null = null;\n    private currentScoreRoom: string | null = null;\n    private currentlySelectedBoardGame: any | null = null;\n    private currentScoreSheet: ScoreSheet | null = null;\n    private currentUsername: string = '';\n    private isRoomCreator: boolean = false;\n    private stateManager: StateManager;\n    private currentUsersInScoreSheet: string[] = [];\n    private intervalTimer: number = -1;\n\n\n\n    private constructor() {\n        this.stateManager = new MemoryBufferStateManager();\n        socketManager.addChatReceiver(this);\n\n        // bind events\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n        this.userChangedValue = this.userChangedValue.bind(this);\n        this.endScoreSheet = this.endScoreSheet.bind(this);\n        this.pauseTimer = this.pauseTimer.bind(this);\n        this.isSheetOwner = this.isSheetOwner.bind(this);\n        this.inviteUser = this.inviteUser.bind(this);\n        this.getCurrentRoom = this.getCurrentRoom.bind(this);\n        this.getSelectedBoardGame = this.getSelectedBoardGame.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimerStoppedByAnotherUser = this.stopTimerStoppedByAnotherUser.bind(this);\n        this.isTimerGoing = this.isTimerGoing.bind(this);\n        this.reset = this.reset.bind(this);\n\n\n        // reset state\n        this.reset();\n\n    }\n\n    public static getInstance(): ScoreSheetController {\n        if (!(ScoreSheetController._instance)) {\n            ScoreSheetController._instance = new ScoreSheetController();\n        }\n        return ScoreSheetController._instance;\n    }\n\n    public isTimerGoing(): boolean {\n        let result = false;\n        if (this.currentScoreSheet) {\n            result = this.currentScoreSheet.timerGoing;\n        }\n        return result;\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n    public getCurrentRoom(): string | null {\n        return this.currentScoreRoom;\n    }\n\n    receiveLogin(username: string): void {\n    }\n\n    receiveLogout(username: string): void {\n    }\n\n    public setCurrentUser(username: string): void {\n        sscLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    public initialise(applicationView: any) {\n        this.applicationView = applicationView;\n        CallManager.getInstance().initialise(applicationView);\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (invite.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n\n        if (ChatManager.getInstance().isUserInBlockedList(invite.from)) {\n            sscLogger(`Received invite from blocked user - ignoring`);\n            return;\n        }\n\n        // are we already in a scoresheet?\n        if (this.currentScoreSheet) {\n            sscLogger(`Received invite - already in score sheet - declining`);\n            // are we already in this score sheet?\n            if (this.currentScoreSheet.room !== invite.room) {\n                // decline the invite, only one score sheet at a time\n                sscLogger(`Received invite - already in score sheet - declining`);\n                socketManager.sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n        }\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            if (!confirm(`You have been invited by user ${invite.from} to joint a chat room for the board game ${invite.subject} score sheet`)) {\n                socketManager.sendDeclineInvite(invite.room, this.getCurrentUser(), InviteType.ScoreSheet);// user declines to join the scoresheet\n                return;\n            }\n\n        }\n\n        // prepare to receive a call\n        CallManager.getInstance().prepareToAnswerCallFrom(invite.from);\n\n\n        // notify the user of the new chat\n        notifier.show('Score Sheet', `Joining score sheet`, 'info', 7000);\n        socketManager.joinChat(this.getCurrentUser(), invite.room, InviteType.ScoreSheet);\n        this.currentScoreRoom = invite.room;\n        this.currentlySelectedBoardGame = invite.attachment.boardGame;\n        this.currentScoreSheet = invite.attachment.scoreSheet;\n\n        controller.addBoardGameToDisplay(invite.attachment.boardGame);\n\n        // check to see if the timer should be going\n        if (this.isTimerGoing()) {\n            this.stopTimerStoppedByAnotherUser();\n            this.startTimer();\n        }\n        // ask the view to initialise with these values\n        ScoreSheetView.getInstance().stateChanged(\"\", \"\", this.currentScoreSheet);\n\n\n\n        // change to the score sheet\n        this.applicationView.handleShowScoreSheet(null);\n    }\n\n    public getSelectedBoardGame(): any | null {\n        return this.currentlySelectedBoardGame;\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        if (!this.currentScoreRoom) return; // we are not in a room\n\n        messages.forEach((message: Message) => {\n            if (message.type === InviteType.ScoreSheet) {  // only process offline messages for scoresheet and our current room\n                if (this.currentScoreRoom === message.room) {\n                    this.receiveMessage(message);\n                }\n            }\n        });\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n\n        invites.forEach((invite: Invitation) => {\n            if (invite.type === InviteType.ScoreSheet) {  // only process offline invites to scoresheet\n                this.receiveInvitation(invite);\n            }\n        });\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        sscLogger(`Receive decline for room ${room} from ${username}`);\n        if (this.currentScoreRoom) {\n            if (this.currentScoreRoom === room) {\n                notifier.show('Score Sheet', `User ${username} declined the invitation.`, 'warning');\n            }\n        }\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n\n        sscLogger(`Handling user joined ${users.username}`)\n        // update the sheet to include the user\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index < 0) {\n            this.currentUsersInScoreSheet.push(users.username);\n            // update the sheet data\n\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user joined ${users.username} - sending`)\n            this.addUserToScoreSheet(users.username);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        notifier.show(this.currentlySelectedBoardGame.name, `User ${users.username} joined the scoresheet.`, 'message', 120000);\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        if (users.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (users.username === this.getCurrentUser()) return;\n\n        if (this.currentScoreRoom !== users.room) return;\n        // update the sheet to remove the user\n        sscLogger(`Handling user left ${users.username}`)\n\n        let index = this.currentUsersInScoreSheet.findIndex((username) => username === users.username);\n        if (index >= 0) {\n            this.currentUsersInScoreSheet.splice(index, 1);\n            // update the sheet data\n            this.removeUserFromScoreSheet(users.username);\n            // the owner of the sheet should send a sync message of the data\n            if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isRoomCreator && this.currentScoreSheet) {\n            sscLogger(`Handling user left ${users.username} - sending`)\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n        notifier.show(this.currentlySelectedBoardGame.name, `User ${users.username} left the scoresheet.`, 'warning', 100000);\n    }\n\n    receiveUserList(users: string[]): void {\n    } // will be managed in the transfer of sheet data\n\n    public endScoreSheet(): void { // this can only be done by the room creator\n        // send the final score to everyone\n        sscLogger(`Handling end of score sheet`)\n        if (this.isRoomCreator && this.currentScoreSheet) this.saveScoreSheetToBoardGame(this.currentScoreSheet);\n        if (this.isLoggedIn()) {\n            if (this.currentScoreRoom && this.currentScoreSheet) {\n                sscLogger(`Handling end of score sheet - sending`)\n                this.sendScoreSheetState(this.currentScoreSheet, true);\n                // if we are logged in and the scoresheet creator then we need to save the score sheet to the selected board game\n            }\n            // close the room\n            this.leave();\n        }\n        // reset the controller\n        this.reset();\n        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n    }\n\n    public startScoreSheet(boardGame: any): void {\n        if (boardGame) {\n            sscLogger(`Starting score sheet for ${boardGame.name}`);\n            this.currentlySelectedBoardGame = boardGame;\n            if (this.isLoggedIn()) this.currentUsersInScoreSheet = [this.getCurrentUser()];\n            this.isRoomCreator = true;\n            this.currentScoreRoom = uuid.getUniqueId();\n            this.currentScoreSheet = {\n                room: this.currentScoreRoom,\n                boardGameName: boardGame.name,\n                sheetLayoutOptions: TemplateManager.getInstance().getScoreSheetTemplate(boardGame),\n                timer: 0,\n                timerGoing: false,\n                data: TemplateManager.getInstance().getScoreSheetStartingData(boardGame),\n                isFinished: false\n            }\n            sscLogger(this.currentScoreSheet);\n\n            CallManager.getInstance().startScoreSheet();\n\n            // store the score sheet locally\n            this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet, this.currentScoreSheet, true);\n\n            // start a new chat room, will automatically manage if logged in or not\n            if (this.isLoggedIn()) socketManager.joinChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n\n        }\n    }\n\n    public hasActiveScoreSheet(): boolean {\n        let result = false;\n        if (this.currentScoreRoom && (this.currentScoreRoom !== null)) {\n            sscLogger(this.currentScoreRoom);\n            result = true;\n        }\n        return result;\n    }\n\n    public inviteUser(username: string) {\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        // only the user who created the score sheet can do this as they are the only ones with a selected board game\n        if ((this.currentScoreRoom) && (this.currentlySelectedBoardGame)) {\n            sscLogger(`Inviting user ${username} to score sheet`);\n            if (this.isRoomCreator) {\n                notifier.show(this.currentlySelectedBoardGame.name, `You have invited user ${username} to the scoresheet`, 'message');\n                socketManager.sendInvite(this.getCurrentUser(), username, this.currentScoreRoom, InviteType.ScoreSheet, true, this.currentlySelectedBoardGame.name, {\n                    scoreSheet: this.currentScoreSheet,\n                    boardGame: this.currentlySelectedBoardGame\n                });\n            } else {\n                alert(\"Only the score sheet creator can invite other users.\");\n            }\n        }\n    }\n\n    public receiveMessage(message: Message): void {\n        sscLogger(`'Handling receive message`);\n        sscLogger(message);\n        if (!this.isLoggedIn()) return;  // we are not logged in\n        if (message.type !== InviteType.ScoreSheet) return; //ignore non-score sheets\n        if (message.from === this.getCurrentUser()) return; // my own messages can be ignored\n\n        if (this.currentScoreRoom) { // are we in a room?\n            if (this.currentScoreRoom === message.room) { // are we listening to this score sheet room?\n                if (ChatManager.getInstance().isUserInBlockedList(message.from)) {\n                    sscLogger(`Received message from blocked user - ignoring`);\n                    return;\n                }\n                // are we scoring the right sheet?\n                sscLogger(`Received message for score sheet ${message.room}`);\n                sscLogger(message);\n                if (message.attachment) {\n                    // the attachment should be a ScoreSheet object\n                    let scoreSheet: ScoreSheet = message.attachment;\n                    sscLogger(scoreSheet);\n\n                    // @ts-ignore\n                    if (this.currentScoreSheet) {\n                        let timerWasGoing = this.currentScoreSheet.timerGoing;\n                        this.currentScoreSheet.room = message.room;\n                        this.currentScoreSheet.boardGameName = scoreSheet.boardGameName;\n                        this.currentScoreSheet.data = scoreSheet.data;\n                        this.currentScoreSheet.timer = (scoreSheet.timer > this.currentScoreSheet.timer) ? scoreSheet.timer : this.currentScoreSheet.timer;\n                        this.currentScoreSheet.timerGoing = scoreSheet.timerGoing;\n                        this.currentScoreSheet.sheetLayoutOptions = scoreSheet.sheetLayoutOptions;\n                        this.currentScoreSheet.isFinished = scoreSheet.isFinished;\n\n                        // has the timer changed?\n                        if (scoreSheet.timerGoing) {\n                            if (timerWasGoing) {\n                                // both timers going, no need to do anything\n                            } else {\n                                // timer is going with another user, but we aren't going - start timer\n                                this.stopTimerStoppedByAnotherUser();\n                                this.startTimer();\n                            }\n                        } else { // timer not going at the other users end\n                            if (timerWasGoing) {\n                                // our timer is active - pause it\n                                this.stopTimerStoppedByAnotherUser();\n                            } else {\n                                // neither timer going\n                            }\n                        }\n\n\n                    }\n                    sscLogger('Updated score sheet');\n                    sscLogger(this.currentScoreSheet);\n                    // save the new state\n                    if (this.currentScoreSheet) this.saveCurrentScoreSheet(this.currentScoreSheet, true);\n                    if (scoreSheet.isFinished) {\n                        alert('Score sheet has been finished - closing');\n                        // reset the controller\n                        this.reset();\n\n                        // close the room\n                        this.leave();\n\n                        // reset the view\n                        ScoreSheetView.getInstance().resetDisplay();\n\n                        this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n                    }\n                }\n            }\n\n        }\n    }\n\n    public isSheetOwner(): boolean {\n        return this.isRoomCreator;\n    }\n\n    public createScoreSheetFromTable(): ScoreSheet | null {\n        let scoreSheet: ScoreSheet | null = null;\n        let tableData = ScoreSheetView.getInstance().getTableData();\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            scoreSheet = {\n                room: this.currentScoreRoom,\n                data: tableData,\n                boardGameName: this.currentlySelectedBoardGame.name,\n                timer: this.currentScoreSheet.timer,\n                sheetLayoutOptions: (this.currentlySelectedBoardGame) ? TemplateManager.getInstance().getScoreSheetTemplate(this.currentlySelectedBoardGame) : null,\n                timerGoing: this.currentScoreSheet.timerGoing,\n                isFinished: false\n            }\n        }\n        return scoreSheet;\n    }\n\n    public sendScoreSheetState(scoreSheet: ScoreSheet, isFinished: boolean = false): void {\n        if (this.currentScoreRoom && this.isLoggedIn()) {\n            const created = parseInt(moment().format('YYYYMMDDHHmmss'));\n            // @ts-ignore\n            socketManager.sendMessage(\n                this.getCurrentUser(),\n                this.currentScoreRoom,\n                'data',\n                created,\n                InviteType.ScoreSheet,\n                Priority.Normal,\n                scoreSheet);\n        }\n    }\n\n    public startTimer() {\n        sscLogger(`Handling pause timer`);\n        if (!this.currentScoreSheet) return;\n\n        this.currentScoreSheet.timerGoing = true;\n        this.intervalTimer = setInterval(() => {\n            if (this.currentScoreSheet && this.currentScoreSheet.timerGoing) {\n                this.currentScoreSheet.timer++;\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n            } else {\n                if (this.currentScoreSheet) {\n                    this.currentScoreSheet.timerGoing = false;\n                    ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing);\n                }\n            }\n        }, 1000);\n        if (this.currentScoreSheet) {\n            this.saveCurrentScoreSheet(this.currentScoreSheet);\n        }\n        if (this.isLoggedIn() && this.currentScoreSheet) {\n            // start the timer for everyone\n            sscLogger(`Handling pause timer - sending score sheet`);\n            this.sendScoreSheetState(this.currentScoreSheet, false);\n        }\n    }\n\n    public pauseTimer() {\n        sscLogger(`Handling pause timer`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            this.intervalTimer = -1;\n\n            if (this.currentScoreSheet) {\n                this.currentScoreSheet.timerGoing = false;\n                this.saveCurrentScoreSheet(this.currentScoreSheet);\n                ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, !this.currentScoreSheet.timerGoing)\n            }\n\n\n            // ask everyone to pause their timers\n            if (this.isLoggedIn() && this.currentScoreSheet) {\n                sscLogger(`Handling pause timer - updating all users`);\n                this.sendScoreSheetState(this.currentScoreSheet, false);\n            }\n        }\n    }\n\n    public userChangedValue(value: any, source: string) {\n        sscLogger(`Handling user changed value ${source}`)\n        if (source === ScoreSheetController.SOURCE_View) return;\n\n        // is the source an edit?\n        if (source !== 'edit') return;\n\n        let scoreSheet: ScoreSheet | null = this.createScoreSheetFromTable();\n        sscLogger(`Handling user changed Value`);\n        sscLogger(value);\n        sscLogger(scoreSheet);\n        if (scoreSheet) {\n            sscLogger(`Letting the template manager change any values`);\n            const changedByTM: boolean = TemplateManager.getInstance().transformDataAfterUserChange(this.currentlySelectedBoardGame, scoreSheet);\n            if (changedByTM) {\n                sscLogger(scoreSheet);\n            }\n\n            this.saveCurrentScoreSheet(scoreSheet, changedByTM);\n            if (this.isLoggedIn()) {\n                sscLogger(`Handling user change - updating all users`);\n                this.sendScoreSheetState(scoreSheet, false);\n            }\n        }\n    }\n\n    public leave() {\n        sscLogger(`Handling user leaving`);\n        if (this.currentScoreSheet && this.currentScoreRoom) {\n            if (this.isLoggedIn()) {\n                socketManager.leaveChat(this.getCurrentUser(), this.currentScoreRoom, InviteType.ScoreSheet);\n            }\n            this.reset();\n            this.applicationView.switchBetweenCollectionAndScoreSheet(true);\n        }\n    }\n\n    protected addUserToScoreSheet(username: string): void {\n        if (controller.isLoggedIn()) {\n            sscLogger(`Calling user ${username}`);\n            CallManager.getInstance().callUser(username);\n        }\n    }\n\n    protected removeUserFromScoreSheet(username: string): void {\n        sscLogger(`Removing user ${username}`);\n        CallManager.getInstance().removeUser(username);\n    }\n\n    private reset(): void {\n        this.currentScoreRoom = null;\n        this.currentScoreSheet = null;\n        this.currentlySelectedBoardGame = null;\n        this.isRoomCreator = false;\n        this.currentUsersInScoreSheet = [];\n        this.stopTimerStoppedByAnotherUser();\n        CallManager.getInstance().reset();\n    }\n\n    private isLoggedIn(): boolean {\n        return (this.getCurrentUser().trim().length > 0);\n    }\n\n    private saveScoreSheetToBoardGame(scoreSheet: ScoreSheet) {\n        sscLogger('Handling save');\n\n        // add the data to the selected board game\n        if (this.currentlySelectedBoardGame) {\n            const saveData = TemplateManager.getInstance().getSaveData(this.currentlySelectedBoardGame, scoreSheet);\n            sscLogger(saveData);\n            if (!this.currentlySelectedBoardGame.scoresheets) {\n                this.currentlySelectedBoardGame.scoresheets = [];\n            }\n            this.currentlySelectedBoardGame.scoresheets.push(saveData);\n            controller.scoreSheetAddedToBoardGame(this.currentlySelectedBoardGame, saveData);\n        }\n    }\n\n    private saveCurrentScoreSheet(scoreSheet: ScoreSheet, informListeners: boolean = true) {\n        this.currentScoreSheet = scoreSheet;\n        this.stateManager.setStateByName(this.applicationView.state.stateNames.scoreSheet, this.currentScoreSheet, informListeners);\n    }\n\n    private stopTimerStoppedByAnotherUser() {\n        sscLogger(`Handling timer stopped by another user`);\n        if (this.intervalTimer > 0) {\n            clearInterval(this.intervalTimer);\n            if (this.currentScoreSheet) ScoreSheetView.getInstance().updateTimer(this.currentScoreSheet.timer, true);\n        }\n        this.intervalTimer = -1;\n    }\n\n}\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport moment from \"moment\";\nimport controller from \"../Controller\";\n\n\nconst csLogger = debug('score-sheet-sidebar');\nconst csLoggerDetail = debug('score-sheet-sidebar:detail');\n\nclass ScoreSheetSidebarView extends SidebarView {\n    protected selectedBoardGame: any | null = null;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.scoreSheetSideBar, applicationView.state.uiPrefs.scoreSheetSideBar, stateManager);\n\n        this.config = applicationView.state;\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n\n        this.updateView('', {});\n    }\n\n\n    public setSelectedBoardGame(boardGame: any) {\n        csLogger(`setting selected board game to`);\n        csLoggerDetail(boardGame);\n        if (boardGame) {\n            this.selectedBoardGame = boardGame;\n            this.updateView('', boardGame);\n        }\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    /*\n        <h5 class=\"card-title\">Card title</h5>\n    <p class=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n    <p class=\"card-text\">Last updated 3 mins ago</p>\n     */\n    getDisplayValueForStateItem(name: string, item: any) {\n        let buffer = '';\n        /*\n        type ScoreSheet {\n            id:Int!\n            players: [String],\n            scores: [Int],\n            jsonData: String,\n            createdOn: Int\n        }\n        */\n        buffer += `<h5 class=\"card-title\">${this.selectedBoardGame.name} (${this.selectedBoardGame.year})</h5>`;\n        buffer += `<p class=\"card-text\">Played On: ${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</p>`;\n        buffer += `<p class=\"card-text\">Scores: `;\n        if (item.player1) {\n            if (item.score1 > 0) {\n                buffer += `${item.player1}:${item.score1} `;\n            }\n        }\n        if (item.player2) {\n            if (item.score2 > 0) {\n                buffer += `${item.player2}:${item.score2} `;\n            }\n        }\n        if (item.player3) {\n            if (item.score3 > 0) {\n                buffer += `${item.player3}:${item.score3} `;\n            }\n        }\n        if (item.player4) {\n            if (item.score4 > 0) {\n                buffer += `${item.player4}:${item.score4} `;\n            }\n        }\n        if (item.player5) {\n            if (item.score5 > 0) {\n                buffer += `${item.player5}:${item.score5} `;\n            }\n        }\n        if (item.player6) {\n            if (item.score6 > 0) {\n                buffer += `${item.player6}:${item.score6} `;\n            }\n        }\n        if (item.player7) {\n            if (item.score7 > 0) {\n                buffer += `${item.player7}:${item.score7} `;\n            }\n        }\n        if (item.players) {\n            for (let index = 0; index < item.players.length; index++) {\n\n            }\n\n        }\n        buffer += `</p>`;\n        return buffer;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        return 'normal';\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        return this.getModifierForStateItem(name, item);\n    }\n\n    eventClickItem(event: MouseEvent) {\n    }\n\n    updateView(name: string, newState: any) {\n        csLoggerDetail(`Updating state with selected board game`);\n        if (newState) {\n            if (newState.scoresheets) {\n                this.createResultsForState(name, newState.scoresheets);\n            }\n        }\n\n    }\n\n    getDragData(event: DragEvent) {\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return './img/scorecard-vertical.jpg';\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        // @ts-ignore\n        const sheetId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        csLogger(`Score Sheet ${event.target} with id ${sheetId} delete clicked from ${dataSource}`);\n\n\n        if (this.selectedBoardGame && confirm(\"Are you sure you want to delete this Score Sheet?\")) {\n            // remove the sheet from the selected board game\n            if (this.selectedBoardGame.scoresheets) {\n                let index = this.selectedBoardGame.scoresheets.findIndex((sheet: any) => sheet.id === sheetId);\n                if (index >= 0) {\n                    this.selectedBoardGame.scoresheets.splice(index, 1);\n                    // let the controller know to remove from the database if the user is logged in\n                    controller.scoreSheetRemovedFromBoardGame(this.selectedBoardGame, sheetId);\n                }\n            }\n            this.updateView('', this.selectedBoardGame);\n        }\n\n    }\n\n\n}\n\nexport default ScoreSheetSidebarView;\n","import StateChangeListener from \"../state/StateChangeListener\";\nimport {ScoreSheetController} from \"./ScoreSheetController\";\nimport Handsontable from \"handsontable\";\nimport browserUtil from \"../util/BrowserUtil\";\nimport debug from 'debug';\nimport {ScoreSheet} from \"../AppTypes\";\nimport {TemplateManager} from \"../template/TemplateManager\";\nimport {StateManager} from \"../state/StateManager\";\nimport controller from \"../Controller\";\n\nconst ssvLogger = debug('score-sheet-view');\n\nexport class ScoreSheetView implements StateChangeListener {\n    private static _instance: ScoreSheetView;\n    // @ts-ignore\n    protected ssFastSearchUserNames: HTMLElement;\n    private applicationView: any | null = null;\n    private stateManager: StateManager;\n\n    private thisEl: HTMLDivElement | null = null;\n    private boardGameTitleEl: HTMLHeadingElement | null = null;\n    private startStopTimer: HTMLButtonElement | null = null;\n    private timerEl: HTMLDivElement | null = null;\n    private endOrLeaveEl: HTMLButtonElement | null = null;\n    private scoreSheetEl: HTMLDivElement | null = null;\n\n\n\n    private table: Handsontable | null = null;\n    private controller: ScoreSheetController;\n    private config: any;\n\n\n    private constructor() {\n        this.controller = ScoreSheetController.getInstance();\n        this.stateManager = controller.getStateManager();\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n    }\n\n    public static getInstance(): ScoreSheetView {\n        if (!(ScoreSheetView._instance)) {\n            ScoreSheetView._instance = new ScoreSheetView();\n        }\n        return ScoreSheetView._instance;\n    }\n\n    public setApplication(applicationView: any) {\n        this.config = applicationView.state;\n        this.stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n    }\n\n    public onDocumentLoaded(applicationView: any) {\n        this.applicationView = applicationView;\n        this.resetDisplay();\n\n        // @ts-ignore\n        this.ssFastSearchUserNames = document.getElementById(this.config.ui.scoreSheet.dom.ssFastSearchUserNames);\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.config.ui.scoreSheet.dom.ssFastSearchUserNames}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n\n        ScoreSheetController.getInstance().getStateManager().addChangeListenerForName(this.applicationView.state.stateNames.scoreSheet, this);\n\n        // load references to the key elements on the page\n        // @ts-ignore\n        this.thisEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.dropZone);\n        // @ts-ignore\n        this.boardGameTitleEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.boardGame);\n        // @ts-ignore\n        this.startStopTimer = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.startStopTimer);\n        // @ts-ignore\n        this.timerEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.timer);\n        // @ts-ignore\n        this.endOrLeaveEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.end);\n        // @ts-ignore\n        this.scoreSheetEl = document.getElementById(this.applicationView.state.ui.scoreSheet.dom.scoreSheet);\n\n        // bind event handlers\n        this.handleStartStopTimer = this.handleStartStopTimer.bind(this);\n        this.handleEndOrLeave = this.handleEndOrLeave.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n\n        // setup event handlers\n        if (this.startStopTimer) this.startStopTimer.addEventListener('click', this.handleStartStopTimer);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.addEventListener('click', this.handleEndOrLeave);\n        if (this.thisEl) {\n            this.thisEl.addEventListener('dragover', (event) => {\n                event.preventDefault()\n            });\n            this.thisEl.addEventListener('drop', this.handleUserDrop);\n        }\n\n\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        ssvLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected, and is scoresheet owner\n        if (ScoreSheetController.getInstance().isSheetOwner()) {\n            ScoreSheetController.getInstance().inviteUser(ui.item.label);\n        }\n        else {\n            alert (\"Only the score sheet creator can invite users.\");\n        }\n    }\n\n\n    handleEndOrLeave(event: MouseEvent) {\n        ssvLogger('leave or end');\n        // are we leaving or ending?\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // finishing the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to close the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.endScoreSheet();\n\n            // reset the display\n            this.resetDisplay();\n        } else {\n            // leaving the score sheet\n            // double check this is want we want\n            if (!confirm(\"Are you sure you want to leave the score sheet\")) return;\n\n            // user wants to finish\n            this.controller.leave();\n\n\n            // reset the display\n            this.resetDisplay();\n        }\n    }\n\n    handleStartStopTimer(event: MouseEvent) {\n        ssvLogger('start/pause timer');\n        if (this.controller.isTimerGoing()) {\n            this.controller.pauseTimer();\n        } else {\n            this.controller.startTimer();\n        }\n    }\n\n    handleUserDrop(event: Event) {\n        ssvLogger('drop event on current score sheet');\n        if (this.controller.hasActiveScoreSheet() && this.controller.isSheetOwner()) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(this.applicationView.state.ui.draggable.draggableDataKeyId);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            ssvLogger(draggedObject);\n\n            if (draggedObject[this.applicationView.state.ui.draggable.draggedType] === this.applicationView.state.ui.draggable.draggedTypeUser) {\n                //add the user to the current chat if not already there\n                this.controller.inviteUser(draggedObject.username);\n            }\n        }\n    }\n\n\n    public resetDisplay() {\n        this.table = null;\n\n        // reset the display\n        if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = '';\n        if (this.startStopTimer) {\n            this.startStopTimer.innerHTML = 'Start ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n            this.startStopTimer.setAttribute(\"disabled\", \"true\");\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n            browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(0);\n        if (this.endOrLeaveEl) this.endOrLeaveEl.innerHTML = this.applicationView.state.ui.scoreSheet.dom.iconLeave;\n        if (this.scoreSheetEl) browserUtil.removeAllChildren(this.scoreSheetEl);\n\n\n    }\n\n    public updateTimer(time: number, isPaused: boolean = false) {\n        // update the view\n        ssvLogger(`Updating timer ${time} ${isPaused}`);\n        if (this.startStopTimer) {\n            if (isPaused) {\n                this.startStopTimer.innerHTML = 'Start   ' + this.applicationView.state.ui.scoreSheet.dom.iconStart;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', false);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', true);\n            } else {\n                this.startStopTimer.innerHTML = 'Pause   ' + this.applicationView.state.ui.scoreSheet.dom.iconInProgress;\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-warning', true);\n                browserUtil.addRemoveClasses(this.startStopTimer, 'btn-success', false);\n            }\n            this.startStopTimer.removeAttribute(\"disabled\");\n        }\n        if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(time);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === this.config.stateNames.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.config.ui.scoreSheet.dom.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n\n        } else {\n            let scoreSheet: ScoreSheet = newValue;\n            ssvLogger(`Processing new state`);\n            ssvLogger(scoreSheet);\n            if (this.startStopTimer) this.startStopTimer.removeAttribute(\"disabled\");\n\n            // update the board game name\n            if (this.boardGameTitleEl) this.boardGameTitleEl.innerText = `${scoreSheet.boardGameName}`;\n\n            // update the table\n            if (this.table) {\n                // process the data in the state change, will be array of array (rows) into what the table wants\n                let tableData: any = [];\n                // @ts-ignore\n                scoreSheet.data.forEach((row: any[], rowIndex: number) => {\n                    row.forEach((column: any, columnIndex: number) => {\n                        tableData.push([rowIndex, columnIndex, column]);\n                    });\n                });\n                ssvLogger(`Table data is `);\n                ssvLogger(tableData);\n                // @ts-ignore\n                this.table.setDataAtCell(tableData, ScoreSheetController.SOURCE_View);\n\n            } else {\n                // create a new table\n\n                if (this.scoreSheetEl) {\n                    const boardGame = this.controller.getSelectedBoardGame();\n                    if (boardGame) {\n                        scoreSheet.sheetLayoutOptions = TemplateManager.getInstance().getScoreSheetTemplate(boardGame);\n                    }\n                    scoreSheet.sheetLayoutOptions.data = scoreSheet.data;\n                    this.table = new Handsontable(\n                        this.scoreSheetEl,\n                        scoreSheet.sheetLayoutOptions);\n                    // @ts-ignore\n                    this.table.addHook('afterChange', this.controller.userChangedValue);\n                }\n            }\n\n\n            // update the timer\n            if (this.timerEl) this.timerEl.innerText = this.createTimerDisplay(scoreSheet.timer);\n        }\n\n    }\n\n    public getTableData(): any[] {\n        if (this.table) {\n            return this.table.getData();\n        } else {\n            return [];\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    private createTimerDisplay(timer: number): string {\n        let result = '';\n        if (timer === 0) {\n            result = '00:00';\n        } else {\n            if (timer >= 60) {\n                let hours = Math.floor(timer / 3600);\n                let minutes = Math.floor(timer / 60);\n                let seconds = timer - (hours * 3600) - (minutes * 60);\n                if (hours > 0) {\n                    result += `${hours}:`;\n                }\n                if (minutes > 0) {\n                    if (minutes < 10) {\n                        result += `0${minutes}:`\n                    } else {\n                        result += `${minutes}:`\n                    }\n                } else {\n                    result += '00:';\n                }\n                if (seconds > 0) {\n                    if (seconds < 10) {\n                        result += `0${seconds}`;\n                    } else {\n                        result += `${seconds}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            } else {\n                result = `00:`;\n                if (timer > 0) {\n                    if (timer < 10) {\n                        result += `0${timer}`;\n                    } else {\n                        result += `${timer}`;\n                    }\n                } else {\n                    result += '00';\n                }\n            }\n        }\n        return result;\n    }\n\n\n}","import AbstractView from './AbstractView';\nimport {StateManager} from \"../state/StateManager\";\n\nabstract class SidebarView extends AbstractView {\n    protected constructor(applicationView: any, htmlDocument: HTMLDocument, uiConfig: any, uiPrefs: any, stateManager: StateManager) {\n        super(applicationView, htmlDocument, uiConfig, uiPrefs, stateManager);\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n    }\n\n    eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n    }\n\n    eventShow(event: Event | null) {//414,768,1024\n        let size = this.uiPrefs.view.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = this.document.getElementById(this.uiConfig.dom.sideBarId);\n        if (sidePanelEl === null) return;\n\n        switch (this.uiPrefs.view.location) {\n            case 'left': {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case 'right': {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case 'bottom': {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case 'top': {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n}\n\nexport default SidebarView;\n","import debug from 'debug';\nimport SidebarView from './SidebarView';\nimport {StateManager} from '../state/StateManager';\nimport {isSame, isSameUsername} from '../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../socket/NotificationController\";\nimport controller from \"../Controller\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../socket/ChatManager\";\nimport browserUtil from \"../util/BrowserUtil\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass UserSearchSidebarView extends SidebarView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n    // @ts-ignore\n    protected favUsersDiv: HTMLElement;\n    // @ts-ignore\n    protected favUsersDropZone: HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDiv: HTMLElement;\n    // @ts-ignore\n    protected blockedUsersDropZone: HTMLElement;\n\n    constructor(applicationView: any, htmlDocument: HTMLDocument, stateManager: StateManager) {\n        super(applicationView, htmlDocument, applicationView.state.ui.userSearchSideBar, applicationView.state.uiPrefs.userSearchSideBar, stateManager);\n\n        this.config = applicationView.state;\n        this.loggedInUsers = [];\n\n        // handler binding\n        this.updateView = this.updateView.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.handleFavouriteUserDrop = this.handleFavouriteUserDrop.bind(this);\n        this.handleBlockedUserDrop = this.handleBlockedUserDrop.bind(this);\n\n        // register state change listening\n        stateManager.addChangeListenerForName(this.config.stateNames.users, this);\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(this.config.stateNames.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n\n    }\n\n    handleFavouriteUserDrop(event: Event) {\n        vLogger('drop event on favourites');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our favorites and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInFavouriteList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in favourite list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToFavouriteList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n    handleBlockedUserDrop(event: Event) {\n        vLogger('drop event on blocked users');\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(this.config.ui.draggable.draggableDataKeyId);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        vLogger(draggedObject);\n\n        if (draggedObject[this.config.ui.draggable.draggedType] === this.config.ui.draggable.draggedTypeUser) {\n            switch (draggedObject[this.config.ui.draggable.draggedFrom]) {\n                case this.config.ui.draggable.draggedFromUserSearch: {\n                    // we know we have dragged a user from the user search to our blocked users and dropped it\n                    // is this user already in the favourites?\n                    if (ChatManager.getInstance().isUserInBlockedList(draggedObject.username)) {\n                        vLogger(`${draggedObject.username} already in blocked list, ignoring`);\n                        return;\n                    }\n                    // ok, so we have a new user to add to the favourite list\n                    // add the user to the Chat Manager and we should get an event about it\n                    ChatManager.getInstance().addUserToBlockedList(draggedObject.username);\n                    break;\n                }\n            }\n        }\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.reRenderView();\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.reRenderView();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.favUsersDropZone = document.getElementById(this.uiConfig.dom.favouriteUsersDropZone);\n        this.favUsersDropZone.addEventListener('dragover', (event) => {\n            vLogger('Dragged over');\n            event.preventDefault();\n        });\n        this.favUsersDropZone.addEventListener('drop', this.handleFavouriteUserDrop);\n\n        // @ts-ignore\n        this.favUsersDiv = document.getElementById(this.uiConfig.dom.favouriteUsersId);\n\n        // ok lets add the favourite users area and event handling for that now\n        // @ts-ignore\n        this.blockedUsersDropZone = document.getElementById(this.uiConfig.dom.blockedUsersDropZone);\n        this.blockedUsersDropZone.addEventListener('dragover', (event) => {\n            vLogger('Dragged over');\n            event.preventDefault();\n        });\n        this.blockedUsersDropZone.addEventListener('drop', this.handleBlockedUserDrop);\n\n        // @ts-ignore\n        this.blockedUsersDiv = document.getElementById(this.uiConfig.dom.blockedUsersId);\n\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n\n\n    }\n\n    getIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getLegacyIdForStateItem(name: string, item: any) {\n        return item.id;\n    }\n\n    getDisplayValueForStateItem(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = 'inactive';\n        }\n        return result;\n    }\n\n    getSecondaryModifierForStateItem(name: string, item: any) {\n        let result = 'normal';\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = 'active';\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = 'warning';\n        }\n        return result;\n    }\n\n    eventClickItem(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n        console.log(event.target);\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId);\n\n        if (dataSource === this.uiConfig.dom.resultDataSourceBlockedUsers) {\n            vLoggerDetail(`Blocked user clicked - not activating`);\n            return;\n        }\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        const roomName = NotificationController.getInstance().startChatWithUser(user.username);\n        this.applicationView.handleShowChat(event, roomName);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(this.config.stateNames.recentUserSearches, {id: ui.item.value}, isSame)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n        vLogger(`saved searches too long? ${this.config.controller.dataLimit.recentUserSearches}`);\n        if (recentUserSearches.length >= this.config.controller.dataLimit.recentUserSearches) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, item, isSame, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(this.config.stateNames.recentUserSearches, {\n            id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n    reRenderView() {\n        this.updateView(this.config.stateNames.recentUserSearches, this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches));\n        this.renderFavouriteUsers();\n        this.renderBlockedUsers();\n    }\n\n    updateView(name: string, newState: any) {\n        if (name === this.config.stateNames.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(this.config.stateNames.recentUserSearches);\n            vLogger(newState);\n            this.createResultsForState(name, newState);\n        }\n        if (name === this.config.stateNames.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = controller.getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${this.uiConfig.dom.extra.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item.id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    getDragData(event: DragEvent) {\n        // use the actual id to pass the user to the droppable target\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target.innerText} with id ${userId} dragging`);\n        let user = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLoggerDetail(user);\n        user[this.config.ui.draggable.draggedType] = this.config.ui.draggable.draggedTypeUser;\n        user[this.config.ui.draggable.draggedFrom] = this.config.ui.draggable.draggedFromUserSearch;\n        return user;\n    }\n\n    deleteFavouriteUser(user: any) {\n        // @ts-ignore\n        vLogger(`Favourite user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(user.username);\n    }\n\n    deleteBlockedUser(user: any) {\n        // @ts-ignore\n        vLogger(`Blocked user ${user.username} with id ${user.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(user.username);\n    }\n\n    deleteRecentSearchUser(user: any) {\n        // @ts-ignore\n        vLogger(`Recent search user ${user.username} with id ${user.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(this.config.stateNames.recentUserSearches, user, isSame, true);\n    }\n\n    protected eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(this.uiConfig.dom.resultDataSourceId)\n        // @ts-ignore\n        vLoggerDetail(`User ${event.target} with id ${userId} delete clicked from ${dataSource}`);\n\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        vLogger(user);\n        if (user) {\n\n\n            switch (dataSource) {\n                case (this.uiConfig.dom.resultDataSourceFavUsers) : {\n                    this.deleteFavouriteUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceBlockedUsers) : {\n                    this.deleteBlockedUser(user);\n                    break;\n                }\n                case (this.uiConfig.dom.resultDataSourceValue) : {\n                    this.deleteRecentSearchUser(user);\n                    break;\n                }\n            }\n        }\n    }\n\n    protected getBadgeValue(name: string, item: any): number {\n        return 0;\n    }\n\n    protected getBackgroundImage(name: string, item: any): string {\n        return \"\";\n    }\n\n    protected eventAction1Clicked(event: MouseEvent) {\n        super.eventAction1Clicked(event);\n        // add this user to the favourites\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        if (user) {\n            if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                vLogger(`${user.username} already in favourite list, ignoring`);\n                return;\n            }\n            // ok, so we have a new user to add to the favourite list\n            // add the user to the Chat Manager and we should get an event about it\n            ChatManager.getInstance().addUserToFavouriteList(user.username);\n        }\n    }\n\n    protected eventAction2Clicked(event: MouseEvent) {\n        super.eventAction2Clicked(event);\n        // add this user to the blocked list\n        // @ts-ignore\n        const userId = event.target.getAttribute(this.uiConfig.dom.resultDataKeyId);\n        let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {id: parseInt(userId)}, isSame);\n        if (user) {\n            if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                vLogger(`${user.username} already in blocked list, ignoring`);\n                return;\n            }\n            // ok, so we have a new user to add to the blocked list\n            // add the user to the Chat Manager and we should get an event about it\n            ChatManager.getInstance().addUserToBlockedList(user.username);\n        }\n    }\n\n    private renderFavouriteUsers() {\n        const usernames: string[] = ChatManager.getInstance().getFavouriteUserList();\n        if (this.favUsersDiv) browserUtil.removeAllChildren(this.favUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users, user, this.uiConfig.dom.resultDataSourceFavUsers);\n                childElement.addEventListener('click', this.eventClickItem);\n                childElement.setAttribute('draggable', 'true');\n                childElement.addEventListener('dragstart', this.eventStartDrag);\n\n\n                this.favUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n    private renderBlockedUsers() {\n        const usernames: string[] = ChatManager.getInstance().getBlockedUserList();\n        if (this.blockedUsersDiv) browserUtil.removeAllChildren(this.blockedUsersDiv);\n\n        usernames.forEach((username) => {\n            // find the user in the state manager\n            let user: any = this.stateManager.findItemInState(this.config.stateNames.users, {username}, isSameUsername);\n            if (user) {\n                let childElement = this.createResultForItem(this.config.stateNames.users, user, this.uiConfig.dom.resultDataSourceBlockedUsers);\n                childElement.setAttribute('draggable', 'false');\n                childElement.addEventListener('dragstart', (event) => {\n                    event.preventDefault();\n                });\n                this.blockedUsersDiv.appendChild(childElement);\n            }\n        });\n    }\n\n\n}\n\nexport default UserSearchSidebarView;\n","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport uuid from '../util/UUID';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        downloader.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        downloader.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = uuid.getUniqueId();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nconst downloader = new DownloadManager();\n\nexport default downloader;\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nconst notifier = new NotificationManager();\n\nexport default notifier;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport socketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport uuid from \"../util/UUID\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        socketManager.addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                socketManager.joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        socketManager.joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        socketManager.leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.login(this.getCurrentUser());\n        // get the current user list\n        socketManager.getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                socketManager.joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        socketManager.sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            socketManager.sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        socketManager.sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            socketManager.sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            socketManager.joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: uuid.getUniqueId(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport notifier from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        notifier.show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            notifier.show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                notifier.show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        notifier.show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        notifier.show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nlet socketManager = new SocketManager();\nexport default socketManager;","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\n/*\n*\n*   WORK IN PROGRESS\n*\n */\n\n\nconst graphSMLogger = debug('state-manager-graphql');\n\nexport type QLConfig = {\n    stateName: string,\n    apiURL: string,\n    apis: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    data: {\n        findAll: string,\n        create: string,\n        destroy: string,\n        update: string,\n        find: string\n    }\n    isActive: boolean\n}\n\nexport class GraphQLApiStateManager implements AsynchronousStateManager {\n    protected configuration: QLConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    public constructor() {\n        this.delegate = new StateChangedDelegate('graphql');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: QLConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        graphSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            graphSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: QLConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                let query = config.apis.findAll;\n                const jsonRequest: jsonRequest = {\n                    url: config.apiURL,\n                    type: RequestType.POST,\n                    params: {query},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                graphSMLogger(`Getting All ${name} with query \"${query}\"`);\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                graphSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        graphSMLogger(`Adding item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.create] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        graphSMLogger(`Removing item to ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        graphSMLogger(`Updating item in ${name}`);\n        graphSMLogger(stateObj);\n        let config: QLConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            let mutation: any = {};\n            mutation[config.apis.destroy] = {}\n\n            const jsonRequest: jsonRequest = {\n                url: config.apiURL,\n                type: RequestType.POST,\n                params: {mutation},\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            graphSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: QLConfig = {\n            stateName: name,\n            apiURL: '/graphql',\n            apis: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            data: {\n                findAll: '',\n                create: '',\n                destroy: '',\n                update: '',\n                find: ''\n            },\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            let config: QLConfig = this.getConfigurationForStateName(associatedStateName);\n            let dataAttribute = config.data.findAll;\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data.data[dataAttribute], stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        graphSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            graphSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport downloader from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                downloader.addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            downloader.addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import moment from \"moment\";\nimport {ScoreSheet} from \"../AppTypes\";\nimport debug from 'debug';\n\nconst templateLogger = debug('template-manager');\n\nexport class TemplateManager {\n    private static _instance: TemplateManager;\n\n    private constructor() {\n    }\n\n    public static getInstance(): TemplateManager {\n        if (!(TemplateManager._instance)) {\n            TemplateManager._instance = new TemplateManager();\n        }\n        return TemplateManager._instance;\n    }\n\n    public getScoreSheetTemplate(boardGame: any): any | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiTemplate();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingTemplate();\n        }\n        return this.getDefaultScoreSheetTemplate(boardGame);\n    }\n\n    public getScoreSheetStartingData(boardGame: any): any[] | null {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiStartingData();\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingStartingData();\n        }\n        return this.getDefaultScoreSheetStartingData(boardGame);\n    }\n\n    public getSaveData(boardGame: any, scoreSheet: ScoreSheet): any {\n        if (boardGame.gameId === 270314) {\n            return this.getOhanamiSaveData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            return this.getSkullKingSaveData(scoreSheet);\n        }\n        return this.getDefaultSaveData(scoreSheet);\n    }\n\n    public transformDataAfterUserChange(boardGame: any, scoreSheet: ScoreSheet): boolean {\n        let result = false;\n        if (boardGame.gameId === 270314) {\n            result = true;\n            this.transformOhanamiData(scoreSheet);\n        }\n        if (boardGame.gameId === 333201) {\n            result = true;\n            this.transformSkullKingData(scoreSheet);\n        }\n        return result; // do nothing unless for a specific game\n    }\n\n    private getOhanamiTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 8)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column > 1) {\n                    if ((row === 1) || (row === 2) || (row === 4)) {\n                        return {\n                            className: 'bg-ohanami-blue',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 3) || (row === 5)) {\n                        return {\n                            className: 'bg-ohanami-green',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 6)) {\n                        return {\n                            className: 'bg-ohanami-grey',\n                            forceNumeric: true,\n                        }\n                    }\n                    if ((row === 7)) {\n                        return {\n                            className: 'bg-ohanami-pink',\n                            forceNumeric: true,\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingTemplate(): any {\n        let template = {\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            cells(row: number, column: number) {\n                if ((column === 0) || (column === 1) || (row === 21)) {\n                    return {\n                        readOnly: true,\n                        className: 'bg-readonly-heading'\n                    }\n                }\n                if (column % 2 === 0) {\n                    if (row % 2 === 0) {\n                        return {\n                            className: 'bg-readonly',\n                        }\n                    }\n                }\n\n            }\n        }\n        templateLogger(template);\n        return template;\n    }\n\n    private getSkullKingStartingData(): any[] {\n        return [\n            ['Round', '', 'P 1', '', 'P 2', '', 'P 3', '', 'P 4', ''],\n            ['1', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['2', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['3', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['4', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['5', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['6', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['7', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['8', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['9', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['10', 'bid', '', '', '', '', '', '', '', ''],\n            ['', 'bonus', '', '', '', '', '', '', '', ''],\n            ['Total', '', '', '', '', '', '', '', '', '']\n        ];\n    }\n\n    private getOhanamiStartingData(): any[] {\n        return [\n            ['Round', 'Mult.', 'P 1', 'P 2', 'P 3', 'P 4'],\n            ['1', 'x3', '0', '0', '0', '0'],\n            ['2', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['3', 'x3', '0', '0', '0', '0'],\n            ['', 'x4', '0', '0', '0', '0'],\n            ['', 'x7', '0', '0', '0', '0'],\n            ['', 'var', '0', '0', '0', '0'],\n            ['Total', '', '0', '0', '0', '0']\n        ];\n    }\n\n    private getDefaultScoreSheetTemplate(boardGame: any): any {\n        return {\n            //width:'90%',\n            //height:'90%',\n            colHeaders: false,\n            rowHeaders: false,\n            licenseKey: 'non-commercial-and-evaluation',\n            manualColumnResize: false,\n            manualRowResize: false,\n            selectionMode: 'single',\n            columnSummary: [\n                {\n                    destinationRow: 0,\n                    destinationColumn: 0,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 1,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 2,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 3,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 4,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 5,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n                {\n                    destinationRow: 0,\n                    destinationColumn: 6,\n                    reversedRowCoords: true,\n                    type: 'sum',\n                    forceNumeric: true\n                },\n            ]\n\n        }\n    }\n\n    private getDefaultScoreSheetStartingData(boardGame: any): any[] {\n        return [\n            ['P 1', 'P 2', 'P 3', 'P 4', 'P 5', 'P 6', 'P 7'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n            ['0', '0', '0', '0', '0', '0', '0'],\n        ];\n    }\n\n    private getDefaultSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        // ensure the scores are numbers\n        scores.forEach((score,index) => {\n            const parsed = parseInt(score);\n            if (isNaN(parsed)) {\n                scores[index] = 0;\n            }\n            else {\n                scores[index] = parsed;\n            }\n        })\n\n        // @ts-ignore\n        saveData.players = playerNames;\n        // @ts-ignore\n        saveData.scores = scores;\n        return saveData;\n    }\n\n    private getOhanamiSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first two columns\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 2; index < playerNames.length; index++) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for ohanami is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private getSkullKingSaveData(scoreSheet: ScoreSheet): any {\n        let saveData = {\n            id: scoreSheet.room,\n            jsonData: JSON.stringify(scoreSheet),\n            createdOn: moment().format('YYYYMMDDHHmmss'),\n            players: [],\n            scores: []\n        }\n        // process the table data for names and scores\n        // the first row is the player names, after the first three columns, every second column\n        // @ts-ignore\n        const playerNames: string[] = scoreSheet.data[0];\n        // last row is the scores, following the same pattern as the playr names\n        // @ts-ignore\n        const scores: any[] = scoreSheet.data[scoreSheet.data.length - 1]\n\n        for (let index = 3; index < playerNames.length; index += 2) {\n            // @ts-ignore\n            saveData.players.push(playerNames[index]);\n            let parsed = parseInt(scores[index]);\n            if (isNaN(parsed)) {\n                parsed = 0;\n            }\n            // @ts-ignore\n            saveData.scores.push(parsed);\n\n        }\n        templateLogger(`Save data for skull king is`);\n        templateLogger(saveData);\n        return saveData;\n    }\n\n    private calculateOhanamiPinkScore(numOfCards: number): number {\n        let score = 0;\n        if (numOfCards > 0) {\n            if (numOfCards > 15) numOfCards = 15;\n            while (numOfCards > 0) {\n                score += numOfCards;\n                numOfCards--;\n            }\n        }\n        return score;\n    }\n\n    private transformOhanamiData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 0; index < 4; index++) {\n            /*\n             *  for each player the score is the sum of\n             *  3 x row 1, 2, and 4\n             *  4 x row 3 and 5\n             *  7 x row 6\n             *  row 7 is complicated\n             */\n            let score: number = 0;\n            // @ts-ignore\n            let parsed = parseInt(scoreSheet.data[1][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[2][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[4][index + 2]);\n            if (!isNaN(parsed)) score += (3 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[3][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[5][index + 2]);\n            if (!isNaN(parsed)) score += (4 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[6][index + 2]);\n            if (!isNaN(parsed)) score += (7 * parsed);\n\n            // @ts-ignore\n            parsed = parseInt(scoreSheet.data[7][index + 2]);\n            if (!isNaN(parsed)) score += this.calculateOhanamiPinkScore(parsed);\n\n            // @ts-ignore\n            scoreSheet.data[8][index + 2] = score;\n        }\n    }\n\n    private transformSkullKingData(scoreSheet: ScoreSheet) {\n        // need to calculate the player scores\n        for (let index = 2; index < 10; index += 2) {\n            /*\n             *  for each player the score is the sum of\n             *  each bid score plus a bonus\n             *  if bid is 0, and actual is 0, score is 10 x round\n             *  if bid is x, and actual is x, score is 20 x bid\n             *  if bid ix x, and actual is y (x != y), score is 10 x abs(x-y)\n             */\n            let score: number = 0;\n\n\n            for (let round = 1; round <= 10; round++) {\n                let row = 2 * round - 1;\n                // @ts-ignore\n                let parsedBid = parseInt(scoreSheet.data[row][index]);\n                // @ts-ignore\n                let parsedActual = parseInt(scoreSheet.data[row][index + 1])\n                // @ts-ignore\n                let parsedBonus = parseInt(scoreSheet.data[row + 1][index + 1]);\n                // @ts-ignore\n                if (!isNaN(parsedBid) && !isNaN(parsedActual)) {\n                    if ((parsedBid === 0) && (parsedActual === 0)) {\n                        score += round * 10;\n                    }\n                    if (parsedBid === parsedActual) {\n                        score += 20 * parsedBid;\n                    }\n                    if ((parsedBid > 0) && (parsedBid !== parsedActual)) {\n                        score -= 10 * Math.abs(parsedBid - parsedActual);\n                    }\n                    if (!isNaN(parsedBonus)) score += parsedBonus;\n                }\n            }\n\n            // @ts-ignore\n            scoreSheet.data[21][index + 1] = score;\n        }\n\n    }\n}","class BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: any[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute[0], attribute[1]);\n            });\n        }\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameGame(item1: any, item2: any): boolean {\n    return (item1.gameId === item2.gameId);\n}\n","class UUID {\n    constructor() {\n    }\n\n    getUniqueId(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n            const r = Math.random() * 16 | 0;\n            const v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n\nconst uuid = new UUID();\n\nexport default uuid;\n"],"sourceRoot":""}