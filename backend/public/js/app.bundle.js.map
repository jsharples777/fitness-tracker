{"version":3,"file":"app.bundle.js","mappings":"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A;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesView.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/ui-framework/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/ui-framework/form/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["/* eslint \"react/react-in-jsx-scope\":\"off\" */\n/* eslint \"react/jsx-no-undef\":\"off\" */\nimport debug from 'debug';\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport {API_Config, NAVIGATION} from \"./AppTypes\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ExerciseTypesSidebar from \"./component/sidebar/ExerciseTypesSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport {ExerciseTypesView} from \"./component/view/ExerciseTypesView\";\n\n\nconst logger = debug('app');\n\nclass Root implements UnreadMessageCountListener {\n\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n\n        this.chatSidebar = new ChatRoomsSidebar();\n        // add the views to the chat side bar\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n        this.chatSidebar.onDocumentLoaded();\n\n\n        this.userSearchSidebar = new UserSearchSidebar();\n        // add the subviews for the user search\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        const exerciseTypes = new ExerciseTypesView();\n        this.exerciseTypesSidebar.addView(exerciseTypes,{containerId:ExerciseTypesSidebar.SidebarContainers.container});\n        this.exerciseTypesSidebar.onDocumentLoaded();\n\n\n        // navigation item handlers\n        if (document) {\n            // @ts-ignore\n            document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n            // @ts-ignore\n            document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n            // @ts-ignore\n            this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n            // @ts-ignore\n            this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n            // @ts-ignore\n            //document.getElementById(NAVIGATION.showMyWorkouts).addEventListener('click', this.handleShowWorkouts);\n        }\n\n        // a reference to the div containing ourselves\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        Controller.getInstance().initialise();\n\n        // // now lets break things with a new form\n        // let dataObjDef: DataObjectDefinition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(\"test\", \"Test\", true, true);\n        // let renderer = new FormDetailViewRenderer(\"testForm\",dataObjDef);\n        // let view = new DetailViewImplementation({},renderer);\n        //\n        // // create a test object\n        // let dataObj = {\n        //     email: 'jamie.sharples@gmail.com',\n        //     float1: 3.1,\n        //     float2: 2.3,\n        //     checkbox: true,\n        //     date: '20210910',\n        //     time: '12:32',\n        //     textarea: 'Test',\n        //     select: 'jl',\n        //     rbg: 'marvel'\n        // };\n        // // @ts-ignore\n        // dataObj[FIELD_ID] = '2';\n        // // @ts-ignore\n        // dataObj[FIELD_CreatedOn] = '20201009000000';\n        // // @ts-ignore\n        // dataObj[FIELD_CreatedBy] = 'Jim';\n        //\n        // view.onDocumentLoaded();\n        // const form = renderer.getForm();\n        //\n        //\n        //\n        // // change the select options\n        // dataSource.addValueOption('X-Men', 'xmen');\n        //\n        // // add a simple validation rule to the two numbers\n        // let rule: ValidationRule = {\n        //     targetDataFieldId: 'float1',\n        //     response: ConditionResponse.invalid,\n        //     conditions: [\n        //         {\n        //             sourceDataFieldId: 'float2',\n        //             comparison: ComparisonType.lessThanEqual,\n        //         }\n        //     ]\n        // }\n        // ValidationManager.getInstance().addRuleToForm(form, rule);\n        // rule = {\n        //     targetDataFieldId: 'select',\n        //     response: ConditionResponse.hide,\n        //     conditions: [\n        //         {\n        //             sourceDataFieldId: 'rbg',\n        //             comparison: ComparisonType.hasValue,\n        //             values: 'other'\n        //         }\n        //     ]\n        // }\n        // ValidationManager.getInstance().addRuleToForm(form, rule);\n        // rule = {\n        //     targetDataFieldId: 'select',\n        //     response: ConditionResponse.show,\n        //     conditions: [\n        //         {\n        //             sourceDataFieldId: 'rbg',\n        //             comparison: ComparisonType.hasValue,\n        //             values: 'jl,marvel'\n        //         }\n        //     ]\n        // }\n        // ValidationManager.getInstance().addRuleToForm(form, rule);\n        // view.displayItem(dataObj);\n        // view.show();\n\n    }\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n}\n\n//localStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts abstract-form bootstrap-form-config-helper basic-form basic-form-detail chat-sidebar chat-sidebar:detail socket-listener notification-controller chat-manager board-game-search-sidebar board-game-search-sidebar:detail score-sheet-controller score-sheet-view score-sheet-sidebar score-sheet-sidebar:detail view-ts view-ts-detail user-search user-search-detail template-manager sidebar-container' ;\n//localStorage.debug = 'basic-field-operations-generator basic-field-operations-renderer basic-field-operations-validator basic-field-operations-formatter' ;\n//localStorage.debug = 'basic-form basic-form-detail validation-manager abstract-field';\nlocalStorage.debug = 'app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\ndebug.log = console.info.bind(console);\n\n$(function() {\n    console.log(\"Hello\")\n    const root = new Root();\n    root.onDocumentLoad();\n});","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'users',\n    chatLogs: 'chatLogs',\n    exerciseTypes: 'exerciseTypes',\n    workouts: 'workouts',\n    recentUserSearches: 'recentUserSearches'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch'\n}\n\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./ui-framework/form/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"./model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"./model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"./ui-framework/helper/SimpleValueDataSource\";\nimport {KeyType} from \"./ui-framework/ConfigurationTypes\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nclass Controller implements StateChangeListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n\n    constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName:STATE_NAMES.users,\n                serverURL:'',\n                api:API_Config.users,\n                isActive:true\n            },\n            {\n                stateName:STATE_NAMES.exerciseTypes,\n                serverURL:'',\n                api:API_Config.exerciseTypes,\n                isActive:true\n            },\n            {\n                stateName:STATE_NAMES.workouts,\n                serverURL:'',\n                api:API_Config.workouts,\n                isActive:true\n            }\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [STATE_NAMES.recentUserSearches,STATE_NAMES.chatLogs], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // call backs\n        this.callbackAddToCollection = this.callbackAddToCollection.bind(this);\n        this.callbackRemoveFromCollection = this.callbackRemoveFromCollection.bind(this);\n        this.callbackGetCollection = this.callbackGetCollection.bind(this);\n\n        //event handlers\n        this.addBoardGameToCollection = this.addBoardGameToCollection.bind(this);\n\n        return this;\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public initialise(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n        }\n\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition('exerciseType','Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.shortTime, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition('workout','Workout', true, true, true, '_id');\n        let exercisesFieldDefinition:FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n\n\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n\n    public callbackBoardGameDetails(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for bgg search for single board game ${associatedStateName} with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n        }\n\n    }\n\n    public callbackAddToCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for add single board game ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n        }\n    }\n\n    public callbackRemoveFromCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for remove single board game ${associatedStateName} from my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n        }\n    }\n\n    public callbackGetCollection(data: any, status: number, associatedStateName: string): void {\n        cLogger(`callback for getting my collection of board games ${associatedStateName} to my collection with status ${status}`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            cLogger(data);\n        }\n    }\n\n    addBoardGameToCollection(event: MouseEvent) {\n        cLogger(`Handling Add Board Game to collection`);\n    }\n\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n}\n\nexport default Controller;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {id: message.user}, isSame);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'chatSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'exerciseTypesSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'blockedUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        dataSourceId: VIEW_NAME.blockedUsers,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\nexport default BlockedUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport { CollectionView } from '../../ui-framework/view/interface/CollectionView';\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasChanged(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: CollectionViewListener): void {}\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): CollectionViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {}\n\n    show(): void {\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {isSame, isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener,CollectionViewListener {\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'chatLogs',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        dataSourceId: VIEW_NAME.chatLogs,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,new MemoryBufferStateManager(), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameRoom(item1,item2);\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs,newState,true);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n}\n\nexport default ChatLogsView;\n","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\n\nexport class ExerciseTypesView extends AbstractStatefulCollectionView {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'exerciseTypes',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        dataSourceId: VIEW_NAME.exerciseTypes,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: 'fas fa-dumbbell',\n            inactive: '',\n            active: 'fas fa-running',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n    };\n\n    constructor() {\n        super(ExerciseTypesView.DOMConfig,Controller.getInstance().getStateManager(), STATE_NAMES.exerciseTypes);\n\n        this.renderer = new ListViewRenderer(this,this);\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.name;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (item.type) {\n            if (item.type === 'cardio') {\n                return Modifier.active;\n            }\n            else {\n                return Modifier.normal;\n            }\n        }\n        return super.getSecondaryModifierForItemInNamedCollection(name,item);\n\n    }\n\n}\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'favouriteUsers',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        dataSourceId: VIEW_NAME.favouriteUsers,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\nexport default FavouriteUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame, isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/delegate/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        resultsContainerId: 'recentUserSearches',\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.number,\n        dataSourceId: VIEW_NAME.userSearch,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n        this.addEventCollectionListener(this);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any) {\n        return item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value}, isSameMongo)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSameMongo, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.uiConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, isSame, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n\n}\n\nexport default UserSearchView;\n","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"../ui-framework/helper/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../ui-framework/form/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../ui-framework/form/CommonTypes\";\n\nexport const FIELD_ID:string = 'id';\nexport const FIELD_CreatedBy:string = 'createdBy';\nexport const FIELD_ModifiedBy:string = 'modifiedBy';\nexport const FIELD_CreatedOn:string = 'createdOn';\nexport const FIELD_ModifiedOn:string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc:string = 'Created By';\nexport const FIELD_ModifiedBy_Desc:string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc:string = 'Created On';\nexport const FIELD_ModifiedOn_Desc:string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    private constructor() {}\n\n    public createBasicObjectDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        let objDef:DataObjectDefinition = {\n            id:id,\n            displayName:displayName,\n            fields:[]\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef:FieldDefinition = {\n                id:idFieldName,\n                isKey:true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName:'Id',\n                mandatory:true,\n                generator: {\n                    generator:ops,\n                    onModify:false,\n                    onCreation:true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    private addCreatedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_CreatedOn,FIELD_CreatedOn_Desc,FieldType.datetime,true,FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedOn,FIELD_ModifiedOn_Desc,FieldType.datetime,true,FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields,FIELD_CreatedBy,FIELD_CreatedBy_Desc,FieldType.userId,true,FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedBy,FIELD_ModifiedBy_Desc,FieldType.userId,true,FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields:FieldDefinition[],keyType:KeyType, id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        let fieldDef:FieldDefinition = {\n            id:id,\n            isKey:false,\n            idType: keyType,\n            type: type,\n            displayName:displayName,\n            mandatory:isMandatory,\n            displayOnly:false,\n        }\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    private addNumericFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addStringFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n}","import {DataObjectDefinition} from \"../ui-framework/form/DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    protected definitions:DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public findDefinition(id:string):DataObjectDefinition|null {\n        let result:DataObjectDefinition|null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        let result:DataObjectDefinition|null = this.findDefinition(id);\n        if (result) {\n            return result;\n        }\n        else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id,displayName,hasDataId,dataIdIsUUID,createModifierFields,idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger('State Manager: Found item - removing ');\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: stateObj.id\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            for (let index = 0; index < changeListenersForName.listeners.length; index++) {\n                smLogger(`State Manager: Found state listener of ${name} - informing`);\n                const listener = changeListenersForName.listeners[index];\n                switch (eventType) {\n                    case (stateEventType.StateChanged): {\n                        listener.stateChanged(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemAdded): {\n                        listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemUpdated): {\n                        listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                        break;\n                    }\n                    case (stateEventType.ItemDeleted): {\n                        listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                        break;\n                    }\n                }\n\n            }\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","export type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string\n}\n\nexport type BasicElement = {\n    elementType:string,\n    elementAttributes?:Attribute[],\n    elementClasses:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    quickDelete?:boolean,\n    badge?:BasicElement,\n    delete?:BasicButtonElement,\n    drag?:Draggable,\n    background?:BasicElement,\n    drop?:Droppable\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type CollectionViewDOMConfig = {\n    resultsContainerId:string,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    keyType: KeyType,\n    dataSourceId:string,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event:AlertEvent):void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    private alertDiv:HTMLDivElement;\n    private alertTitle:HTMLHeadingElement;\n    private alertContent:HTMLParagraphElement;\n    private cancelButton:HTMLButtonElement;\n    private confirmButton:HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public startAlert(listener:AlertListener, title:string, content:string, context?:any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event:MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',confirmHandler);\n        }\n\n        const cancelHandler = (event:MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click',confirmHandler);\n        this.cancelButton.addEventListener('click',cancelHandler);\n    }\n\n}","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements CollectionViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View, config:SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import {KeyType} from \"../ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"./validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection'\n}\n\nexport interface FieldValueGenerator {\n    generate(field:FieldDefinition,isCreate:boolean):string;\n}\n\n\n\n\nexport type FieldDefinition = {\n    id:string,\n    isKey:boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName:string,\n    mandatory:boolean,\n    displayOnly?:boolean,\n    description?:string,\n    collectionOfDataObjectId?:string,\n    generator?:{\n        onCreation:boolean,\n        onModify:boolean,\n        generator:FieldValueGenerator\n    },\n    dataSource?:FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id:string,\n    displayName:string,\n    fields:FieldDefinition[],\n    rules?:ValidationRule\n}\n\n\n\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"../form/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private previousFieldValues: FieldNameValue[];\n\n    private static dateRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {}\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../form/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options:ValueOption[];\n    private listeners:FieldValueOptionsListener[];\n\n    constructor(options:ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name:string,value:string) {\n        this.options.push({name,value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                console.log(listener);\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {EXTRA_ACTION_ATTRIBUTE_NAME, Modifier, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {View} from \"../interface/View\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    let action: HTMLElement = document.createElement('button');\n                    action.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                    if (extraAction.buttonText) {\n                        action.innerHTML = extraAction.buttonText;\n                    }\n                    if (extraAction.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n                        action.appendChild(iconEl);\n                    }\n                    action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    action.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                    action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME,extraAction.name);\n\n                    action.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventActionClicked(event);\n                    });\n                    buttonsEl.appendChild(action);\n                });\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n        const displayText = this.view.getDisplayValueForItemInNamedCollection(collectionName, item);\n        textEl.innerHTML = displayText;\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n        });\n    }\n\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {\n    CollectionViewDOMConfig,\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier\n} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport {AlertEvent, AlertListener} from \"../../alert/AlertListener\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView,CollectionViewEventHandler,AlertListener{\n    protected collectionName: string;\n    protected renderer:CollectionViewRenderer|null;\n    protected selectedItem:any|null;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName:string) {\n        super(uiConfig);\n        this.collectionName = collectionName;\n        this.renderer = null;\n        this.selectedItem = null;\n        this.eventForwarder = new CollectionViewListenerForwarder();\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.detail.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    protected getDragData(event: DragEvent): any {\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.getItemInNamedCollection(this.collectionName,compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.uiConfig.detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.uiConfig.detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n    abstract getItemInNamedCollection(name:string, compareWith:any):any;\n    abstract getDisplayValueForItemInNamedCollection(name: string, item: any): string;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        if (this.selectedItem) {\n            if (this.compareItemsForEquality(item,this.selectedItem)) {\n                return Modifier.active;\n            }\n        }\n        return Modifier.inactive;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl,name,newState);\n        }\n    }\n\n    public eventStartDrag(event: DragEvent):void {\n        avLogger(`view ${this.getName()}: drag start`);\n        avLoggerDetails(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        avLoggerDetails(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this, data);\n    }\n\n    public eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        console.log(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                avLoggerDetails(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this, selectedItem);\n            }\n        }\n    }\n\n    public eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n               // do we need to confirm?\n               if (this.uiConfig.detail.quickDelete) {\n                   this.selectedItem = null;\n                   this.eventForwarder.itemDeleted(this, selectedItem);\n               }\n               else {\n                   AlertManager.getInstance().startAlert(this, this.getName(),`Are you sure you want to delete this information?`,selectedItem);\n               }\n\n            }\n        }\n    }\n\n\n\n    public eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        let itemId = event.target.getAttribute(this.uiConfig.keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n        if (this.uiConfig.keyType === KeyType.number) itemId = parseInt(itemId);\n        // @ts-ignore\n        avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.uiConfig.keyId] = itemId;\n        avLoggerDetails(compareWith);\n\n        let selectedItem = this.getItemInNamedCollection(this.collectionName, compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this, selectedItem);\n            avLoggerDetails(`view ${this.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                avLoggerDetails(selectedItem);\n                this.eventForwarder.itemAction(this, actionName, selectedItem);\n            }\n        }\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer:CollectionViewRenderer):void {\n        this.renderer = renderer;\n    }\n\n    completed(event: AlertEvent): void {\n        avLoggerDetails(event.context);\n        this.selectedItem = null;\n        this.eventForwarder.itemDeleted(this, event.context);\n    }\n\n}","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName:string) {\n        super(uiConfig,stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName,this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render():void {\n        this.updateViewForNamedCollection(this.collectionName,this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show():void {}\n    hidden():void{}\n\n\n}\n","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: CollectionViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl:HTMLElement|null;\n\n\n    protected constructor(uiConfig: CollectionViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getUIConfig(): CollectionViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n    abstract show(): void;\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.detail.drop) {\n            const acceptType = (this.uiConfig.detail.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.detail.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.detail.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n}\n","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1:any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["logger","debug","Root","Controller","window","getCurrentUser","onDocumentLoad","containerId","ChatRoomsSidebar","chatLogs","chatLogView","chatLog","recentSearches","UserSearchSidebar","favouriteUsers","favourites","blockedUsers","blocked","exerciseTypes","ExerciseTypesSidebar","container","document","NAVIGATION","hideAllSideBars","handleShowUserSearch","event","API_Config","handleShowExerciseTypes","handleShowChat","countChanged","buffer","newCount","localStorage","console","$","root","Decorator","STATE_NAMES","users","workouts","recentUserSearches","login","showMyWorkouts","userSearchId","exerciseTypesId","chatId","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","userSearch","cLogger","cLoggerDetail","getInstance","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","initialise","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","workoutDefinition","exercisesFieldDefinition","KeyType","getStateManager","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","callbackBoardGameDetails","status","callbackAddToCollection","callbackRemoveFromCollection","callbackGetCollection","addBoardGameToCollection","getServerAPIURL","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","id","user","username","stateObj","NotificationManager","SidebarViewContainer","SidebarPrefs","expandedSize","location","SidebarLocation","right","SidebarContainers","left","vLogger","BlockedUserView","AbstractStatefulCollectionView","DOMConfig","resultsContainerId","resultsElementType","resultsElementAttributes","resultsClasses","keyId","keyType","dataSourceId","modifiers","normal","inactive","active","warning","icons","detail","containerClasses","textElementType","textElementClasses","select","quickDelete","delete","buttonClasses","iconClasses","drop","acceptFrom","acceptTypes","onDocumentLoaded","canDeleteItem","documentLoaded","itemDeleted","selectedItem","itemSelected","itemDragStarted","itemAction","hideRequested","showRequested","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","getDisplayValueForItemInNamedCollection","item","getSecondaryModifierForItemInNamedCollection","Modifier","getIdForItemInNamedCollection","updateViewForNamedCollection","itemDropped","droppedItem","itemDeselected","canSelectItem","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","compareItemsForEquality","getModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","handleUserDrop","draggedObjectJSON","draggedObject","JSON","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","Priority","messageEl","browserUtil","fastSearchEl","eventUserSelected","ui","addChatMessage","chatMessageEl","messageSenderEl","moment","contentEl","reRenderChatMessages","renderChatLog","handleChatLogsUpdated","handleChatStarted","leaveChat","checkCanComment","clearChatLog","myUsername","fastSearchValues","newValue","searchValue","label","_id","source","disabled","minLength","handleOfflineMessagesReceived","handleInvitationDeclined","handleNewInviteReceived","getName","hidden","getDataSourceKeyId","getUIConfig","render","show","csLogger","ChatLogsView","selectedChatLog","badge","elementType","elementClasses","isSameRoom","updateStateManager","newState","selectChatRoom","room","ExerciseTypesView","drag","type","from","isSameMongo","vLoggerDetail","FavouriteUserView","extraActions","favUsers","actionName","roomName","UserSearchView","fastSearchInputId","dataLimit","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","createModifierFields","idFieldName","objDef","displayName","fields","ops","fieldType","fieldDef","isKey","idType","mandatory","generator","onModify","onCreation","isMandatory","description","datasource","displayOnly","index","definition","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","response","fetch","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","requestId","v4","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","foundIndex","element","initiateFetchForQueueItem","BootstrapNotification","Notification","topOffset","context","duration","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","NotificationFactory","createNotification","notificationFactory","notification","notificationNode","parentEl","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","receiveUserList","listener","favourite","savedLogs","receiveJoinedRoom","InviteType","log","created","parseInt","joinDateTime","priority","receivedLeftRoom","receiveInvitation","invite","didChatAlreadyExist","happyToProceed","receiveLogin","receiveLogout","receiveDecline","receiveMessage","wasOffline","receiveQueuedInvites","invites","receiveQueuedMessages","messages","joinChat","logout","declineInvite","sendInvite","ChatRoom","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","lastViewed","numOfNewMessages","foundLog","unreadCount","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","AbstractStateManager","forceSaves","managerName","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","stateManager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","configuration","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","msManager","apiSMLogger","results","config","setCompletedRun","runsComplete","jsonRequest","Error","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","cancelHandler","sbvcLogger","addView","viewContainer","view","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","flogger","vlogger","glogger","rlogger","BasicFieldOperations","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","setSubElements","formatValue","field","currentValue","parsed","parseFloat","isNaN","isValidValue","isValid","resetOnFailure","fieldValue","renderValue","generate","SimpleValueDataSource","addListener","getOptions","CollectionViewListenerForwarder","avLogger","ListViewRenderer","uiConfig","dataSourceKeyId","resultDataKeyId","childEl","textEl","imgEl","buttonsEl","badgeValue","badgeEl","action","extraAction","iconEl","deleteButtonEl","displayText","modifier","secondModifier","ViewListenerForwarder","avLoggerDetails","AbstractCollectionView","addEventCollectionListener","itemId","dataSource","AbstractView","compareWith","isSame","data","shouldSelect","shouldDelete","setRenderer","completed","getItemInNamedCollection","DATA_SOURCE","droppedObjectType","droppedObjectFrom","acceptType","objectType","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classes","classesText","classValue","addAttributes","attributes","attribute","removeAttributes","item1","item2"],"sourceRoot":""}