{"version":3,"file":"app.bundle.js","mappings":"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F;AA1CJ,SA4CK;AACD;AACH;AACJ;;;;;;;;;;;;;;;;;;ACpDM,8BAAiD;AACpD,SAAQO,KAAK,CAALA,EAAAA,KAAaC,KAAK,CAA1B;AACH;AAEM,mCAAsD;AACzD,SAAQD,KAAK,CAALA,GAAAA,KAAcC,KAAK,CAA3B;AACH;AAGM,sCAAyD;AAC5D,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;AAEM,kCAAoD;AACvD,SAAQD,KAAK,CAALA,QAAAA,KAAmBC,KAAK,CAAhC;AACH;;;;;;;;;;;;;;;ACjBM,kCAAuD;AAC1D;AACA;AACA,MAAIC,GAAG,CAAHA,MAAAA,IAAJ,KAAuB;AACnB;AAJsD,IAM1D;;;AACA,SAAOA,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,GAAAA,IAAP;AACH;;;;;;;;;;ACRD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/CreatedByPermissionChecker.ts","webpack://template-feo-react-babel/./src/DefaultPermissionChecker.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/component/helper/ValidationHelper.ts","webpack://template-feo-react-babel/./src/component/renderer/WorkoutSummaryRenderer.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/CurrentWorkoutSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/WorkoutSummarySidebar.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutCompositeView.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutExercisesView.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesCompositeView.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesViewUsingContext.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutSummaryView.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutsViewUsingContext.ts","webpack://template-feo-react-babel/./src/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/ui-framework/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/ui-framework/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/ui-framework/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/ui-framework/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/InputField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/CarouselViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/ListViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/util/DurationFunctions.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/util/MiscFunctions.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nimport {ContextualInformationHelper} from \"./ui-framework/context/ContextualInformationHelper\";\n\nlocalStorage.debug = 'context-helper';\n\nimport debug from 'debug';\ndebug.log = console.info.bind(console);\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport {API_Config, NAVIGATION, STATE_NAMES} from \"./AppTypes\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ExerciseTypesSidebar from \"./component/sidebar/ExerciseTypesSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport {ExerciseTypesCompositeView} from \"./component/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./component/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./component/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./component/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./component/view/CurrentWorkoutCompositeView\";\nimport {WorkoutsViewUsingContext} from \"./component/view/WorkoutsViewUsingContext\";\n\n\nconst logger = debug('app');\n\nexport default class App implements UnreadMessageCountListener {\n\n    private static _instance: App;\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private workoutSummarySidebar: WorkoutSummarySidebar;\n    // @ts-ignore\n    private currentWorkoutSidebar: CurrentWorkoutSidebar;\n    // @ts-ignore\n    private currentWorkoutView: CurrentWorkoutCompositeView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    private constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowWorkoutSummary = this.handleShowWorkoutSummary.bind(this);\n        this.handleShowCurrentWorkout = this.handleShowCurrentWorkout.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.workoutSummary).addEventListener('click', this.handleShowWorkoutSummary);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.currentWorkout).addEventListener('click', this.handleShowCurrentWorkout);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = new UserSearchSidebar();\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = new ChatRoomsSidebar();\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n        this.chatSidebar.onDocumentLoaded();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        new ExerciseTypesCompositeView(this.exerciseTypesSidebar).onDocumentLoaded();\n\n        //new WorkoutsView().onDocumentLoaded(); // carousel view\n        new WorkoutsViewUsingContext().onDocumentLoaded();\n\n        this.workoutSummarySidebar = new WorkoutSummarySidebar();\n        this.workoutSummarySidebar.addView(new WorkoutSummaryView(),{containerId: WorkoutSummarySidebar.SidebarContainers.container});\n        this.workoutSummarySidebar.onDocumentLoaded();\n\n        this.currentWorkoutSidebar = new CurrentWorkoutSidebar();\n        this.currentWorkoutView = new CurrentWorkoutCompositeView(this.currentWorkoutSidebar);\n        this.currentWorkoutView.onDocumentLoaded();\n\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowWorkoutSummary(event: Event) {\n        logger('Handling Show Workout Summary');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.hideAllSideBars();\n        this.workoutSummarySidebar.eventShow(event);\n    }\n\n    handleShowCurrentWorkout(event: Event) {\n        logger('Handling Show Current Workout');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.currentWorkoutSidebar.eventShow(event);\n    }\n\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    addingExerciseToCurrentWorkout(exerciseType:any) {\n        //this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventShow(null);\n        this.currentWorkoutView.getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes,exerciseType, false);\n    }\n\n    showCurrentWorkout() {\n        this.currentWorkoutSidebar.eventShow(null);\n    }\n}\n\n\n$(function() {\n    App.getInstance().onDocumentLoad();\n});","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary:'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises:'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail:\"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone:'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\n\n","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"./model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"./model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"./ui-framework/helper/SimpleValueDataSource\";\nimport {KeyType} from \"./ui-framework/ConfigurationTypes\";\nimport {DataObjectListener} from \"./model/DataObjectListener\";\nimport {DataObjectController} from \"./model/DataObjectController\";\nimport {isSameMongo} from \"./util/EqualityFunctions\";\nimport {v4} from \"uuid\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener,DataObjectListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n\n    private constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName:STATE_NAMES.users,\n                serverURL:'',\n                api:API_Config.users,\n                isActive:true\n            },\n            {\n                stateName:STATE_NAMES.exerciseTypes,\n                serverURL:'',\n                api:API_Config.exerciseTypes,\n                isActive:true,\n                idField: '_id'\n            },\n            {\n                stateName:STATE_NAMES.workouts,\n                serverURL:'',\n                api:API_Config.workouts,\n                isActive:true,\n                idField: '_id'\n            }\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes,'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts,'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition:FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName,dataObj,false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName,dataObj,isSameMongo,false);\n                break;\n            }\n        }\n    }\n\n\n    addExerciseToCurrentWorkout(exerciseType:any):void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout:any):void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise:any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n}\n\n\n","import {ObjectPermissionChecker} from \"./ui-framework/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class CreatedByPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n}","import {ObjectPermissionChecker} from \"./ui-framework/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class DefaultPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return true;\n    }\n}","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame, isSameMongo} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user}, isSameMongo);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import {Form} from \"../../ui-framework/form/Form\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"../../ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../ui-framework/form/validation/ValidationManager\";\n\nexport class ValidationHelper {\n    private static _instance: ValidationHelper;\n\n    public static getInstance(): ValidationHelper {\n        if (!(ValidationHelper._instance)) {\n            ValidationHelper._instance = new ValidationHelper();\n        }\n        return ValidationHelper._instance;\n    }\n\n    private constructor() {}\n\n    public setupValidationForExerciseTypeDetailsForm(form:Form) {\n        let rule: ValidationRule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n    }\n\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../../ui-framework/view/interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../../ui-framework/view/interface/CollectionViewEventHandler\";\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\n\nconst avLogger = debug('workout-summary-renderer');\n\nexport class WorkoutSummaryRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart:Chart|null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    private generateRandomExerciseColourAndBorder(isStrength:boolean = true) : string[] {\n        let red = 0;\n        let blue = 0;\n        let green = 50;\n\n        const newColour = Math.floor(Math.random() * 100) + 155;\n        if (isStrength) red = newColour;\n        if (!isStrength) blue = newColour;\n        const transparency = 0.4;\n\n        const background = `rgba(${red},${green},${blue},${transparency})`;\n        const border = `rgb(${red},${green},${blue})`;\n\n        return [background,border];\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating workout summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        let sevenWorkouts = newState;\n        if (newState.length > 7) {\n            sevenWorkouts = newState.slice(newState.length - 7);\n        }\n\n\n        // go through the workouts and find all the unique exercise names as data series names\n        let exerciseNames: string[] = [];\n        let exerciseBG: string[] = [];\n        let exerciseBR: string[] = [];\n        let exerciseTypes: string[] = [];\n        let labels: string[] = [];\n        sevenWorkouts.forEach((workout: any) => {\n            const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n            labels.push(label);\n            avLogger(`Added label ${label}`);\n\n            if (workout.exercises) {\n                workout.exercises.forEach((exercise: any) => {\n                    const exerciseName = exercise.name;\n                    // do we have this exercise already?\n                    let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n                    if (foundIndex < 0) {\n                        avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n                        exerciseNames.push(exerciseName);\n                        exerciseTypes.push(exercise.type);\n                        const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n                        exerciseBG.push(colours[0]);\n                        exerciseBR.push(colours[1]);\n                    }\n                })\n            }\n        });\n\n        // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n\n        let datasets: any[] = [];\n\n        exerciseNames.forEach((name, index) => {\n            const exerciseType = exerciseTypes[index];\n            const itemBG = exerciseBG[index];\n            const itemBR = exerciseBR[index];\n\n            avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n\n            let data: number[] = [];\n            let bg: string[] = [];\n            let br: string[] = [];\n\n\n            sevenWorkouts.forEach((workout: any) => {\n                bg.push(itemBG);\n                br.push(itemBR);\n\n                // find the exercise name\n                if (workout.exercises) {\n\n                    const didntFindExercise = workout.exercises.every((exercise: any) => {\n                        if (exercise.name == name) {\n                            if (exerciseType === 'strength') {\n                                avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n                                data.push(exercise.weight);\n                            } else {\n                                avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n                                data.push(exercise.distance);\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                    // not found - zero value\n                    if (didntFindExercise) {\n                        data.push(0);\n                    }\n\n                } else {\n                    data.push(0);\n                }\n            });\n            let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order:1};\n            let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n            avLogger(dataset);\n            datasets.push(dataset);\n            //datasets.push(lineDataSet);\n        });\n\n\n        let chartData = {\n            labels: labels,\n            datasets: datasets,\n        };\n\n        let config = {\n            type:'bar',\n            data: chartData,\n            options: {\n                responsive: true,\n                animation: true,\n                maintainAspectRatio: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            },\n\n        }\n        avLogger(chartData);\n\n        // @ts-ignore\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'chatSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class CurrentWorkoutSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'currentWorkoutSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        list: 'exercises',\n        detail: 'workoutDetail'\n    }\n\n\n    constructor() {\n        super(CurrentWorkoutSidebar.SidebarPrefs);\n    }\n}\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'exerciseTypesSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class WorkoutSummarySidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'workoutSummarySidebar',\n        expandedSize:'100%',\n        location: SidebarLocation.bottom\n    }\n\n    static SidebarContainers = {\n        container: 'workoutSummary',\n    }\n\n\n    constructor() {\n        super(WorkoutSummarySidebar.SidebarPrefs);\n    }\n}\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'blockedUsers',\n            dataSourceId: VIEW_NAME.blockedUsers,\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\nexport default BlockedUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    Modifier,\n    ViewDOMConfig\n} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport { CollectionView } from '../../ui-framework/view/interface/CollectionView';\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasChanged(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: CollectionViewListener): void {}\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {}\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {isSame, isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener,CollectionViewListener {\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,new MemoryBufferStateManager(), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameRoom(item1,item2);\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs,newState,true);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n}\n\nexport default ChatLogsView;\n","import SidebarViewContainer from \"../../ui-framework/container/SidebarViewContainer\";\nimport {DataObjectDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../model/ObjectDefinitionRegistry\";\nimport {BUTTON, INPUT, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {DetailView} from \"../../ui-framework/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../ui-framework/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../ui-framework/form/Form\";\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\nimport {StateManager} from \"../../state/StateManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {DefaultPermissionChecker} from \"../../DefaultPermissionChecker\";\nimport {CurrentWorkoutExercisesView} from \"./CurrentWorkoutExercisesView\";\nimport {DataObjectListener} from \"../../model/DataObjectListener\";\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport moment from \"moment\";\nimport App from \"../../App\";\n\nconst logger = debug('current-workout-composite-view');\n\nexport class CurrentWorkoutCompositeView implements StateChangeListener,DataObjectListener{\n    private sideBar:SidebarViewContainer;\n    private currentWorkout:any = {};\n    private workoutDef:DataObjectDefinition|null = null;\n    private readonly stateManager:StateManager;\n    private workoutNameEl:HTMLInputElement|null = null;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n        this.stateManager = new MemoryBufferStateManager();\n        this.stateManager.addChangeListenerForName(STATE_NAMES.exerciseTypes,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.workouts,this);\n    }\n\n    getListenerName(): string {\n        return 'Current Workout Composite View';\n    }\n\n    onDocumentLoaded() {\n        this.workoutNameEl = <HTMLInputElement|null>document.getElementById(INPUT.workoutName);\n        this.workoutNameEl?.addEventListener('blur',(event) => {\n           if (event.target) {\n               // @ts-ignore\n               this.currentWorkout.name = event.target.value;\n               this.saveWorkout();\n           }\n        });\n\n\n        this.workoutDef = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.workouts);\n        if (!this.workoutDef) throw new Error ('Workout definition not found');\n\n        const exerciseTypes = new CurrentWorkoutExercisesView(this.stateManager);\n        this.sideBar.addView(exerciseTypes,{containerId:VIEW_CONTAINER.exerciseDropZone});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.currentWorkoutDetail,exerciseTypeDefinition,new DefaultPermissionChecker());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.currentWorkoutDetail,\n                    dataSourceId: VIEW_NAME.exercises\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.completeWorkout);\n            logger(`Setting up button for completing the workout`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Completing the workout`);\n                    this.currentWorkout.completed = true;\n                    this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n                    if (detailForm) {\n                        detailForm.reset();\n                        detailForm.setReadOnly();\n                    }\n                    this.saveWorkout();\n                    this.createWorkout();\n                    App.getInstance().hideAllSideBars();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n\n    private createWorkout() {\n        logger(`Creating new current workout`);\n        this.currentWorkout = ObjectDefinitionRegistry.getInstance().createInstance(STATE_NAMES.workouts);\n        logger(this.currentWorkout);\n        this.currentWorkout.name = '';\n\n        if (this.workoutNameEl) this.workoutNameEl.value = '';\n        Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.workouts,this.currentWorkout,false);\n        this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n    }\n\n    private saveWorkout() {\n        logger(`Saving current workout`);\n        logger(this.currentWorkout);\n        this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n        this.currentWorkout.modifiedOn = moment().format('YYYYMMDDHHmmss');\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.workouts,this.currentWorkout,isSameMongo,false);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`${managerName},${name}`);\n        if (name === STATE_NAMES.workouts) {\n            logger(`Workouts loaded`);\n            // is there a current workout?\n            this.currentWorkout = null;\n\n            newValue.forEach((workout:any) => {\n                if (!workout.completed || (workout.completed === 'false')) {\n                    this.currentWorkout = workout;\n                }\n            });\n\n            if (this.currentWorkout) {\n                logger(`Workouts loaded found existing current workout`);\n                if (this.workoutNameEl && this.currentWorkout.name) this.workoutNameEl.value = this.currentWorkout.name;\n                this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n            }\n            else {\n                logger(`Workouts loaded no existing current workout, creating and saving`);\n                this.createWorkout();\n            }\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            logger(`Added a new exercise to workout`);\n            logger(itemAdded);\n\n            this.currentWorkout.exercises.push(itemAdded);\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemRemoved._id);\n            logger(`Removing exercise to workout at index ${foundIndex}`);\n            logger(itemRemoved);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1);\n            }\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemNewValue._id);\n            logger(`Updating exercise to workout at index ${foundIndex}`);\n            logger(itemNewValue);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1,itemNewValue);\n            }\n            this.saveWorkout();\n        }\n\n    }\n\n    create(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Added a new exercise to workout from view`);\n        logger(dataObj);\n        this.stateManager.addNewItemToState(STATE_NAMES.exerciseTypes,dataObj,false);\n    }\n    update(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Updating exercise in workout from view`);\n        logger(dataObj);\n        this.stateManager.updateItemInState(STATE_NAMES.exerciseTypes,dataObj,isSameMongo,false);\n    }\n    delete(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Deleting exercise from workout from view`);\n        logger(dataObj);\n        this.stateManager.removeItemFromState(STATE_NAMES.exerciseTypes,dataObj,isSameMongo,false);\n    }\n\n\n\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport { CollectionView } from \"../../ui-framework/view/interface/CollectionView\";\nimport { View } from \"../../ui-framework/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../state/StateManager\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\nimport {ContextualInformationHelper} from \"../../ui-framework/context/ContextualInformationHelper\";\nimport {ListViewRendererUsingContext} from \"../../ui-framework/view/renderer/ListViewRendererUsingContext\";\n\nconst logger = debug('current-workout-exercises-view');\n\nexport class CurrentWorkoutExercisesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exercises',\n            dataSourceId: VIEW_NAME.exercises,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromExerciseTypes],\n                acceptTypes: [DRAGGABLE.typeExerciseType]\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'fas fa-trash-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise from the workout.\"}]\n            }\n        }\n    };\n\n    constructor(stateManager:StateManager) {\n        super(CurrentWorkoutExercisesView.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.exerciseTypes,'Exercise Types');\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        }\n        else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    itemDropped(view: View, droppedItem: any) {\n        Controller.getInstance().addExerciseToCurrentWorkout(droppedItem);\n    }\n\n\n}\n\n","import SidebarViewContainer from \"../../ui-framework/container/SidebarViewContainer\";\nimport {ExerciseTypesView} from \"./ExerciseTypesView\";\nimport ExerciseTypesSidebar from \"../sidebar/ExerciseTypesSidebar\";\nimport {DataObjectDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {CreatedByPermissionChecker} from \"../../CreatedByPermissionChecker\";\nimport {DetailView} from \"../../ui-framework/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../ui-framework/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../ui-framework/form/Form\";\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"../../ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../ui-framework/form/validation/ValidationManager\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {ExerciseTypesViewUsingContext} from \"./ExerciseTypesViewUsingContext\";\n\nconst logger = debug('exercise-types-composite-view');\n\nexport class ExerciseTypesCompositeView {\n    private sideBar:SidebarViewContainer;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const exerciseTypes = new ExerciseTypesViewUsingContext(Controller.getInstance().getStateManager());\n        this.sideBar.addView(exerciseTypes,{containerId:ExerciseTypesSidebar.SidebarContainers.container});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.exerciseTypeDetail,exerciseTypeDefinition,new CreatedByPermissionChecker());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.exerciseTypeDetail,\n                    dataSourceId: VIEW_NAME.exerciseTypes\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.createNewExerciseType);\n            logger(`Setting up button for creating exercise types`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport { CollectionView } from \"../../ui-framework/view/interface/CollectionView\";\nimport { View } from \"../../ui-framework/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../state/StateManager\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../ui-framework/context/ContextualInformationHelper\";\nimport {ListViewRendererUsingContext} from \"../../ui-framework/view/renderer/ListViewRendererUsingContext\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\nconst logger = debug('exercise-types-view');\n\nexport class ExerciseTypesViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exerciseTypes',\n            dataSourceId: VIEW_NAME.exerciseTypes,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-trash-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise type.\"}]\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n        extraActions: [{\n            name: 'addToWorkout',\n            buttonClasses:'btn bg-primary text-white btn-circle btn-md mr-1',\n            iconClasses:'fas fa-arrow-alt-circle-right',\n            attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'data-html',value:'true'},{name:'title',value:\"Add this <strong>exercise</strong> to the current workout.\"}]\n        }]\n    };\n\n\n    constructor(stateManager:StateManager) {\n        super(ExerciseTypesViewUsingContext.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context:ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.exerciseTypes,'Exercise Types');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'addToWorkout','Add To Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-arrow-alt-circle-right');\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        }\n        else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        logger(selectedItem[FIELD_CreatedBy]);\n        if (selectedItem[FIELD_CreatedBy]) {\n            if (selectedItem[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        logger(item[FIELD_CreatedBy]);\n        if (item[FIELD_CreatedBy]) {\n            if (item[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === ExerciseTypesViewUsingContext.DOMConfig.extraActions[0].name) {\n            // add the exercise type the current workout\n            Controller.getInstance().addExerciseToCurrentWorkout(selectedItem);\n        }\n    }\n\n\n}\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'favouriteUsers',\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            dataSourceId: VIEW_NAME.favouriteUsers,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\nexport default FavouriteUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame, isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentUserSearches',\n            dataSourceId: VIEW_NAME.userSearch,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.number,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value}, isSameMongo)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSameMongo, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSame(item1,item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, this.compareItemsForEquality, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n\n\n\n}\n\nexport default UserSearchView;\n","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\n\nimport {WorkoutSummaryRenderer} from \"../renderer/WorkoutSummaryRenderer\";\n\n\nexport class WorkoutSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'workoutSummaryChart',\n            dataSourceId: VIEW_NAME.workoutSummary,\n        },\n        resultsElementType: 'canvas',\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElementType: '',\n            textElementClasses: '',\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(WorkoutSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new WorkoutSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {}\n\n}\n\n","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier,\n    RowPosition\n} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\n\nimport debug from 'debug';\nimport moment from \"moment\";\nimport {addDurations} from \"../../util/DurationFunctions\";\nimport {truncateString} from \"../../util/MiscFunctions\";\nimport Chart from 'chart.js/auto';\nimport App from \"../../App\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../ui-framework/alert/AlertManager\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../ui-framework/context/ContextualInformationHelper\";\nimport {CarouselViewRendererUsingContext} from \"../../ui-framework/view/renderer/CarouselViewRendererUsingContext\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../ui-framework/alert/AlertListener\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\n\nconst logger = debug('workouts-view');\n\ntype ExerciseSummary = {\n    weight:number,\n    distance:number,\n    duration:string\n}\n\ntype ChartRef = {\n    _id:string,\n    chart:Chart|null\n}\n\n\n\n\nexport class WorkoutsViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CarouselDOMConfig = {\n        itemsPerRow: {\n            small:1,\n            medium:2,\n            large: 3,\n            xlarge: 4\n        },\n        rowContainer: {\n            elementClasses: \"carousel-item\",\n            elementType: 'div',\n        },\n        activeRow: {\n            elementType: '',\n            elementClasses: 'active',\n        },\n        activeRowPosition:RowPosition.last,\n        row: {\n            elementClasses: \"row\",\n            elementType: 'div',\n        },\n        multipleItemsPerRowContainer: {\n            elementType: 'div',\n            elementClasses: 'col-sm-12 col-md-4 col-lg-3 mb-2',\n        },\n        actionContainer: {\n            elementType:'div',\n            elementClasses:'card-footer d-flex w-100 justify-content-end'\n        },\n        collectionConfig: {\n            viewConfig: {\n                resultsContainerId: 'workouts',\n                dataSourceId: VIEW_NAME.workouts,\n                drop: {\n                    acceptTypes: [DRAGGABLE.typeExerciseType],\n                    acceptFrom: [DRAGGABLE.fromExerciseTypes]\n                }\n            },\n            resultsElementType: 'div',\n            resultsClasses: 'card',\n            keyId: '_id',\n            keyType: KeyType.string,\n            modifiers: {\n                normal:'bg-light',\n                inactive:'bg-light',\n                active:'bg-light',\n                warning:'bg-light',\n            },\n            detail: {\n                containerClasses: 'card-body',\n                textElementType: 'div',\n                textElementClasses: '',\n                select: true,\n                delete: {\n                    buttonClasses:'btn btn-danger btn-circle btn-md',\n                    iconClasses:'fas fa-trash-alt text-white',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Delete this workout\"}]\n                },\n                background: {\n                    elementType:'div',\n                    elementClasses:'',\n                },\n            },\n            extraActions: [\n                {\n                    name: 'template',\n                    buttonText: '',\n                    buttonClasses: 'btn btn-primary btn-circle btn-md mr-2',\n                    iconClasses: 'fas fa-copy',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Add the exercises from this workout to the current workout.\"}]\n\n                },\n                {\n                    name: 'continue',\n                    buttonText: '',\n                    iconClasses:'text-white fas fa-clipboard-list',\n                    buttonClasses: 'btn btn-warning btn-circle btn-md mr-2',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Continue this current workout\"}]\n                }\n            ],\n\n        },\n    }\n\n    private chartRefs:ChartRef[];\n\n\n    constructor() {\n        super(WorkoutsViewUsingContext.DOMConfig.collectionConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new CarouselViewRendererUsingContext(this, this,WorkoutsViewUsingContext.DOMConfig);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.chartRefs = [];\n\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context:ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.workouts,'Workouts');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'template','Copy exercises to Current Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-copy');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'continue','Continue Current Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-clipboard-list');\n\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        if (item.exercises) {\n            item.exercises.forEach((exercise:any) => {\n                buffer += `<strong>${exercise.name}</strong>: `;\n                if (exercise.type === 'cardio') {\n                    buffer += `${exercise.distance} km in ${exercise.duration}`;\n                }\n                else {\n                    buffer += `${exercise.sets} sets of ${exercise.reps} reps in ${exercise.duration}`;\n                }\n                buffer += `<br/>`;\n            });\n        }\n        return buffer;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return (selectedItem.completed);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from,item);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n\n\n    private calculateExerciseSummary(item:any) : ExerciseSummary {\n        let result:ExerciseSummary = {\n            weight:0,\n            distance:0,\n            duration:'00:00'\n        };\n\n        if (item.exercises) {\n            for (let index = 0;index < item.exercises.length;index++) {\n                const exercise = item.exercises[index];\n                result.weight += exercise.weight;\n                result.distance += exercise.distance;\n                result.duration = addDurations(result.duration,exercise.duration);\n            }\n        }\n        return result;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let summary = this.calculateExerciseSummary(item);\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">`;\n        if (item.name) {\n            buffer+= `${item.name}</h5>`;\n            buffer += `<h6 class=\"card-subtitle\">${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h6>`;\n        }\n        else {\n            if (item.completed) {\n                buffer += `${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h5>`;\n            } else {\n                buffer += 'Current</h5>';\n            }\n\n        }\n        buffer += `<ul class=\"list-group list-group-flush\">`;\n        buffer += `<li class=\"list-group-item\"><strong>Duration:</strong> ${summary.duration}</li>`;\n        if (summary.weight > 0)   buffer += `<li class=\"list-group-item\"><strong>Total Weight:</strong> ${summary.weight}</li>`;\n        if (summary.distance > 0) buffer += `<li class=\"list-group-item\"><strong>Total Distance: </strong> ${summary.distance}</li>`;\n        buffer += `</ul>`;\n        containerEl.innerHTML = buffer;\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return (item.completed);\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        let result = false;\n        if (actionName === 'template') {\n            if ((item.completed) && (item.completed === true)) {\n                result = true;\n            }\n        }\n        if (actionName === 'continue') {\n            if (item.completed === false) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.inactive;\n        if (item.completed) {\n            if (item.completed !== true) {\n                result = Modifier.active;\n            }\n        }\n        return result;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n        /*\n        Remove a previous chart reference\n         */\n        let foundIndex = this.chartRefs.findIndex((ref:any) => ref._id === item._id);\n        if (foundIndex) {\n            //this.chartRefs[foundIndex].chart?.destroy();\n            logger(`Removing old chart reference for workout ${item._id}`);\n            this.chartRefs.splice(foundIndex,1);\n        }\n\n\n\n        logger(`Rendering chart for`);\n        logger(item);\n        // we are going to render a chart for the workout\n        if (item.exercises) {\n            const dataSourceKeyId = this.getDataSourceKeyId();\n            const resultDataKeyId = this.getIdForItemInNamedCollection(name, item);\n\n            let canvas = document.createElement('canvas');\n            //browserUtil.addAttributes(canvas,[{name:'style',value:'height:100%; width:100%'}]);\n            canvas.setAttribute(this.collectionUIConfig.keyId, resultDataKeyId);\n            canvas.setAttribute(dataSourceKeyId, this.collectionUIConfig.viewConfig.dataSourceId);\n            // chart labels are the exercise names (shortened to 10 characters)\n\n\n            let labels:string[] = [];\n            let data:any[] = [];\n            let bgColour:string[] = []\n            let brColour:string[] = [];\n\n            item.exercises.forEach((exercise: any) => {\n                labels.push(truncateString(exercise.name, 10));\n                if (exercise.type === 'cardio') {\n                    data.push(exercise.distance);\n                    bgColour.push(WorkoutsViewUsingContext.bgCardio);\n                    brColour.push(WorkoutsViewUsingContext.borderCardio);\n                }\n                else {\n                    data.push(exercise.weight);\n                    bgColour.push(WorkoutsViewUsingContext.bgStrength);\n                    brColour.push(WorkoutsViewUsingContext.borderStrength);\n                }\n            });\n            let chartData = {\n                labels: labels,\n                datasets: [{\n                    label:'Exercises',\n                    data: data,\n                    backgroundColor: bgColour,\n                    borderColor: brColour,\n                    borderWidth: 1\n                }]\n            };\n\n\n            const config = {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: false,\n                    animation:false,\n                    maintainAspectRatio:false,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                },\n            };\n\n            logger(config);\n            try {\n                // @ts-ignore\n                let ref:ChartRef = {_id:item._id, chart: new Chart(canvas, config)};\n                this.chartRefs.push(ref);\n                containerEl.appendChild(canvas);\n            }\n            catch (err) {\n                console.log(err);\n            }\n\n        }\n    }\n\n    private static bgStrength = 'rgba(255, 0, 0, 0.2)';\n    private static bgCardio = 'rgba(0, 50, 255, 0.2)';\n\n    private static borderStrength ='rgb(255, 50, 0)';\n    private static borderCardio = 'rgb(0, 50 , 255)';\n\n    public itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[0].name) {\n            // add the current list of exercises to the current workout\n            Controller.getInstance().addWorkoutExercisesToCurrentWorkout(selectedItem);\n\n        }\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[1].name) {\n            // continue the current workout\n            App.getInstance().showCurrentWorkout();\n\n\n        }\n    }\n\n\n}\n\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui-framework/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui-framework/ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private previousFieldValues: FieldNameValue[];\n\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {}\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui-framework/form/FormUITypeDefs\";\n\nexport const FIELD_ID:string = 'id';\nexport const FIELD_CreatedBy:string = 'createdBy';\nexport const FIELD_ModifiedBy:string = 'modifiedBy';\nexport const FIELD_CreatedOn:string = 'createdOn';\nexport const FIELD_ModifiedOn:string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc:string = 'Created By';\nexport const FIELD_ModifiedBy_Desc:string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc:string = 'Created On';\nexport const FIELD_ModifiedOn_Desc:string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    private constructor() {}\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition):DisplayOrder[] {\n        let result:DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef,index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        let objDef:DataObjectDefinition = {\n            id:id,\n            displayName:displayName,\n            fields:[]\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef:FieldDefinition = {\n                id:idFieldName,\n                isKey:true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName:'Id',\n                mandatory:true,\n                generator: {\n                    generator:ops,\n                    onModify:false,\n                    onCreation:true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    private addCreatedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_CreatedOn,FIELD_CreatedOn_Desc,FieldType.datetime,true,FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedOn,FIELD_ModifiedOn_Desc,FieldType.datetime,true,FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields,FIELD_CreatedBy,FIELD_CreatedBy_Desc,FieldType.userId,true,FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedBy,FIELD_ModifiedBy_Desc,FieldType.userId,true,FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields:FieldDefinition[],keyType:KeyType, id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        let fieldDef:FieldDefinition = {\n            id:id,\n            isKey:false,\n            idType: keyType,\n            type: type,\n            displayName:displayName,\n            mandatory:isMandatory,\n            displayOnly:false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation:true,\n                onModify:false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    private addNumericFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addStringFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners:DataObjectListener[];\n    protected isCreatingNew:boolean = false;\n    protected typeName:string;\n\n    protected constructor(typeName:string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener:DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    protected informListenersOfCreate(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName,dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName,dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName,dataObj));\n    }\n\n    public startNewObject():boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    protected abstract _startNewObject():boolean; // return false, if the creation was cancelled\n\n    public isCreatingNewObject():boolean {\n        return this.isCreatingNew;\n    }\n\n}","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui-framework/form/validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field:FieldDefinition,isCreate:boolean):string;\n}\n\n\n\n\nexport type FieldDefinition = {\n    id:string,\n    isKey:boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName:string,\n    mandatory:boolean,\n    displayOnly?:boolean,\n    description?:string,\n    collectionOfDataObjectId?:string,\n    generator?:{\n        onCreation:boolean,\n        onModify:boolean,\n        generator:FieldValueGenerator\n    },\n    dataSource?:FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id:string,\n    displayName:string,\n    fields:FieldDefinition[],\n    rules?:ValidationRule\n}\n\n\n\n","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport moment from \"moment\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    protected definitions:DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public findDefinition(id:string):DataObjectDefinition|null {\n        let result:DataObjectDefinition|null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result:DataObjectDefinition|null = this.findDefinition(id);\n        if (result) {\n            return result;\n        }\n        else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id,displayName,hasDataId,dataIdIsUUID,createModifierFields,idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition:DataObjectDefinition):any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch(fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef,fieldValue);\n                        break;\n                    }\n                }\n                                \n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id:string):any {\n        logger(`Creating instance for definition ${id}`);\n        let result:any = {};\n\n        const definition:DataObjectDefinition|null  = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?:string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item from ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        apiSMLogger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        apiSMLogger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) =>  {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (stateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                }\n                catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import {View} from \"./view/interface/View\";\n\nexport type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string,\n    attributes?:Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType:string,\n    elementAttributes?:Attribute[],\n    elementClasses:string,\n    innerHTML?:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type getIcons = (name:string,item:any) => string[];\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    quickDelete?:boolean,\n    icons?:getIcons,\n    badge?:BasicElement,\n    delete?:BasicButtonElement,\n    drag?:Draggable,\n    background?:BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string,\n    attributes?:Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId:string,\n    dataSourceId:string,\n    drop?:Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig:ViewDOMConfig,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    keyType: KeyType,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition:RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?:BasicElement,\n    actionContainer:BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event:AlertEvent):void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    private alertDiv:HTMLDivElement;\n    private alertTitle:HTMLHeadingElement;\n    private alertContent:HTMLParagraphElement;\n    private cancelButton:HTMLButtonElement;\n    private confirmButton:HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public startAlert(listener:AlertListener, title:string, content:string, context?:any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event:MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',confirmHandler);\n        }\n\n        const cancelHandler = (event:MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click',confirmHandler);\n        this.cancelButton.addEventListener('click',cancelHandler);\n    }\n\n}","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements CollectionViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View, config:SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type:string,item:any) => string;\nexport type getDescription = (type:string, item:any) => string;\n\nexport type actionHandler = (event:MouseEvent) => void;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName:string,\n    elementDefinition: BasicElement,\n    iconClasses?:string,\n    handler: actionHandler\n}\n\nexport type ContextDefinitionType = {\n    internalType:string,\n    displayName:string,\n    identifier:getIdentifier,\n    description:getDescription,\n    actions:ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source:string,\n    view?:View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source:string,\n    internalType:string,\n    displayName:string,\n    identifier:string,\n    description:string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function(name:string,item:any) { return ''; }\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE:string = 'context-source';\n    private static TYPE:string = 'context-type';\n    private static DISPLAYNAME:string = 'context-display-name';\n    private static IDENTIFIER:string = 'context-id';\n    private static DESCRIPTION:string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    private registry:ContextDefinition[] = [];\n    private menuDivEl:HTMLDivElement|null = null;\n    private menuContentEl:HTMLUListElement|null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click',this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement|null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement|null>document.getElementById('contextMenuItems');\n    }\n\n\n    private ensureInRegistry(source:string) :ContextDefinition{\n        let result:ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source:source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        }\n        else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    public addContextFromView(view:View,internalType:string,displayName:string):ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source:string, type:string, item:any, element:HTMLElement, addTooltip:boolean = false,placement:TogglePlacement = TogglePlacement.bottom):void {\n        const context:ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE,context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE,context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME,context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER,context.defaultType.identifier(type,item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION,context.defaultType.description(type,item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html:true});\n        }\n    }\n\n    private findContextFromElement(element:HTMLElement):ContextDetails|null {\n        // do we have context information in this element?\n        let result:ContextDetails|null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source,internalType: type,displayName: name,identifier: id,description: desc};\n        }\n        else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element:HTMLElement,contexts:ContextDetails[]):void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            let result:ContextDetails = {source: source,internalType: type,displayName: name,identifier: id,description: desc};\n            contexts.push(result);\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent,contexts);\n        }\n    }\n\n\n    public findContextFromEvent(event:Event): ContextDetails|null {\n        let result:ContextDetails|null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    private addContextActionToContext(context:ContextDefinition,action:ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    public addActionToContext(context:ContextDefinition,actionName:string, displayName:string, handler:actionHandler, icon?:string) {\n        let action:ContextTypeAction = {\n            actionName:actionName,\n            displayName:displayName,\n            handler:handler,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context,action);\n    }\n\n    private buildContextMenu(context:ContextDetails):boolean {\n        logger(`building context menu`);\n        let result = false;\n        // find the context for these details\n        const contextDef:ContextDefinition|null = this.ensureInRegistry(context.source);\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n                    let itemEl = document.createElement(action.elementDefinition.elementType);\n                    if (itemEl && this.menuContentEl) {\n                        browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                        browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                        itemEl.setAttribute(ContextualInformationHelper.SOURCE,context.source);\n                        itemEl.setAttribute(ContextualInformationHelper.TYPE,context.internalType);\n                        itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME,context.displayName);\n                        itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER,context.identifier);\n                        itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION,context.description);\n                        itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                        itemEl.addEventListener('click', (event:MouseEvent) => {\n                            this.hideContextMenu(event);\n                            action.handler(event);\n                        });\n                        itemEl.innerHTML = `${action.displayName}`;\n                        if (action.iconClasses) {\n                            itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                        }\n                        this.menuContentEl.appendChild(itemEl);\n                        logger('new menu element is ');\n                        logger(this.menuContentEl);\n                        result = true;\n                    }\n                });\n            }\n        }\n        else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    public handleContextMenu(event:MouseEvent):any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context:ContextDetails|null =  this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private hideContextMenu(event:MouseEvent):any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl,'d-none');\n        }\n    }\n\n    private showContextMenu(event:MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl,'d-none',false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\nimport {v4} from \"uuid\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form,FormListener,AlertListener,FieldListener{\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement|null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields:Field[] = [];\n    protected map:AttributeFieldMapItem[];\n    protected isInitialised:boolean = false;\n    protected hasChangedBoolean:boolean = false;\n    protected isDisplayOnly:boolean = false;\n    protected id:string;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error (`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        this.id = v4();\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged():boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return  this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate():void;\n    protected abstract _startCreate():void;\n    protected abstract _reset():void;\n    protected abstract _visible():void;\n    protected abstract _hidden():void;\n    protected abstract _initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean):void;\n    protected abstract _displayOnly():void;\n    protected abstract _isSameObjectAsDisplayed(dataObj:any):boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj:any,field:Field,currentValue:string|null):void;\n    public abstract getFormattedDataObject(): any;\n    protected abstract _saveFinishedOrAborted():void;\n    protected abstract _saveIsActive():void;\n\n\n    public initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder,hasDeleteButton,hideModifierFields);\n    }\n\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    protected abstract clearUnsavedMessage():void;\n\n    protected abstract setUnsavedMessage():void;\n\n\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef:FieldDefinition):FieldUIConfig|null|undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result:FieldUIConfig|null|undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index ++;\n            }\n        }\n        return result;\n    }\n\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            }\n            else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n        if (isVisible && this.isDisplayOnly) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            // @ts-ignore\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.hide);\n            if (response.ruleFailed) {\n                // @ts-ignore\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                // @ts-ignore\n                response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                }\n                else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.isDisplayOnly = true;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName,`Are you sure you want to delete this information?`,FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n\n    getId(): string {\n        return this.id;\n    }\n\n    getFieldFromDataFieldId(dataFieldId:string): Field | undefined {\n        let result:Field|undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n           result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event:AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch(event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n           field.clearReadOnly();\n        });\n    }\n\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n\n\n\n\n}","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport {AbstractField} from \"./field/AbstractField\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\nimport {isSame} from \"../../util/EqualityFunctions\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        }\n        else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef,displayOrder,hasDeleteButton,hideModifierFields);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup',(event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup',(event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            dlogger(`key up in form ${this.getName()}`);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result:string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId)||(currentObjId && !suppliedObjId)){\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            this.factoryElements.cancelButton.removeAttribute('disabled');\n            this.factoryElements.submitButton.removeAttribute('disabled');\n            // @ts-ignore\n            this.factoryElements.submitButton.innerHTML = this.uiDef.submitButton.buttonText;\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled','true');\n            }\n            this.factoryElements.cancelButton.setAttribute('disabled','true');\n            this.factoryElements.submitButton.setAttribute('disabled','true');\n        }\n    }\n\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // @ts-ignore\n                this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.buttonText;\n            }\n        }\n    }\n\n\n}","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target:Form,\n    formId:string,\n    eventType:FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event:FormEvent,formValues?:any):boolean; // return true to cancel the action\n}","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid:boolean,\n    message?:string,\n    resetOnFailure:boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field:FieldDefinition, currentValue:string|null):ValidationResponse;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field:FieldDefinition, currentValue:string):any;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field:FieldDefinition, currentValue:string):string|null;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field:FieldDefinition, currentValue:string):string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field:FieldDefinition, formValues:string[]):boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup\n}\n\nexport type FieldLabel = {\n    label:string,\n    attributes?:Attribute[],\n    classes?:string\n}\n\nexport type DescriptionText = {\n    message:string,\n    elementType:string,\n    elementClasses:string,\n}\n\nexport type DisplayOrder = {\n    fieldId:string,\n    displayOrder:number\n}\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder:number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?:{\n        container?:BasicElement,\n        label?: FieldLabel,\n        element:BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions\n}\n\nexport type FieldGroup = {\n    containedBy?:BasicElement,\n    fields:FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id:string,\n    displayName:string,\n    classes?:string,\n    unsavedChanges:BasicElement,\n    fieldGroups:FieldGroup[],\n    buttonsContainedBy?:BasicElement\n    deleteButton?:BasicButtonElement,// should be clickable\n    cancelButton:BasicButtonElement,// should be clickable\n    submitButton:BasicButtonElement  // should be clickable\n    activeSave?:string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId:string,\n    attributeId:string\n}\n\nexport const DATA_ID_ATTRIBUTE:string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId,field, newValue));\n\n            }\n        }\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string, fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement:HTMLInputElement):string{\n        let newValue:string|null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        }\n        else {\n            return '';\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class ValidationEventHandler {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement:HTMLElement,isValid:boolean, value:string, message:string|undefined = undefined,resetOnFailure:boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId,field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement:HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement,validationResp.isValid,value,validationResp.message,validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    private constructor() {\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements:HTMLInputElement[]|null = null):void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners,subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                   subElement.addEventListener('blur',eventHandler);\n                });\n\n            }\n            else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker( );\n            $(fieldElement).datepicker( \"option\", \"dateFormat\",'dd/mm/yy' );\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n        }\n    {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements:HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners,subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container:radioGroupElement,\n            radioButtons:subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields:HTMLTextAreaElement[],\n    selectFields:HTMLSelectElement[],\n    radioButtonGroups: {\n        container:HTMLElement,\n        radioButtons:HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    private constructor() {}\n\n    private createFormButton(form:Form,formConfig:FormUIDefinition,formListeners:FormListener[],buttonDef:BasicButtonElement,eventType:FormEventType):HTMLButtonElement {\n        let buttonEl:HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl,buttonDef.buttonClasses);\n        buttonEl.setAttribute('id',`${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl,buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click',(event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent:FormEvent = {\n                target:form,\n                formId:formConfig.id,\n                eventType:eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n\n    public createFormElements(form:Form, formListeners:FormListener[],formConfig:FormUIDefinition,fieldListeners:FieldListener[]):FormFactoryResponse {\n        let formEl:HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id',formConfig.id);\n        formEl.setAttribute('name',formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl,formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements:HTMLInputElement[] = [];\n        let formTAElements:HTMLTextAreaElement[] = [];\n        let formRBGElements:{\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n            }[] = [];\n        let formSelectElements:HTMLSelectElement[] = [];\n\n        let unsavedMessage:HTMLElement = document.createElement(formConfig.unsavedChanges.elementType);\n        browserUtil.addRemoveClasses(unsavedMessage,formConfig.unsavedChanges.elementClasses);\n        if (formConfig.unsavedChanges.elementAttributes) browserUtil.addAttributes(unsavedMessage,formConfig.unsavedChanges.elementAttributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group:FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl,group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl,group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field:FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer:HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer,formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer,formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            }\n            else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl:HTMLButtonElement|undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form,formConfig,formListeners,formConfig.deleteButton,FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.cancelButton,FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.submitButton,FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result:FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage:unsavedMessage,\n            fields: formInputElements,\n            selectFields:formSelectElements,\n            radioButtonGroups:formRBGElements,\n            textFields:formTAElements,\n            deleteButton:deleteButtonEl,\n            cancelButton:cancelButtonEl,\n            submitButton:submitButtonEl\n        }\n\n        return result;\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden:boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        }\n        else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId,this.definition, value));\n        }\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        }\n        else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,false,'',message,false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId,this.definition,this.getValue(),message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = ''+newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl:HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0;index < selectEl.options.length;index++) {\n                        // @ts-ignore\n                        const option:HTMLOptionElement = selectEl.options.item(index);\n                        logger(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            logger(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    logger(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue():void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId:string, field: FieldDefinition, currentValue: string, message: string): void {}\n    valueChanged(formId:string, field: FieldDefinition, newValue: string | null): void {}\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style','display:none');\n                }\n\n            }\n            else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,true,'');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            }\n            else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly','true');\n        this.element.setAttribute('disabled','true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly','true');\n                subElement.setAttribute('disabled','true');\n            });\n        }\n    }\n}\n\n","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {ComparisonType, ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if ((condition.values) && !(condition.sourceDataFieldId)) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if ((condition.sourceDataFieldId) && (!condition.values)) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: []\n            }\n            formRuleSet.rules.push(convertedRule);\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits:string[] = values.split(',');\n            let foundInValue:boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed:false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field,values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                // only need messages for invalid responses\n                response.message = ruleCheck.message;\n                return false;\n            }\n            flogger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                flogger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string,includeSourceFields:boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    }\n                    else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId:string, field:FieldDefinition,onlyRulesOfType:ConditionResponse|null) : RuleCheck {\n        logger(`Checking rules for form ${formId}, data field ${field.id} of type ${onlyRulesOfType}`);\n        // which rules apply?\n        let rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,false);\n\n        let result:RuleCheck = {\n            ruleFailed:false\n        }\n\n        // get the rules for the field, filtered by the condition response type\n        if (onlyRulesOfType) {\n            let ruleSubset:_ValidationRule[] = [];\n            rules.forEach((rule) => {\n               if (rule.response === onlyRulesOfType) {\n                   ruleSubset.push(rule);\n               }\n            });\n            rules = ruleSubset;\n        }\n\n\n\n        rules.forEach((rule) => { // we only want rules that make a field hidden\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                flogger(`Rule failed for form ${formId} with field ${field.displayName} with message ${response.message}`);\n                result.ruleFailed = true;\n                result.message = response.message;\n            }\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n\n}","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n};\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?:string,\n    values?:string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId:string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {DisplayOrder, FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    private constructor() {\n    }\n\n\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition,displayOrders:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation:RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef,index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.duration):{\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    }\n                    else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder:DisplayOrder|undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue:number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder:displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                            validator: fieldOperations,\n                            messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                elementType: 'div',\n                elementClasses: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                elementAttributes: [{name:'style',value:'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            },\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            },\n            activeSave:'<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;',\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a,b) => { return (a.displayOrder - b.displayOrder);})\n\n        });\n\n        if (hasDeleteButton) {\n            formConfig.deleteButton = {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller:DetailViewListener;\n\n    constructor(controller:DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view:DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view,dataObj);\n    }\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view,dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view,dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view,dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback:any;\n\n    constructor(callback:any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this,'Discard Changes','There are unsaved changes.  Discard?',{});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener,DetailViewListener{\n    protected parentView:CollectionView;\n    protected children:DetailView[] = [];\n    protected delegate:ChildViewListenerDelegate;\n\n    constructor(typeName:string, parentView:CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView:DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise():void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('',selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n           childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection:boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew:boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../Controller\";\nimport {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons:HTMLInputElement[] = [];\n\n    public constructor() {}\n\n\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        }\n        else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options:ValueOption[];\n    private listeners:FieldValueOptionsListener[];\n\n    constructor(options:ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name:string,value:string) {\n        this.options.push({name,value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId:string,\n    dataSource:string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate{\n    protected view:CollectionView;\n    protected selectedItem:any|null = null;\n    protected eventForwarder:CollectionViewListenerForwarder;\n\n    constructor (view:CollectionView,forwarder:CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    protected getItemContext(event:Event):ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context:ItemContext = {\n            itemId:itemId,\n            dataSource:dataSource\n        }\n\n        return context;\n    }\n\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n    \n}","import {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandlerDelegate, ItemContext} from \"./CollectionViewEventHandlerDelegate\";\nimport {ContextDetails, ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\n\n\n\nexport class CollectionViewEventHandlerDelegateUsingContext extends CollectionViewEventHandlerDelegate{\n\n    constructor (view:CollectionView,forwarder:CollectionViewListenerForwarder) {\n        super(view,forwarder);\n    }\n\n    protected getItemContext(event:Event):ItemContext {\n\n        const contextDetail:ContextDetails|null = ContextualInformationHelper.getInstance().findContextFromEvent(event);\n\n        let context:ItemContext;\n\n        if (contextDetail) {\n            context = {\n                itemId:contextDetail.identifier,\n                dataSource:contextDetail.source\n            }\n        }\n        else {\n            context = {\n                itemId:'',\n                dataSource:this.view.getName(),\n            }\n        }\n\n\n        return context;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {\n    CollectionViewDOMConfig,\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier\n} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView,CollectionViewEventHandler{\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this,forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from,item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n\n}\n","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener,CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName:string) {\n        super(uiConfig,stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName,this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render():void {\n        this.updateViewForNamedCollection(this.collectionName,this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show():void {}\n    hidden():void{}\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemAction(view:View, actionName:string, selectedItem:any):void{}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, this.compareItemsForEquality, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n\n\n}\n","import {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    ViewDOMConfig\n} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl:HTMLElement|null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n    abstract show(): void;\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n}\n","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem:any|null = null;\n    protected renderer:DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer:DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    public getItemId(name:string,item:any) {\n        return '';\n    }\n\n    public getItemDescription(name:string,item:any): string {\n        return '';\n    }\n\n\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        }\n        else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item:any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n    public hasPermissionToUpdateItem(item:any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName,selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[],hasDeleteButton:boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder,hasDeleteButton,hideModifierFields)\n    }\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    Modifier,\n    RowPosition,\n    SCREEN_WIDTH_LARGE,\n    SCREEN_WIDTH_MEDIUM,\n    SCREEN_WIDTH_SMALL\n} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper, TogglePlacement} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('carousel-renderer');\n\nexport class CarouselViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected config: CarouselDOMConfig;\n\n    private lastRenderedContainer:HTMLElement|null = null;\n    private lastRenderedCollectionName:string|null = null;\n    private lastRenderedCollection:any|null = null;\n    private previousWindowWidth:number = 0;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler, config: CarouselDOMConfig) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.config = config;\n    }\n\n    onDocumentLoaded(): void {\n        // we need to track window resizing\n        this.previousWindowWidth = window.innerWidth;\n\n        window.addEventListener('resize',(event) => {\n            const newWindowWidth = window.innerWidth;\n            let reRenderRequired:boolean = false;\n            if (newWindowWidth < this.previousWindowWidth) {\n                if (this.previousWindowWidth > SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth <= SCREEN_WIDTH_LARGE) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to large`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to medium`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth <= SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to small`);\n                    }\n                }\n            }\n            else {\n                if (this.previousWindowWidth <= SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth > SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        avLogger(`window increased and is now larger than small`);\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                        avLogger(`window increased and is now larger than medium`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth > SCREEN_WIDTH_LARGE) {\n                        avLogger(`window increased and is now larger than large`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n            }\n            this.previousWindowWidth = newWindowWidth;\n            if (this.lastRenderedContainer && this.lastRenderedCollection && this.lastRenderedCollectionName && reRenderRequired) {\n                this.setDisplayElementsForCollectionInContainer(this.lastRenderedContainer,this.lastRenderedCollectionName,this.lastRenderedCollection);\n            }\n        });\n\n\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n\n        avLogger(`view ${this.view.getName()}: creating carousel item`);\n        avLogger(item);\n\n        const collectionConfig = this.view.getCollectionUIConfig();\n\n\n        let childEl: HTMLElement = document.createElement(collectionConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, collectionConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, collectionConfig.resultsElementAttributes);\n\n\n        if (collectionConfig.detail.background) {\n            let backgroundEl = document.createElement(collectionConfig.detail.background.elementType);\n            browserUtil.addRemoveClasses(backgroundEl, collectionConfig.detail.background.elementClasses);\n            browserUtil.addAttributes(backgroundEl, collectionConfig.detail.background.elementAttributes);\n            childEl.appendChild(backgroundEl);\n            this.view.renderBackgroundForItemInNamedCollection(backgroundEl, collectionName, item);\n        }\n\n\n        // the content may be structured\n        let textEl = childEl;\n        if (collectionConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, collectionConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(collectionConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, collectionConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (collectionConfig.extraActions || collectionConfig.detail.delete) {\n                let buttonsEl = document.createElement(this.config.actionContainer.elementType);\n                browserUtil.addRemoveClasses(buttonsEl, this.config.actionContainer.elementClasses);\n\n                contentEl.appendChild(buttonsEl);\n\n\n                if (collectionConfig.extraActions) {\n                    collectionConfig.extraActions.forEach((extraAction) => {\n                        const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                        if (hasPermissionForAction) {\n\n                            let action: HTMLElement = document.createElement('button');\n                            action.setAttribute('type', 'button');\n                            browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                            browserUtil.addAttributes(action,extraAction.attributes);\n                            if (extraAction.buttonText) {\n                                action.innerHTML = extraAction.buttonText;\n                            }\n                            if (extraAction.iconClasses) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                                iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                                action.appendChild(iconEl);\n                            }\n                            action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                            action.addEventListener('click', (event) => {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                this.eventHandler.eventActionClicked(event);\n                            });\n                            buttonsEl.appendChild(action);\n                        }\n                    });\n                }\n                if (collectionConfig.detail.delete && collectionConfig && canDeleteItem) {\n                    let deleteButtonEl: HTMLElement = document.createElement('button');\n                    deleteButtonEl.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(deleteButtonEl, collectionConfig.detail.delete.buttonClasses);\n                    browserUtil.addAttributes(deleteButtonEl, collectionConfig.detail.delete.attributes);\n                    if (collectionConfig.detail.delete.buttonText) {\n                        deleteButtonEl.innerHTML = collectionConfig.detail.delete.buttonText;\n                    }\n                    if (collectionConfig.detail.delete.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.detail.delete.iconClasses);\n                        deleteButtonEl.appendChild(iconEl);\n                    }\n                    deleteButtonEl.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventDeleteClickItem(event);\n                    });\n                    buttonsEl.appendChild(deleteButtonEl);\n                }\n\n            }\n\n            childEl.appendChild(contentEl);\n\n            if (collectionConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (collectionConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        const displayText = this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n        // add icons\n\n\n        // add modifiers for patient state\n        if (collectionConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal);\n                    if (collectionConfig.icons && collectionConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active);\n                    if (collectionConfig.icons && collectionConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive);\n                    if (collectionConfig.icons && collectionConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating carousel results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // need to break the items up by row, and the last row is active (assumes increasing time order)\n        const numberOfResults = newState.length;\n\n        // number of items per row depends on view port\n        let itemsPerRow = this.config.itemsPerRow.xlarge;\n        if (window.innerWidth <= SCREEN_WIDTH_LARGE) {\n            itemsPerRow = this.config.itemsPerRow.large;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_MEDIUM) {\n           itemsPerRow = this.config.itemsPerRow.medium;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_SMALL) {\n            itemsPerRow = this.config.itemsPerRow.small;\n        }\n\n\n\n        const numberOfRows = Math.ceil(numberOfResults / itemsPerRow);\n        avLogger(`view ${this.view.getName()}: creating carousel with number of results per row of ${itemsPerRow} with rows ${numberOfRows}`);\n        for (let rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {\n            // create the row\n            let rowContainerEl = document.createElement(this.config.rowContainer.elementType);\n            browserUtil.addRemoveClasses(rowContainerEl, this.config.rowContainer.elementClasses);\n            browserUtil.addAttributes(rowContainerEl, this.config.rowContainer.elementAttributes);\n            //browserUtil.addAttributes(rowContainerEl,[{name:'style',value:'display:block'}]);\n\n            let rowEl = document.createElement(this.config.row.elementType);\n            browserUtil.addRemoveClasses(rowEl, this.config.row.elementClasses);\n            browserUtil.addAttributes(rowEl, this.config.row.elementAttributes);\n            rowContainerEl.appendChild(rowEl);\n\n            // if this the active row?\n            if (((rowIndex === 0) && this.config.activeRowPosition === RowPosition.first) ||\n                ((rowIndex === (numberOfRows - 1)) && this.config.activeRowPosition === RowPosition.last)) {\n                browserUtil.addRemoveClasses(rowContainerEl, this.config.activeRow.elementClasses);\n                browserUtil.addAttributes(rowContainerEl, this.config.activeRow.elementAttributes);\n            }\n\n            let itemIndex = rowIndex * itemsPerRow;\n\n            while (itemIndex < ((rowIndex + 1) * itemsPerRow) && (itemIndex < numberOfResults)) {\n                avLogger(`rowIndex ${rowIndex} item index ${itemIndex}`);\n                const item = newState[itemIndex];\n\n\n                let itemContainerEl = rowEl;\n                if (this.config.multipleItemsPerRowContainer) {\n                    itemContainerEl = document.createElement(this.config.multipleItemsPerRowContainer.elementType);\n                    browserUtil.addRemoveClasses(itemContainerEl, this.config.multipleItemsPerRowContainer.elementClasses);\n                    browserUtil.addAttributes(itemContainerEl, this.config.multipleItemsPerRowContainer.elementAttributes);\n                    rowEl.appendChild(itemContainerEl);\n                }\n\n                const itemEl = this.createDisplayElementForCollectionItem(collectionName, item);\n                itemContainerEl.appendChild(itemEl);\n\n                ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(),collectionName,item,itemEl,true,TogglePlacement.bottom);\n                itemEl.addEventListener('contextmenu',ContextualInformationHelper.getInstance().handleContextMenu);\n\n                itemIndex++;\n            }\n\n\n            containerEl.appendChild(rowContainerEl);\n\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        this.lastRenderedContainer = containerEl;\n        this.lastRenderedCollectionName = collectionName;\n        this.lastRenderedCollection = newState;\n\n    }\n\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer,FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem:boolean;\n    protected containerId: string;\n    protected forwarder:DetailViewListenerForwarder|null;\n    protected view:DetailView|null;\n    protected permissionChecker:ObjectPermissionChecker;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker:ObjectPermissionChecker) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view:DetailView):void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean): void {\n        if (this.form) this.form.initialise(displayOrder,hasDeleteButton,hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly():boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item:any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item:any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view,this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view,this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view,formattedObj);\n                    }\n                    else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view,formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {EXTRA_ACTION_ATTRIBUTE_NAME, Modifier, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action,extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                            iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        action.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl,uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons:string[] = uiConfig.detail.icons(collectionName,item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {}\n\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('list-view-renderer-with-context');\n\nexport class ListViewRendererUsingContext implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action,extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl,uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n\n        // add the key ids for selection\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons:string[] = uiConfig.detail.icons(collectionName,item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(),collectionName,item,childEl,true);\n            childEl.addEventListener('contextmenu',ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {}\n\n}","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x:number, y:number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export function addDurations(duration1:string, duration2:string):string {\n    const durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid:boolean = durationRegexp.test(duration1);\n    const duration2Valid:boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components:string[] = duration1.split(':');\n        const duration2Components:string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        let sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0)?sumHours + ':':''}${(sumMinutes < 10)?'0'+sumMinutes:sumMinutes}:${(sumSeconds < 10)?'0'+sumSeconds:sumSeconds}`\n    }\n    else {\n        return '00:00';\n    }\n}","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1:any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","export function truncateString(str:string, num:number):string {\n    // If the length of str is less than or equal to num\n    // just return str--don't truncate it.\n    if (str.length <= num) {\n        return str\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...'\n}","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["localStorage","debug","console","logger","App","getInstance","Controller","window","getCurrentUser","setupNavigationItemHandling","document","NAVIGATION","setupUserSearchViews","recentSearches","containerId","UserSearchSidebar","favouriteUsers","favourites","blockedUsers","blocked","setupChatViews","ChatRoomsSidebar","chatLogs","chatLogView","chatLog","onDocumentLoad","WorkoutSummarySidebar","container","ContextualInformationHelper","hideAllSideBars","handleShowUserSearch","event","API_Config","handleShowWorkoutSummary","handleShowCurrentWorkout","handleShowExerciseTypes","handleShowChat","countChanged","buffer","newCount","addingExerciseToCurrentWorkout","STATE_NAMES","showCurrentWorkout","$","Decorator","users","exerciseTypes","workouts","recentUserSearches","login","showMyWorkouts","userSearchId","exerciseTypesId","chatId","workoutSummary","currentWorkout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","userSearch","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","idField","aggregateSM","AggregateStateManager","memorySM","MemoryBufferStateManager","asyncSM","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","workoutDefinition","exercisesFieldDefinition","KeyType","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","getServerAPIURL","create","delete","update","addExerciseToCurrentWorkout","copyOfExercise","v4","addWorkoutExercisesToCurrentWorkout","workout","CreatedByPermissionChecker","hasPermissionToUpdateItem","item","hasPermissionToDeleteItem","DefaultPermissionChecker","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","message","changeUser","_id","user","username","stateObj","NotificationManager","ValidationHelper","rule","targetDataFieldId","response","ConditionResponse","conditions","sourceDataFieldId","comparison","ComparisonType","values","ValidationManager","avLogger","WorkoutSummaryRenderer","currentChart","isStrength","red","blue","green","newColour","Math","transparency","background","border","sevenWorkouts","newState","exerciseNames","exerciseBG","exerciseBR","labels","label","moment","exerciseName","exercise","foundIndex","colours","datasets","exerciseType","itemBG","itemBR","data","bg","br","didntFindExercise","dataset","backgroundColor","borderColor","borderWidth","order","lineDataSet","type","chartData","config","options","responsive","animation","maintainAspectRatio","scales","y","beginAtZero","SidebarViewContainer","SidebarPrefs","id","expandedSize","location","SidebarLocation","right","SidebarContainers","CurrentWorkoutSidebar","list","detail","ExerciseTypesSidebar","left","bottom","vLogger","BlockedUserView","AbstractStatefulCollectionView","DOMConfig","viewConfig","resultsContainerId","dataSourceId","drop","acceptFrom","acceptTypes","resultsElementType","resultsElementAttributes","resultsClasses","keyId","keyType","modifiers","normal","inactive","active","warning","icons","containerClasses","textElementType","textElementClasses","select","quickDelete","buttonClasses","iconClasses","canDeleteItem","documentLoaded","itemDeleted","selectedItem","itemSelected","itemDragStarted","itemAction","hideRequested","showRequested","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleFavouriteUsersChanged","handleBlockedUsersChanged","renderDisplayForItemInNamedCollection","containerEl","getSecondaryModifierForItemInNamedCollection","Modifier","getIdForItemInNamedCollection","updateViewForNamedCollection","itemDropped","droppedItem","itemDeselected","canSelectItem","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getDisplayValueForItemInNamedCollection","compareItemsForEquality","getModifierForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","handleUserDrop","draggedObjectJSON","draggedObject","JSON","handleChatLogUpdated","handleAddMessage","messageContent","sentMessage","Priority","messageEl","browserUtil","fastSearchEl","eventUserSelected","ui","addChatMessage","chatMessageEl","messageSenderEl","contentEl","reRenderChatMessages","renderChatLog","handleChatLogsUpdated","handleChatStarted","leaveChat","checkCanComment","clearChatLog","myUsername","fastSearchValues","newValue","searchValue","source","disabled","minLength","handleOfflineMessagesReceived","handleInvitationDeclined","handleNewInviteReceived","getName","hidden","getDataSourceKeyId","getUIConfig","render","show","getItemDescription","getItemId","csLogger","ChatLogsView","selectedChatLog","badge","elementType","elementClasses","isSameRoom","updateStateManager","selectChatRoom","room","CurrentWorkoutCompositeView","workoutDef","workoutNameEl","exerciseTypeDetailRenderer","exerciseTypeDetailView","viewLinker","startingDisplayOrder","detailForm","createExerciseType","managerName","itemRemoved","itemNewValue","CurrentWorkoutExercisesView","attributes","isSameMongo","ExerciseTypesCompositeView","ExerciseTypesViewUsingContext","drag","from","extraActions","context","actionName","vLoggerDetail","FavouriteUserView","favUsers","roomName","UserSearchView","fastSearchInputId","dataLimit","isSame","WorkoutSummaryView","hasPermissionToActionItemInNamedCollection","renderBackgroundForItemInNamedCollection","WorkoutsViewUsingContext","itemsPerRow","small","medium","large","xlarge","rowContainer","activeRow","activeRowPosition","RowPosition","row","multipleItemsPerRowContainer","actionContainer","collectionConfig","buttonText","weight","distance","duration","index","addDurations","summary","ref","dataSourceKeyId","resultDataKeyId","canvas","bgColour","brColour","truncateString","chart","bgStrength","bgCardio","borderStrength","borderCardio","flogger","vlogger","glogger","rlogger","BasicFieldOperations","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","setSubElements","formatValue","field","currentValue","parseInt","parsed","parseFloat","isNaN","isValidValue","isValid","resetOnFailure","fieldValue","renderValue","generate","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","dataObjDef","fieldId","fieldDef","displayOrder","createModifierFields","idFieldName","objDef","displayName","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","isMandatory","description","datasource","displayOnly","DataObjectController","isCreatingNew","listener","definition","fieldOps","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","apiFetchJSONWithPost","request","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","callback","apiUtil","dlLogger","DownloadManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","url","RequestType","params","variables","associatedStateName","state","addQLMutationRequest","mutation","addApiRequest","requestId","managerRequest","originalRequest","queueType","callbackForQueueRequest","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","element","initiateFetchForQueueItem","BootstrapNotification","Notification","topOffset","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","setTimeout","NotificationFactory","createNotification","notificationFactory","notification","notificationNode","parentEl","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","receiveUserList","favourite","savedLogs","receiveJoinedRoom","InviteType","log","created","joinDateTime","priority","receivedLeftRoom","receiveInvitation","invite","didChatAlreadyExist","happyToProceed","receiveLogin","receiveLogout","receiveDecline","receiveMessage","wasOffline","receiveQueuedInvites","invites","receiveQueuedMessages","messages","joinChat","logout","declineInvite","sendInvite","ChatRoom","requiresAcceptDecline","subject","sendMessage","Normal","attachment","sent","lastViewed","numOfNewMessages","foundLog","unreadCount","notLogger","doNotDisturb","dontDisturbMe","isBlackedListed","isFavourited","displayMessage","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","AbstractStateManager","forceSaves","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","stateEventType","StateChanged","previousObjValue","addChangeListenerForName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","updateItemInState","aggLogger","filters","mWF","manager","stateManager","managerWithFilters","sm","_addItemToState","_removeItemFromState","_updateItemInState","filter","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","_getState","_ensureStatePresent","_addNewNamedStateToStorage","_replaceNamedStateInStorage","_saveState","lsLogger","BrowserStorageStateManager","configuration","useLocalStorage","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","msManager","apiSMLogger","results","setCompletedRun","runsComplete","jsonRequest","identifier","Error","status","StateChangedDelegate","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","cancelHandler","sbvcLogger","addView","viewContainer","view","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","TogglePlacement","defaultIdentifier","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","registry","menuDivEl","menuContentEl","defaultType","internalType","actions","addTooltip","placement","html","desc","parent","contexts","target","action","handler","elementDefinition","elementAttributes","icon","contextDef","itemEl","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","valueChanged","failedValidation","hideModifierFields","fieldGroup","uiConfig","formEvent","formId","FormEventType","RESETTING","shouldCancelChange","CANCELLED","allFieldsValid","SAVE_ABORTED","formattedDataObject","SAVED","getId","getFieldFromDataFieldId","mapItem","completed","CANCELLING_ABORTED","DELETED","DELETE_ABORTED","clearReadOnly","setReadOnly","isDisplayingItem","isReadOnly","BasicFormImplementation","factoryElements","subElements","dataId","fieldEl","fieldUIConfig","UIFieldType","attributeId","BootstrapFormConfigHelper","FormElementFactory","rbg","getFormattedDataObject","formattedResult","isSameObject","currentObjId","suppliedObjId","FormMode","DATA_ID_ATTRIBUTE","EditingEventListener","handleEvent","fieldElement","RenderingEventListener","processRendering","ValidationEventHandler","undefined","validationElementTarget","errorMessageDiv","errorMessageEl","processValidation","subElement","validationResp","DefaultFieldOptionsListener","optionsChanged","subEls","FieldInputElementFactory","fieldConfig","eventHandler","errorMessageDivEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","radioButtons","buttonEl","buttonDef","formConfig","iconEl","formEl","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","group","buttonContainer","deleteButtonEl","cancelButtonEl","submitButtonEl","form","selectFields","radioButtonGroups","textFields","deleteButton","cancelButton","submitButton","AbstractField","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","validator","setValue","selectEl","selectedIndex","option","reset","clearValue","validate","hide","setValid","InputField","RadioButtonGroupField","SelectField","TextAreaField","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","sourceType","targetType","formRule","formRuleSet","rules","ruleFailed","targetValue","sourceValue","check","splits","foundInValue","ruleCheck","ruleSet","ruleSubset","failedResponses","fieldOperations","rbgFieldOperation","fieldUIConfigs","displayOrderValue","renderer","formatter","classes","messageDisplay","validClasses","invalidClasses","rows","cols","containedBy","fieldGroups","unsavedChanges","innerHTML","buttonsContainedBy","activeSave","a","b","ChildViewListenerDelegate","cancelled","deletedItem","saveNewItem","updateItem","ChangeDataObjectDelegate","LinkedCollectionDetailController","children","parentView","childView","canProceedWithSelection","confirm","canProceedWithCreateNew","RBGFieldOperations","radioButton","SimpleValueDataSource","addListener","getOptions","CollectionViewEventHandlerDelegate","itemId","dataSource","AbstractView","getDragData","compareWith","eventStartDrag","eventClickItem","shouldSelect","eventDeleteClickItem","shouldDelete","eventActionClicked","CollectionViewEventHandlerDelegateUsingContext","contextDetail","CollectionViewListenerForwarder","DetailViewListenerForwarder","ViewListenerForwarder","avLoggerDetails","AbstractCollectionView","forwarder","getCollectionUIConfig","addEventCollectionListener","setRenderer","getItemInNamedCollection","DATA_SOURCE","droppedObjectType","droppedObjectFrom","acceptType","objectType","DetailViewImplementation","currentItem","addEventDetailListener","CarouselViewRendererUsingContext","lastRenderedContainer","lastRenderedCollectionName","lastRenderedCollection","previousWindowWidth","newWindowWidth","reRenderRequired","childEl","backgroundEl","textEl","buttonsEl","hasPermissionForAction","extraAction","displayText","modifier","secondModifier","numberOfResults","numberOfRows","rowIndex","rowContainerEl","rowEl","itemIndex","itemContainerEl","FormDetailViewRenderer","setEventForwarder","displayItemReadonly","handleActionItem","formattedObj","ListViewRenderer","imgEl","badgeValue","badgeEl","ListViewRendererUsingContext","BrowserUtil","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classValue","addAttributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","duration1Valid","duration2Valid","duration1Components","duration1","duration2Components","duration2","carry","duration1Seconds","duration2Seconds","sumSeconds","duration1Minutes","duration2Minutes","sumMinutes","duration1Hours","duration2Hours","sumHours","item1","item2","str"],"sourceRoot":""}