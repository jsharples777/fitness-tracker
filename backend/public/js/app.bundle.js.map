{"version":3,"file":"app.bundle.js","mappings":"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EAAf,CAAeA,CAAf;AACA,MAAIK,OAAO,GAAGL,QAAQ,CAARA,MAAAA,CAAAA,CAAAA,EAAd,CAAcA,CAAd;AAEA,MAAIM,QAAQ,GAAGC,kBAAkB,CAAjC,MAAiC,CAAjC;AACA,MAAIC,UAAU,GAAGD,kBAAkB,CAAnC,QAAmC,CAAnC;AACA,MAAIE,SAAS,GAAGF,kBAAkB,CAAlC,OAAkC,CAAlC;;AAEA,MAAKD,QAAQ,GAAT,GAACA,IAAoBE,UAAU,GAA/B,GAACF,IAA0CG,SAAS,GAAxD,KAAiE;AAC7D5rC,IAAAA,MAAM,GAANA,IAAAA;AACH;;AAED;AACH;;;;;;;;;;ACvnSA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WC5BA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;;;;;WCJA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/CreatedByPermissionChecker.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/component/helper/ValidationHelper.ts","webpack://template-feo-react-babel/./src/component/renderer/WorkoutSummaryRenderer.ts","webpack://template-feo-react-babel/./src/component/sidebar/CurrentWorkoutSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/WorkoutSummarySidebar.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutCompositeView.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutExercisesView.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesCompositeView.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesViewUsingContext.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutSummaryView.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutsViewUsingContext.ts","webpack://template-feo-react-babel/./src/framework/CommonTypes.ts","webpack://template-feo-react-babel/./src/framework/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/framework/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/framework/network/CallbackRegistry.ts","webpack://template-feo-react-babel/./src/framework/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/framework/network/OfflineManager.ts","webpack://template-feo-react-babel/./src/framework/network/Poller.ts","webpack://template-feo-react-babel/./src/framework/network/Types.ts","webpack://template-feo-react-babel/./src/framework/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/framework/notification/Notification.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/framework/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/framework/security/SecurityManager.ts","webpack://template-feo-react-babel/./src/framework/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/framework/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/framework/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/framework/socket/Types.ts","webpack://template-feo-react-babel/./src/framework/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/framework/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/IndexedDBStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/framework/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/framework/state/StateManager.ts","webpack://template-feo-react-babel/./src/framework/ui/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/framework/ui/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/BlockedUserView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatLogsView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/ChatTypes.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/framework/ui/chat/UserSearchView.ts","webpack://template-feo-react-babel/./src/framework/ui/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/framework/ui/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/framework/ui/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/form/DefaultFormFieldPermissionChecker.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/framework/ui/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/ColourInputField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/InputField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationHelperFunctions.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/framework/ui/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/ColourEditor.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/framework/ui/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/framework/ui/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/CarouselViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/framework/ui/view/renderer/ListViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/framework/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/framework/util/DurationFunctions.ts","webpack://template-feo-react-babel/./src/framework/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/framework/util/MiscFunctions.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/make namespace object","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/before-startup","webpack://template-feo-react-babel/webpack/startup","webpack://template-feo-react-babel/webpack/after-startup"],"sourcesContent":["//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\n\n\n\n\n\nimport debug from 'debug';\n\nimport Controller from './Controller';\nimport {API_Config, NAVIGATION, STATE_NAMES} from \"./AppTypes\";\nimport ExerciseTypesSidebar from \"./component/sidebar/ExerciseTypesSidebar\";\nimport {ExerciseTypesCompositeView} from \"./component/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./component/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./component/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./component/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./component/view/CurrentWorkoutCompositeView\";\nimport {WorkoutsViewUsingContext} from \"./component/view/WorkoutsViewUsingContext\";\nimport {ContextualInformationHelper} from \"./framework/ui/context/ContextualInformationHelper\";\nimport {ChatRoomsSidebar} from \"./framework/ui/chat/ChatRoomsSidebar\";\nimport {ChatLogsView} from \"./framework/ui/chat/ChatLogsView\";\nimport {UnreadMessageCountListener} from \"./framework/socket/UnreadMessageCountListener\";\nimport {UserSearchSidebar} from \"./framework/ui/chat/UserSearchSidebar\";\n\n\nconst logger = debug('app');\n\nexport default class App implements UnreadMessageCountListener {\n\n    private static _instance: App;\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private workoutSummarySidebar: WorkoutSummarySidebar;\n    // @ts-ignore\n    private currentWorkoutSidebar: CurrentWorkoutSidebar;\n    // @ts-ignore\n    private currentWorkoutView: CurrentWorkoutCompositeView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    private constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowWorkoutSummary = this.handleShowWorkoutSummary.bind(this);\n        this.handleShowCurrentWorkout = this.handleShowCurrentWorkout.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.workoutSummary).addEventListener('click', this.handleShowWorkoutSummary);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.currentWorkout).addEventListener('click', this.handleShowCurrentWorkout);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = UserSearchSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = ChatRoomsSidebar.getInstance(Controller.getInstance().getStateManager());\n        this.chatSidebar.onDocumentLoaded();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        new ExerciseTypesCompositeView(this.exerciseTypesSidebar).onDocumentLoaded();\n\n        //new WorkoutsView().onDocumentLoaded(); // carousel view\n        new WorkoutsViewUsingContext().onDocumentLoaded();\n\n        this.workoutSummarySidebar = new WorkoutSummarySidebar();\n        this.workoutSummarySidebar.addView(new WorkoutSummaryView(),{containerId: WorkoutSummarySidebar.SidebarContainers.container});\n        this.workoutSummarySidebar.onDocumentLoaded();\n\n        this.currentWorkoutSidebar = new CurrentWorkoutSidebar();\n        this.currentWorkoutView = new CurrentWorkoutCompositeView(this.currentWorkoutSidebar);\n        this.currentWorkoutView.onDocumentLoaded();\n\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowWorkoutSummary(event: Event) {\n        logger('Handling Show Workout Summary');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.hideAllSideBars();\n        this.workoutSummarySidebar.eventShow(event);\n    }\n\n    handleShowCurrentWorkout(event: Event) {\n        logger('Handling Show Current Workout');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.currentWorkoutSidebar.eventShow(event);\n    }\n\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    addingExerciseToCurrentWorkout(exerciseType:any) {\n        //this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventShow(null);\n        this.currentWorkoutView.getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes,exerciseType, false);\n    }\n\n    showCurrentWorkout() {\n        this.currentWorkoutSidebar.eventShow(null);\n    }\n}\n\n\n$(function() {\n    //localStorage.debug = 'abstract-field validation-manager validation-manager-rule-failure';\n    localStorage.debug = 'api-ts validation-manager-execute-rule validation-manager-rule-failure';\n    debug.log = console.info.bind(console);\n    App.getInstance().onDocumentLoad();\n});\n","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary:'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises:'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail:\"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone:'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\n\n","import debug from 'debug';\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {v4} from \"uuid\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {KeyType} from \"./framework/ui/ConfigurationTypes\";\nimport {DataObjectListener} from \"./framework/model/DataObjectListener\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"./framework/model/ObjectDefinitionRegistry\";\nimport {StateChangeListener} from \"./framework/state/StateChangeListener\";\nimport {MemoryBufferStateManager} from \"./framework/state/MemoryBufferStateManager\";\nimport {SimpleValueDataSource} from \"./framework/ui/helper/SimpleValueDataSource\";\nimport {AggregateStateManager} from \"./framework/state/AggregateStateManager\";\nimport {StateManager} from \"./framework/state/StateManager\";\nimport {DataObjectController} from \"./framework/model/DataObjectController\";\nimport {AsyncStateManagerWrapper} from \"./framework/state/AsyncStateManagerWrapper\";\nimport {BasicObjectDefinitionFactory} from \"./framework/model/BasicObjectDefinitionFactory\";\nimport {RESTApiStateManager} from \"./framework/state/RESTApiStateManager\";\nimport {isSameMongo} from \"./framework/util/EqualityFunctions\";\nimport {ChatManager} from \"./framework/socket/ChatManager\";\nimport {NotificationController} from \"./framework/socket/NotificationController\";\nimport {SocketManager} from \"./framework/socket/SocketManager\";\n\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener,DataObjectListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n\n    private constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName:STATE_NAMES.users,\n                serverURL:'',\n                api:API_Config.users,\n                isActive:true,\n                find:false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n            {\n                stateName:STATE_NAMES.exerciseTypes,\n                serverURL:'',\n                api:API_Config.exerciseTypes,\n                isActive:true,\n                idField: '_id',\n                find:false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            },\n            {\n                stateName:STATE_NAMES.workouts,\n                serverURL:'',\n                api:API_Config.workouts,\n                isActive:true,\n                idField: '_id',\n                find:false,\n                findAll: true,\n                create: true,\n                update: true,\n                destroy: true\n            }\n        ]);\n\n\n        let aggregateSM = new AggregateStateManager(isSameMongo)\n        let memorySM = new MemoryBufferStateManager(isSameMongo)\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM,isSameMongo);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes,'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts,'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition:FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.linkedDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName,dataObj,false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName,dataObj,false);\n                break;\n            }\n        }\n    }\n\n\n    addExerciseToCurrentWorkout(exerciseType:any):void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout:any):void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise:any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n}\n\n\n","import Controller from \"./Controller\";\nimport {Field} from \"./framework/ui/form/field/Field\";\nimport {FormFieldPermissionChecker} from \"./framework/ui/form/FormFieldPermissionChecker\";\n\n\nexport class CreatedByPermissionChecker implements FormFieldPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToEditField(dataObj: any, field: Field): boolean {\n        return true;\n    }\n}\n","import debug from 'debug';\n\n\nimport Controller from \"./Controller\";\n\nimport {STATE_NAMES} from \"./AppTypes\";\nimport {SocketListener} from \"./framework/socket/SocketListener\";\nimport {NotificationManager, NotificationType} from \"./framework/notification/NotificationManager\";\n\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user});\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, NotificationType.message);\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import {Form} from \"../../framework/ui/form/Form\";\nimport {\n    ConditionResponse,\n    MultipleConditionLogic,\n    ValidationRule\n} from \"../../framework/ui/form/validation/ValidationTypeDefs\";\nimport {FormMode} from \"../../framework/ui/form/FormUITypeDefs\";\nimport {ComparisonType} from \"../../framework/CommonTypes\";\nimport {ValidationManager} from \"../../framework/ui/form/validation/ValidationManager\";\n\n\nexport class ValidationHelper {\n    private static _instance: ValidationHelper;\n\n    public static getInstance(): ValidationHelper {\n        if (!(ValidationHelper._instance)) {\n            ValidationHelper._instance = new ValidationHelper();\n        }\n        return ValidationHelper._instance;\n\n    }\n\n    private constructor() {}\n\n    public setupValidationForExerciseTypeDetailsForm(form: Form) {\n        let rule: ValidationRule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        };\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            formMode: FormMode.any,\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.invalid,\n            multipleConditionLogic: MultipleConditionLogic.failOnlyIfFinalConditionIsAFailAndPreviousConditionsAreNotFails,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                },\n                {\n                    comparison: ComparisonType.greaterThan,\n                    values: '0'\n                }\n\n\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n    }\n\n}\n","import debug from 'debug';\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\nimport {CollectionViewRenderer} from \"../../framework/ui/view/interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../../framework/ui/view/interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../../framework/ui/view/interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('workout-summary-renderer');\n\nexport class WorkoutSummaryRenderer implements CollectionViewRenderer {\n\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart: Chart | null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    private generateRandomExerciseColourAndBorder(isStrength: boolean = true): string[] {\n        let red = 0;\n        let blue = 0;\n        let green = 50;\n\n        const newColour = Math.floor(Math.random() * 100) + 155;\n        if (isStrength) red = newColour;\n        if (!isStrength) blue = newColour;\n        const transparency = 0.4;\n\n        const background = `rgba(${red},${green},${blue},${transparency})`;\n        const border = `rgb(${red},${green},${blue})`;\n\n        return [background, border];\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating workout summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        let sevenWorkouts = newState;\n        if (newState.length > 7) {\n            sevenWorkouts = newState.slice(newState.length - 7);\n        }\n\n\n        // go through the workouts and find all the unique exercise names as data series names\n        let exerciseNames: string[] = [];\n        let exerciseBG: string[] = [];\n        let exerciseBR: string[] = [];\n        let exerciseTypes: string[] = [];\n        let labels: string[] = [];\n        sevenWorkouts.forEach((workout: any) => {\n            const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n            labels.push(label);\n            avLogger(`Added label ${label}`);\n\n            if (workout.exercises) {\n                workout.exercises.forEach((exercise: any) => {\n                    const exerciseName = exercise.name;\n                    // do we have this exercise already?\n                    let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n                    if (foundIndex < 0) {\n                        avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n                        exerciseNames.push(exerciseName);\n                        exerciseTypes.push(exercise.type);\n                        const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n                        exerciseBG.push(colours[0]);\n                        exerciseBR.push(colours[1]);\n                    }\n                })\n            }\n        });\n\n        // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n\n        let datasets: any[] = [];\n\n        exerciseNames.forEach((name, index) => {\n            const exerciseType = exerciseTypes[index];\n            const itemBG = exerciseBG[index];\n            const itemBR = exerciseBR[index];\n\n            avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n\n            let data: number[] = [];\n            let bg: string[] = [];\n            let br: string[] = [];\n\n\n            sevenWorkouts.forEach((workout: any) => {\n                bg.push(itemBG);\n                br.push(itemBR);\n\n                // find the exercise name\n                if (workout.exercises) {\n\n                    const didntFindExercise = workout.exercises.every((exercise: any) => {\n                        if (exercise.name == name) {\n                            if (exerciseType === 'strength') {\n                                avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n                                data.push(exercise.weight);\n                            } else {\n                                avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n                                data.push(exercise.distance);\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                    // not found - zero value\n                    if (didntFindExercise) {\n                        data.push(0);\n                    }\n\n                } else {\n                    data.push(0);\n                }\n            });\n            let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order: 1};\n            let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n            avLogger(dataset);\n            datasets.push(dataset);\n            //datasets.push(lineDataSet);\n        });\n\n\n        let chartData = {\n            labels: labels,\n            datasets: datasets,\n        };\n\n        let config = {\n            type: 'bar',\n            data: chartData,\n            options: {\n                responsive: true,\n                animation: true,\n                maintainAspectRatio: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            },\n\n        }\n        avLogger(chartData);\n\n        // @ts-ignore\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}\n","import {SidebarViewContainer} from \"../../framework/ui/container/SidebarViewContainer\";\nimport {SidebarLocation, SidebarPrefs} from \"../../framework/ui/ConfigurationTypes\";\n\n\nexport default class CurrentWorkoutSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'currentWorkoutSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        list: 'exercises',\n        detail: 'workoutDetail'\n    }\n\n\n    constructor() {\n        super(CurrentWorkoutSidebar.SidebarPrefs);\n    }\n}\n","import {SidebarLocation, SidebarPrefs} from \"../../framework/ui/ConfigurationTypes\";\nimport {SidebarViewContainer} from \"../../framework/ui/container/SidebarViewContainer\";\n\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'exerciseTypesSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import {SidebarLocation, SidebarPrefs} from \"../../framework/ui/ConfigurationTypes\";\nimport {SidebarViewContainer} from \"../../framework/ui/container/SidebarViewContainer\";\n\n\nexport default class WorkoutSummarySidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'workoutSummarySidebar',\n        expandedSize:'100%',\n        location: SidebarLocation.bottom\n    }\n\n    static SidebarContainers = {\n        container: 'workoutSummary',\n    }\n\n\n    constructor() {\n        super(WorkoutSummarySidebar.SidebarPrefs);\n    }\n}\n","\nimport {BUTTON, INPUT, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\n\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {CurrentWorkoutExercisesView} from \"./CurrentWorkoutExercisesView\";\n\nimport moment from \"moment\";\nimport App from \"../../App\";\nimport {FormDetailViewRenderer} from \"../../framework/ui/view/renderer/FormDetailViewRenderer\";\nimport {BootstrapFormConfigHelper} from \"../../framework/ui/helper/BootstrapFormConfigHelper\";\nimport {Form} from \"../../framework/ui/form/Form\";\nimport {DataObjectListener} from \"../../framework/model/DataObjectListener\";\nimport {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {DefaultFormFieldPermissionChecker} from \"../../framework/ui/form/DefaultFormFieldPermissionChecker\";\nimport {StateChangeListener} from \"../../framework/state/StateChangeListener\";\nimport {DetailViewImplementation} from \"../../framework/ui/view/implementation/DetailViewImplementation\";\nimport {SidebarViewContainer} from \"../../framework/ui/container/SidebarViewContainer\";\nimport {MemoryBufferStateManager} from \"../../framework/state/MemoryBufferStateManager\";\nimport {LinkedCollectionDetailController} from \"../../framework/ui/helper/LinkedCollectionDetailController\";\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {DataObjectController} from \"../../framework/model/DataObjectController\";\nimport {BasicObjectDefinitionFactory} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport {DetailView} from \"../../framework/ui/view/interface/DetailView\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\n\n\nconst logger = debug('current-workout-composite-view');\n\nexport class CurrentWorkoutCompositeView implements StateChangeListener,DataObjectListener{\n    private sideBar:SidebarViewContainer;\n    private currentWorkout:any = {};\n    private workoutDef:DataObjectDefinition|null = null;\n    private readonly stateManager:StateManager;\n    private workoutNameEl:HTMLInputElement|null = null;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n        this.stateManager = new MemoryBufferStateManager(isSameMongo);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.exerciseTypes,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.workouts,this);\n    }\n\n    getListenerName(): string {\n        return 'Current Workout Composite View';\n    }\n\n    onDocumentLoaded() {\n        this.workoutNameEl = <HTMLInputElement|null>document.getElementById(INPUT.workoutName);\n        this.workoutNameEl?.addEventListener('blur',(event) => {\n           if (event.target) {\n               // @ts-ignore\n               this.currentWorkout.name = event.target.value;\n               this.saveWorkout();\n           }\n        });\n\n\n        this.workoutDef = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.workouts);\n        if (!this.workoutDef) throw new Error ('Workout definition not found');\n\n        const exerciseTypes = new CurrentWorkoutExercisesView(this.stateManager);\n        this.sideBar.addView(exerciseTypes,{containerId:VIEW_CONTAINER.exerciseDropZone});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.currentWorkoutDetail,exerciseTypeDefinition,new DefaultFormFieldPermissionChecker(), BootstrapFormConfigHelper.getInstance());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.currentWorkoutDetail,\n                    dataSourceId: VIEW_NAME.exercises\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.completeWorkout);\n            logger(`Setting up button for completing the workout`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Completing the workout`);\n                    this.currentWorkout.completed = true;\n                    this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n                    if (detailForm) {\n                        detailForm.reset();\n                        detailForm.setReadOnly();\n                    }\n                    this.saveWorkout();\n                    this.createWorkout();\n                    App.getInstance().hideAllSideBars();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n\n    private createWorkout() {\n        logger(`Creating new current workout`);\n        this.currentWorkout = ObjectDefinitionRegistry.getInstance().createInstance(STATE_NAMES.workouts);\n        logger(this.currentWorkout);\n        this.currentWorkout.name = '';\n\n        if (this.workoutNameEl) this.workoutNameEl.value = '';\n        Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.workouts,this.currentWorkout,false);\n        this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n    }\n\n    private saveWorkout() {\n        logger(`Saving current workout`);\n        logger(this.currentWorkout);\n        this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n        this.currentWorkout.modifiedOn = moment().format('YYYYMMDDHHmmss');\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.workouts,this.currentWorkout,false);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`${managerName},${name}`);\n        if (name === STATE_NAMES.workouts) {\n            logger(`Workouts loaded`);\n            // is there a current workout?\n            this.currentWorkout = null;\n\n            newValue.forEach((workout:any) => {\n                if (!workout.completed || (workout.completed === 'false')) {\n                    this.currentWorkout = workout;\n                }\n            });\n\n            if (this.currentWorkout) {\n                logger(`Workouts loaded found existing current workout`);\n                if (this.workoutNameEl && this.currentWorkout.name) this.workoutNameEl.value = this.currentWorkout.name;\n                this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n            }\n            else {\n                logger(`Workouts loaded no existing current workout, creating and saving`);\n                this.createWorkout();\n            }\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            logger(`Added a new exercise to workout`);\n            logger(itemAdded);\n\n            this.currentWorkout.exercises.push(itemAdded);\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemRemoved._id);\n            logger(`Removing exercise to workout at index ${foundIndex}`);\n            logger(itemRemoved);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1);\n            }\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemNewValue._id);\n            logger(`Updating exercise to workout at index ${foundIndex}`);\n            logger(itemNewValue);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1,itemNewValue);\n            }\n            this.saveWorkout();\n        }\n\n    }\n\n    create(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Added a new exercise to workout from view`);\n        logger(dataObj);\n        this.stateManager.addNewItemToState(STATE_NAMES.exerciseTypes,dataObj,false);\n    }\n    update(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Updating exercise in workout from view`);\n        logger(dataObj);\n        this.stateManager.updateItemInState(STATE_NAMES.exerciseTypes,dataObj,false);\n    }\n    delete(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Deleting exercise from workout from view`);\n        logger(dataObj);\n        this.stateManager.removeItemFromState(STATE_NAMES.exerciseTypes,dataObj,false);\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n\n}\n","\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\n\n\nimport debug from 'debug';\nimport {ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\nimport {AbstractStatefulCollectionView} from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {ListViewRendererUsingContext} from \"../../framework/ui/view/renderer/ListViewRendererUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\n\nconst logger = debug('current-workout-exercises-view');\n\nexport class CurrentWorkoutExercisesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exercises',\n            dataSourceId: VIEW_NAME.exercises,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromExerciseTypes],\n                acceptTypes: [DRAGGABLE.typeExerciseType]\n            }\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'fas fa-trash-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise from the workout.\"}]\n            }\n        }\n    };\n\n    constructor(stateManager:StateManager) {\n        super(CurrentWorkoutExercisesView.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.exerciseTypes,'Exercise Types');\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        }\n        else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    itemDropped(view: View, droppedItem: any) {\n        Controller.getInstance().addExerciseToCurrentWorkout(droppedItem);\n    }\n\n\n}\n\n","\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\n\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {ExerciseTypesViewUsingContext} from \"./ExerciseTypesViewUsingContext\";\nimport {CreatedByPermissionChecker} from \"../../CreatedByPermissionChecker\";\n\nimport ExerciseTypesSidebar from \"../sidebar/ExerciseTypesSidebar\";\nimport {FormDetailViewRenderer} from \"../../framework/ui/view/renderer/FormDetailViewRenderer\";\nimport {BootstrapFormConfigHelper} from \"../../framework/ui/helper/BootstrapFormConfigHelper\";\nimport {Form} from \"../../framework/ui/form/Form\";\nimport {DataObjectDefinition} from \"../../framework/model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../framework/model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport {DetailView} from \"../../framework/ui/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../framework/ui/view/implementation/DetailViewImplementation\";\nimport {SidebarViewContainer} from \"../../framework/ui/container/SidebarViewContainer\";\nimport {LinkedCollectionDetailController} from \"../../framework/ui/helper/LinkedCollectionDetailController\";\n\nconst logger = debug('exercise-types-composite-view');\n\nexport class ExerciseTypesCompositeView {\n    private sideBar:SidebarViewContainer;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const exerciseTypes = new ExerciseTypesViewUsingContext(Controller.getInstance().getStateManager());\n        this.sideBar.addView(exerciseTypes,{containerId:ExerciseTypesSidebar.SidebarContainers.container});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.exerciseTypeDetail,exerciseTypeDefinition,new CreatedByPermissionChecker(),BootstrapFormConfigHelper.getInstance());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.exerciseTypeDetail,\n                    dataSourceId: VIEW_NAME.exerciseTypes\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.createNewExerciseType);\n            logger(`Setting up button for creating exercise types`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n}\n","\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\n\nimport Controller from \"../../Controller\";\n\n\nimport debug from 'debug';\nimport {ContextDefinition, ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\nimport {AbstractStatefulCollectionView} from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {View} from \"../../framework/ui/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../framework/model/BasicObjectDefinitionFactory\";\nimport {StateManager} from \"../../framework/state/StateManager\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {ListViewRendererUsingContext} from \"../../framework/ui/view/renderer/ListViewRendererUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\n\n\n\nconst logger = debug('exercise-types-view');\n\nexport class ExerciseTypesViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exerciseTypes',\n            dataSourceId: VIEW_NAME.exerciseTypes,\n        },\n        resultsElement: {\n            type: 'a',\n            attributes: [{name: 'href', value: '#'}],\n            classes: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        sorter: function(item1, item2) {\n            let result = 1;\n            if (item1.name < item2.name) result = -1;\n            return result;\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1',\n            },\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-trash-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise type.\"}]\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n        extraActions: [{\n            name: 'addToWorkout',\n            button: {\n                classes:'btn bg-primary text-white btn-circle btn-md mr-1',\n                iconClasses:'fas fa-arrow-alt-circle-right',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'data-html',value:'true'},{name:'title',value:\"Add this <strong>exercise</strong> to the current workout.\"}]\n            }\n        }]\n    };\n\n\n    constructor(stateManager:StateManager) {\n        super(ExerciseTypesViewUsingContext.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context:ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.exerciseTypes,'Exercise Types');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'addToWorkout','Add To Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-arrow-alt-circle-right');\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        }\n        else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        logger(selectedItem[FIELD_CreatedBy]);\n        if (selectedItem[FIELD_CreatedBy]) {\n            if (selectedItem[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        logger(item[FIELD_CreatedBy]);\n        if (item[FIELD_CreatedBy]) {\n            if (item[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === ExerciseTypesViewUsingContext.DOMConfig.extraActions[0].name) {\n            // add the exercise type the current workout\n            Controller.getInstance().addExerciseToCurrentWorkout(selectedItem);\n        }\n    }\n\n\n}\n\n","\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\n\nimport {WorkoutSummaryRenderer} from \"../renderer/WorkoutSummaryRenderer\";\nimport {AbstractStatefulCollectionView} from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType} from \"../../framework/ui/ConfigurationTypes\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\nimport {View} from \"../../framework/ui/view/interface/View\";\n\n\n\nexport class WorkoutSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'workoutSummaryChart',\n            dataSourceId: VIEW_NAME.workoutSummary,\n        },\n        resultsElement:{\n            type: 'canvas',\n            classes: '',\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElement: {\n                type: '',\n                classes: '',\n            },\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(WorkoutSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new WorkoutSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {}\n\n}\n\n","import {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\n\nimport debug from 'debug';\nimport moment from \"moment\";\nimport Chart from 'chart.js/auto';\nimport App from \"../../App\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../framework/ui/context/ContextualInformationHelper\";\nimport {AbstractStatefulCollectionView} from \"../../framework/ui/view/implementation/AbstractStatefulCollectionView\";\nimport {CarouselDOMConfig, KeyType, Modifier, RowPosition} from \"../../framework/ui/ConfigurationTypes\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../framework/ui/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {View} from \"../../framework/ui/view/interface/View\";\nimport {truncateString} from \"../../framework/util/MiscFunctions\";\nimport {addDurations} from \"../../framework/util/DurationFunctions\";\nimport {CollectionViewListener} from \"../../framework/ui/view/interface/CollectionViewListener\";\nimport {CarouselViewRendererUsingContext} from \"../../framework/ui/view/renderer/CarouselViewRendererUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../framework/ui/view/delegate/CollectionViewListenerForwarder\";\nimport {isSameMongo} from \"../../framework/util/EqualityFunctions\";\n\n\nconst logger = debug('workouts-view');\n\ntype ExerciseSummary = {\n    weight:number,\n    distance:number,\n    duration:string\n}\n\ntype ChartRef = {\n    _id:string,\n    chart:Chart|null\n}\n\n\n\n\nexport class WorkoutsViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CarouselDOMConfig = {\n        itemsPerRow: {\n            small:1,\n            medium:2,\n            large: 3,\n            xlarge: 4\n        },\n        rowContainer: {\n            classes: \"carousel-item\",\n            type: 'div',\n        },\n        activeRow: {\n            type: '',\n            classes: 'active',\n        },\n        activeRowPosition:RowPosition.last,\n        row: {\n            classes: \"row\",\n            type: 'div',\n        },\n        multipleItemsPerRowContainer: {\n            type: 'div',\n            classes: 'col-sm-12 col-md-4 col-lg-3 mb-2',\n        },\n        actionContainer: {\n            type:'div',\n            classes:'card-footer d-flex w-100 justify-content-end'\n        },\n        collectionConfig: {\n            viewConfig: {\n                resultsContainerId: 'workouts',\n                dataSourceId: VIEW_NAME.workouts,\n                drop: {\n                    acceptTypes: [DRAGGABLE.typeExerciseType],\n                    acceptFrom: [DRAGGABLE.fromExerciseTypes]\n                }\n            },\n            resultsElement: {\n                type: 'div',\n                classes: 'card',\n            },\n            keyId: '_id',\n            keyType: KeyType.string,\n            modifiers: {\n                normal:'bg-light',\n                inactive:'bg-light',\n                active:'bg-light',\n                warning:'bg-light',\n            },\n            detail: {\n                containerClasses: 'card-body',\n                textElement: {\n                    classes: '',\n                    type: 'div'\n                },\n                select: true,\n                delete: {\n                    classes:'btn btn-danger btn-circle btn-md',\n                    iconClasses:'fas fa-trash-alt text-white',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Delete this workout\"}]\n                },\n                background: {\n                    type:'div',\n                    classes:'',\n                },\n            },\n            extraActions: [\n                {\n                    name: 'template',\n                    button: {\n                        text: '',\n                        classes: 'btn btn-primary btn-circle btn-md mr-2',\n                        iconClasses: 'fas fa-copy',\n                        attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Add the exercises from this workout to the current workout.\"}]\n                    },\n\n                },\n                {\n                    name: 'continue',\n                    button: {\n                        text: '',\n                        iconClasses:'text-white fas fa-clipboard-list',\n                        classes: 'btn btn-warning btn-circle btn-md mr-2',\n                        attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Continue this current workout\"}]\n                    },\n                }\n            ],\n\n        },\n    }\n\n    private chartRefs:ChartRef[];\n\n\n    constructor() {\n        super(WorkoutsViewUsingContext.DOMConfig.collectionConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new CarouselViewRendererUsingContext(this, this,WorkoutsViewUsingContext.DOMConfig);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.chartRefs = [];\n\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context:ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.workouts,'Workouts');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'template','Copy exercises to Current Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-copy');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'continue','Continue Current Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-clipboard-list');\n\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        if (item.exercises) {\n            item.exercises.forEach((exercise:any) => {\n                buffer += `<strong>${exercise.name}</strong>: `;\n                if (exercise.type === 'cardio') {\n                    buffer += `${exercise.distance} km in ${exercise.duration}`;\n                }\n                else {\n                    buffer += `${exercise.sets} sets of ${exercise.reps} reps in ${exercise.duration}`;\n                }\n                buffer += `<br/>`;\n            });\n        }\n        return buffer;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return (selectedItem.completed);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from,item);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n\n\n    private calculateExerciseSummary(item:any) : ExerciseSummary {\n        let result:ExerciseSummary = {\n            weight:0,\n            distance:0,\n            duration:'00:00'\n        };\n\n        if (item.exercises) {\n            for (let index = 0;index < item.exercises.length;index++) {\n                const exercise = item.exercises[index];\n                result.weight += exercise.weight;\n                result.distance += exercise.distance;\n                result.duration = addDurations(result.duration,exercise.duration);\n            }\n        }\n        return result;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let summary = this.calculateExerciseSummary(item);\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">`;\n        if (item.name) {\n            buffer+= `${item.name}</h5>`;\n            buffer += `<h6 class=\"card-subtitle\">${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h6>`;\n        }\n        else {\n            if (item.completed) {\n                buffer += `${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h5>`;\n            } else {\n                buffer += 'Current</h5>';\n            }\n\n        }\n        buffer += `<ul class=\"list-group list-group-flush\">`;\n        buffer += `<li class=\"list-group-item\"><strong>Duration:</strong> ${summary.duration}</li>`;\n        if (summary.weight > 0)   buffer += `<li class=\"list-group-item\"><strong>Total Weight:</strong> ${summary.weight}</li>`;\n        if (summary.distance > 0) buffer += `<li class=\"list-group-item\"><strong>Total Distance: </strong> ${summary.distance}</li>`;\n        buffer += `</ul>`;\n        containerEl.innerHTML = buffer;\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return (item.completed);\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        let result = false;\n        if (actionName === 'template') {\n            if ((item.completed) && (item.completed === true)) {\n                result = true;\n            }\n        }\n        if (actionName === 'continue') {\n            if (item.completed === false) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.inactive;\n        if (item.completed) {\n            if (item.completed !== true) {\n                result = Modifier.active;\n            }\n        }\n        return result;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n        /*\n        Remove a previous chart reference\n         */\n        let foundIndex = this.chartRefs.findIndex((ref:any) => ref._id === item._id);\n        if (foundIndex) {\n            //this.chartRefs[foundIndex].chart?.destroy();\n            logger(`Removing old chart reference for workout ${item._id}`);\n            this.chartRefs.splice(foundIndex,1);\n        }\n\n\n\n        logger(`Rendering chart for`);\n        logger(item);\n        // we are going to render a chart for the workout\n        if (item.exercises) {\n            const dataSourceKeyId = this.getDataSourceKeyId();\n            const resultDataKeyId = this.getIdForItemInNamedCollection(name, item);\n\n            let canvas = document.createElement('canvas');\n            //browserUtil.addAttributes(canvas,[{name:'style',value:'height:100%; width:100%'}]);\n            canvas.setAttribute(this.collectionUIConfig.keyId, resultDataKeyId);\n            canvas.setAttribute(dataSourceKeyId, this.collectionUIConfig.viewConfig.dataSourceId);\n            // chart labels are the exercise names (shortened to 10 characters)\n\n\n            let labels:string[] = [];\n            let data:any[] = [];\n            let bgColour:string[] = []\n            let brColour:string[] = [];\n\n            item.exercises.forEach((exercise: any) => {\n                labels.push(truncateString(exercise.name, 10));\n                if (exercise.type === 'cardio') {\n                    data.push(exercise.distance);\n                    bgColour.push(WorkoutsViewUsingContext.bgCardio);\n                    brColour.push(WorkoutsViewUsingContext.borderCardio);\n                }\n                else {\n                    data.push(exercise.weight);\n                    bgColour.push(WorkoutsViewUsingContext.bgStrength);\n                    brColour.push(WorkoutsViewUsingContext.borderStrength);\n                }\n            });\n            let chartData = {\n                labels: labels,\n                datasets: [{\n                    label:'Exercises',\n                    data: data,\n                    backgroundColor: bgColour,\n                    borderColor: brColour,\n                    borderWidth: 1\n                }]\n            };\n\n\n            const config = {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: false,\n                    animation:false,\n                    maintainAspectRatio:false,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                },\n            };\n\n            logger(config);\n            try {\n                // @ts-ignore\n                let ref:ChartRef = {_id:item._id, chart: new Chart(canvas, config)};\n                this.chartRefs.push(ref);\n                containerEl.appendChild(canvas);\n            }\n            catch (err) {\n                console.log(err);\n            }\n\n        }\n    }\n\n    private static bgStrength = 'rgba(255, 0, 0, 0.2)';\n    private static bgCardio = 'rgba(0, 50, 255, 0.2)';\n\n    private static borderStrength ='rgb(255, 50, 0)';\n    private static borderCardio = 'rgb(0, 50 , 255)';\n\n    public itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[0].name) {\n            // add the current list of exercises to the current workout\n            Controller.getInstance().addWorkoutExercisesToCurrentWorkout(selectedItem);\n\n        }\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[1].name) {\n            // continue the current workout\n            App.getInstance().showCurrentWorkout();\n\n\n        }\n    }\n\n\n}\n\n","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n}\n\nexport type FilterItem = {\n    attributeName: string,\n    comparison: ComparisonType,\n    value: any,\n    evaluator?: evaluatorFunction\n}\n\nexport type equalityFunction = (item1: any, item2: any) => boolean;\nexport type evaluatorFunction = (item: any, filter: FilterItem) => boolean;","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui/ConfigurationTypes\";\nimport {SecurityManager} from \"../security/SecurityManager\";\nimport {Field} from \"../ui/form/field/Field\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private static dateRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^((0?[1-9]|[12]\\d|31)\\/(0?[13578]|1[02])\\/(\\d{2}|\\d{4})|(0?[1-9]|[12]\\d|30)\\/(0?[469]|11])\\/(\\d{2}|\\d{4})|(0?[1-9]|1\\d|2[0-8])\\/02\\/(\\d{2}|\\d{4})|(29\\/02\\/(\\d{2})?(0[48]|[2468][048]|[13579][26]))|(29\\/02\\/([02468][048]|[13579][26])00))\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n    private static colourRegexp: RegExp = /^#[0-9a-f]{6}$/;\n    private previousFieldValues: FieldNameValue[];\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n                case (FieldType.colour): {\n                    response.isValid = BasicFieldOperations.colourRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be a hex colour value #ffffff`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field:Field|null,fieldDef: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${fieldDef.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (fieldDef.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(fieldDef, newValue);\n            rlogger(`Rendering value for field ${fieldDef.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${fieldDef.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${SecurityManager.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n            case (FieldType.colour): {\n                result = `#ffffff`;\n                break;\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, DerivedField, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui/form/FormUITypeDefs\";\n\nexport const FIELD_ID: string = 'id';\nexport const FIELD_CreatedBy: string = 'createdBy';\nexport const FIELD_ModifiedBy: string = 'modifiedBy';\nexport const FIELD_CreatedOn: string = 'createdOn';\nexport const FIELD_ModifiedOn: string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc: string = 'Created By';\nexport const FIELD_ModifiedBy_Desc: string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc: string = 'Created On';\nexport const FIELD_ModifiedOn_Desc: string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition): DisplayOrder[] {\n        let result: DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef, index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        let objDef: DataObjectDefinition = {\n            id: id,\n            displayName: displayName,\n            fields: []\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef: FieldDefinition = {\n                id: idFieldName,\n                isKey: true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName: 'Id',\n                mandatory: true,\n                generator: {\n                    generator: ops,\n                    onModify: false,\n                    onCreation: true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    public addStringFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef: DataObjectDefinition, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    public addDerivedFieldToObjDefinition(objDef:DataObjectDefinition, id:string, displayName:string, type: FieldType, keyType:KeyType, calculator:DerivedField, isMandatory:boolean=false, description: string|null = null, dataSource:FieldValueOptions|null = null): FieldDefinition {\n        let fieldDef:FieldDefinition;\n        if (keyType === KeyType.number) {\n            fieldDef = this.addNumericFieldToObjDefinition(objDef,id,displayName,type,isMandatory,description,dataSource);\n        }\n        else {\n            fieldDef = this.addStringFieldToObjDefinition(objDef,id,displayName,type,isMandatory,description,dataSource);\n        }\n        fieldDef.derivedValue = calculator;\n        return fieldDef;\n    }\n\n    private addCreatedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_CreatedOn, FIELD_CreatedOn_Desc, FieldType.datetime, true, FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedDateToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedOn, FIELD_ModifiedOn_Desc, FieldType.datetime, true, FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields, FIELD_CreatedBy, FIELD_CreatedBy_Desc, FieldType.userId, true, FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: false\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addModifiedByToArray(fields: FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields, FIELD_ModifiedBy, FIELD_ModifiedBy_Desc, FieldType.userId, true, FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation: true,\n            onModify: true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields: FieldDefinition[], keyType: KeyType, id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        let fieldDef: FieldDefinition = {\n            id: id,\n            isKey: false,\n            idType: keyType,\n            type: type,\n            displayName: displayName,\n            mandatory: isMandatory,\n            displayOnly: false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation: true,\n                onModify: false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n    private addNumericFieldToArray(fields: FieldDefinition[], id: string, displayName: string, type: FieldType, isMandatory: boolean = false, description: string | null = null, datasource: FieldValueOptions | null = null): FieldDefinition {\n        return this.addFieldToArray(fields, KeyType.string, id, displayName, type, isMandatory, description, datasource);\n    }\n\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners: DataObjectListener[];\n    protected isCreatingNew: boolean = false;\n    protected typeName: string;\n\n    protected constructor(typeName: string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener: DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    public startNewObject(): boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    public isCreatingNewObject(): boolean {\n        return this.isCreatingNew;\n    }\n\n    protected informListenersOfCreate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName, dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj: any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName, dataObj));\n    }\n\n    protected abstract _startNewObject(): boolean; // return false, if the creation was cancelled\n\n}","import {KeyType} from \"../ui/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui/form/validation/ValidationTypeDefs\";\n\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration',\n    colour = 'Colour',\n    subObject = 'Sub Object'\n}\n\nexport interface FieldValueGenerator {\n    generate(field: FieldDefinition, isCreate: boolean): string;\n}\n\nexport interface DerivedField {\n    getValue(dataObj:any, field: FieldDefinition, isCreate: boolean): string;\n}\n\n\nexport type FieldDefinition = {\n    id: string,\n    isKey: boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName: string,\n    mandatory: boolean,\n    displayOnly?: boolean,\n    description?: string,\n    linkedDataObjectId?: string,\n    generator?: {\n        onCreation: boolean,\n        onModify: boolean,\n        generator: FieldValueGenerator\n    },\n    dataSource?: FieldValueOptions,\n    derivedValue?:DerivedField\n}\n\nexport type DataObjectDefinition = {\n    id: string,\n    displayName: string,\n    fields: FieldDefinition[],\n    rules?: ValidationRule\n}\n\n\n\n","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n    protected definitions: DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    public findDefinition(id: string): DataObjectDefinition | null {\n        let result: DataObjectDefinition | null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id: string, displayName: string, hasDataId: boolean, dataIdIsUUID: boolean, createModifierFields: boolean = true, idFieldName: string = FIELD_ID): DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result: DataObjectDefinition | null = this.findDefinition(id);\n        if (result) {\n            return result;\n        } else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id, displayName, hasDataId, dataIdIsUUID, createModifierFields, idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition: DataObjectDefinition): any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch (fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef, fieldValue);\n                        break;\n                    }\n                }\n\n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id: string): any {\n        logger(`Creating instance for definition ${id}`);\n        let result: any = {};\n\n        const definition: DataObjectDefinition | null = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\nconst apiResultsLogger = debug('api-ts-results');\n\nexport class ApiUtil {\n\n    private static _instance: ApiUtil;\n\n    public static getInstance(): ApiUtil {\n        if (!(ApiUtil._instance)) {\n            ApiUtil._instance = new ApiUtil();\n        }\n        return ApiUtil._instance;\n    }\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id && !request.wasOffline) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiResultsLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiResultsLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\n","import {RequestCallBackFunction} from \"./Types\";\nimport debug from \"debug\";\n\nconst logger = debug('callback-registry');\n\ntype CallBack = {\n    id: string,\n    fn: RequestCallBackFunction\n}\n\nexport class CallbackRegistry {\n    private static _instance: CallbackRegistry;\n    private callbacks: CallBack[] = [];\n\n    private constructor() {\n    }\n\n    public static getInstance(): CallbackRegistry {\n        if (!(CallbackRegistry._instance)) {\n            CallbackRegistry._instance = new CallbackRegistry();\n        }\n        return CallbackRegistry._instance;\n    }\n\n    public addRegisterCallback(id: string, fn: RequestCallBackFunction): void {\n        logger(`Adding callback function with id ${id}`);\n        this.callbacks.push({id: id, fn: fn});\n    }\n\n    public getCallbackById(id: string): RequestCallBackFunction {\n        const defaultFn = function (data: any, status: number, associatedStateName: string): void {\n            console.error(`Callback received with status ${status}, state name ${associatedStateName} where the callback was never registered`);\n        }\n\n        const foundIndex = this.callbacks.findIndex((callback) => callback.id === id);\n        if (foundIndex >= 0) {\n            return this.callbacks[foundIndex].fn;\n        }\n        return defaultFn;\n    }\n}","import {v4} from 'uuid';\nimport {QueueListener} from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestType} from \"./Types\";\n\nimport debug from 'debug';\nimport {CallbackRegistry} from \"./CallbackRegistry\";\nimport {OfflineManager} from \"./OfflineManager\";\nimport {ApiUtil} from \"./ApiUtil\";\n\nconst logger = debug('api-ts');\n\nexport class DownloadManager {\n    private static _instance: DownloadManager;\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n\n    public processOfflineItems() {\n        logger(`Checking for offline items`);\n        OfflineManager.getInstance().processQueuedResults();\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callbackId: string, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callbackId: callbackId,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public async addApiRequest(jsonRequest: jsonRequest, isPriority = false, wasOffline: boolean = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        logger(`Adding Queue Request ${requestId}`);\n        logger(jsonRequest);\n\n        // are we currently offline?\n        if (OfflineManager.getInstance().areWeOffline()) {\n            logger(`We are offline, queueing request for when server back online.`);\n            OfflineManager.getInstance().addOfflineRequest(jsonRequest);\n            // let the callback function know, with a custom code to let the receiver know there was a problem\n            CallbackRegistry.getInstance().getCallbackById(jsonRequest.callbackId)(jsonRequest.params, 500, jsonRequest.associatedStateName, false);\n            return;\n        }\n\n        // we are online (hopefully), continue for now, we will catch offline errors later\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n                wasOffline: wasOffline\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            logger(`processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        logger(`received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            logger(queueItem);\n\n            // are we offline http status of 500\n            if (httpStatus === 500) {\n                logger(`queue item ${queueItem.requestId} - server offline, queueing for later`);\n                OfflineManager.getInstance().addOfflineRequest(queueItem.originalRequest);\n                // let the callback function know, with a custom code to let the receiver know there was a problem\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(queueItem.originalRequest.params, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            } else {\n                logger(`finished for queue item ${queueItem.requestId} with possible offline id of ${queueItem.originalRequest._id}`);\n                // let the callback function know\n                CallbackRegistry.getInstance().getCallbackById(queueItem.originalRequest.callbackId)(jsonData, httpStatus, queueItem.originalRequest.associatedStateName, queueItem.wasOffline);\n            }\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        logger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        logger(item);\n        switch (item.originalRequest.type) {\n            case RequestType.POST: {\n                ApiUtil.getInstance().apiFetchJSONWithPost(item);\n                break;\n            }\n            case RequestType.GET: {\n                ApiUtil.getInstance().apiFetchJSONWithGet(item);\n                break;\n            }\n            case RequestType.DELETE: {\n                ApiUtil.getInstance().apiFetchJSONWithDelete(item);\n                break;\n            }\n            case RequestType.PUT: {\n                ApiUtil.getInstance().apiFetchJSONWithPut(item);\n                break;\n            }\n        }\n    }\n}\n\n","import {jsonRequest} from \"./Types\";\nimport {Poller} from \"./Poller\";\nimport {IndexedDBStateManager} from \"../state/IndexedDBStateManager\";\nimport {v4} from \"uuid\";\nimport {DownloadManager} from \"./DownloadManager\";\nimport {NotificationManager, NotificationType} from \"../notification/NotificationManager\";\nimport {StateChangeListener} from \"../state/StateChangeListener\";\nimport {AsynchronousStateManager} from \"../state/AsynchronousStateManager\";\nimport debug from \"debug\";\n\nconst logger = debug('offline-manager');\n\nexport class OfflineManager implements StateChangeListener {\n    private static _instance: OfflineManager;\n    private static DB_NAME = 'offline.manager.db';\n    private static OBJECT_STORE = 'offline.manager.db.requests';\n    private persistence: AsynchronousStateManager;\n\n    constructor() {\n        this.serverBackOnline = this.serverBackOnline.bind(this);\n        const indexedDB = new IndexedDBStateManager();\n        indexedDB.initialise(OfflineManager.DB_NAME, [{name: OfflineManager.OBJECT_STORE, keyField: '_id'}]);\n        this.persistence = indexedDB;\n        this.persistence.addChangeListenerForName(OfflineManager.OBJECT_STORE, this);\n    }\n\n    public static getInstance(): OfflineManager {\n        if (!(OfflineManager._instance)) {\n            OfflineManager._instance = new OfflineManager();\n        }\n        return OfflineManager._instance;\n    }\n\n    public processQueuedResults() {\n        // find any requests in the persistence\n        this.persistence.getStateByName(OfflineManager.OBJECT_STORE);\n    }\n\n    public serverBackOnline() {\n        NotificationManager.getInstance().show('Server', 'Server is back online.');\n        this.processQueuedResults();\n    }\n\n    public areWeOffline(): boolean {\n        return Poller.getInstance().isPolling();\n    }\n\n    public addOfflineRequest(jsonRequest: jsonRequest) {\n        if (!Poller.getInstance().isPolling()) {\n            Poller.getInstance().startPolling(this.serverBackOnline);\n            NotificationManager.getInstance().show('Server', 'Server is offline, queueing local changes for when server is available', NotificationType.warning);\n        }\n        // save the request with an id\n        jsonRequest._id = v4();\n        logger('Adding offline request');\n        logger(jsonRequest);\n\n        this.persistence.addNewItemToState(OfflineManager.OBJECT_STORE, jsonRequest, false);\n    }\n\n    getListenerName(): string {\n        return \"Offline manager\";\n    }\n\n    stateChanged(managerName: string, name: string, offlineResults: any): void {\n        if (offlineResults && offlineResults.length > 0) {\n            NotificationManager.getInstance().show('Queued Changes', `There are ${offlineResults.length} queued changes, sending to server.`, NotificationType.warning);\n            offlineResults.forEach((request: jsonRequest) => {\n                this.persistence.removeItemFromState(OfflineManager.OBJECT_STORE, request, false);\n                logger(`Processing offline request with priority and from offline`);\n                logger(request);\n                DownloadManager.getInstance().addApiRequest(request, true, true);\n            });\n        }\n        this.persistence.forceResetForGet(OfflineManager.OBJECT_STORE);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}","import debug from \"debug\";\n\nconst logger = debug('poller');\n\nexport type serverAvailable = () => void;\n\nexport class Poller {\n    private static _instance: Poller;\n    private static INTERVAL_DEFAULT = 10000; // 30 seconds\n    private static URL_CALL = '/ping';\n    private interval: any | null = null;\n    private isPollingBool: boolean = false;\n\n    private constructor() {\n    }\n\n    public static getInstance(): Poller {\n        if (!(Poller._instance)) {\n            Poller._instance = new Poller();\n        }\n        return Poller._instance;\n    }\n\n    startPolling(callback: serverAvailable, delay: number = Poller.INTERVAL_DEFAULT): void {\n        this.isPollingBool = true;\n        this.interval = setInterval(() => {\n            logger(`Checking for server availability`)\n            fetch(Poller.URL_CALL, {method: 'GET'}).then((response) => {\n                logger(`Response code was ${response.status} - server is now available`);\n                this.stopPolling();\n                callback();\n            }).catch((error) => {\n                logger(error);\n            });\n        }, delay);\n    }\n\n    isPolling(): boolean {\n        return this.isPollingBool;\n    }\n\n    stopPolling() {\n        if (this.interval) clearInterval(this.interval);\n        this.interval = null;\n        this.isPollingBool = false;\n    }\n\n\n}","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callbackId: string,\n    associatedStateName: string,\n    _id?: string\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType,\n    wasOffline: boolean\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string, wasOffline?: boolean) => void;","import {Notification} from './Notification';\nimport {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: NotificationType, duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case NotificationType.info: {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case NotificationType.warning: {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case NotificationType.message: {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case NotificationType.priority: {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager, NotificationType} from \"./NotificationManager\";\n\nexport abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: NotificationType, duration: number): HTMLElement;\n}\n","import {BootstrapNotification} from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport class NotificationFactory {\n    private static _instance: NotificationFactory;\n\n\n    public static getInstance(): NotificationFactory {\n        if (!(NotificationFactory._instance)) {\n            NotificationFactory._instance = new NotificationFactory();\n        }\n        return NotificationFactory._instance;\n    }\n\n    private constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\n","import {NotificationFactory} from \"./NotificationFactory\";\n\nexport enum NotificationType {\n    info,\n    warning,\n    message,\n    priority\n}\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: NotificationType = NotificationType.info, duration: number = 5000) {\n        const notification = NotificationFactory.getInstance().createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\n","import debug from \"debug\";\n\nconst logger = debug('security-manager');\n\nexport class SecurityManager {\n    private static _instance: SecurityManager;\n    private hash: string | null = null;\n    private logoutEl: HTMLElement | null = null;\n\n    private constructor() {\n    }\n\n    public static getInstance(): SecurityManager {\n        if (!(SecurityManager._instance)) {\n            SecurityManager._instance = new SecurityManager();\n        }\n        return SecurityManager._instance;\n    }\n\n    public onDocumentLoaded(logoutElementId: string) {\n        this.logoutEl = document.getElementById(logoutElementId);\n\n        // find the secret hash for the current user (if any)\n        const username = this.getLoggedInUsername();\n        if (username && username.trim().length > 0) {\n            logger(`found user ${username}`);\n            this.hash = localStorage.getItem(username);\n            if (this.hash) {\n                sessionStorage.setItem(username, this.hash);\n            } else {\n                this.hash = sessionStorage.getItem(username);\n            }\n            localStorage.removeItem(username);\n            logger(`found user ${username} hash - removed from local storage`);\n        }\n\n        if (this.logoutEl) {\n            this.logoutEl.addEventListener('click', (event) => {\n                localStorage.removeItem(username);\n                sessionStorage.removeItem(username);\n            });\n        }\n    }\n\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        logger(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n\n    public encryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.encrypt(value, this.hash).toString();\n        }\n        return result;\n    }\n\n    public decryptString(value: string): string {\n        let result = value;\n        if (this.hash) {\n            // @ts-ignore\n            result = CryptoJS.AES.decrypt(value, this.hash).toString(CryptoJS.enc.Utf8);\n        }\n        return result;\n    }\n\n    public encryptObject(dataObj: any): string {\n        return this.encryptString(JSON.stringify(dataObj));\n    }\n\n    public decryptObject(value: string): any {\n        return JSON.parse(this.decryptString(value));\n    }\n}","import debug from 'debug';\nimport moment from \"moment\";\nimport {SocketManager} from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority, SimpleAttachment} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport {BrowserStorageStateManager} from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\nimport {isSameRoom} from \"../util/EqualityFunctions\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true, true, isSameRoom);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: Priority.Normal,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: Priority.Normal,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.unreadMessages = 0;\n        chatLog.unreadHighMessages = 0;\n        chatLog.unreadUrgentMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, simpleAttachement:SimpleAttachment|undefined, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        if (!(simpleAttachement)) simpleAttachement = {\n            identifier:'',\n            type:'',\n            displayText:''\n        }\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, priority, simpleAttachement, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            simpleAttachment:simpleAttachement,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                unreadMessages: 0,\n                unreadHighMessages:0,\n                unreadUrgentMessages:0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                unreadMessages: 0,\n                unreadHighMessages:0,\n                unreadUrgentMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadNormalMessages = 0;\n        let unreadHighMessages = 0;\n        let unreadUrgentMessages = 0;\n        this.chatLogs.forEach((log) => {\n            unreadNormalMessages += log.unreadMessages;\n            unreadHighMessages += log.unreadHighMessages;\n            unreadUrgentMessages += log.unreadUrgentMessages;\n        });\n        this.unreadListener?.countChanged(unreadNormalMessages, unreadHighMessages, unreadUrgentMessages);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        switch (message.priority) {\n            case Priority.Normal: {\n                log.unreadMessages++;\n                break;\n            }\n            case Priority.High: {\n                log.unreadHighMessages++;\n                break;\n            }\n            case Priority.Urgent: {\n                log.unreadUrgentMessages++;\n                break;\n            }\n        }\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport {NotificationManager, NotificationType} from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message, Priority} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport type NotificationControllerOptions = {\n    showNormalPriorityMessageNotifications:boolean,\n    showHighPriorityMessageNotifications:boolean,\n    showUrgentPriorityMessageNotifications:boolean,\n    showInvitationDeclinedNotifications:boolean,\n    showInvitedNotifications:boolean,\n    showOfflineMessageNotification:boolean,\n    showFavouriteUserLoggedInNotification:boolean,\n    showFavouriteUserLoggedOutNotification:boolean,\n    showUserJoinLeaveChatNotification:boolean\n}\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n    private notificationOptions:NotificationControllerOptions;\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.notificationOptions = {\n            showNormalPriorityMessageNotifications:true,\n            showHighPriorityMessageNotifications:true,\n            showUrgentPriorityMessageNotifications:true,\n            showInvitationDeclinedNotifications:true,\n            showInvitedNotifications:true,\n            showOfflineMessageNotification:true,\n            showFavouriteUserLoggedInNotification:true,\n            showFavouriteUserLoggedOutNotification:true,\n            showUserJoinLeaveChatNotification:true\n        }\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if (!this.notificationOptions.showInvitationDeclinedNotifications) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, NotificationType.info, 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type !== InviteType.ChatRoom) return true;\n\n        if (!invite.requiresAcceptDecline) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            if (this.notificationOptions.showInvitedNotifications) NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, NotificationType.info, 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n\n                // is this a user join/leave?\n                if ((displayMessage.from.trim().length === 0) && (!this.notificationOptions.showUserJoinLeaveChatNotification)) return;\n\n                // provide visual notifications if do not disturb is not on, unless the message is marked priority\n                let notificationType = NotificationType.message;\n                let showNotification = this.notificationOptions.showNormalPriorityMessageNotifications;\n                switch (displayMessage.priority) {\n                    case Priority.High: {\n                        notificationType = NotificationType.warning;\n                        showNotification = this.notificationOptions.showHighPriorityMessageNotifications;\n                        break;\n                    }\n                    case Priority.Urgent: {\n                        notificationType = NotificationType.priority;\n                        showNotification = this.notificationOptions.showUrgentPriorityMessageNotifications;\n                        break;\n                    }\n                }\n\n                if (showNotification) NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, notificationType, 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n\n        if (this.notificationOptions.showFavouriteUserLoggedInNotification) NotificationManager.getInstance().show(username, `User ${username} has logged in.`, NotificationType.warning, 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n\n        if (this.notificationOptions.showFavouriteUserLoggedOutNotification) NotificationManager.getInstance().show(username, `User ${username} has logged out.`, NotificationType.priority, 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (messages.length === 0) return;\n\n        if (this.notificationOptions.showOfflineMessageNotification) NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n    setOptions(options:NotificationControllerOptions):void {\n        this.notificationOptions = options;\n    }\n\n\n}\n","import debug from 'debug';\nimport {SocketListener} from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority, SimpleAttachment} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nexport class SocketManager {\n    private static _instance: SocketManager;\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, simpleAttachment:SimpleAttachment,attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            simpleAttachment:simpleAttachment,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type SimpleAttachment = {\n    identifier:string,\n    type:string,\n    displayText:string,\n    iconClasses?:string\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    simpleAttachment?:SimpleAttachment,\n    attachment?: any,\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    CustomType1,\n    CustomType2,\n    CustomType3,\n    CustomType4,\n    CustomType5,\n    CustomType6,\n    CustomType7,\n    CustomType8,\n    CustomType9,\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    unreadMessages: number,\n    unreadHighMessages:number,\n    unreadUrgentMessages: number\n}\n","import debug from 'debug';\nimport {StateChangeListener} from './StateChangeListener';\nimport {StateEventType, StateManager, StateManagerType, StateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {ComparisonType, equalityFunction, FilterItem} from \"../CommonTypes\";\n\nconst smLogger = debug('state-manager-ts');\nconst smLoggerDetail = debug('state-manager-ts:detail');\n\nexport type EqualityFnForName = {\n    name: string,\n    equality: equalityFunction\n}\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n    protected defaultEquality: equalityFunction;\n    protected equalityFns: EqualityFnForName[] | null = null;\n\n    protected constructor(managerName: string, defaultEquality: equalityFunction, fnPerState: EqualityFnForName[] | null = null) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.defaultEquality = defaultEquality;\n        if (fnPerState) {\n            this.equalityFns = fnPerState;\n        }\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    receivedFilterResults(name: string, filterResults: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, filterResults, StateEventType.FilterResults, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType = StateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: StateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: StateValue): void;\n\n    public abstract _getState(name: string): StateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public _findItemInState(name: string, item: any): any {\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => this.getEqualityFnForName(name)(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] { // default implementation assumes local values and simple comparisons\n        let results: any[] = [];\n        const state: StateValue = this._getState(name);\n        try {\n            state.value.forEach((item: any) => {\n                let isMatch: boolean = false;\n                filters.forEach((filter) => {\n                    smLogger(`filter, finding state value for ${state.name} with filter and item`);\n                    smLoggerDetail(filter);\n                    smLoggerDetail(filter);\n                    if (!isMatch) { // don't bother with other filters if we have already failed\n\n                        let attributeValue = item[filter.attributeName];\n                        smLoggerDetail(`filter, finding state value for ${state.name} with attribute value ${attributeValue}`);\n                        if (filter.evaluator) {\n                            isMatch = filter.evaluator(item, filter);\n                            smLoggerDetail(`filter (evaluator), with attribute ${attributeValue}`);\n                        } else {\n                            switch (filter.comparison) {\n                                case ComparisonType.isNull: {\n                                    smLoggerDetail(`filter (is Null), with attribute ${attributeValue}`);\n                                    isMatch = !(attributeValue);\n                                    break;\n                                }\n                                case ComparisonType.isNotNull: {\n                                    smLoggerDetail(`filter (is Not Null), with attribute ${attributeValue}`);\n                                    if (attributeValue) {\n                                        isMatch = true;\n                                    }\n                                    break;\n                                }\n                                case ComparisonType.equals: {\n                                    smLoggerDetail(`filter (===), with attribute ${attributeValue} and filter value ${filter.value}`);\n                                    isMatch = ((attributeValue) && (attributeValue === filter.value));\n                                    break;\n                                }\n                                case ComparisonType.lessThan: {\n                                    smLoggerDetail(`filter (<), with attribute ${attributeValue} and filter value ${filter.value}`);\n                                    isMatch = ((attributeValue) && (attributeValue < filter.value));\n                                    break;\n                                }\n                                case ComparisonType.greaterThan: {\n                                    smLoggerDetail(`filter (>), with attribute ${attributeValue} and filter value ${filter.value}`);\n                                    isMatch = ((attributeValue) && (attributeValue > filter.value));\n                                    break;\n                                }\n                                case ComparisonType.lessThanEqual: {\n                                    smLoggerDetail(`filter (<=), with attribute ${attributeValue} and filter value ${filter.value}`);\n                                    isMatch = ((attributeValue) && (attributeValue <= filter.value));\n                                    break;\n                                }\n                                case ComparisonType.greaterThanEqual: {\n                                    smLoggerDetail(`filter (>=), with attribute ${attributeValue} and filter value ${filter.value}`);\n                                    isMatch = ((attributeValue) && (attributeValue >= filter.value));\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                });\n                smLoggerDetail(`filter, finding state value for ${state.name} is match? ${isMatch}`);\n\n                if (isMatch) results.push(item);\n            });\n        } catch (err) {\n            smLogger(`filter, state value for ${state.name} is not any array`);\n        }\n        smLoggerDetail('Match results');\n        smLoggerDetail(results);\n        return results;\n    }\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: StateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, StateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: StateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: StateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, StateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        return this._findItemInState(name,item);\n    }\n\n    isItemInState(name: string, item: any): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => this.getEqualityFnForName(name)(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, oldItem, StateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, StateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        this._ensureStatePresent(name);\n        return this._findItemsInState(name, filters);\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.Local;\n    }\n\n    protected getEqualityFnForName(name: string): equalityFunction {\n        let result = this.defaultEquality;\n        if (this.equalityFns) {\n            const foundIndex = this.equalityFns.findIndex((fn) => fn.name === name);\n            if (foundIndex >= 0) result = this.equalityFns[foundIndex].equality;\n        }\n        return result;\n    }\n\n\n\n\n}\n","import debug from 'debug';\n\nimport {StateManager, StateValue} from \"./StateManager\";\nimport {AbstractStateManager, EqualityFnForName} from \"./AbstractStateManager\";\nimport {equalityFunction, FilterItem} from \"../CommonTypes\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n\n    private stateManagers: managerWithFilters[];\n\n    public constructor(defaultEq: equalityFunction, equalityFns: EqualityFnForName[] | null = null) {\n        super('aggregate', defaultEq, equalityFns);\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): StateValue {\n        let state: StateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        let state: StateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._findItemsInState(name, filters);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        let results = [];\n        if (this.stateManagers.length > 0) {\n            results = this.stateManagers[0].manager._findItemsInState(name,filters);\n        }\n        return results;\n    }\n\n    public _findItemInState(name: string, item:any): any {\n        let result = {};\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(name, sm.filters)) {\n                aggLogger(`finding item from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._findItemInState(name, item);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            result = this.stateManagers[0].manager._findItemInState(name,item);\n        }\n        return result;\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","import {StateManagerType, StateValue} from \"./StateManager\";\nimport {StateChangeListener} from \"./StateChangeListener\";\n\nimport debug from 'debug';\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction, FilterItem} from \"../CommonTypes\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager, defaultEq: equalityFunction) {\n        super('async', defaultEq);\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    public getType(): StateManagerType {\n        return this.wrappedSM.getType();\n    }\n\n    public _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        asyncLogger(`finding items with filters`);\n        return this.wrappedSM.findItemsInState(name, filters);\n    }\n\n    public _findItemInState(name: string, stateObj:any): any {\n        asyncLogger(`finding item `);\n        return this.wrappedSM.findItemInState(name, stateObj);\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): StateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: StateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: StateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n        asyncLogger(`Wrapped SM has supplied filter results ${name} passing to top level SM`);\n        this.topLevelSM.receivedFilterResults(name, filterResults);\n    }\n\n}","import debug from 'debug';\n\nimport {AbstractStateManager, EqualityFnForName} from \"./AbstractStateManager\";\nimport {StateValue} from \"./StateManager\";\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {equalityFunction} from \"../CommonTypes\";\n\nconst lsLogger = debug('browser-storage');\n\nexport class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n\n    protected storage: Storage;\n    protected allowPersistence: boolean;\n    // @ts-ignore\n    protected configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false, allowPersistence: boolean = false, defaultEq: equalityFunction, equalFns: EqualityFnForName[] | null = null) {\n        super('browser', defaultEq, equalFns);\n        this.storage = window.sessionStorage;\n        this.allowPersistence = allowPersistence;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): StateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) {\n            if (!this.allowPersistence) {\n                return;\n            }\n        }\n\n        let state: StateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        let state: StateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        let state: StateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import debug from 'debug';\nimport {IDBPDatabase, IDBPObjectStore, IDBPTransaction, openDB} from \"idb\";\nimport {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {FilterItem} from \"../CommonTypes\";\n\nconst logger = debug('indexeddb-ts');\n\nexport type collection = {\n    name: string,\n    keyField: string\n};\n\nexport class IndexedDBStateManager implements AsynchronousStateManager {\n    private static instance: IndexedDBStateManager;\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n    protected dbName: string;\n    protected collections: collection[];\n\n    public constructor() {\n        this.dbName = 'default';\n        this.delegate = new StateChangedDelegate('indexeddb');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n        this.collections = [];\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n\n\n    }\n\n    public static getInstance(): IndexedDBStateManager {\n        if (!IndexedDBStateManager.instance) {\n            IndexedDBStateManager.instance = new IndexedDBStateManager();\n        }\n        return IndexedDBStateManager.instance;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.collections.findIndex((collection) => collection.name === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public async initialise(dbName: string, collections: collection[]) {\n        logger(`opening database for ${dbName} with collections`);\n        logger(collections);\n        this.dbName = dbName;\n        this.collections = collections;\n\n        let runsComplete: boolean[] = [];\n        this.collections.forEach((collection) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n\n\n        await openDB(dbName, 1, {\n            upgrade(db, oldVersion, newVersion, transaction) {\n                collections.forEach((collection) => {\n                    logger(`creating collection for ${collection.name} with key ${collection.keyField}`)\n                    db.createObjectStore(collection.name, {keyPath: collection.keyField, autoIncrement: false});\n                });\n            },\n            blocked() {\n                // …\n            },\n            blocking() {\n                // …\n            },\n            terminated() {\n                // …\n            },\n        });\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n    }\n\n    public _getState(name: string): StateValue {\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            logger(`getting state ${name}`);\n            this.getWithCollectionKey(name, this.getKeyFieldForKey(name));\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n    } // should be present with initialise\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        let fn = async () => {\n            logger(`replacing item in storage ${state.name}`);\n            logger(state.value);\n            await this.removeAllItemsFromCollectionKey(state.name, this.getKeyFieldForKey(state.name));\n            await this.saveWithCollectionKey(state.name, state.value, this.getKeyFieldForKey(state.name));\n        }\n        fn();\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return;\n        this.addNewItemToCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.removeItemFromCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return;\n        this.updateItemInCollection(name, stateObj, this.getKeyFieldForKey(name));\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        let fn = async () => {\n            logger(`saving state ${name}`);\n            await this.removeAllItemsFromCollectionKey(name, this.getKeyFieldForKey(name));\n            await this.saveWithCollectionKey(name, stateObj, this.getKeyFieldForKey(name));\n        }\n        fn();\n    }\n\n    public async saveWithCollectionKey(key: string, saveData: any[], keyField: string = 'id') {\n        logger(`Saving array with key ${key}`);\n        logger(saveData);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        transaction.oncomplete = function (ev) {\n            logger('Success');\n            logger(ev);\n        };\n        transaction.onerror = function (ev) {\n            logger('Error');\n            logger(ev);\n        };\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await this.saveItemsToCollection(objectStore, saveData, keyField);\n    }\n\n    /* add a new item to the local storage if not already there */\n    public async addNewItemToCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Adding with key ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).add(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            this.callbackForAddItem(item, key);\n        }\n    }\n\n    public async removeItemFromCollection(key: string, item: any, keyField: string = 'id') {\n        if (item !== null) {\n            logger(`Removing with key ${key} item ${item[keyField]}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).delete(item[keyField]);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            await transaction.done;\n            this.callbackForRemoveItem(item, key);\n\n        }\n    }\n\n    public async updateItemInCollection(key: string, item: any, keyField: string = 'id') {\n        if (item) {\n            logger(`Updating item in storage ${key}`);\n            logger(item);\n            let db: IDBPDatabase = await openDB(this.dbName, 1);\n\n            // @ts-ignore\n            let transaction: IDBPTransaction = db.transaction([key], \"readwrite\").objectStore(key).put(item);\n            transaction.oncomplete = function (ev) {\n                logger('Success');\n                logger(ev);\n            };\n            transaction.onerror = function (ev) {\n                logger('Error');\n                logger(ev);\n            };\n            // @ts-ignore\n            await transaction.done;\n            this.callbackForUpdateItem(item, key);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n        this._replaceNamedStateInStorage({name: name, value: stateObjectForName});\n        if (informListeners) this.delegate.informChangeListenersForStateWithName(name, stateObjectForName, StateEventType.StateChanged, null);\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    public async getWithCollectionKey(key: string, keyField: string = 'id') {\n        let savedResults: any[] = [];\n        logger(`Loading with key ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1);\n        await this.checkForObjectStore(db, key, keyField);\n\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key]);\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        let cursor: IDBPCursor = await objectStore.openCursor();\n\n        while (cursor) {\n            // @ts-ignore\n            savedResults.push(cursor.value);\n            // @ts-ignore\n            cursor = await cursor.continue();\n        }\n\n        logger(savedResults);\n        this.callbackForGetItems(savedResults, key);\n\n    }\n\n    getConfiguredStateNames(): string[] {\n        let result: string[] = [];\n        this.collections.forEach((collection) => {\n            result.push(collection.name);\n        })\n        return result;\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return [];\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncLocal;\n    }\n\n    protected getKeyFieldForKey(key: string): string {\n        let result = '_id';\n        const foundIndex = this.collections.findIndex((collection) => collection.name === key);\n        if (foundIndex >= 0) {\n            result = this.collections[foundIndex].keyField;\n        }\n        return result;\n    }\n\n    protected async checkForObjectStore(db: IDBPDatabase, key: string, keyField: string) {\n        logger(`Checking for collection ${key}`);\n        if (!db.objectStoreNames.contains(key)) {\n            // @ts-ignore\n            logger(`Checking for collection ${key} - NOT found, creating`);\n            await db.createObjectStore(key, {keyPath: keyField, autoIncrement: false});\n        }\n    }\n\n    protected async saveItemsToCollection(objectStore: IDBPObjectStore, saveData: any[], keyField: string = 'id') {\n        logger(`Saving items to collection`);\n        saveData.forEach((data) => {\n            // @ts-ignore\n            objectStore.add(data);\n        });\n    }\n\n    protected async removeAllItemsFromCollectionKey(key: string, keyField: string = 'id') {\n        logger(`Clearing collection ${key}`);\n        let db: IDBPDatabase = await openDB(this.dbName, 1,);\n        await this.checkForObjectStore(db, key, keyField);\n        // @ts-ignore\n        let transaction: IDBPTransaction = db.transaction([key], \"readwrite\");\n        // @ts-ignore\n        let objectStore: IDBPObjectStore = transaction.store;\n        // @ts-ignore\n        await objectStore.clear();\n    }\n\n    protected async callbackForRemoveItem(data: any, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected async callbackForUpdateItem(data: any, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName}  - not forwarded`);\n        logger(data);\n    }\n\n    protected callbackForGetItems(data: any, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} - FORWARDING`);\n        logger(data);\n        this.setCompletedRun(associatedStateName);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.StateChanged, null);\n    }\n\n    protected async callbackForAddItem(data: any, associatedStateName: string) {\n        logger(`callback for add item for state ${associatedStateName}  - FORWARDING`);\n        logger(data);\n        this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n    }\n\n    _findItemInState(name: string, item: any): any {\n    }\n\n\n}\n\n","import debug from 'debug';\nimport {AbstractStateManager, EqualityFnForName} from './AbstractStateManager';\nimport {StateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../CommonTypes\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nexport class MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: StateValue[];\n\n    public constructor(defaultEq: equalityFunction, equalFns: EqualityFnForName[] | null = null) {\n        super('memory', defaultEq, equalFns);\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: StateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: StateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: StateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): StateValue {\n        // @ts-ignore\n        let state: StateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: StateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => this.getEqualityFnForName(name)(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\n","import {StateEventType, StateManagerType, StateValue} from \"./StateManager\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport {DownloadManager} from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport {AsynchronousStateManager} from \"./AsynchronousStateManager\";\nimport {StateChangedDelegate} from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {CallbackRegistry} from \"../network/CallbackRegistry\";\nimport {FilterItem} from \"../CommonTypes\";\n\n\nconst logger = debug('state-manager-api');\n\nexport type ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?: string,\n    findAll:boolean,\n    create:boolean,\n    update:boolean,\n    destroy:boolean,\n    find:boolean\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    private static FUNCTION_ID_ADD_ITEM = 'rest.api.state.manager.add.item';\n    private static FUNCTION_ID_REMOVE_ITEM = 'rest.api.state.manager.remove.item';\n    private static FUNCTION_ID_UPDATE_ITEM = 'rest.api.state.manager.update.item';\n    private static FUNCTION_ID_GET_ITEMS = 'rest.api.state.manager.get.items';\n    private static FUNCTION_ID_FIND_ITEM = 'rest.api.state.manager.find.item';\n\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n        this.callbackForFindItem = this.callbackForFindItem.bind(this);\n\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_ADD_ITEM, this.callbackForAddItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM, this.callbackForRemoveItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM, this.callbackForUpdateItem);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_GET_ITEMS, this.callbackForGetItems);\n        CallbackRegistry.getInstance().addRegisterCallback(RESTApiStateManager.FUNCTION_ID_FIND_ITEM, this.callbackForFindItem);\n\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: StateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): StateValue {\n        logger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            logger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive && config.findAll) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callbackId: RESTApiStateManager.FUNCTION_ID_GET_ITEMS,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                logger(`No configuration for state ${name}`);\n            }\n        }\n        let state: StateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: StateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        logger(`Adding item to ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive && config.create) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_ADD_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        logger(`Removing item from ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive && config.destroy) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_REMOVE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        logger(`Updating item in ${name}`);\n        logger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive && config.update) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callbackId: RESTApiStateManager.FUNCTION_ID_UPDATE_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any): any {\n        return this._findItemInState(name,item);\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean {\n        logger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        logger(item);\n        this._removeItemFromState(name, item, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, isPersisted);\n        return true;\n    }\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[] {\n        // TO DO\n        return [];\n    }\n\n    findItemsInState(name: string, filters: FilterItem[]): any[] {\n        return this._findItemsInState(name, filters);\n    }\n\n    getType(): StateManagerType {\n        return StateManagerType.AsyncRemote;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false,\n            find: false,\n            findAll: false,\n            create: false,\n            update: false,\n            destroy: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n\n        }\n        logger(data);\n    }\n\n\n\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n        }\n        logger(data);\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        logger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        logger(data);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.StateChanged, null);\n        }\n    }\n\n\n    private callbackForFindItem(data: any, status: number, associatedStateName: string) {\n        logger(`callback for find item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n        }\n    }\n\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string, wasOffline?: boolean) {\n        logger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            logger(data);\n            if (!wasOffline) {\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n            } else {\n                logger('Item was added offline, update the current data');\n                this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemUpdated, null);\n            }\n\n        }\n        // did the call fail? (server loss)\n        if (status === 500) {\n            logger(data);\n            logger(`Item adding - offline, but will be queued later`);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, StateEventType.ItemAdded, null);\n        }\n    }\n\n    _findItemInState(name: string, item: any): any {\n        logger(`Finding item from ${name}`);\n        logger(item);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = item.id;\n        if (config.idField) {\n            identifier = item[config.idField];\n        }\n\n        if (config.isActive && config.find) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.GET,\n                params: {\n                    id: identifier\n                },\n                callbackId: RESTApiStateManager.FUNCTION_ID_FIND_ITEM,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            logger(`No configuration for state ${name}`);\n        }\n    }\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateEventType, stateListeners} from \"./StateManager\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nexport class StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: StateEventType = StateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) => {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (StateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (StateEventType.FilterResults): {\n                            listener.filterResults(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {StateChangeListener} from \"./StateChangeListener\";\nimport {FilterItem} from \"../CommonTypes\";\n\nexport type StateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum StateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged,\n    FilterResults\n}\n\nexport enum StateManagerType {\n    Local,\n    AsyncLocal,\n    AsyncRemote\n}\n\n\nexport interface StateManager extends StateChangeInformer {\n    getType(): StateManagerType;\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any): any;\n\n    findItemsInState(name: string, filters: FilterItem[]): any[];\n\n    isItemInState(name: string, item: any): boolean;\n\n    removeItemFromState(name: string, item: any, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: StateValue): void;\n\n    _getState(name: string): StateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: StateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _findItemsInState(name: string, filters: FilterItem[]): any[];\n\n    _findItemInState(name:string, item:any): any;\n}","import {FieldUIConfig} from \"./form/FormUITypeDefs\";\n\nexport type Attribute = {\n    name: string,\n    value: string\n}\n\nexport type ModifierClasses = {\n    normal: string,\n    inactive: string,\n    active: string,\n    warning: string\n}\n\nexport type IconClasses = {\n    normal: string,\n    inactive?: string,\n    active?: string,\n    warning?: string,\n}\n\nexport type BasicButtonElement = {\n    classes: string,\n    text?: string,\n    iconClasses?: string,\n    attributes?: Attribute[]\n\n}\n\nexport type BasicElement = {\n    type: string,\n    attributes?: Attribute[],\n    classes: string,\n    innerHTML?: string\n}\n\nexport const DRAGGABLE_KEY_ID: string = 'text/plain';\nexport const DRAGGABLE_TYPE: string = 'draggedType';\nexport const DRAGGABLE_FROM: string = 'draggedFrom';\n\nexport type Draggable = {\n    type: string,\n    from: string\n}\n\nexport type Droppable = {\n    acceptTypes: string[];\n    acceptFrom?: string[];\n}\n\nexport type getIcons = (name: string, item: any) => string[];\n\nexport type ContentDetail = {\n    containerClasses: string,\n    textElement: BasicElement,\n    select: boolean,\n    quickDelete?: boolean,\n    icons?: getIcons,\n    badge?: BasicElement,\n    secondBadge?:BasicElement,\n    thirdBadge?:BasicElement,\n    delete?: BasicButtonElement,\n    drag?: Draggable,\n    background?: BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME: string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name: string,\n    button: BasicButtonElement\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId: string,\n    dataSourceId: string,\n    drop?: Droppable\n}\n\nexport type collectionSorter = (item1:any, item2:any) => number; // return < 0 if item1 should be before item2\n\nexport type CollectionViewDOMConfig = {\n    viewConfig: ViewDOMConfig,\n    resultsElement:BasicElement,\n    keyId: string,\n    keyType: KeyType,\n    modifiers?: ModifierClasses,\n    icons?: IconClasses,\n    detail: ContentDetail,\n    extraActions?: ExtraAction[],\n    sorter?:collectionSorter\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\n\nexport type SidebarPrefs = {\n    id: string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId: string\n}\n\nexport type ViewPrefs = {\n    sidebar?: SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition: RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?: BasicElement,\n    actionContainer: BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event: AlertEvent): void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n    private alertDiv: HTMLDivElement;\n    private alertTitle: HTMLHeadingElement;\n    private alertContent: HTMLParagraphElement;\n    private cancelButton: HTMLButtonElement;\n    private confirmButton: HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    public startAlert(listener: AlertListener, title: string, content: string, context?: any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event: MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', confirmHandler);\n        }\n\n        const cancelHandler = (event: MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click', cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click', confirmHandler);\n        this.cancelButton.addEventListener('click', cancelHandler);\n    }\n\n}","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from '../view/interface/View';\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\n\nconst vLogger = debug('user-search-sidebar');\n\nexport class BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static _instance: BlockedUserView;\n\n    public static getInstance(stateManager: StateManager): BlockedUserView {\n        if (!(BlockedUserView._instance)) {\n            BlockedUserView._instance = new BlockedUserView(stateManager);\n        }\n        return BlockedUserView._instance;\n    }\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'blockedUsers',\n            dataSourceId: VIEW_NAME.blockedUsers,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes: [DRAGGABLE.typeUser],\n            }\n        },\n        resultsElement:{\n            type:'a',\n            attributes:[{name: 'href', value: '#'}],\n            classes:'list-group-item my-list-item truncate-notification list-group-item-action'\n        } ,\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1'\n            },\n            select: true,\n            quickDelete: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n        },\n    };\n\n\n    private constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers: any[] = [];\n        const users: any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user: any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority, SimpleAttachment} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {StateChangeListener} from \"../../state/StateChangeListener\";\nimport {DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, Modifier, ViewDOMConfig} from \"../ConfigurationTypes\";\nimport {View} from '../view/interface/View';\nimport {NotificationManager} from \"../../notification/NotificationManager\";\nimport {CollectionView} from '../view/interface/CollectionView';\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\nimport {SecurityManager} from \"../../security/SecurityManager\";\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nexport class ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static _instance: ChatLogDetailView;\n\n    public static getInstance(stateManager: StateManager): ChatLogDetailView {\n        if (!(ChatLogDetailView._instance)) {\n            ChatLogDetailView._instance = new ChatLogDetailView(stateManager);\n        }\n        return ChatLogDetailView._instance;\n    }\n\n\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    private constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n    }\n\n    addEventListener(listener: CollectionViewListener): void {\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            const simpleAttachment:SimpleAttachment = {identifier:'',type:'',displayText:''};\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, simpleAttachment,{});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = SecurityManager.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {\n    }\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n}\n\n\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {MemoryBufferStateManager} from \"../../state/MemoryBufferStateManager\";\nimport {isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../view/delegate/CollectionViewListenerForwarder\";\nimport {STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nexport class ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener, CollectionViewListener {\n    private static _instance: ChatLogsView;\n\n    public static getInstance(): ChatLogsView {\n        if (!(ChatLogsView._instance)) {\n            ChatLogsView._instance = new ChatLogsView();\n        }\n        return ChatLogsView._instance;\n    }\n\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElement:{\n            type:'a',\n            attributes:[{name: 'href', value: '#'}],\n            classes:'list-group-item my-list-item truncate-notification list-group-item-action'\n        } ,\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1'\n            },\n            select: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                type: 'span',\n                classes: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n    protected selectedChatLog: ChatLog | null = null;\n\n   private constructor() {\n        super(ChatLogsView.DOMConfig, new MemoryBufferStateManager(isSameRoom), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameRoom(item1, item2);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        return true;\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n    selectChatRoom(roomName: string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this, this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.unreadMessages + item.unreadHighMessages + item.unreadUrgentMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this, this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n\n    showRequested(view: View): void {\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs, newState, true);\n    }\n}\n\n","import {SidebarViewContainer} from '../container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../ConfigurationTypes\";\nimport {StateManager} from \"../../state/StateManager\";\nimport {ChatLogsView} from \"./ChatLogsView\";\nimport {ChatLogDetailView} from \"./ChatLogDetailView\";\n\nexport class ChatRoomsSidebar extends SidebarViewContainer {\n    private static _instance: ChatRoomsSidebar;\n\n    public static getInstance(stateManager: StateManager): ChatRoomsSidebar {\n        if (!(ChatRoomsSidebar._instance)) {\n            ChatRoomsSidebar._instance = new ChatRoomsSidebar(stateManager);\n        }\n        return ChatRoomsSidebar._instance;\n    }\n\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'chatSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    private constructor(stateManager: StateManager) {\n        super(ChatRoomsSidebar.SidebarPrefs);\n        const chatView = ChatLogsView.getInstance();\n        this.addView(chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = ChatLogDetailView.getInstance(stateManager);\n        this.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        chatView.addEventListener(chatLogView);\n    }\n}\n\n\n","export const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    userSearch: 'userSearch',\n}\n\n\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nexport class FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static _instance: FavouriteUserView;\n\n    public static getInstance(stateManager: StateManager): FavouriteUserView {\n        if (!(FavouriteUserView._instance)) {\n            FavouriteUserView._instance = new FavouriteUserView(stateManager);\n        }\n        return FavouriteUserView._instance;\n    }\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'favouriteUsers',\n            drop: {\n                acceptFrom: [DRAGGABLE.fromUserSearch],\n                acceptTypes: [DRAGGABLE.typeUser],\n            },\n            dataSourceId: VIEW_NAME.favouriteUsers,\n        },\n        resultsElement:{\n            type:'a',\n            attributes:[{name: 'href', value: '#'}],\n            classes:'list-group-item my-list-item truncate-notification list-group-item-action'\n        },\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1'\n            },\n            select: true,\n            quickDelete: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                button: {\n                    classes: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                    iconClasses: 'fas fa-user-slash'\n                },\n            }\n        ]\n    };\n\n    private constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this, this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('', {});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers: any[] = [];\n        const users: any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user: any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('', {})\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n    }\n\n    showRequested(view: View): void {\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\n\n","import {SidebarViewContainer} from '../container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../ConfigurationTypes\";\nimport {StateManager} from \"../../state/StateManager\";\nimport {UserSearchView} from \"./UserSearchView\";\nimport {FavouriteUserView} from \"./FavouriteUserView\";\nimport {BlockedUserView} from \"./BlockedUserView\";\nimport {ChatRoomsSidebar} from \"./ChatRoomsSidebar\";\n\nexport class UserSearchSidebar extends SidebarViewContainer {\n\n    private static _instance: UserSearchSidebar;\n\n    public static getInstance(stateManager:StateManager): UserSearchSidebar {\n        if (!(UserSearchSidebar._instance)) {\n            UserSearchSidebar._instance = new UserSearchSidebar(stateManager);\n        }\n        return UserSearchSidebar._instance;\n    }\n    static SidebarPrefs: SidebarPrefs = {\n        id: 'userSearchSideBar',\n        expandedSize: '35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    private logSB:SidebarViewContainer;\n\n    private constructor(stateManager:StateManager) {\n        super(UserSearchSidebar.SidebarPrefs);\n        const recentSearches = UserSearchView.getInstance(stateManager);\n        this.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = FavouriteUserView.getInstance(stateManager);\n        this.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = BlockedUserView.getInstance(stateManager);\n        this.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n\n        this.logSB = ChatRoomsSidebar.getInstance(stateManager);\n    }\n}\n\n\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {BrowserStorageStateManager} from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../ConfigurationTypes\";\nimport {AbstractStatefulCollectionView} from \"../view/implementation/AbstractStatefulCollectionView\";\nimport {View} from \"../view/interface/View\";\nimport {ListViewRenderer} from \"../view/renderer/ListViewRenderer\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"./ChatTypes\";\nimport {SecurityManager} from \"../../security/SecurityManager\";\nimport {ChatRoomsSidebar} from \"./ChatRoomsSidebar\";\nimport {ChatLogsView} from \"./ChatLogsView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nexport class UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener {\n    private static _instance: UserSearchView;\n\n    public static getInstance(stateManager: StateManager): UserSearchView {\n        if (!(UserSearchView._instance)) {\n            UserSearchView._instance = new UserSearchView(stateManager);\n        }\n        return UserSearchView._instance;\n    }\n\n    static fastSearchInputId: string = 'fastSearchUserNames';\n    static dataLimit: number = 10;\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentUserSearches',\n            dataSourceId: VIEW_NAME.userSearch,\n        },\n        resultsElement:{\n            type:'a',\n            attributes:[{name: 'href', value: '#'}],\n            classes:'list-group-item my-list-item truncate-notification list-group-item-action'\n        } ,\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElement: {\n                type: 'span',\n                classes: 'mb-1'\n            },\n            select: true,\n            quickDelete: true,\n            delete: {\n                classes: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                button: {\n                    classes: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                    iconClasses: 'fas fa-user-plus'\n                },\n\n            },\n            {\n                name: 'block',\n                button: {\n                    classes: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                    iconClasses: 'fas fa-user-slash'\n                },\n            }\n        ]\n    };\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    private constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this, this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true, false, isSameMongo);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches, {});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML = item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value})) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = SecurityManager.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        ChatRoomsSidebar.getInstance(this.stateManager).eventShow(null);\n        if (roomName) ChatLogsView.getInstance().selectChatRoom(roomName);\n    }\n\n\n}\n\n\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nexport class SidebarViewContainer implements CollectionViewListener {\n    protected prefs: SidebarPrefs;\n    protected views: View[];\n\n    public constructor(prefs: SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view: View, config: SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.outerWidth < 769) {\n            size = '50%';\n        }\n        if (window.outerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n\n}\n\n","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {AbstractCollectionView} from \"../view/implementation/AbstractCollectionView\";\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type: string, item: any) => string;\nexport type getDescription = (type: string, item: any) => string;\n\nexport type actionHandler = (event: MouseEvent) => void;\nexport type hasActionPermission = (actionName: string, type: string, item: any) => boolean;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName: string,\n    elementDefinition: BasicElement,\n    iconClasses?: string,\n    handler: actionHandler,\n    hasPermission?: hasActionPermission\n}\n\nexport type ContextDefinitionType = {\n    internalType: string,\n    displayName: string,\n    identifier: getIdentifier,\n    description: getDescription,\n    actions: ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source: string,\n    view?: View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source: string,\n    internalType: string,\n    displayName: string,\n    identifier: string,\n    description: string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function (name: string, item: any) {\n    return '';\n}\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE: string = 'context-source';\n    private static TYPE: string = 'context-type';\n    private static DISPLAYNAME: string = 'context-display-name';\n    private static IDENTIFIER: string = 'context-id';\n    private static DESCRIPTION: string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n    private registry: ContextDefinition[] = [];\n    private menuDivEl: HTMLDivElement | null = null;\n    private menuContentEl: HTMLUListElement | null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click', this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement | null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement | null>document.getElementById('contextMenuItems');\n    }\n\n    public addContextFromView(view: View, internalType: string, displayName: string): ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source: string, type: string, item: any, element: HTMLElement, addTooltip: boolean = false, placement: TogglePlacement = TogglePlacement.bottom): void {\n        const context: ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE, context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER, context.defaultType.identifier(type, item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION, context.defaultType.description(type, item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html: true});\n        }\n    }\n\n    public findContextFromEvent(event: Event): ContextDetails | null {\n        let result: ContextDetails | null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    public addActionToContext(context: ContextDefinition, actionName: string, displayName: string, handler: actionHandler, icon?: string, permissionCheck?: hasActionPermission) {\n        let action: ContextTypeAction = {\n            actionName: actionName,\n            displayName: displayName,\n            handler: handler,\n            hasPermission: permissionCheck,\n            elementDefinition: {\n                type: 'a',\n                attributes: [{name: 'href', value: '#'}],\n                classes: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context, action);\n    }\n\n    public handleContextMenu(event: MouseEvent): any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context: ContextDetails | null = this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private ensureInRegistry(source: string): ContextDefinition {\n        let result: ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source: source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        } else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    private findContextFromElement(element: HTMLElement): ContextDetails | null {\n        // do we have context information in this element?\n        let result: ContextDetails | null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source, internalType: type, displayName: name, identifier: id, description: desc};\n        } else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element: HTMLElement, contexts: ContextDetails[]): void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            if (type && name && id && desc) {\n                let result: ContextDetails = {\n                    source: source,\n                    internalType: type,\n                    displayName: name,\n                    identifier: id,\n                    description: desc\n                };\n                contexts.push(result);\n            }\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent, contexts);\n        }\n    }\n\n    private addContextActionToContext(context: ContextDefinition, action: ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    private buildContextMenu(context: ContextDetails): boolean {\n        logger(`building context menu`);\n        let result = false;\n\n        // find the context for these details\n        const contextDef: ContextDefinition | null = this.ensureInRegistry(context.source);\n\n        let selectedItem: any | null = null;\n\n        if (contextDef && contextDef.view && (contextDef.view instanceof AbstractCollectionView)) {\n            logger(`collection view context - finding item with identifier ${context.identifier}`);\n            let collectionView = <CollectionView>(contextDef.view);\n            let compareWith = {};\n            // @ts-ignore\n            compareWith[collectionView.getCollectionUIConfig().keyId] = context.identifier;\n\n            selectedItem = collectionView.getItemInNamedCollection(context.internalType, compareWith);\n        }\n\n        logger(`found item for context menu`);\n        logger(selectedItem);\n\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n\n                    if ((selectedItem && action.hasPermission && action.hasPermission(action.actionName, contextDef.defaultType.internalType, selectedItem)) ||\n                        !(action.hasPermission)) {\n                        let itemEl = document.createElement(action.elementDefinition.type);\n                        if (itemEl && this.menuContentEl) {\n                            browserUtil.addAttributes(itemEl, action.elementDefinition.attributes);\n                            browserUtil.addRemoveClasses(itemEl, action.elementDefinition.classes);\n\n                            itemEl.setAttribute(ContextualInformationHelper.SOURCE, context.source);\n                            itemEl.setAttribute(ContextualInformationHelper.TYPE, context.internalType);\n                            itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME, context.displayName);\n                            itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER, context.identifier);\n                            itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION, context.description);\n                            itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                            itemEl.addEventListener('click', (event: MouseEvent) => {\n                                this.hideContextMenu(event);\n                                action.handler(event);\n                            });\n                            itemEl.innerHTML = `${action.displayName}`;\n                            if (action.iconClasses) {\n                                itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                            }\n                            this.menuContentEl.appendChild(itemEl);\n                            logger('new menu element is ');\n                            logger(this.menuContentEl);\n                            result = true;\n                        }\n                    }\n\n\n                });\n            }\n        } else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    private hideContextMenu(event: MouseEvent): any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none');\n        }\n    }\n\n    private showContextMenu(event: MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl, 'd-none', false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormMode, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\nimport {v4} from \"uuid\";\nimport {FormConfigHelper} from \"./FormConfigHelper\";\nimport {FieldInputElementFactory} from \"./factory/FieldInputElementFactory\";\nimport {FormFieldPermissionChecker} from \"./FormFieldPermissionChecker\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form, FormListener, AlertListener, FieldListener {\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement | null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields: Field[] = [];\n    protected map: AttributeFieldMapItem[];\n    protected isInitialised: boolean = false;\n    protected hasChangedBoolean: boolean = false;\n    protected id: string;\n    protected configHelper:FormConfigHelper;\n    protected hasExternalControl:boolean;\n    protected permissionChecker:FormFieldPermissionChecker;\n    protected formMode:FormMode;\n\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition,configHelper:FormConfigHelper, permissionChecker:FormFieldPermissionChecker,hasExternalControl:boolean = false) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error(`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.configHelper = configHelper;\n        this.hasExternalControl = hasExternalControl;\n        this.permissionChecker = permissionChecker;\n        this.currentDataObj = {};\n        this.id = v4();\n        this.formMode = FormMode.unset;\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public getFormMode(): FormMode {\n        return this.formMode;\n    }\n\n    public getCurrentDataObj(): any {\n        return this.currentDataObj;\n    }\n\n    public getDataObjectDefinition(): DataObjectDefinition {\n        return this.dataObjDef;\n    }\n\n\n    cancel(): void {\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                target: this,\n                formId: this.uiDef.id,\n                eventType: FormEventType.CANCELLING\n            }\n            this.formChanged(formEvent);\n        }\n    }\n\n    delete(): void {\n        if (this.uiDef && !this.isReadOnly()) {\n            let formEvent: FormEvent = {\n                target: this,\n                formId: this.uiDef.id,\n                eventType: FormEventType.DELETING\n            }\n            this.formChanged(formEvent);\n        }\n    }\n\n    save(): void {\n        if (this.uiDef && !this.isReadOnly()) {\n            let formEvent: FormEvent = {\n                target: this,\n                formId: this.uiDef.id,\n                eventType: FormEventType.SAVING\n            }\n            this.formChanged(formEvent);\n        }\n    }\n\n\n\n\n    public hasChanged(): boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return this.dataObjDef.displayName;\n    }\n\n    valueChanged(form: Form, field: Field, fieldDef: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(form: Form, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    public abstract getFormattedDataObject(): any;\n\n    public initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.formMode = FormMode.unset;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            } else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !(this.formMode === FormMode.displayOnly)) this.checkFormValidationOnDisplay();\n        if (isVisible && (this.formMode === FormMode.displayOnly)) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.formMode = FormMode.create;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.formMode = FormMode.update;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.formMode = FormMode.displayOnly;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !(this.formMode === FormMode.displayOnly)) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                } else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.formMode = FormMode.displayOnly;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Are you sure you want to delete this information?`, FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.formMode = FormMode.update;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this, this.formMode, field.getFieldDefinition(), ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                if (response.message) field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    getFieldFromDataFieldId(dataFieldId: string): Field | undefined {\n        let result: Field | undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n            result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event: AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch (event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    } else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n            if (this.currentDataObj) {\n                if (this.permissionChecker.hasPermissionToEditField(this.currentDataObj,field)) {\n                    field.clearReadOnly();\n                }\n            }\n            else {\n                field.clearReadOnly();\n            }\n        });\n    }\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return (this.formMode === FormMode.displayOnly);\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate(): void;\n\n    protected abstract _startCreate(): void;\n\n    protected abstract _reset(): void;\n\n    protected abstract _visible(): void;\n\n    protected abstract _hidden(): void;\n\n    protected abstract _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void;\n\n    protected abstract _displayOnly(): void;\n\n    protected abstract _isSameObjectAsDisplayed(dataObj: any): boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void;\n\n    protected abstract _saveFinishedOrAborted(): void;\n\n    protected abstract _saveIsActive(): void;\n\n    protected abstract clearUnsavedMessage(): void;\n\n    protected abstract setUnsavedMessage(): void;\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef: FieldDefinition): FieldUIConfig | null | undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result: FieldUIConfig | null | undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index++;\n            }\n        }\n        return result;\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this, this.formMode, field.getFieldDefinition(), ConditionResponse.hide);\n            if (response.ruleFailed) {\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this, this.formMode, field.getFieldDefinition(), ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    if (response.message) field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                response = ValidationManager.getInstance().applyRulesToTargetField(this, this.formMode, field.getFieldDefinition(), ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n    getElementIdForField(fieldId: string): string | undefined {\n        return FieldInputElementFactory.getElementIdForFieldId(this,fieldId);\n    }\n\n\n\n\n}\n","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\nimport {FormConfigHelper} from \"./FormConfigHelper\";\nimport {ColourInputField} from \"./field/ColourInputField\";\nimport {FormFieldPermissionChecker} from \"./FormFieldPermissionChecker\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition, configHelper:FormConfigHelper, permissionChecker:FormFieldPermissionChecker, hasExternalControl:boolean = false) {\n        super(containerId, dataObjDef,configHelper,permissionChecker, hasExternalControl);\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                if (fieldDef.type === FieldType.colour) {\n                                    field = new ColourInputField(this, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                }\n                                else {\n                                    field = new InputField(this, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                }\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        } else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = this.configHelper.generateFormConfig(this.dataObjDef, displayOrder, hasDeleteButton, hideModifierFields,this.hasExternalControl);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup', (event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('change', (event) => {\n                dlogger(`change in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n            rbg.radioButtons.forEach((radioButton) => {\n                radioButton.addEventListener('change', (event) => {\n                    dlogger(`radio button change in form ${this.getName()}`);\n                    this.hasChangedBoolean = true;\n                    this.setUnsavedMessage();\n                });\n            });\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) {\n            field.validate();\n            if (this.currentDataObj) {\n                if (!this.permissionChecker.hasPermissionToEditField(this.currentDataObj,field)) {\n                    field.setReadOnly();\n                }\n                else {\n                    field.clearReadOnly();\n                }\n            }\n        }\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result: string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId) || (currentObjId && !suppliedObjId)) {\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            if (this.factoryElements.cancelButton) this.factoryElements.cancelButton.removeAttribute('disabled');\n            if (this.factoryElements.submitButton) {\n                this.factoryElements.submitButton.removeAttribute('disabled');\n\n                // if (this.uiDef.submitButton) { // @ts-ignore\n                //     this.factoryElements.submitButton.innerText = this.uiDef.submitButton.text;\n                // }\n            }\n\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled', 'true');\n            }\n            if (this.factoryElements.cancelButton) this.factoryElements.cancelButton.setAttribute('disabled', 'true');\n            if (this.factoryElements.submitButton) this.factoryElements.submitButton.setAttribute('disabled', 'true');\n        }\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave && this.uiDef.submitButton && this.factoryElements.submitButton) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.text;\n            }\n        }\n    }\n\n\n}","import {FormFieldPermissionChecker} from \"./FormFieldPermissionChecker\";\nimport {Field} from \"./field/Field\";\n\nexport class DefaultFormFieldPermissionChecker implements FormFieldPermissionChecker {\n    hasPermissionToDeleteItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToEditField(dataObj: any, field: Field): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n}","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target: Form,\n    formId: string,\n    eventType: FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event: FormEvent, formValues?: any): boolean; // return true to cancel the action\n}","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\nimport {Field} from \"./field/Field\";\n\nexport type ValidationResponse = {\n    isValid: boolean,\n    message?: string,\n    resetOnFailure: boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field: FieldDefinition, currentValue: string): any;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field:Field|null, fieldDef: FieldDefinition, currentValue: string): string | null;\n\n    setSubElements(elements: HTMLInputElement[]): void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field: Field | null, fieldDef: FieldDefinition, currentValue: string): string;\n    editCompleted(field: Field|null, fieldDef: FieldDefinition):void;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field: FieldDefinition, formValues: string[]): boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup,\n    tableData\n}\n\nexport type FieldLabel = {\n    label: string,\n    attributes?: Attribute[],\n    classes?: string\n}\n\nexport type DescriptionText = {\n    message: string,\n    elementType: string,\n    elementClasses: string,\n}\n\nexport type DisplayOrder = {\n    fieldId: string,\n    displayOrder: number\n}\n\nexport type rendererFn = (fieldUIConfig: FieldUIConfig, value: string) => string;\n\nexport const defaultGetValue: rendererFn = (fieldUIConfig: FieldUIConfig, currentValue: string) => {\n    let result = currentValue;\n    if (fieldUIConfig.renderer) {\n        let value = fieldUIConfig.renderer.renderValue(null,fieldUIConfig.field, currentValue);\n        if (value) result = value;\n    }\n    return result;\n}\n\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder: number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?: {\n        container?: BasicElement,\n        label?: FieldLabel,\n        element: BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions,\n    getValue: rendererFn\n}\n\nexport type FieldGroup = {\n    containedBy?: BasicElement,\n    fields: FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id: string,\n    displayName: string,\n    classes?: string,\n    unsavedChanges: BasicElement,\n    fieldGroups: FieldGroup[],\n    buttonsContainedBy?: BasicElement\n    deleteButton?: BasicButtonElement,// should be clickable\n    cancelButton?: BasicButtonElement,// should be clickable\n    submitButton?: BasicButtonElement  // should be clickable\n    activeSave?: string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update,\n    displayOnly ,\n    any\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId: string,\n    attributeId: string\n}\n\nexport const DATA_ID_ATTRIBUTE: string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {Field} from \"../field/Field\";\nimport {Form} from \"../Form\";\n\nexport class EditingEventListener {\n    private form:Form;\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private field:Field;\n\n    constructor(form: Form, field:Field, fieldConfig: FieldUIConfig, listeners: FieldListener[]) {\n        this.form = form;\n        this.formId = form.getId();\n        this.field = field;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEditEvent = this.handleEditEvent.bind(this);\n        this.handleEditCompletedEvent = this.handleEditCompletedEvent.bind(this);\n    }\n\n    handleEditEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const fieldDef: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(this.field, fieldDef, value);\n            if (newValue && (newValue !== value)) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.form, this.field, fieldDef, newValue));\n\n            }\n        }\n    }\n\n    handleEditCompletedEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.fieldConfig.editor) {\n            const fieldDef: FieldDefinition = this.fieldConfig.field;\n            this.fieldConfig.editor.editCompleted(this.field, fieldDef);\n        }\n\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {Field} from \"../field/Field\";\nimport {Form} from \"../Form\";\n\nexport class RenderingEventListener {\n    private form:Form;\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n    private field: Field;\n\n    constructor(form: Form, field: Field, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.form = form;\n        this.formId = form.getId();\n        this.field = field;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement: HTMLInputElement): string {\n        let newValue: string | null = '';\n        if (this.fieldConfig.renderer) {\n            const fieldDef: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(this.field,fieldDef, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.form, this.field, fieldDef, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        } else {\n            return '';\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {Form} from \"../Form\";\nimport debug from 'debug';\n\nconst logger = debug('validation-event-handler');\n\nexport class ValidationEventHandler {\n    private form:Form;\n    private formId: string;\n    private fieldConfig: FieldUIConfig;\n    private listeners: FieldListener[];\n    private subElements: HTMLInputElement[] | null;\n\n    constructor(form: Form, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null) {\n        this.form = form;\n        this.formId = form.getId();\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement: HTMLElement, isValid: boolean, value: string, message: string | undefined = undefined, resetOnFailure: boolean = false) {\n        logger(`Handling validation for field ${this.fieldConfig.field.id}: ${isValid} with message ${message}`);\n        logger(this.fieldConfig);\n\n        if (this.fieldConfig.validator && fieldElement) {\n            logger(`Handling validation for field ${this.fieldConfig.field.id}: ${isValid} with message ${message} - have validator and element`)\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            let divId = `${this.form.getDataObjectDefinition().id}.field.${this.fieldConfig.field.id}.error`\n            logger(`Handling validation for field ${this.fieldConfig.field.id}: ${isValid} with message ${message} - div is ${divId}`)\n            const errorMessageDiv = document.getElementById(divId);\n            const errorMessageEl = document.getElementById(`${divId}.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId, field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement: HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement, validationResp.isValid, value, validationResp.message, validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}\n","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../Form\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    public static getElementIdForFieldId(form:Form, fieldId:string):string {\n        return `${form.getId()}.field.${fieldId}`\n    }\n\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements: HTMLInputElement[] | null = null): void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        // if (fieldConfig.validator) { // is the value in the field valid\n        //     const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners, subElements);\n        //     if (subElements) { // event for the subelements\n        //         subElements.forEach((subElement) => {\n        //             subElement.addEventListener('blur', eventHandler);\n        //         });\n        //\n        //     } else {\n        //         fieldElement.addEventListener('blur', eventHandler);\n        //     }\n        //\n        // }\n\n        // if (fieldConfig.editor) { // render the value when the field gains focus\n        //     fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        // } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker();\n            $(fieldElement).datepicker(\"option\", \"dateFormat\", 'dd/mm/yy');\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.classes);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.type);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.attributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.attributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.type);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.classes);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.attributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.attributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.type);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.classes);\n                    if (fieldConfig.subElement.container.attributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.attributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.type);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.classes);\n                if (fieldConfig.subElement.element.attributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.attributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    if (fieldConfig.elementType === UIFieldType.radioGroup) {\n                        containerEl.innerHTML += valueOption.name;\n                    }\n                    else if (fieldConfig.elementType === UIFieldType.select) {\n                        valueEl.innerText = valueOption.name;\n\n                    }\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        } {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements: HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners, subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container: radioGroupElement,\n            radioButtons: subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields: HTMLTextAreaElement[],\n    selectFields: HTMLSelectElement[],\n    radioButtonGroups: {\n        container: HTMLElement,\n        radioButtons: HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton?: HTMLButtonElement,\n    submitButton?: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    private constructor() {\n    }\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    public createFormElements(form: Form, formListeners: FormListener[], formConfig: FormUIDefinition, fieldListeners: FieldListener[]): FormFactoryResponse {\n        let formEl: HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id', formConfig.id);\n        formEl.setAttribute('name', formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl, formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements: HTMLInputElement[] = [];\n        let formTAElements: HTMLTextAreaElement[] = [];\n        let formRBGElements: {\n            container: HTMLElement,\n            radioButtons: HTMLInputElement[]\n        }[] = [];\n        let formSelectElements: HTMLSelectElement[] = [];\n\n        let unsavedMessage: HTMLElement = document.createElement(formConfig.unsavedChanges.type);\n        browserUtil.addRemoveClasses(unsavedMessage, formConfig.unsavedChanges.classes);\n        if (formConfig.unsavedChanges.attributes) browserUtil.addAttributes(unsavedMessage, formConfig.unsavedChanges.attributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group: FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.type);\n                if (containerEl) {\n                    if (group.containedBy.attributes) browserUtil.addAttributes(containerEl, group.containedBy.attributes);\n                    if (group.containedBy.classes) browserUtil.addRemoveClasses(containerEl, group.containedBy.classes);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field: FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id, containerEl, field, fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer: HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.type);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.attributes) browserUtil.addAttributes(buttonContainer, formConfig.buttonsContainedBy.attributes);\n                browserUtil.addRemoveClasses(buttonContainer, formConfig.buttonsContainedBy.classes);\n                formEl.appendChild(buttonContainer);\n            } else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl: HTMLButtonElement | undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form, formConfig, formListeners, formConfig.deleteButton, FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl: HTMLButtonElement | undefined = undefined;\n        if (formConfig.cancelButton) {\n            cancelButtonEl = this.createFormButton(form, formConfig, formListeners, formConfig.cancelButton, FormEventType.CANCELLING);\n            buttonContainer.appendChild(cancelButtonEl);\n        }\n\n        let submitButtonEl: HTMLButtonElement | undefined = undefined;\n        if (formConfig.submitButton) {\n            submitButtonEl = this.createFormButton(form, formConfig, formListeners, formConfig.submitButton, FormEventType.SAVING);\n            buttonContainer.appendChild(submitButtonEl);\n        }\n\n        let result: FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage: unsavedMessage,\n            fields: formInputElements,\n            selectFields: formSelectElements,\n            radioButtonGroups: formRBGElements,\n            textFields: formTAElements,\n            deleteButton: deleteButtonEl,\n            cancelButton: cancelButtonEl,\n            submitButton: submitButtonEl\n        }\n\n        return result;\n    }\n\n    private createFormButton(form: Form, formConfig: FormUIDefinition, formListeners: FormListener[], buttonDef: BasicButtonElement, eventType: FormEventType): HTMLButtonElement {\n        let buttonEl: HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl, buttonDef.classes);\n        buttonEl.setAttribute('id', `${formConfig.id}.${eventType}`);\n        if (buttonDef.text) {\n            buttonEl.innerText = buttonDef.text;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl, buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click', (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent: FormEvent = {\n                target: form,\n                formId: formConfig.id,\n                eventType: eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, FormMode, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {Form} from \"../Form\";\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected form:Form;\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden: boolean = false;\n\n    constructor(form: Form, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.form = form;\n        this.formId = form.getId();\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(form, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(form, this, config, [this], subElements);\n        const editingHandler = new EditingEventListener(form, this, config, [this]);\n        if (config.editor) { // render the value when the field gains focus\n            this.element.addEventListener('focus', editingHandler.handleEditEvent);\n            this.element.addEventListener('blur', editingHandler.handleEditCompletedEvent);\n            this.element.addEventListener('click', editingHandler.handleEditEvent);\n        }\n\n        if (config.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(this.form, config, this.listeners, subElements);\n            if (subElements && subElements.length > 0) { // event for the subelements\n                subElements.forEach((subElement) => {\n                    subElement.addEventListener('blur', eventHandler);\n                });\n\n            } else {\n                this.element.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements && (this.subElements.length > 0)) {\n            logger(`Adding change listeners to subelements of ${config.field.id}`)\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        } else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        } else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, false, '', message, false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId, this.definition, this.getValue(), message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            // derived values are calculated from the data object overall\n            if (this.definition.derivedValue) {\n                result = this.definition.derivedValue.getValue(this.form.getCurrentDataObj(),this.definition,this.form.getFormMode() === FormMode.create);\n            }\n            else {\n\n                switch (this.config.elementType) {\n                    case (UIFieldType.radioGroup): {\n                        logger(`${this.definition.id} - getting value - rbg`);\n\n                        if (this.subElements && (this.subElements.length > 0)) {\n                            this.subElements.forEach((subElement) => {\n                                if (subElement.checked) {\n                                    logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                    result = subElement.value;\n                                    subElement.checked = true;\n                                }\n                            });\n                        }\n                        break;\n                    }\n                    case (UIFieldType.checkbox): {\n                        // @ts-ignore\n                        result = '' + this.element.checked;\n                        break;\n                    }\n                    default: {\n                        // @ts-ignore\n                        result = this.element.value;\n                        break;\n                    }\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = '' + newValue;\n        if (this.element && this.config) {\n            // derived fields have no \"setter\"\n            if (this.definition.derivedValue) return;\n\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements && (this.subElements.length > 0)) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl: HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0; index < selectEl.options.length; index++) {\n                        // @ts-ignore\n                        const option: HTMLOptionElement = selectEl.options.item(index);\n                        logger(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            logger(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    logger(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements && (this.subElements.length > 0)) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue(): void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this,this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(form: Form, field: FieldDefinition, currentValue: string, message: string): void {\n    }\n\n    valueChanged(form: Form, field: Field, fieldDef: FieldDefinition, newValue: string | null): void {\n    }\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style', 'display:none');\n                }\n\n            } else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element, true, '');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            } else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements && (this.subElements.length > 0)) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly', 'true');\n        this.element.setAttribute('disabled', 'true');\n        // do the same for subelements\n        if (this.subElements && (this.subElements.length > 0)) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly', 'true');\n                subElement.setAttribute('disabled', 'true');\n            });\n        }\n    }\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.form, this, this.definition, value));\n        }\n    }\n\n    getElement(): HTMLElement {\n        return this.element;\n    }\n}\n\n","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport debug from 'debug';\nimport {isHexValueDark} from \"../../../util/MiscFunctions\";\nimport {Form} from \"../Form\";\n\nconst logger = debug('colour-input-field');\n\n\n\nexport class ColourInputField extends AbstractField {\n\n    constructor(form: Form, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(form, config, fieldDef, element);\n        this.setValue = this.setValue.bind(this);\n    }\n\n\n    setValue(newValue: string): void {\n        logger(`Setting background style to colour ${newValue}`);\n        super.setValue(newValue);\n        // special case of colour types\n        browserUtil.removeAttributes(this.element,[\"style\"]);\n        let styleOptions = [{name:\"style\",value:`background-color:${newValue};colour:black`}];\n        if (isHexValueDark(newValue)) {\n            styleOptions = [{name:\"style\",value:`background-color:${newValue};color:white`}];\n        }\n        browserUtil.addAttributes(this.element,styleOptions);\n    }\n\n}\n\n\n","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\nimport {Form} from \"../Form\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(form: Form, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(form, config, fieldDef, element);\n    }\n}\n\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../Form\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(form: Form, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(form, config, fieldDef, element,subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../Form\";\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(form: Form, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(form, config, fieldDef, element);\n    }\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../Form\";\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(form: Form, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(form, config, fieldDef, element);\n    }\n}\n\n","import {Field} from \"../field/Field\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ComparisonType} from \"../../../CommonTypes\";\nimport {RuleCheck} from \"./ValidationManager\";\nimport debug from 'debug';\n\nconst logger = debug('validation-helper-functions');\n\nexport class ValidationHelperFunctions {\n\n    private static _instance: ValidationHelperFunctions;\n\n    public constructor() {}\n\n    public static getInstance(): ValidationHelperFunctions {\n        if (!(ValidationHelperFunctions._instance)) {\n            ValidationHelperFunctions._instance = new ValidationHelperFunctions();\n        }\n        return ValidationHelperFunctions._instance;\n    }\n\n\n    public areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        if (targetField.getValue() !== sourceField.getValue()) {\n            result = {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return result;\n    }\n\n    public isFieldAndValueEqual(field: Field, value:string): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        if (field.getValue() !== value) {\n            result = {\n                ruleFailed: true,\n                message: `${field.getName()} must be equal to ${value}`,\n            };\n        }\n        return result;\n    }\n\n\n    public compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n        logger(`Comparing two values with types and comparison ${comparison} - target value (type:${targetType},value:${targetValue}), source value (type:${sourceType},value:${sourceValue})`)\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    public isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            result = {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return result;\n    }\n\n    public isFieldLessThanValue(field: Field, value:string): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let type: FieldType = field.getFieldDefinition().type;\n        let sourceValue = field.getValue();\n\n        if (!this.compareTwoValuesWithTypes(type, sourceValue, type, value, ComparisonType.lessThan)) {\n            result = {\n                ruleFailed: true,\n                message: `${field.getName()} must be less than ${value}`,\n            };\n        }\n        return result;\n    }\n\n    public isFieldLessThanEqualValue(field: Field, value:string): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let check: RuleCheck = this.isFieldAndValueEqual(field, value);\n        if (check.ruleFailed) {\n            check = this.isFieldLessThanValue(field, value);\n            if (check.ruleFailed) {\n                result = {\n                    ruleFailed: true,\n                    message: `${field.getName()} must be less than or equal to ${value}`,\n                };\n\n            }\n        }\n        return result;\n    }\n\n    public isFieldGreaterThanValue(field: Field, value:string): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let type: FieldType = field.getFieldDefinition().type;\n        let sourceValue = field.getValue();\n\n        if (!this.compareTwoValuesWithTypes(type, sourceValue, type, value, ComparisonType.greaterThan)) {\n            result = {\n                ruleFailed: true,\n                message: `${field.getName()} must be greater than ${value}`,\n            };\n        }\n        return result;\n    }\n    public isFieldGreaterThanEqualValue(field: Field, value:string): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let check: RuleCheck = this.isFieldAndValueEqual(field, value);\n        if (check.ruleFailed) {\n            check = this.isFieldGreaterThanValue(field, value);\n            if (check.ruleFailed) {\n                result = {\n                    ruleFailed: true,\n                    message: `${field.getName()} must be greater than or equal to ${value}`,\n                };\n\n            }\n        }\n        return result;\n    }\n\n    public isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                result = {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return result;\n    }\n\n    public isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            result = {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return result;\n    }\n\n    public isFieldNull(sourceField: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        logger(`field ${field.getId()} is null - current value is '${targetValue}'`);\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            result = {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return result;\n\n    }\n\n    public isFieldNotNull(field: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let targetValue = field.getValue();\n        logger(`field ${field.getId()} is NOT null - current value is '${targetValue}'`);\n        // @ts-ignore\n        if (targetValue) {\n            if (targetValue.trim().length === 0) {\n                result = {\n                    ruleFailed: true,\n                    message: `${field.getName()} must not be empty`,\n                };\n            }\n            \n        } \n        else {\n            result = {\n                ruleFailed: true,\n                message: `${field.getName()} must not be empty`,\n            };\n        }\n        return result;\n\n    }\n\n    public doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits: string[] = values.split(',');\n            let foundInValue: boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (!foundInValue) {\n                result = {\n                    ruleFailed: true,\n                    message: `${field.getName()} must be have a value in ${values}`,\n                };\n            }\n        }\n        return result;\n    }\n\n    public doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field, values);\n    }\n\n    public isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let result:RuleCheck = {ruleFailed: false}\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                result = {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return result;\n    }\n\n    public compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isFieldNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isFieldNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n    \n    public compareFieldWithValue(field: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.isFieldAndValueEqual(field, value);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isFieldLessThanValue(field,value);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isFieldLessThanEqualValue(field,value);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isFieldGreaterThanValue(field,value);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isFieldGreaterThanEqualValue(field,value);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isFieldNull(field);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isFieldNotNull(field);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(field, value);\n                break;\n            }\n        }\n    }\n\n\n}","import {ConditionResponse, MultipleConditionLogic, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ComparisonType} from \"../../../CommonTypes\";\nimport {FormMode} from \"../FormUITypeDefs\";\nimport {ValidationHelperFunctions} from \"./ValidationHelperFunctions\";\nimport {FormFieldValidator} from \"./FormFieldValidator\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\nconst erLogger = debug('validation-manager-execute-rule');\nconst merLogger = debug('validation-manager-multiple-condition-rule-results');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string,\n    index?:number\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\ntype _Condition = {\n    sourceField?: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    formMode:FormMode,\n    targetField: Field,\n    response: ConditionResponse,\n    conditions: _Condition[];\n    multipleConditionLogic:MultipleConditionLogic\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener,FormFieldValidator {\n\n    private static _instance: ValidationManager;\n    private formRules: FormRuleSet[];\n    private formValidators:FormFieldValidator[];\n\n    private constructor() {\n        this.formRules = [];\n        this.formValidators = [];\n    }\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    public addFormValidator(validator:FormFieldValidator) {\n        this.formValidators.push(validator);\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            formMode:rule.formMode,\n            targetField: targetField,\n            response: rule.response,\n            conditions:[],\n            multipleConditionLogic:MultipleConditionLogic.failIfAnyConditionFails\n            //fieldConditions: [],\n            //valueConditions: []\n        }\n\n        if (rule.multipleConditionLogic) {\n            convertedRule.multipleConditionLogic = rule.multipleConditionLogic;\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n//                convertedRule.fieldConditions.push({\n                convertedRule.conditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if ((condition.values) && !(condition.sourceDataFieldId)) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                // convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                convertedRule.conditions.push({values: condition.values, comparison: condition.comparison});\n                if (targetField) targetField.addFieldListener(this);\n            } else if ((condition.sourceDataFieldId) && (!condition.values)) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                // convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                convertedRule.conditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: []\n            }\n            formRuleSet.rules.push(convertedRule);\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    public failedValidation(form: Form, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(form: Form, formMode: FormMode, field: FieldDefinition, onlyRulesOfType: ConditionResponse | null): RuleCheck {\n        logger(`Checking rules for form ${form.getId()}, data field ${field.id} of type ${onlyRulesOfType}`);\n        // which rules apply?\n        let rules: _ValidationRule[] = this.getRulesForFieldChange(form, field.id, false);\n\n        let result: RuleCheck = {\n            ruleFailed: false\n        }\n\n        // get the rules for the field, filtered by the condition response type\n        if (onlyRulesOfType) {\n            logger(`Only validating rules of type ${onlyRulesOfType}`);\n            let ruleSubset: _ValidationRule[] = [];\n            rules.forEach((rule) => {\n                if (rule.response === onlyRulesOfType) {\n                    ruleSubset.push(rule);\n                }\n            });\n            rules = ruleSubset;\n        }\n\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                flogger(`Rule failed for form ${form.getId()} with field ${field.displayName} with message ${response.message}`);\n                result.ruleFailed = true;\n                result.message = response.message;\n            }\n        });\n\n        // if we haven't failed yet and we have validators\n        this.formValidators.forEach((validator) => {\n            let ruleCheck:RuleCheck = validator.applyRulesToTargetField(form,formMode,field,onlyRulesOfType);\n            if (ruleCheck.ruleFailed) {\n                flogger(`FormFieldValidator - Rule failed for form ${form.getId()} with field ${field.displayName} with message ${ruleCheck.message}`);\n                result.ruleFailed = true;\n                result.message = ruleCheck.message;\n            }\n        });\n        return result;\n    }\n\n    public valueChanged(form: Form, field: Field, fieldDef: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${form}, data field ${fieldDef.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(form, fieldDef.id, true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        erLogger(`Executing rule with response ${rule.response} for target ${rule.targetField.getId()}`);\n        erLogger(rule);\n\n\n        let ruleChecks:RuleCheck[] = [];\n\n        rule.conditions.forEach((condition) => {\n            erLogger('condition rule');\n            erLogger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck;\n\n            if (condition.sourceField) {\n                erLogger('condition rule - source field present');\n                ruleCheck = ValidationHelperFunctions.getInstance().compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            }\n            else {\n                erLogger(`condition rule - target field value check - ${values}`);\n                ruleCheck = ValidationHelperFunctions.getInstance().compareFieldWithValue(rule.targetField, condition.comparison, values);\n            }\n            ruleChecks.push(ruleCheck);\n            if (ruleCheck.ruleFailed) {\n                flogger('condition rule FAILED');\n            }\n            else {\n                flogger('condition rule PASSED');\n            }\n        });\n\n\n        // are we dealing with one rule check or multiple?\n        if (ruleChecks.length === 1) {\n            flogger(`Single rule check - rule failed? ${ruleChecks[0].ruleFailed}`)\n            response.message = ruleChecks[0].message;\n            response.ruleFailed = ruleChecks[0].ruleFailed;\n        }\n        else {\n            let errorMessageBuffer = '';\n            let failedRuleChecks:RuleCheck[] = [];\n            ruleChecks.forEach((ruleCheck,index) => {\n                if (ruleCheck.ruleFailed) {\n                    ruleCheck.index = index;\n                    failedRuleChecks.push(ruleCheck);\n                    errorMessageBuffer += ruleCheck.message + ', ';\n                }\n            });\n            if (errorMessageBuffer.length > 0) {\n                errorMessageBuffer = errorMessageBuffer.substr(0, errorMessageBuffer.length - 2);\n            }\n            merLogger(`Multiple rule check - number of failures ${failedRuleChecks.length} with message ${errorMessageBuffer}`);\n\n            switch (rule.multipleConditionLogic) {\n                case MultipleConditionLogic.failIfAnyConditionFails: {\n                    if (failedRuleChecks.length > 0) {\n                        flogger(`Multiple rule check - when any conditions fail - rule FAILED`);\n                        merLogger(`Multiple rule check - when any conditions fail - rule FAILED`);\n                        response.message = errorMessageBuffer;\n                        response.ruleFailed = true;\n                    }\n                    break;\n                }\n                case MultipleConditionLogic.onlyFailIfAllConditionsFail: {\n                    if (failedRuleChecks.length === ruleChecks.length) {\n                        flogger(`Multiple rule check - when all conditions fail - rule FAILED`);\n                        merLogger(`Multiple rule check - when all conditions fail - rule FAILED`);\n                        response.ruleFailed = true;\n                        response.message = errorMessageBuffer;\n                    }\n                    break;\n                }\n                case MultipleConditionLogic.failWhenTheNextInSequenceFails: {\n                    if (failedRuleChecks.length > 0) {\n                        flogger(`Multiple rule check - when next in sequence fails - rule FAILED`);\n                        merLogger(`Multiple rule check - when next in sequence fails - rule FAILED`);\n                        response.message = errorMessageBuffer;\n                        response.ruleFailed = true;\n                    }\n                    break;\n                }\n                case MultipleConditionLogic.whenAllConditionsFailRuleShouldNotBeApplied: {\n                    if ((failedRuleChecks.length === ruleChecks.length) || (failedRuleChecks.length === 0)) {\n                        merLogger(`Multiple rule check - when all fail rule does not apply - rule PASSED`);\n                        response.ruleFailed = false;\n                        response.message = errorMessageBuffer;\n                    }\n                    else {\n                        flogger(`Multiple rule check - when all fail rule does not apply - rule FAILED`);\n                        merLogger(`Multiple rule check - when all fail rule does not apply - rule FAILED`);\n                        response.ruleFailed = true;\n                        response.message = errorMessageBuffer;\n                    }\n                    break;\n                }\n                case MultipleConditionLogic.failOnlyIfFinalConditionIsAFailAndPreviousConditionsAreNotFails: {\n                    if (failedRuleChecks.length === 1) {\n                        const failedRuleIndex = failedRuleChecks[0].index;\n                        // is this the last rule in the chain of conditions?\n                        if (failedRuleIndex === (ruleChecks.length - 1)) {\n                            flogger(`Multiple rule check - only if final is a fail, others are not fails - rule FAILED`);\n                            merLogger(`Multiple rule check - only if final is a fail, others are not fails - rule FAILED`);\n                            response.message = errorMessageBuffer;\n                            response.ruleFailed = true;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n        // for show and hide rules, we want the opposite effect (i.e. a success on conditions show cause the action)\n        if ((response.response === ConditionResponse.hide) || (response.response === ConditionResponse.show)) {\n            response.ruleFailed = !response.ruleFailed;\n            erLogger(`Changing show/hide rule result to opposite boolean value to cause activation if the conditions were PASSED`);\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(form: Form, dataFieldId: string, includeSourceFields: boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        const formMode = form.getFormMode();\n\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${form} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                // check the rule applies to the current form mode\n                const ruleFormMode = rule.formMode;\n                logger(`Rule applies to mode ${ruleFormMode} (any? ${(ruleFormMode === FormMode.any)}) and current form mode is ${formMode}`);\n                if ((ruleFormMode === FormMode.any) ||\n                    (ruleFormMode === formMode)) {\n\n\n                    if (rule.targetField.getId() === dataFieldId) {\n                        logger(`Found rule where data field ${dataFieldId} is target`);\n                        if (rule.targetField.isValid()) {\n                            rules.push(rule);\n                        } else {\n                            flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                        }\n                    } else {\n                        if (includeSourceFields) {\n                            // rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            rule.conditions.forEach((condition) => {\n                                if (condition.sourceField) {\n                                    if (condition.sourceField.getId() === dataFieldId) {\n                                        logger(`Found rule where data field ${dataFieldId} is source`);\n                                        if (condition.sourceField.isValid()) {\n                                            rules.push(rule);\n                                        } else {\n                                            flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n\n}\n","import {ComparisonType} from \"../../../CommonTypes\";\nimport {FormMode} from \"../FormUITypeDefs\";\n\n\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport enum MultipleConditionLogic {\n    onlyFailIfAllConditionsFail,\n    failIfAnyConditionFails,\n    failWhenTheNextInSequenceFails,\n    whenAllConditionsFailRuleShouldNotBeApplied,\n    failOnlyIfFinalConditionIsAFailAndPreviousConditionsAreNotFails\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?: string,\n    values?: string\n}\n\nexport type ValidationRule = {\n    formMode:FormMode,\n    targetDataFieldId: string,\n    response: ConditionResponse,\n    multipleConditionLogic?:MultipleConditionLogic,\n    conditions: ValidationCondition[]\n}\n","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {\n    defaultGetValue,\n    DisplayOrder,\n    FieldGroup,\n    FieldUIConfig,\n    FormUIDefinition,\n    UIFieldType\n} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\nimport {FormConfigHelper} from \"../form/FormConfigHelper\";\nimport {ColourEditor} from \"./ColourEditor\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\n\nexport class BootstrapFormConfigHelper implements FormConfigHelper {\n\n    public static COLOUR_PICKER_CONTAINER:string = 'framework-colour-picker-container';\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    private constructor() {\n    }\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    generateFormConfig(dataObjDef: DataObjectDefinition, displayOrders: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false, hasExternalControl: boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation: RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef, index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.colour):\n                case (FieldType.duration): {\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    } else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder: DisplayOrder | undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue: number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder: displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n                getValue: defaultGetValue\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    type: 'div',\n                    classes: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                        validator: fieldOperations,\n                        messageDisplay: {\n                            type: 'div',\n                            classes: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {type: 'option', classes: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        type: 'input',\n                        classes: 'form-check-input',\n                        attributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        type: 'div',\n                        classes: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n            if (fieldDef.type === FieldType.colour) {\n                fieldUIConfig.editor = new ColourEditor(BootstrapFormConfigHelper.COLOUR_PICKER_CONTAINER);\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                type: 'div',\n                classes: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                type: 'div',\n                classes: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                attributes: [{name: 'style', value: 'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            }\n        }\n        if (!hasExternalControl) {\n            formConfig.buttonsContainedBy = {\n                type: 'div',\n                classes: 'd-flex w-100 justify-space-between',\n            };\n            formConfig.cancelButton = {\n                text: 'Cancel  ',\n                classes: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            };\n            formConfig.submitButton = {\n                text: 'Save  ',\n                classes: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            }\n            formConfig.activeSave = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;';\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a, b) => {\n                return (a.displayOrder - b.displayOrder);\n            })\n\n        });\n\n        if (hasDeleteButton && !hasExternalControl) {\n            formConfig.deleteButton = {\n                text: 'Delete  ',\n                classes: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n\n    getElementIdForDataFieldId(fieldId: string): string | undefined {\n        return undefined;\n    }\n}","import {FieldEditor} from \"../form/FormUITypeDefs\";\nimport {Field} from \"../form/field/Field\";\nimport browserUtil, {getElementOffset} from \"../../util/BrowserUtil\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\n\n\nexport class ColourEditor implements FieldEditor {\n    protected colourPickerContainerId: string;\n    protected field: Field | null = null;\n    protected container:HTMLElement|null = null;\n\n    constructor(colourPickerContainerId: string) {\n        this.colourPickerContainerId = colourPickerContainerId;\n        this.editValue = this.editValue.bind(this);\n        this.cbColourChange = this.cbColourChange.bind(this);\n        this.container = document.getElementById(this.colourPickerContainerId);\n        if (this.container) {\n            browserUtil.addRemoveClasses(this.container, 'd-none');\n            $(this.container).farbtastic(this.cbColourChange);\n        }\n\n    }\n\n    editCompleted(field: Field, fieldDef: FieldDefinition): void {\n        if (this.container) browserUtil.addRemoveClasses(this.container, 'd-none');\n    }\n\n    editValue(field: Field | null, fieldDef: FieldDefinition, currentValue: string): string {\n        this.field = field;\n        // do we have a valid value?\n        if (/^#[0-9a-f]{6}$/.test(currentValue) && this.container) {\n            $.farbtastic(this.container).setColor(currentValue);\n        }\n        if (field && this.container) {\n            let element = field.getElement();\n            let offset = getElementOffset(element);\n            offset.top += element.offsetHeight;\n            browserUtil.removeAttributes(this.container, ['style']);\n            browserUtil.addAttributes(this.container, [{\n                name: 'style',\n                value: `top:${offset.top}px; left: ${offset.left}px;`\n            }]);\n            browserUtil.addRemoveClasses(this.container, 'd-none', false);\n        }\n\n        return currentValue;\n    }\n\n    cbColourChange(colour: string) {\n        if (/^#[0-9a-f]{6}$/.test(colour)) {\n            if (this.field) this.field.setValue(colour);\n            if (this.container) browserUtil.addRemoveClasses(this.container, 'd-none', true);\n        }\n    }\n\n\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller: DetailViewListener;\n\n    constructor(controller: DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view: DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view, dataObj);\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view, dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view, dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view, dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback: any;\n\n    constructor(callback: any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this, 'Discard Changes', 'There are unsaved changes.  Discard?', {});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener, DetailViewListener {\n    protected parentView: CollectionView;\n    protected children: DetailView[] = [];\n    protected delegate: ChildViewListenerDelegate;\n\n    constructor(typeName: string, parentView: CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView: DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise(): void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('', selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew: boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\nimport {Field} from \"../form/field/Field\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator,FieldRenderer {\n    private radioButtons: HTMLInputElement[] = [];\n\n    public constructor() {\n    }\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result: any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        } else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field:Field|null,fieldDef: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${fieldDef.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options: ValueOption[];\n    private listeners: FieldValueOptionsListener[];\n\n    constructor(options: ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name: string, value: string) {\n        this.options.push({name, value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId: string,\n    dataSource: string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate {\n    protected view: CollectionView;\n    protected selectedItem: any | null = null;\n    protected eventForwarder: CollectionViewListenerForwarder;\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context: ItemContext = {\n            itemId: itemId,\n            dataSource: dataSource\n        }\n\n        return context;\n    }\n\n}","import {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandlerDelegate, ItemContext} from \"./CollectionViewEventHandlerDelegate\";\nimport {ContextDetails, ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\n\nexport class CollectionViewEventHandlerDelegateUsingContext extends CollectionViewEventHandlerDelegate {\n\n    constructor(view: CollectionView, forwarder: CollectionViewListenerForwarder) {\n        super(view, forwarder);\n    }\n\n    protected getItemContext(event: Event): ItemContext {\n\n        const contextDetail: ContextDetails | null = ContextualInformationHelper.getInstance().findContextFromEvent(event);\n\n        let context: ItemContext;\n\n        if (contextDetail) {\n            context = {\n                itemId: contextDetail.identifier,\n                dataSource: contextDetail.source\n            }\n        } else {\n            context = {\n                itemId: '',\n                dataSource: this.view.getName(),\n            }\n        }\n\n\n        return context;\n    }\n\n}","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {CollectionViewDOMConfig, Modifier} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView, CollectionViewEventHandler {\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this, forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from, item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n\n    abstract hasActionPermission(actionName: string, from: string, item: any): boolean;\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n    }\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            if (this.collectionUIConfig.sorter) {\n                // pre sort the collection for display\n                newState = newState.sort(this.collectionUIConfig.sorter);\n            }\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n    getSecondaryBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getTertiaryBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n\n}\n","import {StateChangeListener} from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener, CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName: string) {\n        super(uiConfig, stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName, this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render(): void {\n        this.updateViewForNamedCollection(this.collectionName, this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show(): void {\n    }\n\n    hidden(): void {\n    }\n\n    documentLoaded(view: View): void {\n    }\n\n    hideRequested(view: View): void {\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n    }\n\n    showRequested(view: View): void {\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n    filterResults(managerName: string, name: string, filterResults: any): void {\n    }\n\n\n}","import {DRAGGABLE_FROM, DRAGGABLE_KEY_ID, DRAGGABLE_TYPE, ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl: HTMLElement | null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Not implemented\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n\n    abstract show(): void;\n\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n\n}\n","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem: any | null = null;\n    protected renderer: DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer: DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    public getItemId(name: string, item: any) {\n        return '';\n    }\n\n    public getItemDescription(name: string, item: any): string {\n        return '';\n    }\n\n    public hasActionPermission(actionName: string, from: string, item: any): boolean {\n        return true;\n    }\n\n    public getItem(from: string, identifier: string): any {\n        return this.currentItem;\n    }\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        } else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName, selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder, hasDeleteButton, hideModifierFields)\n    }\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    Modifier,\n    RowPosition,\n    SCREEN_WIDTH_LARGE,\n    SCREEN_WIDTH_MEDIUM,\n    SCREEN_WIDTH_SMALL\n} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper, TogglePlacement} from \"../../context/ContextualInformationHelper\";\n\nconst logger = debug('carousel-renderer');\n\nexport class CarouselViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected config: CarouselDOMConfig;\n\n    private lastRenderedContainer: HTMLElement | null = null;\n    private lastRenderedCollectionName: string | null = null;\n    private lastRenderedCollection: any | null = null;\n    private previousWindowWidth: number = 0;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler, config: CarouselDOMConfig) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.config = config;\n    }\n\n    onDocumentLoaded(): void {\n        // we need to track window resizing\n        this.previousWindowWidth = window.innerWidth;\n\n        window.addEventListener('resize', (event) => {\n            const newWindowWidth = window.innerWidth;\n            let reRenderRequired: boolean = false;\n            if (newWindowWidth < this.previousWindowWidth) {\n                if (this.previousWindowWidth > SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth <= SCREEN_WIDTH_LARGE) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        logger(`window reduced and is now smaller or equal to large`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        logger(`window reduced and is now smaller or equal to medium`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth <= SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        logger(`window reduced and is now smaller or equal to small`);\n                    }\n                }\n            } else {\n                if (this.previousWindowWidth <= SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth > SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        logger(`window increased and is now larger than small`);\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                        logger(`window increased and is now larger than medium`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth > SCREEN_WIDTH_LARGE) {\n                        logger(`window increased and is now larger than large`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n            }\n            this.previousWindowWidth = newWindowWidth;\n            if (this.lastRenderedContainer && this.lastRenderedCollection && this.lastRenderedCollectionName && reRenderRequired) {\n                this.setDisplayElementsForCollectionInContainer(this.lastRenderedContainer, this.lastRenderedCollectionName, this.lastRenderedCollection);\n            }\n        });\n\n\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n\n        logger(`view ${this.view.getName()}: creating carousel item`);\n        logger(item);\n\n        const collectionConfig = this.view.getCollectionUIConfig();\n\n\n        let childEl: HTMLElement = document.createElement(collectionConfig.resultsElement.type);\n        browserUtil.addRemoveClasses(childEl, collectionConfig.resultsElement.classes);\n        browserUtil.addAttributes(childEl, collectionConfig.resultsElement.attributes);\n\n\n        if (collectionConfig.detail.background) {\n            let backgroundEl = document.createElement(collectionConfig.detail.background.type);\n            browserUtil.addRemoveClasses(backgroundEl, collectionConfig.detail.background.classes);\n            browserUtil.addAttributes(backgroundEl, collectionConfig.detail.background.attributes);\n            childEl.appendChild(backgroundEl);\n            this.view.renderBackgroundForItemInNamedCollection(backgroundEl, collectionName, item);\n        }\n\n\n        // the content may be structured\n        let textEl = childEl;\n        if (collectionConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, collectionConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(collectionConfig.detail.textElement.type);\n            browserUtil.addRemoveClasses(textEl, collectionConfig.detail.textElement.type);\n            browserUtil.addAttributes(textEl, collectionConfig.detail.textElement.attributes)\n\n            contentEl.appendChild(textEl);\n\n            if (collectionConfig.extraActions || collectionConfig.detail.delete) {\n                let buttonsEl = document.createElement(this.config.actionContainer.type);\n                browserUtil.addRemoveClasses(buttonsEl, this.config.actionContainer.classes);\n\n                contentEl.appendChild(buttonsEl);\n\n\n                if (collectionConfig.extraActions) {\n                    collectionConfig.extraActions.forEach((extraAction) => {\n                        const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                        if (hasPermissionForAction) {\n\n                            let action: HTMLElement = document.createElement('button');\n                            action.setAttribute('type', 'button');\n                            browserUtil.addRemoveClasses(action, extraAction.button.classes);\n                            browserUtil.addAttributes(action, extraAction.button.attributes);\n                            if (extraAction.button.text) {\n                                action.innerHTML = extraAction.button.text;\n                            }\n                            if (extraAction.button.iconClasses) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, extraAction.button.iconClasses);\n                                iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                                action.appendChild(iconEl);\n                            }\n                            action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                            action.addEventListener('click', (event) => {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                this.eventHandler.eventActionClicked(event);\n                            });\n                            buttonsEl.appendChild(action);\n                        }\n                    });\n                }\n                if (collectionConfig.detail.delete && collectionConfig && canDeleteItem) {\n                    let deleteButtonEl: HTMLElement = document.createElement('button');\n                    deleteButtonEl.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(deleteButtonEl, collectionConfig.detail.delete.classes);\n                    browserUtil.addAttributes(deleteButtonEl, collectionConfig.detail.delete.attributes);\n                    if (collectionConfig.detail.delete.text) {\n                        deleteButtonEl.innerHTML = collectionConfig.detail.delete.text;\n                    }\n                    if (collectionConfig.detail.delete.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.detail.delete.iconClasses);\n                        deleteButtonEl.appendChild(iconEl);\n                    }\n                    deleteButtonEl.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventDeleteClickItem(event);\n                    });\n                    buttonsEl.appendChild(deleteButtonEl);\n                }\n\n            }\n\n            childEl.appendChild(contentEl);\n\n            if (collectionConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (collectionConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        const displayText = this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n        // add icons\n\n\n        // add modifiers for patient state\n        if (collectionConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    logger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal);\n                    if (collectionConfig.icons && collectionConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    logger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active);\n                    if (collectionConfig.icons && collectionConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    logger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive);\n                    if (collectionConfig.icons && collectionConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        logger(`view ${this.view.getName()}: creating carousel results`);\n        logger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // need to break the items up by row, and the last row is active (assumes increasing time order)\n        const numberOfResults = newState.length;\n\n        // number of items per row depends on view port\n        let itemsPerRow = this.config.itemsPerRow.xlarge;\n        if (window.innerWidth <= SCREEN_WIDTH_LARGE) {\n            itemsPerRow = this.config.itemsPerRow.large;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_MEDIUM) {\n            itemsPerRow = this.config.itemsPerRow.medium;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_SMALL) {\n            itemsPerRow = this.config.itemsPerRow.small;\n        }\n\n\n        const numberOfRows = Math.ceil(numberOfResults / itemsPerRow);\n        logger(`view ${this.view.getName()}: creating carousel with number of results per row of ${itemsPerRow} with rows ${numberOfRows}`);\n        for (let rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {\n            // create the row\n            let rowContainerEl = document.createElement(this.config.rowContainer.type);\n            browserUtil.addRemoveClasses(rowContainerEl, this.config.rowContainer.classes);\n            browserUtil.addAttributes(rowContainerEl, this.config.rowContainer.attributes);\n            //browserUtil.addAttributes(rowContainerEl,[{name:'style',value:'display:block'}]);\n\n            let rowEl = document.createElement(this.config.row.type);\n            browserUtil.addRemoveClasses(rowEl, this.config.row.classes);\n            browserUtil.addAttributes(rowEl, this.config.row.attributes);\n            rowContainerEl.appendChild(rowEl);\n\n            // if this the active row?\n            if (((rowIndex === 0) && this.config.activeRowPosition === RowPosition.first) ||\n                ((rowIndex === (numberOfRows - 1)) && this.config.activeRowPosition === RowPosition.last)) {\n                browserUtil.addRemoveClasses(rowContainerEl, this.config.activeRow.classes);\n                browserUtil.addAttributes(rowContainerEl, this.config.activeRow.attributes);\n            }\n\n            let itemIndex = rowIndex * itemsPerRow;\n\n            while (itemIndex < ((rowIndex + 1) * itemsPerRow) && (itemIndex < numberOfResults)) {\n                logger(`rowIndex ${rowIndex} item index ${itemIndex}`);\n                const item = newState[itemIndex];\n\n\n                let itemContainerEl = rowEl;\n                if (this.config.multipleItemsPerRowContainer) {\n                    itemContainerEl = document.createElement(this.config.multipleItemsPerRowContainer.type);\n                    browserUtil.addRemoveClasses(itemContainerEl, this.config.multipleItemsPerRowContainer.classes);\n                    browserUtil.addAttributes(itemContainerEl, this.config.multipleItemsPerRowContainer.attributes);\n                    rowEl.appendChild(itemContainerEl);\n                }\n\n                const itemEl = this.createDisplayElementForCollectionItem(collectionName, item);\n                itemContainerEl.appendChild(itemEl);\n\n                ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, itemEl, true, TogglePlacement.bottom);\n                itemEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n\n                itemIndex++;\n            }\n\n\n            containerEl.appendChild(rowContainerEl);\n\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        this.lastRenderedContainer = containerEl;\n        this.lastRenderedCollectionName = collectionName;\n        this.lastRenderedCollection = newState;\n\n    }\n\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\nimport {FormConfigHelper} from \"../../form/FormConfigHelper\";\nimport {FormFieldPermissionChecker} from \"../../form/FormFieldPermissionChecker\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer, FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem: boolean;\n    protected containerId: string;\n    protected forwarder: DetailViewListenerForwarder | null;\n    protected view: DetailView | null;\n    protected permissionChecker: FormFieldPermissionChecker;\n    protected configHelper:FormConfigHelper;\n    protected hasExternalControl:boolean;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker: FormFieldPermissionChecker, configHelper: FormConfigHelper, hasExternalControl: boolean = false) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n        this.configHelper = configHelper;\n        this.hasExternalControl = hasExternalControl;\n    }\n\n    hasActionPermission(actionName: string, from: string, item: any): boolean {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view: DetailView): void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef, this.configHelper, this.permissionChecker, this.hasExternalControl);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder: DisplayOrder[], hasDeleteButton: boolean, hideModifierFields: boolean): void {\n        if (this.form) this.form.initialise(displayOrder, hasDeleteButton, hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n        $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n        $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n        $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item: any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view, this.currentItem);\n                $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view, this.currentItem);\n                $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view, formattedObj);\n                    } else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view, formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n                $(`#${this.containerId}`).animate({ scrollTop: 0 }, \"fast\");\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElement.type);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsElement.classes);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElement.attributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElement.type);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElement.classes);\n            browserUtil.addAttributes(textEl, uiConfig.detail.textElement.attributes);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.type);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.classes);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.type);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.classes);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.attributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n            if (uiConfig.detail.secondBadge) {\n                const badgeValue = this.view.getSecondaryBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.secondBadge.type);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.secondBadge.classes);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.secondBadge.attributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n            if (uiConfig.detail.thirdBadge) {\n                const badgeValue = this.view.getTertiaryBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.thirdBadge.type);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.thirdBadge.classes);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.thirdBadge.attributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.button.classes);\n                        browserUtil.addAttributes(action, extraAction.button.attributes);\n                        if (extraAction.button.text) {\n                            action.innerHTML = extraAction.button.text;\n                        }\n                        if (extraAction.button.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.button.iconClasses);\n                            iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                            iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        action.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.classes);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.text) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.text;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}\n","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('list-view-renderer-with-context');\n\nexport class ListViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem: boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName, item);\n        const uiConfig: CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElement.type);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsElement.classes);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElement.attributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(uiConfig.detail.textElement.type);\n            browserUtil.addRemoveClasses(textEl, uiConfig.detail.textElement.classes);\n            browserUtil.addAttributes(textEl, uiConfig.detail.textElement.attributes);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.type);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.classes);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.type);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.classes);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.attributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n            if (uiConfig.detail.secondBadge) {\n                const badgeValue = this.view.getSecondaryBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.secondBadge.type);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.secondBadge.classes);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.secondBadge.attributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n            if (uiConfig.detail.thirdBadge) {\n                const badgeValue = this.view.getTertiaryBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.thirdBadge.type);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.thirdBadge.classes);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.thirdBadge.attributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name, collectionName, item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.button.classes);\n                        browserUtil.addAttributes(action, extraAction.button.attributes);\n                        if (extraAction.button.text) {\n                            action.innerHTML = extraAction.button.text;\n                        }\n                        if (extraAction.button.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.button.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.classes);\n                browserUtil.addAttributes(deleteButtonEl, uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.text) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.text;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n\n        // add the key ids for selection\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons: string[] = uiConfig.detail.icons(collectionName, item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName, item)}`);\n            containerEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(), collectionName, item, childEl, true);\n            childEl.addEventListener('contextmenu', ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}\n","import {Attribute} from \"../ui/ConfigurationTypes\";\n\nexport type ElementOffset = {\n    left: number;\n    top: number\n};\n\n/**\n * Returns an element's position relative to the whole document (page).\n *\n * If the element does not exist, returns O/O (top-left window corner).\n *\n * @example getOffset(document.getElementById('#element'));\n *\n * @param el\n * @see https://stackoverflow.com/a/28222246/2391795\n */\nexport const getElementOffset = (el: Element | null): ElementOffset => {\n    const rect = el?.getBoundingClientRect();\n\n    return {\n        left: (rect?.left || 0) + window?.scrollX,\n        top: (rect?.top || 0) + window?.scrollY,\n    };\n};\n\n\nexport class BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string | undefined = undefined, isAdding: boolean = true): void {\n        if (classesText) {\n            const classes = classesText.split(' ');\n            classes.forEach((classValue) => {\n                if (classValue.trim().length > 0) {\n                    if (isAdding) {\n                        element.classList.add(classValue);\n                    } else {\n                        element.classList.remove(classValue);\n                    }\n                }\n            });\n        }\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x: number, y: number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","export function addDurations(duration1: string, duration2: string): string {\n    const durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid: boolean = durationRegexp.test(duration1);\n    const duration2Valid: boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components: string[] = duration1.split(':');\n        const duration2Components: string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        let sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0) ? sumHours + ':' : ''}${(sumMinutes < 10) ? '0' + sumMinutes : sumMinutes}:${(sumSeconds < 10) ? '0' + sumSeconds : sumSeconds}`\n    } else {\n        return '00:00';\n    }\n}","export function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1: any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","export function truncateString(str: string, num: number): string {\n    // If the length of str is less than or equal to num\n    // just return str--don't truncate it.\n    if (str.length <= num) {\n        return str\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...'\n}\n\nexport function convertSingleHexToNumber(singleHexValue:string):number {\n    let value = parseInt(singleHexValue);\n    if (isNaN(value)) {\n        switch (singleHexValue) {\n            case 'a': {\n                value = 11;\n                break;\n            }\n            case 'b': {\n                value = 12;\n                break;\n            }\n            case 'c': {\n                value = 13;\n                break;\n            }\n            case 'd': {\n                value = 14;\n                break;\n            }\n            case 'e': {\n                value = 15;\n                break;\n            }\n            case 'f': {\n                value = 16;\n                break;\n            }\n        }\n\n    }\n    return value;\n}\n\nexport function convertHexToNumber(hexValue:string):number {\n    let value = 0;\n    let firstHexDigit = hexValue.substr(1,1);\n    let tensHexDigit = hexValue.substr(0,1);\n    value = 10 * convertSingleHexToNumber(tensHexDigit) + convertSingleHexToNumber(firstHexDigit);\n    return value;\n}\n\nexport function isHexValueDark(hexValue:string):boolean {\n    let result = false;\n    // we are dark if the equivalent rgb value is < 125 for each value\n    hexValue = hexValue.toLowerCase();\n    if (hexValue.length < 7) return false;\n\n    let redHex = hexValue.substr(1,2);\n    let greenHex = hexValue.substr(3,2);\n    let blueHex = hexValue.substr(5,2);\n\n    let redValue = convertHexToNumber(redHex);\n    let greenValue = convertHexToNumber(greenHex);\n    let blueValue = convertHexToNumber(blueHex);\n\n    if ((redValue < 125) && (greenValue < 125) && (blueValue < 125)) {\n        result = true;\n    }\n\n    return result;\n}\n","var map = {\n\t\"./af\": \"./node_modules/moment/locale/af.js\",\n\t\"./af.js\": \"./node_modules/moment/locale/af.js\",\n\t\"./ar\": \"./node_modules/moment/locale/ar.js\",\n\t\"./ar-dz\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-dz.js\": \"./node_modules/moment/locale/ar-dz.js\",\n\t\"./ar-kw\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-kw.js\": \"./node_modules/moment/locale/ar-kw.js\",\n\t\"./ar-ly\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ly.js\": \"./node_modules/moment/locale/ar-ly.js\",\n\t\"./ar-ma\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-ma.js\": \"./node_modules/moment/locale/ar-ma.js\",\n\t\"./ar-sa\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-sa.js\": \"./node_modules/moment/locale/ar-sa.js\",\n\t\"./ar-tn\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar-tn.js\": \"./node_modules/moment/locale/ar-tn.js\",\n\t\"./ar.js\": \"./node_modules/moment/locale/ar.js\",\n\t\"./az\": \"./node_modules/moment/locale/az.js\",\n\t\"./az.js\": \"./node_modules/moment/locale/az.js\",\n\t\"./be\": \"./node_modules/moment/locale/be.js\",\n\t\"./be.js\": \"./node_modules/moment/locale/be.js\",\n\t\"./bg\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bg.js\": \"./node_modules/moment/locale/bg.js\",\n\t\"./bm\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bm.js\": \"./node_modules/moment/locale/bm.js\",\n\t\"./bn\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bn-bd\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn-bd.js\": \"./node_modules/moment/locale/bn-bd.js\",\n\t\"./bn.js\": \"./node_modules/moment/locale/bn.js\",\n\t\"./bo\": \"./node_modules/moment/locale/bo.js\",\n\t\"./bo.js\": \"./node_modules/moment/locale/bo.js\",\n\t\"./br\": \"./node_modules/moment/locale/br.js\",\n\t\"./br.js\": \"./node_modules/moment/locale/br.js\",\n\t\"./bs\": \"./node_modules/moment/locale/bs.js\",\n\t\"./bs.js\": \"./node_modules/moment/locale/bs.js\",\n\t\"./ca\": \"./node_modules/moment/locale/ca.js\",\n\t\"./ca.js\": \"./node_modules/moment/locale/ca.js\",\n\t\"./cs\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cs.js\": \"./node_modules/moment/locale/cs.js\",\n\t\"./cv\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cv.js\": \"./node_modules/moment/locale/cv.js\",\n\t\"./cy\": \"./node_modules/moment/locale/cy.js\",\n\t\"./cy.js\": \"./node_modules/moment/locale/cy.js\",\n\t\"./da\": \"./node_modules/moment/locale/da.js\",\n\t\"./da.js\": \"./node_modules/moment/locale/da.js\",\n\t\"./de\": \"./node_modules/moment/locale/de.js\",\n\t\"./de-at\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-at.js\": \"./node_modules/moment/locale/de-at.js\",\n\t\"./de-ch\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de-ch.js\": \"./node_modules/moment/locale/de-ch.js\",\n\t\"./de.js\": \"./node_modules/moment/locale/de.js\",\n\t\"./dv\": \"./node_modules/moment/locale/dv.js\",\n\t\"./dv.js\": \"./node_modules/moment/locale/dv.js\",\n\t\"./el\": \"./node_modules/moment/locale/el.js\",\n\t\"./el.js\": \"./node_modules/moment/locale/el.js\",\n\t\"./en-au\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-au.js\": \"./node_modules/moment/locale/en-au.js\",\n\t\"./en-ca\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-ca.js\": \"./node_modules/moment/locale/en-ca.js\",\n\t\"./en-gb\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-gb.js\": \"./node_modules/moment/locale/en-gb.js\",\n\t\"./en-ie\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-ie.js\": \"./node_modules/moment/locale/en-ie.js\",\n\t\"./en-il\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-il.js\": \"./node_modules/moment/locale/en-il.js\",\n\t\"./en-in\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-in.js\": \"./node_modules/moment/locale/en-in.js\",\n\t\"./en-nz\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-nz.js\": \"./node_modules/moment/locale/en-nz.js\",\n\t\"./en-sg\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./en-sg.js\": \"./node_modules/moment/locale/en-sg.js\",\n\t\"./eo\": \"./node_modules/moment/locale/eo.js\",\n\t\"./eo.js\": \"./node_modules/moment/locale/eo.js\",\n\t\"./es\": \"./node_modules/moment/locale/es.js\",\n\t\"./es-do\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-do.js\": \"./node_modules/moment/locale/es-do.js\",\n\t\"./es-mx\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-mx.js\": \"./node_modules/moment/locale/es-mx.js\",\n\t\"./es-us\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es-us.js\": \"./node_modules/moment/locale/es-us.js\",\n\t\"./es.js\": \"./node_modules/moment/locale/es.js\",\n\t\"./et\": \"./node_modules/moment/locale/et.js\",\n\t\"./et.js\": \"./node_modules/moment/locale/et.js\",\n\t\"./eu\": \"./node_modules/moment/locale/eu.js\",\n\t\"./eu.js\": \"./node_modules/moment/locale/eu.js\",\n\t\"./fa\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fa.js\": \"./node_modules/moment/locale/fa.js\",\n\t\"./fi\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fi.js\": \"./node_modules/moment/locale/fi.js\",\n\t\"./fil\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fil.js\": \"./node_modules/moment/locale/fil.js\",\n\t\"./fo\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fo.js\": \"./node_modules/moment/locale/fo.js\",\n\t\"./fr\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fr-ca\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ca.js\": \"./node_modules/moment/locale/fr-ca.js\",\n\t\"./fr-ch\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr-ch.js\": \"./node_modules/moment/locale/fr-ch.js\",\n\t\"./fr.js\": \"./node_modules/moment/locale/fr.js\",\n\t\"./fy\": \"./node_modules/moment/locale/fy.js\",\n\t\"./fy.js\": \"./node_modules/moment/locale/fy.js\",\n\t\"./ga\": \"./node_modules/moment/locale/ga.js\",\n\t\"./ga.js\": \"./node_modules/moment/locale/ga.js\",\n\t\"./gd\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gd.js\": \"./node_modules/moment/locale/gd.js\",\n\t\"./gl\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gl.js\": \"./node_modules/moment/locale/gl.js\",\n\t\"./gom-deva\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-deva.js\": \"./node_modules/moment/locale/gom-deva.js\",\n\t\"./gom-latn\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gom-latn.js\": \"./node_modules/moment/locale/gom-latn.js\",\n\t\"./gu\": \"./node_modules/moment/locale/gu.js\",\n\t\"./gu.js\": \"./node_modules/moment/locale/gu.js\",\n\t\"./he\": \"./node_modules/moment/locale/he.js\",\n\t\"./he.js\": \"./node_modules/moment/locale/he.js\",\n\t\"./hi\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hi.js\": \"./node_modules/moment/locale/hi.js\",\n\t\"./hr\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hr.js\": \"./node_modules/moment/locale/hr.js\",\n\t\"./hu\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hu.js\": \"./node_modules/moment/locale/hu.js\",\n\t\"./hy-am\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./hy-am.js\": \"./node_modules/moment/locale/hy-am.js\",\n\t\"./id\": \"./node_modules/moment/locale/id.js\",\n\t\"./id.js\": \"./node_modules/moment/locale/id.js\",\n\t\"./is\": \"./node_modules/moment/locale/is.js\",\n\t\"./is.js\": \"./node_modules/moment/locale/is.js\",\n\t\"./it\": \"./node_modules/moment/locale/it.js\",\n\t\"./it-ch\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it-ch.js\": \"./node_modules/moment/locale/it-ch.js\",\n\t\"./it.js\": \"./node_modules/moment/locale/it.js\",\n\t\"./ja\": \"./node_modules/moment/locale/ja.js\",\n\t\"./ja.js\": \"./node_modules/moment/locale/ja.js\",\n\t\"./jv\": \"./node_modules/moment/locale/jv.js\",\n\t\"./jv.js\": \"./node_modules/moment/locale/jv.js\",\n\t\"./ka\": \"./node_modules/moment/locale/ka.js\",\n\t\"./ka.js\": \"./node_modules/moment/locale/ka.js\",\n\t\"./kk\": \"./node_modules/moment/locale/kk.js\",\n\t\"./kk.js\": \"./node_modules/moment/locale/kk.js\",\n\t\"./km\": \"./node_modules/moment/locale/km.js\",\n\t\"./km.js\": \"./node_modules/moment/locale/km.js\",\n\t\"./kn\": \"./node_modules/moment/locale/kn.js\",\n\t\"./kn.js\": \"./node_modules/moment/locale/kn.js\",\n\t\"./ko\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ko.js\": \"./node_modules/moment/locale/ko.js\",\n\t\"./ku\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ku.js\": \"./node_modules/moment/locale/ku.js\",\n\t\"./ky\": \"./node_modules/moment/locale/ky.js\",\n\t\"./ky.js\": \"./node_modules/moment/locale/ky.js\",\n\t\"./lb\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lb.js\": \"./node_modules/moment/locale/lb.js\",\n\t\"./lo\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lo.js\": \"./node_modules/moment/locale/lo.js\",\n\t\"./lt\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lt.js\": \"./node_modules/moment/locale/lt.js\",\n\t\"./lv\": \"./node_modules/moment/locale/lv.js\",\n\t\"./lv.js\": \"./node_modules/moment/locale/lv.js\",\n\t\"./me\": \"./node_modules/moment/locale/me.js\",\n\t\"./me.js\": \"./node_modules/moment/locale/me.js\",\n\t\"./mi\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mi.js\": \"./node_modules/moment/locale/mi.js\",\n\t\"./mk\": \"./node_modules/moment/locale/mk.js\",\n\t\"./mk.js\": \"./node_modules/moment/locale/mk.js\",\n\t\"./ml\": \"./node_modules/moment/locale/ml.js\",\n\t\"./ml.js\": \"./node_modules/moment/locale/ml.js\",\n\t\"./mn\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mn.js\": \"./node_modules/moment/locale/mn.js\",\n\t\"./mr\": \"./node_modules/moment/locale/mr.js\",\n\t\"./mr.js\": \"./node_modules/moment/locale/mr.js\",\n\t\"./ms\": \"./node_modules/moment/locale/ms.js\",\n\t\"./ms-my\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms-my.js\": \"./node_modules/moment/locale/ms-my.js\",\n\t\"./ms.js\": \"./node_modules/moment/locale/ms.js\",\n\t\"./mt\": \"./node_modules/moment/locale/mt.js\",\n\t\"./mt.js\": \"./node_modules/moment/locale/mt.js\",\n\t\"./my\": \"./node_modules/moment/locale/my.js\",\n\t\"./my.js\": \"./node_modules/moment/locale/my.js\",\n\t\"./nb\": \"./node_modules/moment/locale/nb.js\",\n\t\"./nb.js\": \"./node_modules/moment/locale/nb.js\",\n\t\"./ne\": \"./node_modules/moment/locale/ne.js\",\n\t\"./ne.js\": \"./node_modules/moment/locale/ne.js\",\n\t\"./nl\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nl-be\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl-be.js\": \"./node_modules/moment/locale/nl-be.js\",\n\t\"./nl.js\": \"./node_modules/moment/locale/nl.js\",\n\t\"./nn\": \"./node_modules/moment/locale/nn.js\",\n\t\"./nn.js\": \"./node_modules/moment/locale/nn.js\",\n\t\"./oc-lnc\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./oc-lnc.js\": \"./node_modules/moment/locale/oc-lnc.js\",\n\t\"./pa-in\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pa-in.js\": \"./node_modules/moment/locale/pa-in.js\",\n\t\"./pl\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pl.js\": \"./node_modules/moment/locale/pl.js\",\n\t\"./pt\": \"./node_modules/moment/locale/pt.js\",\n\t\"./pt-br\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt-br.js\": \"./node_modules/moment/locale/pt-br.js\",\n\t\"./pt.js\": \"./node_modules/moment/locale/pt.js\",\n\t\"./ro\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ro.js\": \"./node_modules/moment/locale/ro.js\",\n\t\"./ru\": \"./node_modules/moment/locale/ru.js\",\n\t\"./ru.js\": \"./node_modules/moment/locale/ru.js\",\n\t\"./sd\": \"./node_modules/moment/locale/sd.js\",\n\t\"./sd.js\": \"./node_modules/moment/locale/sd.js\",\n\t\"./se\": \"./node_modules/moment/locale/se.js\",\n\t\"./se.js\": \"./node_modules/moment/locale/se.js\",\n\t\"./si\": \"./node_modules/moment/locale/si.js\",\n\t\"./si.js\": \"./node_modules/moment/locale/si.js\",\n\t\"./sk\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sk.js\": \"./node_modules/moment/locale/sk.js\",\n\t\"./sl\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sl.js\": \"./node_modules/moment/locale/sl.js\",\n\t\"./sq\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sq.js\": \"./node_modules/moment/locale/sq.js\",\n\t\"./sr\": \"./node_modules/moment/locale/sr.js\",\n\t\"./sr-cyrl\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr-cyrl.js\": \"./node_modules/moment/locale/sr-cyrl.js\",\n\t\"./sr.js\": \"./node_modules/moment/locale/sr.js\",\n\t\"./ss\": \"./node_modules/moment/locale/ss.js\",\n\t\"./ss.js\": \"./node_modules/moment/locale/ss.js\",\n\t\"./sv\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sv.js\": \"./node_modules/moment/locale/sv.js\",\n\t\"./sw\": \"./node_modules/moment/locale/sw.js\",\n\t\"./sw.js\": \"./node_modules/moment/locale/sw.js\",\n\t\"./ta\": \"./node_modules/moment/locale/ta.js\",\n\t\"./ta.js\": \"./node_modules/moment/locale/ta.js\",\n\t\"./te\": \"./node_modules/moment/locale/te.js\",\n\t\"./te.js\": \"./node_modules/moment/locale/te.js\",\n\t\"./tet\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tet.js\": \"./node_modules/moment/locale/tet.js\",\n\t\"./tg\": \"./node_modules/moment/locale/tg.js\",\n\t\"./tg.js\": \"./node_modules/moment/locale/tg.js\",\n\t\"./th\": \"./node_modules/moment/locale/th.js\",\n\t\"./th.js\": \"./node_modules/moment/locale/th.js\",\n\t\"./tk\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tk.js\": \"./node_modules/moment/locale/tk.js\",\n\t\"./tl-ph\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tl-ph.js\": \"./node_modules/moment/locale/tl-ph.js\",\n\t\"./tlh\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tlh.js\": \"./node_modules/moment/locale/tlh.js\",\n\t\"./tr\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tr.js\": \"./node_modules/moment/locale/tr.js\",\n\t\"./tzl\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzl.js\": \"./node_modules/moment/locale/tzl.js\",\n\t\"./tzm\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./tzm-latn\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm-latn.js\": \"./node_modules/moment/locale/tzm-latn.js\",\n\t\"./tzm.js\": \"./node_modules/moment/locale/tzm.js\",\n\t\"./ug-cn\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./ug-cn.js\": \"./node_modules/moment/locale/ug-cn.js\",\n\t\"./uk\": \"./node_modules/moment/locale/uk.js\",\n\t\"./uk.js\": \"./node_modules/moment/locale/uk.js\",\n\t\"./ur\": \"./node_modules/moment/locale/ur.js\",\n\t\"./ur.js\": \"./node_modules/moment/locale/ur.js\",\n\t\"./uz\": \"./node_modules/moment/locale/uz.js\",\n\t\"./uz-latn\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz-latn.js\": \"./node_modules/moment/locale/uz-latn.js\",\n\t\"./uz.js\": \"./node_modules/moment/locale/uz.js\",\n\t\"./vi\": \"./node_modules/moment/locale/vi.js\",\n\t\"./vi.js\": \"./node_modules/moment/locale/vi.js\",\n\t\"./x-pseudo\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./x-pseudo.js\": \"./node_modules/moment/locale/x-pseudo.js\",\n\t\"./yo\": \"./node_modules/moment/locale/yo.js\",\n\t\"./yo.js\": \"./node_modules/moment/locale/yo.js\",\n\t\"./zh-cn\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-cn.js\": \"./node_modules/moment/locale/zh-cn.js\",\n\t\"./zh-hk\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-hk.js\": \"./node_modules/moment/locale/zh-hk.js\",\n\t\"./zh-mo\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-mo.js\": \"./node_modules/moment/locale/zh-mo.js\",\n\t\"./zh-tw\": \"./node_modules/moment/locale/zh-tw.js\",\n\t\"./zh-tw.js\": \"./node_modules/moment/locale/zh-tw.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment/locale sync recursive ^\\\\.\\\\/.*$\";","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"app\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendor\"], () => (__webpack_require__(\"./src/App.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["logger","debug","getInstance","App","constructor","Controller","window","getCurrentUser","setupNavigationItemHandling","document","NAVIGATION","setupUserSearchViews","UserSearchSidebar","setupChatViews","ChatRoomsSidebar","onDocumentLoad","containerId","WorkoutSummarySidebar","container","ContextualInformationHelper","hideAllSideBars","handleShowUserSearch","event","API_Config","handleShowWorkoutSummary","handleShowCurrentWorkout","handleShowExerciseTypes","handleShowChat","countChanged","buffer","newCount","addingExerciseToCurrentWorkout","STATE_NAMES","showCurrentWorkout","$","localStorage","console","Decorator","users","chatLogs","exerciseTypes","workouts","recentUserSearches","login","showMyWorkouts","userSearchId","exerciseTypesId","chatId","workoutSummary","currentWorkout","DRAGGABLE","typeUser","typeExerciseType","fromUserSearch","fromFavourites","fromExerciseTypes","VIEW_NAME","blockedUsers","chatLog","favouriteUsers","userSearch","exercises","VIEW_CONTAINER","exerciseTypeDetail","currentWorkoutDetail","exerciseDropZone","BUTTON","createNewExerciseType","completeWorkout","INPUT","workoutName","cLogger","cLoggerDetail","connectToApplication","restSM","RESTApiStateManager","stateName","serverURL","api","isActive","find","findAll","create","update","destroy","idField","aggregateSM","memorySM","asyncSM","setupDataObjectDefinitions","exerciseTypeDefinition","ObjectDefinitionRegistry","BasicObjectDefinitionFactory","FieldType","name","value","workoutDefinition","exercisesFieldDefinition","KeyType","onDocumentLoaded","socketListerDelegate","SocketManager","chatManager","ChatManager","NotificationController","getStateManager","getListenerName","isLoggedIn","getLoggedInUserId","result","loggedInUser","getLoggedInUsername","handleMessage","stateChangedItemAdded","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","getServerAPIURL","delete","addExerciseToCurrentWorkout","copyOfExercise","exerciseType","v4","addWorkoutExercisesToCurrentWorkout","workout","exercise","filterResults","hasPermissionToUpdateItem","item","hasPermissionToDeleteItem","hasPermissionToEditField","slLogger","handleDataChangedByAnotherUser","message","type","user","changeUser","_id","username","stateObj","NotificationManager","NotificationType","ValidationHelper","setupValidationForExerciseTypeDetailsForm","rule","formMode","FormMode","targetDataFieldId","response","ConditionResponse","conditions","sourceDataFieldId","comparison","ComparisonType","values","ValidationManager","multipleConditionLogic","MultipleConditionLogic","avLogger","currentChart","generateRandomExerciseColourAndBorder","isStrength","red","blue","green","newColour","Math","transparency","background","border","createDisplayElementForCollectionItem","setDisplayElementsForCollectionInContainer","sevenWorkouts","newState","exerciseNames","exerciseBG","exerciseBR","labels","label","moment","exerciseName","foundIndex","colours","datasets","itemBG","itemBR","data","bg","br","didntFindExercise","weight","distance","dataset","backgroundColor","borderColor","borderWidth","order","lineDataSet","chartData","config","options","responsive","animation","maintainAspectRatio","scales","y","beginAtZero","SidebarPrefs","id","expandedSize","location","SidebarLocation","right","SidebarContainers","list","detail","CurrentWorkoutSidebar","left","ExerciseTypesSidebar","bottom","workoutDef","workoutNameEl","exerciseTypeDetailRenderer","BootstrapFormConfigHelper","exerciseTypeDetailView","resultsContainerId","dataSourceId","viewLinker","startingDisplayOrder","detailForm","createExerciseType","createWorkout","saveWorkout","managerName","newValue","itemRemoved","itemNewValue","DOMConfig","viewConfig","drop","acceptFrom","acceptTypes","resultsElement","attributes","classes","keyId","keyType","modifiers","normal","inactive","active","warning","icons","containerClasses","textElement","select","iconClasses","CurrentWorkoutExercisesView","getItemDescription","canDeleteItem","compareItemsForEquality","isSameMongo","getIdForItemInNamedCollection","renderDisplayForItemInNamedCollection","containerEl","hasPermissionToDeleteItemInNamedCollection","itemDropped","sorter","item1","item2","drag","from","extraActions","button","ExerciseTypesViewUsingContext","context","selectedItem","itemAction","actionName","WorkoutSummaryView","hasPermissionToActionItemInNamedCollection","renderBackgroundForItemInNamedCollection","itemsPerRow","small","medium","large","xlarge","rowContainer","activeRow","activeRowPosition","RowPosition","row","multipleItemsPerRowContainer","actionContainer","collectionConfig","text","WorkoutsViewUsingContext","duration","sets","reps","getItemId","calculateExerciseSummary","index","addDurations","summary","getModifierForItemInNamedCollection","Modifier","ref","dataSourceKeyId","resultDataKeyId","canvas","bgColour","brColour","truncateString","chart","bgStrength","bgCardio","borderStrength","borderCardio","flogger","vlogger","glogger","rlogger","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","colourRegexp","setSubElements","formatValue","field","displayName","currentValue","parseInt","parsed","parseFloat","isNaN","isValidValue","isValid","resetOnFailure","BasicFieldOperations","renderValue","fieldDef","generate","setPreviousValue","fieldValue","generateValue","SecurityManager","FIELD_ID","FIELD_CreatedBy","FIELD_ModifiedBy","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","generateStartingDisplayOrder","dataObjDef","fieldId","displayOrder","createBasicObjectDefinition","createModifierFields","idFieldName","objDef","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","addStringFieldToObjDefinition","isMandatory","description","datasource","addNumericFieldToObjDefinition","addDerivedFieldToObjDefinition","dataSource","addCreatedDateToArray","addModifiedDateToArray","addCreatedByToArray","addModifiedByToArray","addFieldToArray","displayOnly","addStringFieldToArray","addNumericFieldToArray","isCreatingNew","addListener","startNewObject","isCreatingNewObject","informListenersOfCreate","listener","informListenersOfUpdate","informListenersOfDelete","findDefinition","definition","addDefinition","createInstanceFromDef","fieldOps","createInstance","apiLogger","apiResultsLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","apiFetchJSONWithPost","request","url","params","JSON","apiFetchJSONWithGet","getParameters","apiFetchJSONWithDelete","delParameters","apiFetchJSONWithPut","putParameters","fetchJSON","status","callback","error","callbacks","CallbackRegistry","addRegisterCallback","fn","getCallbackById","defaultFn","associatedStateName","DownloadManager","processOfflineItems","OfflineManager","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","getBackgroundQueueCount","addQLApiRequest","isPriority","RequestType","variables","callbackId","state","addQLMutationRequest","mutation","addApiRequest","wasOffline","requestId","jsonRequest","managerRequest","originalRequest","queueType","processPriorityQueue","queueItem","processBackgroundQueue","processQueues","totalQueuedItems","callbackForQueueRequest","queueId","httpStatus","element","initiateFetchForQueueItem","DB_NAME","OBJECT_STORE","indexedDB","keyField","processQueuedResults","serverBackOnline","areWeOffline","Poller","addOfflineRequest","offlineResults","length","INTERVAL_DEFAULT","URL_CALL","interval","isPollingBool","startPolling","delay","setInterval","isPolling","stopPolling","clearInterval","show","topOffset","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","setTimeout","NotificationFactory","createNotification","getContainerId","notification","notificationNode","remove","parentEl","hash","logoutEl","sessionStorage","encryptString","CryptoJS","decryptString","encryptObject","decryptObject","UserStatus","cmLogger","chatLogKey","blockedListKey","favouriteListKey","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","addChatEventHandler","addChatUserEventHandler","isUserLoggedIn","receiveUserList","addUserToBlockedList","blocked","removeUserFromBlockedList","isUserInBlockedList","addUserToFavouriteList","favourite","removeUserFromFavouriteList","isUserInFavouriteList","getFavouriteUserList","getBlockedUserList","setCurrentUser","savedLogs","receiveJoinedRoom","InviteType","log","room","created","joinDateTime","priority","Priority","receivedLeftRoom","receiveInvitation","invite","didChatAlreadyExist","happyToProceed","receiveLogin","receiveLogout","receiveDecline","setUnreadCountListener","touchChatLog","getChatLog","receiveMessage","receiveQueuedInvites","invites","receiveQueuedMessages","messages","joinChat","leaveChat","logout","declineInvite","sendInvite","requiresAcceptDecline","subject","sendMessage","identifier","displayText","attachment","sent","simpleAttachment","getChatLogs","startChatWithUser","roomName","saveLogs","saveBlockedList","saveFavouriteList","ensureChatLogExists","lastViewed","unreadMessages","unreadHighMessages","unreadUrgentMessages","ChatRoom","ensureChatLogExistsWithUser","foundLog","doesChatRoomExist","emitUnreadMessageCountChanged","unreadNormalMessages","addMessageToChatLog","addSenderToRoomIfNotAlreadyPresent","removeChatLog","notLogger","showNormalPriorityMessageNotifications","showHighPriorityMessageNotifications","showUrgentPriorityMessageNotifications","showInvitationDeclinedNotifications","showInvitedNotifications","showOfflineMessageNotification","showFavouriteUserLoggedInNotification","showFavouriteUserLoggedOutNotification","showUserJoinLeaveChatNotification","handleInvitationDeclined","handleNewInviteReceived","addUserListener","blackListUser","isBlackedListed","favouriteUser","isFavourited","isFavouriteUser","isBlockedUser","handleChatLogsUpdated","handleChatLogUpdated","displayMessage","notificationType","showNotification","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleBlockedUsersChanged","usernames","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","setOptions","sDebug","chatReceivers","addChatReceiver","setListener","io","inviteObj","to","messageObj","getUserList","sendDeclineInvite","callbackForMessage","content","dataObj","receiver","callbackForLogin","callbackForUserList","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForDeclineInvite","callbackForChat","callbackForQueue","callbackForData","smLogger","smLoggerDetail","forceSaves","equalityFns","fnPerState","receivedFilterResults","StateEventType","suppressEvents","emitEvents","dontForceSavesOnAddRemoveUpdate","forceSavesOnAddRemoveUpdate","informChangeListenersForStateWithName","eventType","previousObjValue","addChangeListenerForName","_findItemInState","_findItemsInState","results","isMatch","filters","filter","attributeValue","addStateByName","stateObjForName","getStateByName","stateValueObj","setStateByName","informListeners","addNewItemToState","isPersisted","findItemInState","isItemInState","removeItemFromState","oldItem","updateItemInState","findItemsInState","getType","StateManagerType","getEqualityFnForName","aggLogger","addStateManager","mWF","manager","stateManager","_addNewNamedStateToStorage","managerWithFilters","_getState","sm","_ensureStatePresent","_replaceNamedStateInStorage","_saveState","_addItemToState","_removeItemFromState","_updateItemInState","stateNameInFilters","asyncLogger","stateNamesToMonitor","lsLogger","configuration","useLocalStorage","allowPersistence","equalFns","stringifiedSaveData","savedResults","savedResultsJSON","valueIndex","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","IndexedDBStateManager","collection","setCompletedRun","dbName","runsComplete","openDB","upgrade","collections","db","keyPath","autoIncrement","blocking","terminated","saveWithCollectionKey","key","transaction","objectStore","addNewItemToCollection","removeItemFromCollection","updateItemInCollection","Error","stateObjectForName","getWithCollectionKey","cursor","getKeyFieldForKey","checkForObjectStore","saveItemsToCollection","saveData","removeAllItemsFromCollectionKey","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","callbackForAddItem","msManager","FUNCTION_ID_ADD_ITEM","FUNCTION_ID_REMOVE_ITEM","FUNCTION_ID_UPDATE_ITEM","FUNCTION_ID_GET_ITEMS","FUNCTION_ID_FIND_ITEM","configItem","getConfigurationForStateName","callbackForFindItem","suppressEventEmits","changeListenersForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","DRAGGABLE_KEY_ID","DRAGGABLE_TYPE","DRAGGABLE_FROM","EXTRA_ACTION_ATTRIBUTE_NAME","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","AlertType","ALERT_MODAL_ID","ALERT_TITLE","ALERT_CONTENT","ALERT_CANCEL","ALERT_CONFRIM","ALERT_hideClass","ALERT_showClass","AlertManager","startAlert","confirmHandler","outcome","cancelHandler","vLogger","BlockedUserView","quickDelete","documentLoaded","itemDeleted","itemSelected","itemDragStarted","hideRequested","showRequested","getSecondaryModifierForItemInNamedCollection","updateViewForNamedCollection","droppedItem","itemDeselected","canSelectItem","csLoggerDetail","ChatLogDetailView","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","hasActionPermission","hasPermissionToUpdateItemInNamedCollection","hasChanged","setContainedBy","addEventListener","getDisplayValueForItemInNamedCollection","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","handleUserDrop","draggedObjectJSON","draggedObject","handleAddMessage","messageContent","sentMessage","messageEl","browserUtil","fastSearchEl","eventUserSelected","ui","addChatMessage","chatMessageEl","messageSenderEl","contentEl","reRenderChatMessages","renderChatLog","ssFastSearchUserNames","myUsername","fastSearchValues","searchValue","source","disabled","minLength","getName","hidden","getDataSourceKeyId","getUIConfig","render","checkCanComment","clearChatLog","csLogger","ChatLogsView","badge","selectedChatLog","isSameRoom","selectChatRoom","updateStateManager","chatView","chatLogView","vLoggerDetail","FavouriteUserView","favUsers","recentSearches","favourites","UserSearchView","fastSearchInputId","dataLimit","sbvcLogger","addView","viewContainer","view","sidePanelEl","closeButtonEl","eventHide","eventShow","size","showHide","TogglePlacement","defaultIdentifier","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","registry","menuDivEl","menuContentEl","addContextFromView","addContextToElement","addTooltip","placement","html","findContextFromEvent","target","addActionToContext","action","handler","hasPermission","elementDefinition","icon","handleContextMenu","ensureInRegistry","defaultType","internalType","actions","findContextFromElement","desc","parent","findAllContextsFromElement","contexts","addContextActionToContext","buildContextMenu","contextDef","collectionView","compareWith","itemEl","hideContextMenu","showContextMenu","pageX","pageY","dlogger","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","hasExternalControl","getFormMode","getCurrentDataObj","getDataObjectDefinition","cancel","formEvent","formId","FormEventType","CANCELLING","DELETING","save","SAVING","valueChanged","failedValidation","hideModifierFields","addFieldListener","addFormListener","reset","RESETTING","setIsVisible","startCreateNew","startUpdate","objectToEdit","objectToView","formChanged","shouldCancelChange","CANCELLED","allFieldsValid","SAVE_ABORTED","formattedDataObject","SAVED","getId","getFieldFromDataFieldId","dataFieldId","mapItem","attributeId","completed","CANCELLING_ABORTED","DELETED","DELETE_ABORTED","clearReadOnly","setReadOnly","isDisplayingItem","isReadOnly","informFormListeners","findFieldUiConfig","fieldGroup","uiConfig","checkForVisualValidationForDisplayOnly","checkFormValidationOnDisplay","getElementIdForField","FieldInputElementFactory","factoryElements","getFormattedDataObject","formattedResult","_hidden","setupFieldObject","subElements","dataId","fieldEl","fieldUIConfig","UIFieldType","clearUnsavedMessage","setUnsavedMessage","_initialise","FormElementFactory","rbg","radioButton","_reset","validateField","renderField","_startCreate","_startUpdate","_displayOnly","_visible","setFieldValueToDataObject","setFieldValueFromDataObject","getFormattedFieldValue","_isSameObjectAsDisplayed","isSameObject","currentObjId","suppliedObjId","enableButtons","disableButtons","_saveFinishedOrAborted","_saveIsActive","activeSave","defaultGetValue","DATA_ID_ATTRIBUTE","form","handleEditEvent","fieldElement","handleEditCompletedEvent","processRendering","handleEvent","setValidationStatusAndMessage","validationElementTarget","divId","errorMessageDiv","errorMessageEl","processValidation","subElement","validationResp","optionsChanged","subEls","getElementIdForFieldId","initialiseFieldElementAndEventHandlers","fieldConfig","createFieldComponentsAndContainer","errorMessageDivEl","containedByEl","labelEl","descEl","createSubElements","valueOptions","valueEl","valueOption","createInputFormFieldComponentElement","createTAFormFieldComponentElement","rows","cols","createSelectFormFieldComponentElement","createRadioGroupFormFieldComponentElement","radioGroupElement","radioButtons","createFormElements","formEl","formConfig","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","group","buttonContainer","deleteButtonEl","cancelButtonEl","submitButtonEl","selectFields","radioButtonGroups","textFields","deleteButton","cancelButton","submitButton","createFormButton","buttonEl","buttonDef","iconEl","editingHandler","eventHandler","isHidden","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","validator","setValue","selectEl","selectedIndex","option","clearValue","validate","hide","setValid","handleChangeEvent","getElement","styleOptions","isHexValueDark","ValidationHelperFunctions","areTwoFieldsEqual","ruleFailed","targetField","sourceField","isFieldAndValueEqual","compareTwoValuesWithTypes","targetType","targetValue","sourceType","sourceValue","isTargetLessThanSource","isFieldLessThanValue","isFieldLessThanEqualValue","check","isFieldGreaterThanValue","isFieldGreaterThanEqualValue","isTargetLessThanEqualSource","isTargetGreaterThan","isFieldNull","isFieldNotNull","doesFieldHaveValue","splits","foundInValue","split","doesSourceFieldHaveValue","isTargetGreaterThanEqualSource","compareFields","compareFieldWithValue","erLogger","merLogger","addFormValidator","addRuleToForm","convertedRule","condition","formRule","formRuleSet","rules","applyRulesToTargetField","onlyRulesOfType","ruleSubset","ruleCheck","failedResponses","executeRule","ruleChecks","errorMessageBuffer","failedRuleChecks","failedRuleIndex","getRulesForFieldChange","ruleSet","ruleFormMode","any","COLOUR_PICKER_CONTAINER","generateFormConfig","fieldOperations","rbgFieldOperation","fieldUIConfigs","displayOrders","displayOrderValue","elementType","elementClasses","renderer","formatter","messageDisplay","validClasses","invalidClasses","containedBy","fieldGroups","unsavedChanges","innerHTML","a","b","hasDeleteButton","getElementIdForDataFieldId","editCompleted","editValue","offset","getElementOffset","top","cbColourChange","cancelled","deletedItem","saveNewItem","updateItem","shouldDiscardChanges","children","parentView","addLinkedDetailView","childView","canProceedWithSelection","confirm","_startNewObject","canProceedWithCreateNew","addValueOption","getOptions","getDragData","itemId","eventStartDrag","eventClickItem","shouldSelect","eventDeleteClickItem","shouldDelete","eventActionClicked","getItemContext","AbstractView","contextDetail","avLoggerDetails","forwarder","getCollectionName","getCollectionUIConfig","addEventCollectionListener","isSame","setRenderer","getSecondaryBadgeValueForItemInNamedCollection","getTertiaryBadgeValueForItemInNamedCollection","getItemInNamedCollection","DATA_SOURCE","handleDrop","droppedObjectType","droppedObjectFrom","acceptType","objectType","currentItem","addEventDetailListener","getItem","clearDisplay","createItem","displayItem","handleActionItem","lastRenderedContainer","lastRenderedCollectionName","lastRenderedCollection","previousWindowWidth","newWindowWidth","reRenderRequired","childEl","backgroundEl","textEl","buttonsEl","extraAction","hasPermissionForAction","modifier","secondModifier","numberOfResults","numberOfRows","rowIndex","rowContainerEl","rowEl","itemIndex","itemContainerEl","setEventForwarder","setView","displayItemReadonly","scrollTop","getForm","formattedObj","imgEl","badgeValue","badgeEl","el","rect","scrollSmoothToId","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","classesText","isAdding","classValue","addAttributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","duration1Valid","duration2Valid","duration1Components","duration1","duration2Components","duration2","carry","duration1Seconds","duration2Seconds","sumSeconds","duration1Minutes","duration2Minutes","sumMinutes","duration1Hours","duration2Hours","sumHours","str","firstHexDigit","hexValue","tensHexDigit","convertSingleHexToNumber","redHex","greenHex","blueHex","redValue","convertHexToNumber","greenValue","blueValue"],"sourceRoot":""}