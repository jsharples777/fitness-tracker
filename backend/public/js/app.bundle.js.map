{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://template-feo-react-babel/webpack/runtime/chunk loaded","webpack://template-feo-react-babel/./src/ui-framework/ConfigurationTypes.ts","webpack://template-feo-react-babel/./src/util/BrowserUtil.ts","webpack://template-feo-react-babel/./src/ui-framework/context/ContextualInformationHelper.ts","webpack://template-feo-react-babel/./src/state/StateManager.ts","webpack://template-feo-react-babel/./src/state/StateChangedDelegate.ts","webpack://template-feo-react-babel/./src/state/AbstractStateManager.ts","webpack://template-feo-react-babel/./src/state/MemoryBufferStateManager.ts","webpack://template-feo-react-babel/./src/socket/Types.ts","webpack://template-feo-react-babel/./src/socket/SocketManager.ts","webpack://template-feo-react-babel/./src/state/AsyncStateManagerWrapper.ts","webpack://template-feo-react-babel/./src/state/AggregateStateManager.ts","webpack://template-feo-react-babel/./src/AppTypes.ts","webpack://template-feo-react-babel/./src/util/EqualityFunctions.ts","webpack://template-feo-react-babel/./src/notification/BootstrapNotification.ts","webpack://template-feo-react-babel/./src/notification/Notification.ts","webpack://template-feo-react-babel/./src/notification/NotificationFactory.ts","webpack://template-feo-react-babel/./src/notification/NotificationManager.ts","webpack://template-feo-react-babel/./src/SocketListenerDelegate.ts","webpack://template-feo-react-babel/./src/state/BrowserStorageStateManager.ts","webpack://template-feo-react-babel/./src/socket/ChatManager.ts","webpack://template-feo-react-babel/./src/socket/NotificationController.ts","webpack://template-feo-react-babel/./src/network/Types.ts","webpack://template-feo-react-babel/./src/network/ApiUtil.ts","webpack://template-feo-react-babel/./src/network/DownloadManager.ts","webpack://template-feo-react-babel/./src/state/RESTApiStateManager.ts","webpack://template-feo-react-babel/./src/model/DataObjectTypeDefs.ts","webpack://template-feo-react-babel/./src/model/BasicFieldOperations.ts","webpack://template-feo-react-babel/./src/model/BasicObjectDefinitionFactory.ts","webpack://template-feo-react-babel/./src/model/ObjectDefinitionRegistry.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/SimpleValueDataSource.ts","webpack://template-feo-react-babel/./src/Controller.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/ViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertListener.ts","webpack://template-feo-react-babel/./src/ui-framework/alert/AlertManager.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewEventHandlerDelegate.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/AbstractStatefulCollectionView.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/ListViewRenderer.ts","webpack://template-feo-react-babel/./src/component/view/UserSearchView.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogsView.ts","webpack://template-feo-react-babel/./src/ui-framework/container/SidebarViewContainer.ts","webpack://template-feo-react-babel/./src/component/sidebar/UserSearchSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ChatRoomsSidebar.ts","webpack://template-feo-react-babel/./src/component/sidebar/ExerciseTypesSidebar.ts","webpack://template-feo-react-babel/./src/component/view/ChatLogDetailView.ts","webpack://template-feo-react-babel/./src/component/view/FavouriteUserView.ts","webpack://template-feo-react-babel/./src/component/view/BlockedUserView.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormUITypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/FormListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationTypeDefs.ts","webpack://template-feo-react-babel/./src/ui-framework/form/validation/ValidationManager.ts","webpack://template-feo-react-babel/./src/ui-framework/form/AbstractForm.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/RBGFieldOperations.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/BootstrapFormConfigHelper.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/ValidationEventHandler.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/EditingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FieldInputElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/factory/FormElementFactory.ts","webpack://template-feo-react-babel/./src/ui-framework/form/event-handlers/RenderingEventListener.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/AbstractField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/TextAreaField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/RadioButtonGroupField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/SelectField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/field/InputField.ts","webpack://template-feo-react-babel/./src/ui-framework/form/BasicFormImplementation.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/FormDetailViewRenderer.ts","webpack://template-feo-react-babel/./src/CreatedByPermissionChecker.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/DetailViewListenerForwarder.ts","webpack://template-feo-react-babel/./src/ui-framework/view/implementation/DetailViewImplementation.ts","webpack://template-feo-react-babel/./src/model/DataObjectController.ts","webpack://template-feo-react-babel/./src/ui-framework/helper/LinkedCollectionDetailController.ts","webpack://template-feo-react-babel/./src/component/helper/ValidationHelper.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/ListViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesViewUsingContext.ts","webpack://template-feo-react-babel/./src/component/view/ExerciseTypesCompositeView.ts","webpack://template-feo-react-babel/./src/component/sidebar/WorkoutSummarySidebar.ts","webpack://template-feo-react-babel/./src/component/renderer/WorkoutSummaryRenderer.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutSummaryView.ts","webpack://template-feo-react-babel/./src/component/sidebar/CurrentWorkoutSidebar.ts","webpack://template-feo-react-babel/./src/DefaultPermissionChecker.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutExercisesView.ts","webpack://template-feo-react-babel/./src/component/view/CurrentWorkoutCompositeView.ts","webpack://template-feo-react-babel/./src/util/DurationFunctions.ts","webpack://template-feo-react-babel/./src/ui-framework/view/renderer/CarouselViewRendererUsingContext.ts","webpack://template-feo-react-babel/./src/component/view/WorkoutsViewUsingContext.ts","webpack://template-feo-react-babel/./src/util/MiscFunctions.ts","webpack://template-feo-react-babel/./src/App.ts","webpack://template-feo-react-babel//Users/jimsharples/Development/fitness-tracker/frontend/node_modules/moment/locale|sync|/^\\.\\/.*$/","webpack://template-feo-react-babel/webpack/bootstrap","webpack://template-feo-react-babel/webpack/runtime/compat get default export","webpack://template-feo-react-babel/webpack/runtime/define property getters","webpack://template-feo-react-babel/webpack/runtime/hasOwnProperty shorthand","webpack://template-feo-react-babel/webpack/runtime/node module decorator","webpack://template-feo-react-babel/webpack/runtime/jsonp chunk loading","webpack://template-feo-react-babel/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import {View} from \"./view/interface/View\";\n\nexport type Attribute = {\n    name:string,\n    value:string\n}\n\nexport type ModifierClasses = {\n    normal:string,\n    inactive:string,\n    active:string,\n    warning:string\n}\n\nexport type IconClasses = {\n    normal:string,\n    inactive?:string,\n    active?:string,\n    warning?:string,\n}\n\nexport type BasicButtonElement = {\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses?:string,\n    attributes?:Attribute[]\n\n}\n\nexport type BasicElement = {\n    elementType:string,\n    elementAttributes?:Attribute[],\n    elementClasses:string,\n    innerHTML?:string\n}\n\nexport const DRAGGABLE_KEY_ID:string = 'text/plain';\nexport const DRAGGABLE_TYPE:string = 'draggedType';\nexport const DRAGGABLE_FROM:string = 'draggedFrom';\n\nexport type Draggable = {\n    type:string,\n    from:string\n}\n\nexport type Droppable = {\n    acceptTypes:string[];\n    acceptFrom?:string[];\n}\n\nexport type getIcons = (name:string,item:any) => string[];\n\nexport type ContentDetail = {\n    containerClasses:string,\n    textElementType:string,\n    textElementClasses:string,\n    select:boolean,\n    quickDelete?:boolean,\n    icons?:getIcons,\n    badge?:BasicElement,\n    delete?:BasicButtonElement,\n    drag?:Draggable,\n    background?:BasicElement,\n}\n\nexport const EXTRA_ACTION_ATTRIBUTE_NAME:string = 'view-extra-action';\n\nexport type ExtraAction = {\n    name:string,\n    buttonClasses:string,\n    buttonText?:string,\n    iconClasses:string,\n    attributes?:Attribute[]\n}\n\nexport enum Modifier {\n    normal,\n    active,\n    inactive,\n    warning\n}\n\nexport enum KeyType {\n    number,\n    string,\n    boolean,\n    collection\n}\n\nexport type ViewDOMConfig = {\n    resultsContainerId:string,\n    dataSourceId:string,\n    drop?:Droppable\n}\n\nexport type CollectionViewDOMConfig = {\n    viewConfig:ViewDOMConfig,\n    resultsElementType:string,\n    resultsElementAttributes?:[Attribute],\n    resultsClasses:string,\n    keyId:string,\n    keyType: KeyType,\n    modifiers?:ModifierClasses,\n    icons?:IconClasses,\n    detail:ContentDetail,\n    extraActions?:ExtraAction[],\n}\n\n\nexport enum SidebarLocation {\n    top,\n    right,\n    left,\n    bottom\n}\nexport type SidebarPrefs = {\n    id:string,\n    location: SidebarLocation,\n    expandedSize: string\n}\n\nexport type SidebarViewConfig = {\n    containerId:string\n}\n\nexport type ViewPrefs = {\n    sidebar?:SidebarPrefs\n}\n\nexport enum RowPosition {\n    first,\n    last\n}\n\nexport type CarouselDOMConfig = {\n    itemsPerRow: {\n        small: number,\n        medium: number,\n        large: number,\n        xlarge: number,\n    },\n    rowContainer: BasicElement,\n    activeRow: BasicElement,\n    activeRowPosition:RowPosition,\n    row: BasicElement,\n    multipleItemsPerRowContainer?:BasicElement,\n    actionContainer:BasicElement,\n    collectionConfig: CollectionViewDOMConfig\n}\n\nexport const SCREEN_WIDTH_LARGE = 992;\nexport const SCREEN_WIDTH_MEDIUM = 769;\nexport const SCREEN_WIDTH_SMALL = 415;\n\n\n","import {Attribute} from \"../ui-framework/ConfigurationTypes\";\n\nclass BrowserUtil {\n    constructor() {\n    }\n\n    scrollSmoothToId(elementId: string): void {\n        const element: HTMLElement | null = document.getElementById(elementId);\n        if (element !== null) {\n            element.scrollIntoView({\n                block: 'start',\n                behavior: 'smooth',\n            });\n        }\n    }\n\n    scrollToBottomNow(element: HTMLElement): void {\n        if (element) {\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollToBottomSmooth(element: HTMLElement): void {\n        if (element) {\n            element.scrollIntoView({\n                behavior: 'smooth',\n            });\n            element.scrollTop = element.scrollHeight - element.clientHeight + 100;\n        }\n    }\n\n    scrollSmoothTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        });\n    }\n\n    scrollTo(element: HTMLElement): void {\n        element.scrollIntoView({\n            block: 'start',\n        });\n    }\n\n    removeAllChildren(element: HTMLElement): void {\n        if (element && element.firstChild) {\n            while (element.firstChild) {\n                const lastChild: ChildNode | null = element.lastChild;\n                if (lastChild) element.removeChild(lastChild);\n            }\n        }\n    }\n\n    addRemoveClasses(element: HTMLElement, classesText: string, isAdding: boolean = true): void {\n        const classes = classesText.split(' ');\n        classes.forEach((classValue) => {\n            if (classValue.trim().length > 0) {\n                if (isAdding) {\n                    element.classList.add(classValue);\n                } else {\n                    element.classList.remove(classValue);\n                }\n            }\n        });\n    }\n\n    addAttributes(element: HTMLElement, attributes: Attribute[] | undefined) {\n        if (attributes) {\n            attributes.forEach((attribute: any) => {\n                element.setAttribute(attribute.name, attribute.value);\n            });\n        }\n    }\n\n    removeAttributes(element: HTMLElement, attributes: string[]) {\n        attributes.forEach((attribute: string) => {\n            element.removeAttribute(attribute);\n        });\n    }\n\n    allElementsFromPoint(x:number, y:number) {\n        var element, elements = [];\n        var old_visibility = [];\n        while (true) {\n            element = document.elementFromPoint(x, y);\n            if (!element || element === document.documentElement) {\n                break;\n            }\n            elements.push(element);\n            // @ts-ignore\n            old_visibility.push(element.style.visibility);\n            // @ts-ignore\n            element.style.visibility = 'hidden'; // Temporarily hide the element (without changing the layout)\n        }\n        for (var k = 0; k < elements.length; k++) {\n            // @ts-ignore\n            elements[k].style.visibility = old_visibility[k];\n        }\n        elements.reverse();\n        return elements;\n    }\n\n}\n\nconst browserUtil = new BrowserUtil();\n\nexport default browserUtil;\n","import {View} from \"../view/interface/View\";\nimport {BasicElement, EXTRA_ACTION_ATTRIBUTE_NAME} from \"../ConfigurationTypes\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport debug from 'debug';\n\nconst logger = debug('context-helper');\n\nexport type getIdentifier = (type:string,item:any) => string;\nexport type getDescription = (type:string, item:any) => string;\n\nexport type actionHandler = (event:MouseEvent) => void;\n\nexport type ContextTypeAction = {\n    actionName: string,\n    displayName:string,\n    elementDefinition: BasicElement,\n    iconClasses?:string,\n    handler: actionHandler\n}\n\nexport type ContextDefinitionType = {\n    internalType:string,\n    displayName:string,\n    identifier:getIdentifier,\n    description:getDescription,\n    actions:ContextTypeAction[]\n}\n\nexport type ContextDefinition = {\n    source:string,\n    view?:View,\n    defaultType: ContextDefinitionType,\n    extraTypes?: ContextDefinitionType[]\n}\n\nexport type ContextDetails = {\n    source:string,\n    internalType:string,\n    displayName:string,\n    identifier:string,\n    description:string\n}\n\nexport enum TogglePlacement {\n    top,\n    bottom,\n    right,\n    left\n}\n\nconst defaultIdentifier = function(name:string,item:any) { return ''; }\n\n\nexport class ContextualInformationHelper {\n    private static _instance: ContextualInformationHelper;\n\n    private static SOURCE:string = 'context-source';\n    private static TYPE:string = 'context-type';\n    private static DISPLAYNAME:string = 'context-display-name';\n    private static IDENTIFIER:string = 'context-id';\n    private static DESCRIPTION:string = 'title';\n\n    private static BOOTSTRAP_TOGGLE = 'data-toggle';\n    private static BOOTSTRAP_PLACEMENT = 'data-placement'\n    private static BOOTSTRAP_TOOLTIP_VALUE = 'tooltip';\n    private static BOOTSTRAP_POPOVER_VALUE = 'popover';\n\n    private static BOOTSTRAP_TOGGLE_HTML = 'data-html';\n    private static BOOTSTRAP_TOGGLE_HTML_VALUE = 'true';\n\n\n    private static BOOTSTRAP_PLACEMENT_TOP = 'top'\n    private static BOOTSTRAP_PLACEMENT_BOTTOM = 'bottom'\n    private static BOOTSTRAP_PLACEMENT_RIGHT = 'right'\n    private static BOOTSTRAP_PLACEMENT_LEFT = 'left'\n\n    public static getInstance(): ContextualInformationHelper {\n        if (!(ContextualInformationHelper._instance)) {\n            ContextualInformationHelper._instance = new ContextualInformationHelper();\n        }\n        return ContextualInformationHelper._instance;\n    }\n\n    private registry:ContextDefinition[] = [];\n    private menuDivEl:HTMLDivElement|null = null;\n    private menuContentEl:HTMLUListElement|null = null;\n\n    private constructor() {\n        this.handleContextMenu = this.handleContextMenu.bind(this);\n        this.hideContextMenu = this.hideContextMenu.bind(this);\n    }\n\n    public onDocumentLoaded() {\n        // @ts-ignore\n        document.addEventListener('click',this.hideContextMenu);\n\n        this.menuDivEl = <HTMLDivElement|null>document.getElementById('contextmenu');\n        this.menuContentEl = <HTMLUListElement|null>document.getElementById('contextMenuItems');\n    }\n\n\n    private ensureInRegistry(source:string) :ContextDefinition{\n        let result:ContextDefinition;\n        let foundIndex = this.registry.findIndex((context) => context.source === source);\n        if (foundIndex < 0) {\n            result = {\n                source:source,\n                defaultType: {\n                    internalType: '',\n                    displayName: '',\n                    identifier: defaultIdentifier,\n                    description: defaultIdentifier,\n                    actions: []\n                }\n            }\n            this.registry.push(result);\n        }\n        else {\n            result = this.registry[foundIndex];\n        }\n        return result;\n    }\n\n    public addContextFromView(view:View,internalType:string,displayName:string):ContextDefinition {\n        let context: ContextDefinition = this.ensureInRegistry(view.getName());\n        context.view = view;\n        context.defaultType.internalType = internalType;\n        context.defaultType.displayName = displayName;\n        context.defaultType.identifier = view.getItemId;\n        context.defaultType.description = view.getItemDescription;\n        return context;\n    }\n\n    public addContextToElement(source:string, type:string, item:any, element:HTMLElement, addTooltip:boolean = false,placement:TogglePlacement = TogglePlacement.bottom):void {\n        const context:ContextDefinition = this.ensureInRegistry(source);\n        element.setAttribute(ContextualInformationHelper.SOURCE,context.source);\n        element.setAttribute(ContextualInformationHelper.TYPE,context.defaultType.internalType);\n        element.setAttribute(ContextualInformationHelper.DISPLAYNAME,context.defaultType.displayName);\n        element.setAttribute(ContextualInformationHelper.IDENTIFIER,context.defaultType.identifier(type,item));\n        element.setAttribute(ContextualInformationHelper.DESCRIPTION,context.defaultType.description(type,item));\n        if (addTooltip) {\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE, ContextualInformationHelper.BOOTSTRAP_TOOLTIP_VALUE);\n            element.setAttribute(ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML, ContextualInformationHelper.BOOTSTRAP_TOGGLE_HTML_VALUE);\n            switch (placement) {\n                case TogglePlacement.bottom: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_BOTTOM);\n                    break;\n                }\n                case TogglePlacement.top: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_TOP);\n                    break;\n                }\n                case TogglePlacement.left: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_LEFT);\n                    break;\n                }\n                case TogglePlacement.right: {\n                    element.setAttribute(ContextualInformationHelper.BOOTSTRAP_PLACEMENT, ContextualInformationHelper.BOOTSTRAP_PLACEMENT_RIGHT);\n                    break;\n                }\n            }\n            // @ts-ignore\n            $('[data-toggle=\"tooltip\"]').tooltip({html:true});\n        }\n    }\n\n    private findContextFromElement(element:HTMLElement):ContextDetails|null {\n        // do we have context information in this element?\n        let result:ContextDetails|null = null;\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n\n            // @ts-ignore\n            result = {source: source,internalType: type,displayName: name,identifier: id,description: desc};\n        }\n        else {\n            const parent = element.parentElement;\n            if (parent) {\n                result = this.findContextFromElement(parent);\n            }\n        }\n        return result;\n    }\n\n    private findAllContextsFromElement(element:HTMLElement,contexts:ContextDetails[]):void {\n        // do we have context information in this element?\n\n        const source = element.getAttribute(ContextualInformationHelper.SOURCE);\n        if (source) {\n            const type = element.getAttribute(ContextualInformationHelper.TYPE);\n            const name = element.getAttribute(ContextualInformationHelper.DISPLAYNAME);\n            const id = element.getAttribute(ContextualInformationHelper.IDENTIFIER);\n            const desc = element.getAttribute(ContextualInformationHelper.DESCRIPTION);\n            // @ts-ignore\n            let result:ContextDetails = {source: source,internalType: type,displayName: name,identifier: id,description: desc};\n            contexts.push(result);\n        }\n        const parent = element.parentElement;\n        if (parent) {\n            this.findAllContextsFromElement(parent,contexts);\n        }\n    }\n\n\n    public findContextFromEvent(event:Event): ContextDetails|null {\n        let result:ContextDetails|null = null;\n\n        if (event.target) {\n            let target = event.target;\n            // @ts-ignore\n            result = this.findContextFromElement(event.target);\n        }\n        return result;\n    }\n\n    private addContextActionToContext(context:ContextDefinition,action:ContextTypeAction) {\n        logger(`Adding action to context ${context.source}`);\n        logger(action);\n        context.defaultType.actions.push(action);\n    }\n\n    public addActionToContext(context:ContextDefinition,actionName:string, displayName:string, handler:actionHandler, icon?:string) {\n        let action:ContextTypeAction = {\n            actionName:actionName,\n            displayName:displayName,\n            handler:handler,\n            elementDefinition: {\n                elementType: 'a',\n                elementAttributes: [{name: 'href', value: '#'}],\n                elementClasses: 'list-group-item list-group-item-action bg-dark text-white',\n            },\n            iconClasses: icon\n        };\n        this.addContextActionToContext(context,action);\n    }\n\n    private buildContextMenu(context:ContextDetails):boolean {\n        logger(`building context menu`);\n        let result = false;\n        // find the context for these details\n        const contextDef:ContextDefinition|null = this.ensureInRegistry(context.source);\n        if (contextDef.defaultType.actions.length > 0) {\n            if (this.menuContentEl && this.menuContentEl) {\n                browserUtil.removeAllChildren(this.menuContentEl);\n\n                contextDef.defaultType.actions.forEach((action) => {\n                    logger('Adding action');\n                    logger(action);\n                    let itemEl = document.createElement(action.elementDefinition.elementType);\n                    if (itemEl && this.menuContentEl) {\n                        browserUtil.addAttributes(itemEl, action.elementDefinition.elementAttributes);\n                        browserUtil.addRemoveClasses(itemEl, action.elementDefinition.elementClasses);\n\n                        itemEl.setAttribute(ContextualInformationHelper.SOURCE,context.source);\n                        itemEl.setAttribute(ContextualInformationHelper.TYPE,context.internalType);\n                        itemEl.setAttribute(ContextualInformationHelper.DISPLAYNAME,context.displayName);\n                        itemEl.setAttribute(ContextualInformationHelper.IDENTIFIER,context.identifier);\n                        itemEl.setAttribute(ContextualInformationHelper.DESCRIPTION,context.description);\n                        itemEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, action.actionName);\n\n                        itemEl.addEventListener('click', (event:MouseEvent) => {\n                            this.hideContextMenu(event);\n                            action.handler(event);\n                        });\n                        itemEl.innerHTML = `${action.displayName}`;\n                        if (action.iconClasses) {\n                            itemEl.innerHTML += `&nbsp;&nbsp;<i class=\"${action.iconClasses}\"></i>`;\n                        }\n                        this.menuContentEl.appendChild(itemEl);\n                        logger('new menu element is ');\n                        logger(this.menuContentEl);\n                        result = true;\n                    }\n                });\n            }\n        }\n        else {\n            logger(`building context menu - no actions for ${context.source}`);\n        }\n        return result;\n    }\n\n    public handleContextMenu(event:MouseEvent):any {\n        logger('Right click')\n        logger(event.target);\n        // are we over a context sensitive item?\n        // find a context if possible\n        // @ts-ignore\n        const context:ContextDetails|null =  this.findContextFromElement(event.target);\n        logger(context);\n        if (context && this.buildContextMenu(context)) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.showContextMenu(event);\n            return false;\n        }\n\n        // otherwise let the default behaviour happen\n        return true;\n    }\n\n    private hideContextMenu(event:MouseEvent):any {\n        if (this.menuDivEl) {\n            browserUtil.addRemoveClasses(this.menuDivEl,'d-none');\n        }\n    }\n\n    private showContextMenu(event:MouseEvent) {\n        if (this.menuDivEl) {\n            logger(`Showing context menu at ${event.pageX},${event.pageY}`);\n            browserUtil.addRemoveClasses(this.menuDivEl,'d-none',false);\n            this.menuDivEl.style.left = event.pageX + 'px';\n            this.menuDivEl.style.top = event.pageY + 'px';\n        }\n    }\n\n\n\n\n}","import {equalityFunction} from \"../util/EqualityFunctions\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\nexport type stateValue = { name: string, value: any };\nexport type stateListeners = { name: string, listeners: StateChangeListener[] };\n\nexport enum stateEventType {\n    ItemAdded,\n    ItemUpdated,\n    ItemDeleted,\n    StateChanged\n}\n\nexport interface StateManager extends StateChangeInformer {\n\n    getStateByName(name: string): any;\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void;\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void;\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any;\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean;\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean;\n\n    // internal methods for optimization and aggregate SM (only use if writing a new state manager)\n    _addNewNamedStateToStorage(state: stateValue): void;\n\n    _getState(name: string): stateValue;\n\n    _ensureStatePresent(name: string): void;\n\n    _replaceNamedStateInStorage(state: stateValue): void;\n\n    _saveState(name: string, stateObj: any): void;\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n}","import {StateChangeInformer} from \"./StateChangeInformer\";\nimport {stateEventType, stateListeners} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport debug from \"debug\";\n\nconst smLogger = debug('state-manager-delegate');\n\nclass StateChangedDelegate implements StateChangeInformer {\n    protected stateChangeListeners: stateListeners[];\n    protected suppressEventEmits: boolean = false;\n    protected managerName: string;\n\n    public constructor(managerName: string) {\n        this.managerName = managerName;\n        this.stateChangeListeners = [];\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        smLogger(`State Manager: Informing state listeners of ${name}`);\n        if (this.suppressEventEmits) {\n            smLogger(`State Manager: Events suppressed`);\n            return;\n        }\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Found state listeners of ${name} with event type ${eventType}`);\n            /* let each state change listener know */\n            const changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.forEach((listener) =>  {\n                smLogger(`State Manager: Found state listener of ${name} with name ${listener.getListenerName()} - informing`);\n                try {\n                    switch (eventType) {\n                        case (stateEventType.StateChanged): {\n                            listener.stateChanged(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemAdded): {\n                            listener.stateChangedItemAdded(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemUpdated): {\n                            listener.stateChangedItemUpdated(this.managerName, name, previousObjValue, stateObjValue);\n                            break;\n                        }\n                        case (stateEventType.ItemDeleted): {\n                            listener.stateChangedItemRemoved(this.managerName, name, stateObjValue);\n                            break;\n                        }\n                    }\n                }\n                catch (err) {\n                    console.log(err);\n                }\n\n            });\n        }\n    }\n\n    /*\n          Add a state listener for a given state name\n          the listener should be a function with two parameters\n          name - string - the name of the state variable that they want to be informed about\n          stateObjValue - object - the new state value\n         */\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.ensureListenerSetupForName(name);\n        smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()}`);\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            smLogger(`State Manager: Adding state listener for ${name} with name ${listener.getListenerName()} with index ${foundIndex}`);\n            let changeListenersForName = this.stateChangeListeners[foundIndex];\n            changeListenersForName.listeners.push(listener);\n        }\n    }\n\n    private ensureListenerSetupForName(name: string) {\n        const foundIndex = this.stateChangeListeners.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            const listenersNameArrayPair = {\n                name,\n                listeners: [],\n            };\n            this.stateChangeListeners.push(listenersNameArrayPair);\n        }\n    }\n\n}\n\nexport default StateChangedDelegate;","import debug from 'debug';\nimport StateChangeListener from './StateChangeListener';\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateEventType, StateManager, stateValue} from \"./StateManager\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\n\nconst smLogger = debug('state-manager-ts');\n\n\nexport abstract class AbstractStateManager implements StateManager {\n\n    protected forceSaves: boolean = true;\n    protected managerName: string = '';\n    protected delegate: StateChangeInformer;\n\n    protected constructor(managerName: string) {\n        this.delegate = new StateChangedDelegate(managerName);\n        this.managerName = managerName;\n        this.emitEvents();\n        this.forceSaves = true;\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n\n    public dontForceSavesOnAddRemoveUpdate() {\n        this.forceSaves = false;\n    }\n\n    public forceSavesOnAddRemoveUpdate() {\n        this.forceSaves = true;\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType = stateEventType.StateChanged, previousObjValue: any | null = null) {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    public abstract _ensureStatePresent(name: string): void;\n\n    public abstract _addNewNamedStateToStorage(state: stateValue): void;\n\n    public abstract _replaceNamedStateInStorage(state: stateValue): void;\n\n    public abstract _getState(name: string): stateValue;\n\n    public abstract _saveState(name: string, stateObj: any): void;\n\n    public abstract _addItemToState(name: string, stateObj: any, isPersisted: boolean): void;\n\n    public abstract _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public abstract _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void;\n\n    public addStateByName(name: string, stateObjForName: any): any {\n        this._ensureStatePresent(name);\n        /* create a new state attribute for the application state */\n        const state: stateValue = {\n            name,\n            value: stateObjForName,\n        };\n        /* get the current state value and replace it */\n        this._replaceNamedStateInStorage(state);\n        this.informChangeListenersForStateWithName(name, stateObjForName, stateEventType.StateChanged);\n        return stateObjForName;\n    }\n\n    getStateByName(name: string): any {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Getting state for ${name}`);\n        let stateValueObj = {};\n        // get the current state\n        const state: stateValue = this._getState(name);\n        stateValueObj = state.value;\n        smLogger(`State Manager: Found previous state for ${name}`);\n        smLogger(stateValueObj);\n        return stateValueObj;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean = true): void {\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Setting state for ${name}`);\n        smLogger(stateObjectForName);\n        // set the current state\n        const state: stateValue = this._getState(name);\n        state.value = stateObjectForName;\n        if (this.forceSaves) this._saveState(name, stateObjectForName);\n        if (informListeners) this.informChangeListenersForStateWithName(name, stateObjectForName);\n        return stateObjectForName;\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean = false): void { // assumes state is an array\n        this._ensureStatePresent(name);\n        smLogger(`State Manager: Adding item to state ${name}`);\n        // const state = this.getStateByName(name);\n        // state.push(item);\n        // smLogger(state);\n        this._addItemToState(name, item, isPersisted);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemAdded);\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = {};\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        smLogger(`Finding item in state ${name} - found index ${foundIndex}`);\n        smLogger(item);\n        if (foundIndex >= 0) {\n            result = state[foundIndex];\n        }\n        return result;\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean { // assumes state is an array\n        this._ensureStatePresent(name);\n        let result = false;\n        const state = this.getStateByName(name);\n        const foundIndex = state.findIndex((element: any) => testForEqualityFunction(element, item));\n        if (foundIndex >= 0) {\n            result = true;\n        }\n        return result;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem = this.findItemInState(name, item, testForEqualityFunction);\n        // remove the item from the state\n        smLogger(`State Manager: Found item - removing, is persisted ${isPersisted}`);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, state, false);\n        this.informChangeListenersForStateWithName(name, oldItem, stateEventType.ItemDeleted);\n        return result;\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._ensureStatePresent(name);\n        let result = true;\n        let oldItem: any = this.findItemInState(name, item, testForEqualityFunction);\n        smLogger('State Manager: Found item - replacing ');\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        //this.setStateByName(name, this.getStateByName(name), false);\n        this.informChangeListenersForStateWithName(name, item, stateEventType.ItemUpdated, oldItem);\n        return result;\n    }\n\n\n}\n","import debug from 'debug';\nimport {AbstractStateManager} from './AbstractStateManager';\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {stateValue} from \"./StateManager\";\n\nconst msManager = debug('state-manager-ms');\n\n/** To Do - make state unchangeable outside of this class (i.e. deep copies) */\nclass MemoryBufferStateManager extends AbstractStateManager {\n    private static _instance: MemoryBufferStateManager;\n    protected applicationState: stateValue[];\n\n    public constructor() {\n        super('memory');\n        this.applicationState = [];\n        this.forceSaves = true;\n    }\n\n    public static getInstance() {\n        if (!(MemoryBufferStateManager._instance)) {\n            MemoryBufferStateManager._instance = new MemoryBufferStateManager();\n        }\n        return MemoryBufferStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string) {\n        let foundIndex = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex < 0) {\n            let state: stateValue = {\n                name: name,\n                value: []\n            };\n            this.applicationState.push(state);\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        msManager(`Adding new complete state ${name}`);\n        msManager(state.value);\n        this.applicationState.push(state);\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === state.name);\n        if (foundIndex >= 0) {\n            msManager(`replacing complete state ${name}`);\n            msManager(state.value);\n            this.applicationState.splice(foundIndex, 1, state);\n        }\n    }\n\n    public _getState(name: string): stateValue {\n        // @ts-ignore\n        let state: stateValue = this.applicationState.find(element => element.name === name);\n        msManager(`getting complete state ${name}`);\n        msManager(state.value);\n        return state;\n    }\n\n    public _saveState(name: string, stateObject: any): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`SAVING complete state ${name}`);\n            msManager(state.value);\n            state.value = stateObject;\n        }\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return; // dont add incomplete objects to the state\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            msManager(`adding item to state ${name}`);\n            msManager(stateObj);\n            state.value.push(stateObj);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                msManager(`removing item from state ${name}`);\n                msManager(stateObj);\n                state.value.splice(valueIndex, 1);\n            }\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let foundIndex: number = this.applicationState.findIndex(element => element.name === name);\n        if (foundIndex >= 0) {\n            let state: stateValue = this.applicationState[foundIndex];\n            const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n            if (valueIndex >= 0) {\n                state.value.splice(valueIndex, 1, stateObj);\n                msManager(`updating item in state ${name}`);\n                msManager(stateObj);\n            }\n        } else {\n            this._addItemToState(name, stateObj, true);\n        }\n    }\n\n}\n\nexport default MemoryBufferStateManager;\n","export type Invitation = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    userList: string[],\n    type: InviteType,\n    requiresAcceptDecline: boolean,\n    subject: string,\n    attachment: any\n}\n\nexport type Message = {\n    from: string,\n    room: string,\n    message: string,\n    created: number,\n    priority: number,\n    type: InviteType,\n    attachment?: any\n}\n\nexport type JoinLeft = {\n    username: string,\n    room: string,\n    userList: string[],\n    type: InviteType\n}\n\nexport enum Priority {\n    Normal,\n    High,\n    Urgent\n}\n\nexport enum InviteType {\n    ChatRoom,\n    ScoreSheet\n}\n\nexport type ChatLog = {\n    roomName: string,\n    type: InviteType,\n    users: string[],\n    messages: Message[],\n    lastViewed: number,\n    numOfNewMessages: number\n}\n","import debug from 'debug';\nimport SocketListener from \"./SocketListener\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {InviteType, Message, Priority} from \"./Types\";\n\nconst sDebug = debug('socket-ts');\n\nclass SocketManager {\n    private static _instance: SocketManager;\n\n    public static getInstance(): SocketManager {\n        if (!(SocketManager._instance)) {\n            SocketManager._instance = new SocketManager();\n        }\n        return SocketManager._instance;\n    }\n\n    protected listener: SocketListener | null;\n    protected socket: any | null;\n    protected chatReceivers: ChatReceiver[] = [];\n\n    constructor() {\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForData = this.callbackForData.bind(this);\n        this.listener = null;\n        this.socket = null;\n        this.chatReceivers = [];\n        this.callbackForMessage = this.callbackForMessage.bind(this);\n        this.callbackForLogin = this.callbackForLogin.bind(this);\n        this.callbackForLogout = this.callbackForLogout.bind(this);\n        this.callbackForJoinRoom = this.callbackForJoinRoom.bind(this);\n        this.callbackForExitRoom = this.callbackForExitRoom.bind(this);\n        this.callbackForInvite = this.callbackForInvite.bind(this);\n        this.callbackForChat = this.callbackForChat.bind(this);\n        this.callbackForQueue = this.callbackForQueue.bind(this);\n        this.callbackForUserList = this.callbackForUserList.bind(this);\n        this.callbackForDeclineInvite = this.callbackForDeclineInvite.bind(this);\n    }\n\n    public addChatReceiver(receiver: ChatReceiver): void {\n        this.chatReceivers.push(receiver);\n    }\n\n    public setListener(listener: SocketListener) {\n        sDebug('Setting listener');\n        this.listener = listener;\n        sDebug('Creating socket connection');\n        // @ts-ignore\n        this.socket = io();\n        sDebug('Waiting for messages');\n        this.socket.on('message', this.callbackForMessage);\n        this.socket.on('data', this.callbackForData);\n        this.socket.on('login', this.callbackForLogin);\n        this.socket.on('logout', this.callbackForLogout);\n        this.socket.on('joinroom', this.callbackForJoinRoom);\n        this.socket.on('exitroom', this.callbackForExitRoom);\n        this.socket.on('invite', this.callbackForInvite);\n        this.socket.on('declineinvite', this.callbackForDeclineInvite);\n        this.socket.on('chat', this.callbackForChat);\n        this.socket.on('queue', this.callbackForQueue);\n        this.socket.on('userlist', this.callbackForUserList);\n    }\n\n    public login(username: string): void {\n        this.socket.emit('login', {username});\n    }\n\n    public logout(username: string): void {\n        this.socket.emit('logout', {username});\n    }\n\n    public joinChat(username: string, room: string, type: number): void {\n        this.socket.emit('joinroom', {username, room, type});\n    }\n\n    public leaveChat(username: string, room: string, type: number): void {\n        this.socket.emit('exitroom', {username, room, type});\n    }\n\n    public sendInvite(from: string, to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = '', attachment: any = {}) {\n        let inviteObj: any = {\n            from: from,\n            to: to,\n            room: room,\n            type: type,\n            requiresAcceptDecline: requiresAcceptDecline,\n            subject: subject,\n            attachment: attachment\n        }\n        sDebug(`Sending invite`);\n        sDebug(inviteObj);\n        this.socket.emit('invite', inviteObj);\n    }\n\n    public sendMessage(from: string, room: string, message: string, created: number, type: number, priority: Priority = Priority.Normal, attachment: any = {}) {\n        let messageObj: Message = {\n            from: from,\n            room: room,\n            message: message,\n            created: created,\n            priority: priority,\n            type: type,\n            attachment: attachment\n        }\n        this.socket.emit('chat', messageObj);\n    }\n\n    public getUserList() {\n        this.socket.emit('userlist');\n    }\n\n    public sendDeclineInvite(room: string, from: string, type: number) {\n        this.socket.emit('declineinvite', {room, from, type});\n    }\n\n    private callbackForMessage(content: any): void {\n        sDebug(`Received message : ${content}`);\n        try {\n            sDebug(content);\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForLogin(message: any): void {\n        sDebug(`Received login : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogin(message));\n    }\n\n    private callbackForUserList(message: any): void {\n        sDebug(`Received user list : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveUserList(message));\n    }\n\n    private callbackForLogout(message: any): void {\n        sDebug(`Received logout : ${message}`);\n        this.chatReceivers.forEach((receiver) => receiver.receiveLogout(message));\n    }\n\n    private callbackForJoinRoom(data: any): void {\n        sDebug(`Received joined room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveJoinedRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForExitRoom(data: any): void {\n        sDebug(`Received left room : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receivedLeftRoom(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForInvite(data: any): void {\n        sDebug(`Received invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveInvitation(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForDeclineInvite(data: any): void {\n        sDebug(`Received declined invite : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveDecline(dataObj.room, dataObj.username, dataObj.type));\n        } catch (err) {\n            sDebug(err);\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForChat(content: any): void {\n        sDebug(`Received chat : ${content}`);\n        try {\n            // should be a server side ChatMessage {room, message,user}\n            const dataObj = JSON.parse(content);\n            sDebug(dataObj);\n            this.chatReceivers.forEach((receiver) => receiver.receiveMessage(dataObj));\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    private callbackForQueue(data: any): void {\n        sDebug(`Received queued items : ${data}`);\n        try {\n            const dataObj = JSON.parse(data);\n            sDebug(dataObj);\n            // this object should contain two arrays of invites and messages\n            if (dataObj.invites && (dataObj.invites.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedInvites(dataObj.invites));\n            }\n            if (dataObj.messages && (dataObj.messages.length > 0)) {\n                this.chatReceivers.forEach((receiver) => receiver.receiveQueuedMessages(dataObj.messages));\n            }\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n\n    /*\n    *\n    *  expecting a JSON data object with the following attributes\n    *  1.  type: \"create\"|\"update\"|\"delete\"\n    *  2.  objectType: string name of the object type changed\n    *  3.  data: the new representation of the object\n    *  4.  user: application specific id for the user who made the change\n    *        - the application view is required to implement getCurrentUser() to compare the user who made the change\n    *\n     */\n    private callbackForData(message: any): void {\n        sDebug(`Received data`);\n        try {\n            const dataObj = JSON.parse(message);\n            sDebug(dataObj);\n            if (this.listener === null) return;\n            if (dataObj.user === this.listener.getCurrentUser()) {\n                sDebug(\"change made by this user, ignoring\");\n            } else {\n                sDebug(\"change made by another user, passing off to the application\");\n                this.listener.handleDataChangedByAnotherUser(dataObj);\n            }\n\n        } catch (err) {\n            sDebug('Not JSON data');\n        }\n    }\n}\n\nexport default SocketManager;","import {stateValue} from \"./StateManager\";\nimport StateChangeListener from \"./StateChangeListener\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\n\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst asyncLogger = debug('state-manager-async');\n\nexport default class AsyncStateManagerWrapper extends AbstractStateManager implements StateChangeListener {\n    protected wrappedSM: AsynchronousStateManager;\n    protected topLevelSM: AbstractStateManager;\n\n    public constructor(topLevelSM: AbstractStateManager, wrappedSM: AsynchronousStateManager) {\n        super('async');\n        this.topLevelSM = topLevelSM;\n        this.wrappedSM = wrappedSM;\n        this.forceSaves = false;\n\n        this.wrappedSM.emitEvents();\n        let stateNamesToMonitor = this.wrappedSM.getConfiguredStateNames();\n\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n\n        stateNamesToMonitor.forEach((stateName) => {\n            this.wrappedSM.addChangeListenerForName(stateName, this);\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        asyncLogger(`adding item to state ${name} - is persisted ${isPersisted}`);\n        this.wrappedSM.addNewItemToState(name, stateObj, isPersisted);\n    }\n\n\n    _getState(name: string): stateValue {\n        // assume wrapped SM is asynchronous\n        // make the call to get state but supply the caller with an empty state for now\n        asyncLogger(`getting state ${name}`);\n        this.wrappedSM.getStateByName(name);\n        return {name: name, value: []};\n    }\n\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`removing item from state ${name} is persisted ${isPersisted}`);\n        this.wrappedSM.removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        asyncLogger(`updating item in state ${name}`);\n        this.wrappedSM.updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n    }\n\n    _ensureStatePresent(name: string): void {\n    }// assume already present\n    _addNewNamedStateToStorage(state: stateValue): void {\n    } // assume already present\n    _replaceNamedStateInStorage(state: stateValue): void {\n    } // not implemented, not replacing state wholesale\n    _saveState(name: string, stateObj: any): void {\n    } // not implemented, not replacing state wholesale\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n    } // not implemented, assumes called to wrapped SM worked\n\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        // received new state from the wrapped SM\n        // pass the received state to the top level SM\n        asyncLogger(`Wrapped SM has supplied new state ${name} passing to top level SM`);\n        asyncLogger(newValue);\n        this.topLevelSM.setStateByName(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        asyncLogger(`Wrapped SM has supplied new completed item for state ${name} passing to top level SM`);\n        this.topLevelSM.addNewItemToState(name, itemAdded, true);\n    }\n\n    getListenerName(): string {\n        return \"Async Manager\";\n    }\n\n}","import debug from 'debug';\n\nimport {StateManager, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {AbstractStateManager} from \"./AbstractStateManager\";\n\n\nconst aggLogger = debug('state-manager-aggregate');\n\ntype managerWithFilters = {\n    manager: StateManager,\n    filters: string[]\n}\n\nexport class AggregateStateManager extends AbstractStateManager {\n    private static _instance: AggregateStateManager;\n    private stateManagers: managerWithFilters[];\n\n    private constructor() {\n        super('aggregate');\n        this.stateManagers = [];\n        this.emitEvents();\n\n    }\n\n    public static getInstance() {\n        if (!(AggregateStateManager._instance)) {\n            AggregateStateManager._instance = new AggregateStateManager();\n        }\n        return AggregateStateManager._instance;\n    }\n\n    public addStateManager(stateManager: AbstractStateManager, filters: string[] = [], emitEvents: boolean) {\n        let mWF: managerWithFilters = {\n            manager: stateManager,\n            filters: filters\n        };\n        this.stateManagers.push(mWF);\n        if (!emitEvents) stateManager.suppressEvents();\n        aggLogger('adding state manager with/without filters');\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._addNewNamedStateToStorage(state);\n            }\n        });\n    }\n\n    public _getState(name: string): stateValue {\n        let state: stateValue = {\n            name: name,\n            value: []\n        }\n        this.stateManagers.forEach((sm) => {\n            if (!this.stateNameInFilters(state.name, sm.filters)) {\n                aggLogger(`get state from state manager for state ${name}`);\n                aggLogger(sm.manager);\n                sm.manager._getState(name);\n            }\n\n        });\n        // assuming the state manager is holding all the values\n        if (this.stateManagers.length > 0) {\n            state = this.stateManagers[0].manager._getState(name);\n        }\n        return state;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                managerWithFilters.manager._ensureStatePresent(name);\n            }\n        });\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(state.name, managerWithFilters.filters)) {\n                managerWithFilters.manager._replaceNamedStateInStorage(state);\n            }\n        });\n    }\n\n    public _saveState(name: string, stateObj: any): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`saving state in state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._saveState(name, stateObj);\n            }\n        });\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`adding item to state in  state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._addItemToState(name, stateObj, isPersisted);\n            }\n        });\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`removing item from state in state manager for state ${name}, is persisted = ${isPersisted}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._removeItemFromState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        this.stateManagers.forEach((managerWithFilters) => {\n            if (!this.stateNameInFilters(name, managerWithFilters.filters)) {\n                aggLogger(`updating item in state in  state manager for state ${name}`);\n                aggLogger(managerWithFilters.manager);\n                aggLogger(stateObj);\n                managerWithFilters.manager._updateItemInState(name, stateObj, testForEqualityFunction, isPersisted);\n            }\n        });\n    }\n\n    private stateNameInFilters(name: string, filters: string[]): boolean {\n        let foundIndex = filters.findIndex((filter) => filter === name);\n        return (foundIndex >= 0);\n    }\n}","export enum Decorator {\n    Incomplete,\n    Complete,\n    Persisted,\n    PersistedLocally = 3\n}\n\nexport const STATE_NAMES = {\n    users: 'user',\n    chatLogs: 'chatLog',\n    exerciseTypes: 'exerciseType',\n    workouts: 'workout',\n    recentUserSearches: 'recentUserSearch'\n}\n\nexport const API_Config = {\n    login: '/login',\n    users: '/api/users',\n    exerciseTypes: '/api/exercise-types',\n    workouts: '/api/workouts'\n};\n\nexport const NAVIGATION = {\n    showMyWorkouts: 'navigationItemMyWorkouts',\n    userSearchId: 'navigationItemUserSearch',\n    exerciseTypesId: 'navigationItemExerciseTypes',\n    chatId: 'navigationItemChat',\n    workoutSummary:'navigationItemWorkoutSummary',\n    currentWorkout: 'navigationItemCurrentWorkout',\n}\n\nexport const DRAGGABLE = {\n    typeUser: 'user',\n    typeExerciseType: 'exerciseType',\n    fromUserSearch: 'userSearch',\n    fromFavourites: 'favourites',\n    fromExerciseTypes: 'exerciseTypes',\n}\n\nexport const VIEW_NAME = {\n    blockedUsers: 'blockedUsers',\n    chatLog: 'chatLog',\n    chatLogs: 'chatLogs',\n    favouriteUsers: 'favouriteUsers',\n    exerciseTypes: 'exerciseTypes',\n    userSearch: 'userSearch',\n    workouts: 'workouts',\n    workoutSummary: 'workoutSummary',\n    exercises:'exercises'\n}\n\nexport const VIEW_CONTAINER = {\n    exerciseTypeDetail:\"exerciseTypeDetail\",\n    currentWorkoutDetail: 'workoutDetail',\n    exerciseDropZone:'exerciseDropZone'\n}\n\nexport const BUTTON = {\n    createNewExerciseType: 'addNewExerciseType',\n    completeWorkout: 'completeWorkout'\n}\n\nexport const INPUT = {\n    workoutName: 'workoutName'\n}\n\n\n","export type equalityFunction = (item1: any, item2: any) => boolean;\n\nexport function isSame(item1: any, item2: any): boolean {\n    return (item1.id === item2.id);\n}\n\nexport function isSameMongo(item1: any, item2: any): boolean {\n    return (item1._id === item2._id);\n}\n\n\nexport function isSameUsername(item1: any, item2: any): boolean {\n    return (item1.username === item2.username);\n}\n\nexport function isSameRoom(item1:any, item2: any): boolean {\n    return (item1.roomName === item2.roomName);\n}\n","import Notification from './Notification';\nimport {NotificationManager} from \"./NotificationManager\";\n\nexport default class BootstrapNotification extends Notification {\n    constructor(notificationManager: NotificationManager) {\n        super(notificationManager);\n    }\n\n    // Make the notification visible on the screen\n    public show(title: string, message: string, topOffset: number = 0, context: string = 'info', duration: number = 3000): HTMLElement {\n        let containerId = this.notificationManager.getContainerId();\n        // convert the context to a background colour\n        let bgColorClass = '';\n        switch (context) {\n            case 'info': {\n                bgColorClass = 'bg-info';\n                break;\n            }\n            case 'warning': {\n                bgColorClass = 'bg-warning';\n                break;\n            }\n            case 'message': {\n                bgColorClass = 'bg-primary';\n                break;\n            }\n            case 'priority': {\n                bgColorClass = 'bg-danger';\n                break;\n            }\n            default: {\n                bgColorClass = \"bg-info\";\n            }\n\n        }\n        // Creating the notification container div\n        const containerNode = document.createElement('div');\n        containerNode.className = 'notification toast';\n        containerNode.style.top = `${topOffset}px`;\n        containerNode.setAttribute(\"role\", \"alert\");\n        containerNode.setAttribute(\"data-autohide\", \"false\");\n\n        // Adding the notification title node\n        const titleNode = document.createElement('div');\n        titleNode.className = `toast-header text-white ${bgColorClass}`;\n\n        const titleTextNode = document.createElement('strong');\n        titleTextNode.className = \"mr-auto\";\n        titleTextNode.textContent = title;\n\n        // Adding a little button on the notification\n        const closeButtonNode = document.createElement('button');\n        closeButtonNode.className = 'ml-2 mb-1 close';\n        closeButtonNode.textContent = 'x';\n        closeButtonNode.addEventListener('click', () => {\n            this.notificationManager.remove(containerNode);\n        });\n\n\n        // Adding the notification message content node\n        const messageNode: HTMLElement = document.createElement('div');\n        messageNode.className = 'toast-body';\n        messageNode.textContent = message;\n\n\n        // Appending the container with all the elements newly created\n        titleNode.appendChild(titleTextNode);\n        titleNode.appendChild(closeButtonNode);\n        containerNode.appendChild(titleNode);\n        containerNode.appendChild(messageNode);\n        containerNode.classList.add(`is-${context}`);\n\n        // Inserting the notification to the page body\n        const containerEl: HTMLElement | null = document.getElementById(containerId);\n        if (containerEl) containerEl.appendChild(containerNode);\n\n        // activate it\n        // @ts-ignore\n        $(\".notification\").toast('show');\n\n        // Default duration delay\n        if (duration <= 0) {\n            duration = 2000;\n        }\n        setTimeout(() => {\n            this.notificationManager.remove(containerNode);\n        }, duration);\n        return containerNode;\n    }\n}\n","import {NotificationManager} from \"./NotificationManager\";\n\nexport default abstract class Notification {\n\n    protected notificationManager: NotificationManager;\n    protected containerId: string;\n\n    protected constructor(notificationManager: NotificationManager) {\n        this.show = this.show.bind(this);\n\n        this.notificationManager = notificationManager;\n\n        // Create DOM notification structure when instantiated\n        this.containerId = this.notificationManager.getContainerId();\n    }\n\n    // Make the notification visible on the screen\n    public abstract show(title: string, message: string, topOffset: number, context: string, duration: number): HTMLElement;\n}\n","import BootstrapNotification from \"./BootstrapNotification\";\nimport {NotificationManager} from \"./NotificationManager\";\n\nclass NotificationFactory {\n    constructor() {\n    }\n\n    createNotification(manager: NotificationManager) {\n        return new BootstrapNotification(manager);\n    }\n}\n\nconst notificationFactory = new NotificationFactory();\n\nexport default notificationFactory;","import notificationFactory from \"./NotificationFactory\";\n\nexport class NotificationManager {\n    private static _instance: NotificationManager;\n\n    public static getInstance(): NotificationManager {\n        if (!(NotificationManager._instance)) {\n            NotificationManager._instance = new NotificationManager();\n        }\n        return NotificationManager._instance;\n    }\n\n    protected notifications: Node[];\n    protected currentCount: number;\n    protected offsetPerNotification: number;\n    protected containerId: string;\n\n    constructor() {\n        this.notifications = [];\n        this.currentCount = 0;\n        this.offsetPerNotification = 120;\n        this.containerId = 'notifications';\n\n        this.show = this.show.bind(this);\n    }\n\n    public getContainerId(): string {\n        return this.containerId;\n    }\n\n    public show(title: string, message: string, context: string = 'info', duration: number = 5000) {\n        const notification = notificationFactory.createNotification(this);\n        const notificationNode = notification.show(title, message, this.currentCount * this.offsetPerNotification, context, duration);\n        this.currentCount++;\n        this.notifications.push(notificationNode);\n    }\n\n    public remove(notificationNode: HTMLElement) {\n        const foundIndex = this.notifications.findIndex(element => element === notificationNode);\n        if (foundIndex >= 0) {\n            this.notifications.splice(foundIndex, 1);\n            // re-arrange the remaining notifications\n            this.notifications.map((notificationNode, index) => {\n                // @ts-ignore\n                notificationNode.style.top = `${this.offsetPerNotification * index}px`;\n            });\n        }\n        const parentEl = notificationNode.parentElement;\n        if (parentEl !== null) parentEl.removeChild(notificationNode);\n        this.currentCount--;\n        if (this.currentCount < 0) this.currentCount = 0;\n    }\n}\n\nexport default NotificationManager;\n","import SocketListener from \"./socket/SocketListener\";\nimport debug from 'debug';\n\nimport notifier from \"./notification/NotificationManager\";\nimport Controller from \"./Controller\";\nimport {isSame, isSameMongo} from \"./util/EqualityFunctions\";\nimport {STATE_NAMES} from \"./AppTypes\";\nimport NotificationManager from \"./notification/NotificationManager\";\n\nconst slLogger = debug('socket-listener');\n\nexport default class SocketListenerDelegate implements SocketListener {\n\n    public constructor() {}\n\n    public handleDataChangedByAnotherUser(message: any) {\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${message.user}`);\n        const changeUser = Controller.getInstance().getStateManager().findItemInState(STATE_NAMES.users, {_id: message.user}, isSameMongo);\n        let username = \"unknown\";\n        if (changeUser) {\n            username = changeUser.username;\n        }\n        slLogger(`Handling data change ${message.type} on object type ${message.stateName} made by user ${username}`);\n\n        let stateObj = message.data;\n        slLogger(stateObj);\n        // ok lets work out where this change belongs\n        try {\n            switch (message.type) {\n                case \"create\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.users: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.users, stateObj, true);\n                            NotificationManager.getInstance().show(stateObj.username, `${stateObj.username} has just registered.`, 'message');\n                            break;\n                        }\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes, stateObj, true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"update\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case \"delete\": {\n                    switch (message.stateName) {\n                        case STATE_NAMES.exerciseTypes: {\n                            Controller.getInstance().getStateManager().removeItemFromState(STATE_NAMES.exerciseTypes, stateObj, isSameMongo,true);\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        } catch (err) {\n            slLogger(err);\n        }\n\n    }\n\n    handleMessage(message: string): void {\n        slLogger(`Received message: ${message}`);\n    }\n\n    getCurrentUser(): string {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n}\n","import debug from 'debug';\n\nimport {AbstractStateManager} from \"./AbstractStateManager\";\nimport {equalityFunction} from '../util/EqualityFunctions';\nimport {stateValue} from \"./StateManager\";\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\n\nconst lsLogger = debug('local-storage');\n\nexport default class BrowserStorageStateManager extends AbstractStateManager implements AsynchronousStateManager {\n    private static _instance: BrowserStorageStateManager;\n    protected storage: Storage;\n    // @ts-ignore\n    private configuration: string[] = [];\n\n    public constructor(useLocalStorage: boolean = false) {\n        super('browser');\n        this.storage = window.sessionStorage;\n        if (useLocalStorage) this.storage = window.localStorage;\n        this.forceSaves = true;\n    }\n\n    public static getInstance(useLocalStorage: boolean = false) {\n        if (!(BrowserStorageStateManager._instance)) {\n            BrowserStorageStateManager._instance = new BrowserStorageStateManager(useLocalStorage);\n        }\n        return BrowserStorageStateManager._instance;\n    }\n\n    public _ensureStatePresent(name: string): void {\n        if (this.storage.getItem(name) === null) {\n            this._addNewNamedStateToStorage({name: name, value: []});\n        }\n    }\n\n    public _addNewNamedStateToStorage(state: stateValue): void {\n        lsLogger(`Local Storage: Saving with key ${state.name}`);\n        lsLogger(state);\n        const stringifiedSaveData: string = JSON.stringify(state.value);\n        lsLogger(stringifiedSaveData);\n        this.storage.setItem(state.name, stringifiedSaveData);\n\n    }\n\n    public _replaceNamedStateInStorage(state: stateValue): void {\n        this._addNewNamedStateToStorage(state);\n    }\n\n    public _getState(name: string): stateValue {\n        let savedResults = [];\n        lsLogger(`Local Storage: Loading with key ${name}`);\n        const savedResultsJSON = this.storage.getItem(name);\n        lsLogger(savedResultsJSON);\n        if (savedResultsJSON !== null) {\n            savedResults = JSON.parse(savedResultsJSON);\n        }\n        return {name: name, value: savedResults};\n    }\n\n    public _saveState(name: string, newValue: any): void {\n        this._addNewNamedStateToStorage({name: name, value: newValue});\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (!isPersisted) return;\n\n        let state: stateValue = this._getState(name);\n        lsLogger(`adding item to state ${name}`);\n        lsLogger(stateObj);\n        state.value.push(stateObj);\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            lsLogger(`removing item from state ${name}`);\n            lsLogger(stateObj);\n            state.value.splice(valueIndex, 1);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        let state: stateValue = this._getState(name);\n        const valueIndex = state.value.findIndex((element: any) => testForEqualityFunction(element, stateObj));\n        if (valueIndex >= 0) {\n            state.value.splice(valueIndex, 1, stateObj);\n            lsLogger(`updating item in state ${name}`);\n            lsLogger(stateObj);\n        }\n        this._replaceNamedStateInStorage(state);\n    }\n\n    forceResetForGet(stateName: string): void {\n    }\n\n    getConfiguredStateNames(): string[] {\n        return this.configuration;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        return false;\n    }\n\n    public initialise(config: string[]) {\n        this.configuration = config;\n    }\n\n}\n","import debug from 'debug';\nimport moment from \"moment\";\nimport SocketManager from \"./SocketManager\";\n\nimport {ChatLog, Invitation, InviteType, JoinLeft, Message, Priority} from \"./Types\";\nimport {ChatEmitter} from \"./ChatEmitter\";\nimport {ChatReceiver} from \"./ChatReceiver\";\nimport {ChatEventListener} from \"./ChatEventListener\";\n\nimport {StateManager} from \"../state/StateManager\";\nimport BrowserStorageStateManager from \"../state/BrowserStorageStateManager\";\nimport {v4} from \"uuid\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\nimport {UnreadMessageCountListener} from \"./UnreadMessageCountListener\";\n\n\nenum UserStatus {\n    LoggedOut,\n    LoggedIn\n}\n\nconst cmLogger = debug('chat-manager');\n\nexport class ChatManager implements ChatReceiver, ChatEmitter {\n    private static _instance: ChatManager;\n    private static chatLogKey = 'im-board-chat-logs';\n    private static blockedListKey = 'im-board-blocked-list';\n    private static favouriteListKey = 'im-board-favourite-list';\n    // TO DO chat logs, blocked list, favourites per user\n    protected chatLogs: ChatLog[];\n    protected localStorage: StateManager;\n    protected blockedList: string[] = [];\n    protected favouriteList: string[] = [];\n    protected loggedInUsers: string[] = [];\n    protected chatListeners: ChatEventListener[];\n    protected chatUserListeners: ChatUserEventListener[];\n    private currentUsername = '';\n    private unreadListener: UnreadMessageCountListener | null = null;\n\n    private constructor() {\n        cmLogger('Setting up chat logs, blocked list, and favourites');\n\n        this.chatLogs = [];\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n        this.localStorage = new BrowserStorageStateManager(true);\n\n        // connect to the socket manager\n        SocketManager.getInstance().addChatReceiver(this);\n\n        // bind the receiver methods\n        this.receiveLogin = this.receiveLogin.bind(this);\n        this.receiveLogout = this.receiveLogout.bind(this);\n        this.receiveInvitation = this.receiveInvitation.bind(this);\n        this.receiveMessage = this.receiveMessage.bind(this);\n        this.receiveQueuedMessages = this.receiveQueuedMessages.bind(this);\n        this.receiveQueuedInvites = this.receiveQueuedInvites.bind(this);\n        this.receiveJoinedRoom = this.receiveJoinedRoom.bind(this);\n        this.receivedLeftRoom = this.receivedLeftRoom.bind(this);\n    }\n\n    public static getInstance(): ChatManager {\n        if (!(ChatManager._instance)) {\n            ChatManager._instance = new ChatManager();\n        }\n        return ChatManager._instance;\n    }\n\n    public addChatEventHandler(receiver: ChatEventListener): void {\n        this.chatListeners.push(receiver);\n    }\n\n    public addChatUserEventHandler(receiver: ChatUserEventListener): void {\n        this.chatUserListeners.push(receiver);\n    }\n\n    public isUserLoggedIn(username: string) {\n        return (this.loggedInUsers.findIndex((name) => name === username) >= 0);\n    }\n\n    receiveUserList(users: string[]): void {\n        this.loggedInUsers = users;\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(users));\n    }\n\n    public addUserToBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index < 0) {\n            this.blockedList.push(username);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromBlockedList(username: string): void {\n        let index = this.blockedList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.blockedList.splice(index, 1);\n            this.saveBlockedList();\n            this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInBlockedList(username: string): boolean {\n        return (this.blockedList.findIndex((blocked) => blocked === username) >= 0);\n    }\n\n    public addUserToFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((favourite) => favourite === username);\n        if (index < 0) {\n            this.favouriteList.push(username);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n    }\n\n    public removeUserFromFavouriteList(username: string): void {\n        let index = this.favouriteList.findIndex((blocked) => blocked === username);\n        if (index >= 0) {\n            this.favouriteList.splice(index, 1);\n            this.saveFavouriteList();\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(this.favouriteList));\n        }\n\n    }\n\n    public isUserInFavouriteList(username: string): boolean {\n        return (this.favouriteList.findIndex((user) => user === username) >= 0);\n    }\n\n    public getFavouriteUserList(): string[] {\n        return [...this.favouriteList];\n    }\n\n    public getBlockedUserList(): string[] {\n        return [...this.blockedList];\n    }\n\n    public setCurrentUser(username: string): void {\n        cmLogger(`Setting current user ${username}`);\n        this.currentUsername = username;\n        // load previous logs\n        let savedLogs = this.localStorage.getStateByName(ChatManager.chatLogKey + this.currentUsername);\n        cmLogger(savedLogs);\n        if (savedLogs) {\n            this.chatLogs = savedLogs;\n        }\n\n        // load previous blocked list\n        let blockedList = this.localStorage.getStateByName(ChatManager.blockedListKey + this.currentUsername);\n        cmLogger(blockedList);\n        if (blockedList) {\n            this.blockedList = blockedList;\n        }\n\n        // load previous favourite list\n        let favouriteList = this.localStorage.getStateByName(ChatManager.favouriteListKey + this.currentUsername);\n        cmLogger(favouriteList);\n        if (favouriteList) {\n            this.favouriteList = favouriteList;\n        }\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n\n\n    }\n\n    public getCurrentUser(): string {\n        return this.currentUsername;\n    }\n\n    receiveJoinedRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        //if (users.username === this.currentUsername) return;\n        if (users.type !== InviteType.ChatRoom) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for joined user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} joined the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receivedLeftRoom(users: JoinLeft): void {\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (users.type !== InviteType.ChatRoom) return;\n        if (users.username === this.currentUsername) return;\n\n        let log: ChatLog = this.ensureChatLogExists(users.room);\n\n        cmLogger(`User list for room ${users.room} - ${users.userList.join(',')}`);\n        log.users = users.userList;\n        // add a \"message\" for leaving user\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        const joinDateTime = moment().format('DD/MM/YYYY HH:mm');\n        let message: Message = {\n            from: '',\n            created: created,\n            room: users.room,\n            priority: 0,\n            type: InviteType.ChatRoom,\n            message: `${users.username} left the chat on ${joinDateTime}`\n        }\n        log.messages.push(message);\n        this.saveLogs();\n\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, false));\n    }\n\n    receiveInvitation(invite: Invitation): void {\n        if (invite.type !== InviteType.ChatRoom) return;\n\n        //  unless we are receiving an invite from someone in our blocked list, we automatically accept this invite\n        if (!this.isUserInBlockedList(invite.from)) {\n            cmLogger(`Invited to chat ${invite.room}`);\n            const didChatAlreadyExist = this.doesChatRoomExist(invite.room);\n            cmLogger(invite);\n            cmLogger(`Letting the listeners know, if they are all happy to accept then we will join the room`);\n\n            let happyToProceed = true;\n\n            if (!didChatAlreadyExist) {\n                this.chatListeners.forEach((listener) => {\n                    if (!listener.handleNewInviteReceived(invite)) {\n                        happyToProceed = false;\n                    }\n                });\n            }\n            if (happyToProceed) {\n\n                let chatLog: ChatLog = this.ensureChatLogExists(invite.room);\n                // keep a record of the type of invite\n                chatLog.type = invite.type;\n\n                // add the users in the invitation user list for the room, if not already added\n                if (invite.userList) {\n                    invite.userList.forEach((username: string) => {\n                        if ((chatLog.users.findIndex((user) => user === username)) < 0) chatLog.users.push(invite.from);\n                    });\n                }\n\n                if ((chatLog.users.findIndex((user) => user === invite.from)) < 0) chatLog.users.push(invite.from);\n\n                this.saveLogs();\n                cmLogger(`Joining chat ${invite.room}`);\n                SocketManager.getInstance().joinChat(this.getCurrentUser(), invite.room, InviteType.ChatRoom);\n                this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n            }\n\n        } else {\n            cmLogger(`User ${invite.from} blocked`);\n        }\n    }\n\n    receiveLogin(username: string): void {\n        cmLogger(`Handle login received for ${username}`);\n        // keep track of the logged in users\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index < 0) this.loggedInUsers.push(username);\n        cmLogger(this.loggedInUsers);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging in`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n        }\n    }\n\n    receiveLogout(username: string): void {\n        let index = this.loggedInUsers.findIndex((user) => user === username);\n        if (index >= 0) this.loggedInUsers.splice(index, 1);\n\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(this.loggedInUsers));\n\n        // if the user in in favourites and not in blocked list passing this on to the listener\n        if (!this.isUserInBlockedList(username) && this.isUserInFavouriteList(username)) {\n            cmLogger(`User ${username} logging out`);\n            this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n        }\n    }\n\n    receiveDecline(room: string, username: string, type: number): void {\n        if (type !== InviteType.ChatRoom) return;\n        // we get this for all changes to a room, if the username is us can safely ignore\n        if (username === this.currentUsername) return;\n\n\n        if (!this.isUserInBlockedList(username)) {\n            cmLogger(`User ${username} declined invitation to room`);\n            this.chatListeners.forEach((listener) => listener.handleInvitationDeclined(room, username));\n        }\n\n    }\n\n    public setUnreadCountListener(listener: UnreadMessageCountListener) {\n        this.unreadListener = listener;\n    }\n\n    public touchChatLog(room: string): void {\n        let chatLog = this.ensureChatLogExists(room);\n        chatLog.numOfNewMessages = 0;\n        chatLog.lastViewed = parseInt(moment().format('YYYYMMDDHHmmss'));\n\n        this.emitUnreadMessageCountChanged();\n\n        this.saveLogs();\n    }\n\n    public getChatLog(room: string): ChatLog | null {\n        let log: ChatLog | null = null;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) log = this.chatLogs[index];\n        return log;\n    }\n\n    receiveMessage(message: Message, wasOffline: boolean = false): void {\n        if (message.type !== InviteType.ChatRoom) return; // ignore messages that aren't for chat rooms\n        // double check the message is not from us somehow\n        if (message.from === this.getCurrentUser()) return;\n        // don't receive messages from the blocked users\n        if (!this.isUserInBlockedList(message.from)) {\n\n            // ok, so we need to add the message to the chat log, increase the new message count, save the logs and pass it on\n            let chatLog = this.ensureChatLogExists(message.room);\n            this.addSenderToRoomIfNotAlreadyPresent(chatLog, message.from);\n            this.addMessageToChatLog(chatLog, message);\n            cmLogger(`Message received`);\n            cmLogger(message);\n\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, wasOffline));\n        } else {\n            cmLogger(`Message received from user ${message.from} - is in blocked list, not passed on.`)\n        }\n\n    }\n\n    receiveQueuedInvites(invites: any): void {\n        // just loop through and process each invite\n        invites.forEach((invite: Invitation) => {\n            this.receiveInvitation(invite);\n        });\n    }\n\n    receiveQueuedMessages(messages: any): void {\n        // just loop through a process each message\n        messages.forEach((message: Message) => {\n            this.receiveMessage(message, true)\n        });\n        this.chatListeners.forEach((listener) => listener.handleOfflineMessagesReceived(messages));\n    }\n\n    joinChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.ensureChatLogExists(room);\n        SocketManager.getInstance().joinChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n    }\n\n    leaveChat(room: string): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        this.removeChatLog(room);\n        SocketManager.getInstance().leaveChat(this.getCurrentUser(), room, InviteType.ChatRoom);\n        this.emitUnreadMessageCountChanged();\n    }\n\n    login(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().login(this.getCurrentUser());\n        // get the current user list\n        SocketManager.getInstance().getUserList();\n        // connect to the chat rooms already in logs\n        this.chatLogs.forEach((log) => {\n            if (log.type === InviteType.ChatRoom) {\n                SocketManager.getInstance().joinChat(this.currentUsername, log.roomName, InviteType.ChatRoom);\n            }\n        });\n    }\n\n    logout(): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().logout(this.getCurrentUser());\n    }\n\n    declineInvite(room: string) {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        SocketManager.getInstance().sendDeclineInvite(room, this.getCurrentUser(), InviteType.ChatRoom);\n\n    }\n\n    sendInvite(to: string, room: string, type: InviteType = InviteType.ChatRoom, requiresAcceptDecline: boolean = false, subject: string = ''): void {\n        if (this.getCurrentUser().trim().length === 0) return;  // we are not logged in\n        // can't accidentally send an invite to blacklisted\n        if (this.isUserInBlockedList(to)) return;\n        // only send an invite if the user isn't already in the room\n        const log: ChatLog = this.ensureChatLogExists(room);\n        if (log.users.findIndex((user) => user === to) < 0) {\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), to, room, type, requiresAcceptDecline, subject);\n        }\n    }\n\n    sendMessage(room: string, content: string, priority: Priority = Priority.Normal, attachment: any | undefined): Message | null {\n        if (this.getCurrentUser().trim().length === 0) return null;  // we are not logged in\n        let log = this.ensureChatLogExists(room);\n        // send the message\n        let created = parseInt(moment().format('YYYYMMDDHHmmss'));\n        SocketManager.getInstance().sendMessage(this.getCurrentUser(), room, content, created, InviteType.ChatRoom, Priority.Normal, {});\n\n        // add the message to the chat log\n        if (!attachment) attachment = {};\n        let sent: Message = {\n            from: this.getCurrentUser(),\n            room: room,\n            message: content,\n            created: created,\n            priority: priority,\n            type: InviteType.ChatRoom,\n            attachment: attachment\n        }\n        this.addMessageToChatLog(log, sent);\n        return sent;\n    }\n\n    public getChatLogs(): ChatLog[] {\n        return [...this.chatLogs];\n    }\n\n    public startChatWithUser(username: string): string | null {\n        let roomName: string | null = null;\n        if (username) {\n            cmLogger(`Starting chat with ${username}`);\n            // first thing, do we have a chat log with this user (and just this user) already?\n            let chatLog: ChatLog = this.ensureChatLogExistsWithUser(username);\n            this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(chatLog, false));\n\n\n            // invite the other user\n            SocketManager.getInstance().sendInvite(this.getCurrentUser(), username, chatLog.roomName, InviteType.ChatRoom, false, '');\n            // ok, lets connect to the server\n            SocketManager.getInstance().joinChat(this.getCurrentUser(), chatLog.roomName, InviteType.ChatRoom);\n            roomName = chatLog.roomName;\n        }\n        return roomName;\n    }\n\n    private saveLogs(): void {\n        this.localStorage.setStateByName(ChatManager.chatLogKey + this.currentUsername, this.chatLogs, false);\n    }\n\n    private saveBlockedList(): void {\n        this.localStorage.setStateByName(ChatManager.blockedListKey + this.currentUsername, this.blockedList, false);\n    }\n\n    private saveFavouriteList(): void {\n        this.localStorage.setStateByName(ChatManager.favouriteListKey + this.currentUsername, this.favouriteList, false);\n    }\n\n    private ensureChatLogExists(room: string): ChatLog {\n        let log: ChatLog;\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index < 0) {\n            log = {\n                roomName: room,\n                users: [this.getCurrentUser()],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom,\n            }\n            this.chatLogs.push(log);\n            this.saveLogs();\n        } else {\n            log = this.chatLogs[index];\n        }\n        return log;\n    }\n\n    private ensureChatLogExistsWithUser(username: string): ChatLog {\n        let foundLog: ChatLog | null = null;\n        let index = 0;\n        while (index < this.chatLogs.length) {\n            let log = this.chatLogs[index];\n            if (log.users.length === 2) {\n                // is the username in the two of this room?\n                if (log.users.findIndex((value) => value === username) >= 0) {\n                    foundLog = log;\n                    index = this.chatLogs.length;\n                }\n            }\n            index++;\n        }\n        if (!foundLog) {\n            foundLog = {\n                roomName: v4(),\n                users: [this.getCurrentUser(), username],\n                messages: [],\n                lastViewed: parseInt(moment().format('YYYYMMDDHHmmss')),\n                numOfNewMessages: 0,\n                type: InviteType.ChatRoom\n            }\n            this.chatLogs.push(foundLog);\n            this.saveLogs();\n        }\n        return foundLog;\n    }\n\n    private doesChatRoomExist(room: string) {\n        let index = this.chatLogs.findIndex((log: ChatLog) => log.roomName === room);\n        return (index >= 0);\n    }\n\n    private emitUnreadMessageCountChanged() {\n        let unreadCount = 0;\n        this.chatLogs.forEach((log) => {\n            unreadCount += log.numOfNewMessages;\n        });\n        this.unreadListener?.countChanged(unreadCount);\n    }\n\n    private addMessageToChatLog(log: ChatLog, message: Message) {\n        log.numOfNewMessages++;\n        log.messages.push(message);\n\n        this.emitUnreadMessageCountChanged();\n\n        if (message.from === this.getCurrentUser()) {\n            this.touchChatLog(log.roomName); // this will also save the logs\n        } else {\n            this.saveLogs();\n        }\n    }\n\n    private addSenderToRoomIfNotAlreadyPresent(chatLog: ChatLog, sender: string) {\n        let index = chatLog.users.findIndex((user) => user === sender);\n        if (index < 0) {\n            chatLog.users.push(sender);\n        }\n    }\n\n    private removeChatLog(room: string) {\n        let index = this.chatLogs.findIndex((log) => log.roomName === room);\n        if (index >= 0) {\n            cmLogger(`Removing Chat log for room ${room}`);\n            let result = this.chatLogs.splice(index, 1);\n            cmLogger(result.length);\n            this.saveLogs();\n        }\n    }\n\n}\n","import {ChatManager} from \"./ChatManager\";\nimport {ChatEventListener} from \"./ChatEventListener\";\nimport NotificationManager from \"../notification/NotificationManager\";\nimport debug from 'debug';\nimport {ChatLog, Invitation, InviteType, Message} from \"./Types\";\nimport {ChatUserEventListener} from \"./ChatUserEventListener\";\n\nconst notLogger = debug('notification-controller');\n\nexport class NotificationController implements ChatEventListener, ChatUserEventListener {\n    private static _instance: NotificationController;\n    private doNotDisturb: boolean = false;\n    private chatManager: ChatManager;\n    private chatListeners: ChatEventListener[];\n    private chatUserListeners: ChatUserEventListener[];\n\n    private constructor() {\n        this.chatManager = ChatManager.getInstance();\n        this.doNotDisturb = false;\n        this.chatListeners = [];\n        this.chatUserListeners = [];\n\n\n        //bind the methods\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n\n        this.chatManager.addChatEventHandler(this);\n        this.chatManager.addChatUserEventHandler(this);\n    }\n\n    public static getInstance(): NotificationController {\n        if (!(NotificationController._instance)) {\n            NotificationController._instance = new NotificationController();\n        }\n        return NotificationController._instance;\n    }\n\n    handleInvitationDeclined(room: string, username: string): void {\n        if ((this.doNotDisturb)) return;\n\n        // notify the user of the new chat\n        NotificationManager.getInstance().show('Room', `User ${username} has declined the invitation to join you.`, 'info', 7000);\n    }\n\n\n    handleNewInviteReceived(invite: Invitation): boolean {\n        let result = true;\n\n        // is this a chat room or score sheet?\n        if (invite.type === InviteType.ScoreSheet) return true;\n\n        if ((this.doNotDisturb) && (!invite.requiresAcceptDecline)) return result;\n\n        if (invite.requiresAcceptDecline) {\n            // notify the user of the invitation\n            //result = controller.askUserAboutInvitation(invite); ///////TO FIX\n\n        } else {\n            // notify the user of the new chat\n            NotificationManager.getInstance().show('Chat Room', `User ${invite.from} has invited you.`, 'info', 7000);\n        }\n\n        return result;\n    }\n\n    public addListener(listener: ChatEventListener) {\n        this.chatListeners.push(listener);\n    }\n\n    public addUserListener(listener: ChatUserEventListener) {\n        this.chatUserListeners.push(listener);\n    }\n\n    public setDoNotDisturb(dontDisturbMe = true) {\n        this.doNotDisturb = dontDisturbMe;\n    }\n\n    public blackListUser(username: string, isBlackedListed: boolean = true) {\n        if (isBlackedListed) {\n            this.chatManager.addUserToBlockedList(username);\n        } else {\n            this.chatManager.removeUserFromBlockedList(username);\n        }\n    }\n\n    public favouriteUser(username: string, isFavourited: boolean = true) {\n        if (isFavourited) {\n            this.chatManager.addUserToFavouriteList(username);\n        } else {\n            this.chatManager.removeUserFromFavouriteList(username);\n        }\n    }\n\n    public isFavouriteUser(username: string): boolean {\n        return this.chatManager.isUserInFavouriteList(username);\n    }\n\n    public isBlockedUser(username: string): boolean {\n        return this.chatManager.isUserInBlockedList(username);\n    }\n\n    handleChatLogsUpdated() {\n        this.chatListeners.forEach((listener) => listener.handleChatLogsUpdated());\n    }\n\n    handleChatLogUpdated(log: ChatLog, wasOffline = false): void {\n        notLogger(`Handle chat log updated`);\n        notLogger(log);\n        // pass on the changes\n        this.chatListeners.forEach((listener) => listener.handleChatLogUpdated(log, wasOffline));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n\n        if (!wasOffline) {\n            // get the last message added, it won't be from ourselves (the chat manager takes care of that)\n            if (log.messages.length > 0) {\n                const displayMessage = log.messages[log.messages.length - 1];\n                NotificationManager.getInstance().show(displayMessage.from, displayMessage.message, 'message', 3000);\n            }\n        }\n    }\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        notLogger(`Handle logged in users updated`);\n        notLogger(usernames);\n\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleLoggedInUsersUpdated(usernames));\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        notLogger(`Handle favourite user ${username} logged in`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedIn(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged in.`, 'warning', 5000);\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        notLogger(`Handle favourite user ${username} logged out`);\n        // allow the view to change the user statuses\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUserLoggedOut(username));\n\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        NotificationManager.getInstance().show(username, `User ${username} has logged out.`, 'priority', 4000);\n\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        notLogger(`Handle blocked users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleBlockedUsersChanged(usernames));\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        notLogger(`Handle favourite users changed to ${usernames}`);\n        this.chatUserListeners.forEach((listener) => listener.handleFavouriteUsersChanged(usernames));\n    }\n\n    public startChatWithUser(username: string): string | null {\n        return ChatManager.getInstance().startChatWithUser(username);\n\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.chatListeners.forEach((listener) => listener.handleChatStarted(log));\n    }\n\n    handleOfflineMessagesReceived(messages: Message[]): void {\n        // provide visual notifications if do not disturb is not on\n        if (this.doNotDisturb) return;\n        if (messages.length === 0) return;\n\n        NotificationManager.getInstance().show(\"Offline messages received\", `You have received ${messages.length} messages since you last logged out.`);\n    }\n\n\n}\n","export enum RequestType {\n    POST,\n    GET,\n    PUT,\n    DELETE\n}\n\nexport enum queueType {\n    PRIORITY,\n    BACKGROUND\n}\n\n\nexport type jsonRequest = {\n    url: string,\n    type: RequestType,\n    params: any,\n    callback: RequestCallBackFunction,\n    associatedStateName: string,\n};\n\nexport type managerRequest = {\n    originalRequest: jsonRequest,\n    callback: ManagerCallbackFunction,\n    requestId: string,\n    queueType: queueType\n}\n\n\nexport type ManagerCallbackFunction = (data: any, status: number, queueId: number, requestId: string) => void;\nexport type RequestCallBackFunction = (data: any, status: number, associatedStateName: string) => void;","import debug from 'debug';\nimport {ManagerCallbackFunction, managerRequest, queueType} from \"./Types\";\n\nconst apiLogger = debug('api-ts');\n\n\nclass ApiUtil {\n\n    public async postFetchJSON(url: string, query: any) {\n        const postParameters = {\n            method: \"POST\",\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({query})\n        };\n\n        const response = await fetch(url, postParameters);\n        return response.json();\n    }\n\n    /*\n        Utility function for calling JSON POST requests\n        Parameters:\n        1.  URL to send the POST request too;\n        2.  parameters object whose attribute (name/values) are the request parameters; and\n        3.  A function to receive the results when the fetch has completed\n            The callback function should have the following form\n            callback (jsonDataReturned, httpStatusCode)\n            a)  A successful fetch will return the JSON data in the first parameter and a status code of the server\n            b)  Parameters that cannot be converted to JSON format will give a null data and code 404\n            c)  A server error will give that code and no data\n      */\n    public apiFetchJSONWithPost(request: managerRequest): void {\n        apiLogger(`Executing fetch with URL ${request.originalRequest.url} with body ${request.originalRequest.params}`);\n        try {\n            JSON.stringify(request.originalRequest.params);\n        } catch (error) {\n            apiLogger('Unable to convert parameters to JSON');\n            apiLogger(request.originalRequest.params, 100);\n            request.callback(null, 404, request.queueType, request.requestId);\n        }\n        const postParameters = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n\n        this.fetchJSON(request.originalRequest.url, postParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithGet(request: managerRequest): void {\n        apiLogger(`Executing GET fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const getParameters = {\n            method: 'GET',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, getParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithDelete(request: managerRequest): void {\n        apiLogger(`Executing DELETE fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const delParameters = {\n            method: 'DELETE',\n            headers: {'Content-Type': 'application/json'},\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, delParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    public apiFetchJSONWithPut(request: managerRequest) {\n        apiLogger(`Executing PUT fetch with URL ${request.originalRequest.url} with id ${request.originalRequest.params.id}`);\n        const putParameters = {\n            method: 'PUT',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({...request.originalRequest.params}),\n        };\n        if (request.originalRequest.params.id) request.originalRequest.url += `/${request.originalRequest.params.id}`;\n\n        this.fetchJSON(request.originalRequest.url, putParameters, request.callback, request.queueType, request.requestId);\n    }\n\n    private fetchJSON(url: string, parameters: any, callback: ManagerCallbackFunction, queueType: queueType, requestId: string) {\n        fetch(url, parameters)\n            .then((response) => {\n                apiLogger(`Response code was ${response.status}`);\n                if (response.status >= 200 && response.status <= 299) {\n                    return response.json();\n                }\n                if (response.status === 400) {\n                    apiLogger(response.json());\n                }\n            })\n            .then((data) => {\n                apiLogger(data);\n                callback(data, 200, queueType, requestId);\n            })\n            .catch((error) => {\n                apiLogger(error);\n                callback(null, 500, queueType, requestId);\n            });\n    }\n}\n\nconst apiUtil = new ApiUtil();\n\nexport default apiUtil;\n","import apiUtil from './ApiUtil';\nimport {v4} from 'uuid';\nimport QueueListener from \"./QueueListener\";\nimport {jsonRequest, managerRequest, queueType, RequestCallBackFunction, RequestType} from \"./Types\";\n\nimport debug from 'debug';\n\nconst dlLogger = debug('api-ts');\n\nclass DownloadManager {\n    private static _instance: DownloadManager;\n\n    public static getInstance(): DownloadManager {\n        if (!(DownloadManager._instance)) {\n            DownloadManager._instance = new DownloadManager();\n        }\n        return DownloadManager._instance;\n    }\n    protected backgroundQueue: managerRequest[];\n    protected priorityQueue: managerRequest[];\n    protected inProgress: managerRequest[];\n    protected backgroundChangeListener: QueueListener | null;\n    protected priorityChangeListener: QueueListener | null;\n\n    constructor() {\n        this.backgroundQueue = [];\n        this.priorityQueue = [];\n        this.inProgress = [];\n        this.backgroundChangeListener = null;\n        this.priorityChangeListener = null;\n\n        this.callbackForQueueRequest = this.callbackForQueueRequest.bind(this);\n    }\n\n    public setBackgroundChangeListener(uiChangeListener: QueueListener) {\n        this.backgroundChangeListener = uiChangeListener;\n    }\n\n    public setPriorityChangeListener(uiChangeListener: QueueListener) {\n        this.priorityChangeListener = uiChangeListener;\n    }\n\n    public getPriorityQueueCount() {\n        return this.priorityQueue.length;\n    }\n\n    public getBackgroundQueueCount() {\n        return this.backgroundQueue.length;\n    }\n\n    public addQLApiRequest(url: string, query: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {query: query, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addQLMutationRequest(url: string, mutation: string, variables: any, callback: RequestCallBackFunction, state: string, isPriority = false) {\n        let request: jsonRequest = {\n            url: url,\n            type: RequestType.POST,\n            params: {mutation: mutation, variables: variables},\n            callback: callback,\n            associatedStateName: state\n        }\n\n        this.addApiRequest(request, isPriority);\n    }\n\n    public addApiRequest(jsonRequest: jsonRequest, isPriority = false) {\n        // add a new requestId to the request for future tracking\n        const requestId = v4();\n        dlLogger(`Download Manger: Adding Queue Request ${requestId}`);\n        dlLogger(jsonRequest, 200);\n\n        if (isPriority) {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.PRIORITY,\n                callback: this.callbackForQueueRequest,\n            }\n            this.priorityQueue.push(managerRequest);\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventAddToQueue();\n        } else {\n            let managerRequest: managerRequest = {\n                originalRequest: jsonRequest,\n                requestId: requestId,\n                queueType: queueType.BACKGROUND,\n                callback: this.callbackForQueueRequest,\n            }\n            this.backgroundQueue.push(managerRequest);\n            if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventAddToQueue();\n        }\n        this.processQueues();\n    }\n\n    private async processPriorityQueue() {\n        const queueItem: managerRequest | undefined = this.priorityQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processBackgroundQueue() {\n        const queueItem: managerRequest | undefined = this.backgroundQueue.shift();\n        if (queueItem !== undefined) this.inProgress.push(queueItem);\n        if (queueItem !== undefined) this.initiateFetchForQueueItem(queueItem);\n    }\n\n    private async processQueues() {\n        let totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        while (totalQueuedItems > 0) {\n            dlLogger(`Download Manager: processing queue, items remaining ${totalQueuedItems}`);\n            // priority queue takes priority\n            if (this.priorityQueue.length > 0) {\n                await this.processPriorityQueue();\n            } else if (this.backgroundQueue.length > 0) {\n                await this.processBackgroundQueue();\n            }\n            totalQueuedItems = this.priorityQueue.length + this.backgroundQueue.length;\n        }\n    }\n\n    private callbackForQueueRequest(jsonData: any, httpStatus: number, queueId: number, requestId: string) {\n        // let the listeners know about the completion\n        if (queueId === queueType.PRIORITY) { // priority\n            if (this.priorityChangeListener) this.priorityChangeListener.handleEventRemoveFromQueue();\n        } else if (this.backgroundChangeListener) this.backgroundChangeListener.handleEventRemoveFromQueue();\n\n        dlLogger(`Download Manager: received callback for queue ${queueId} request ${requestId} with status ${httpStatus}`);\n        // find the item in the in progress\n        const foundIndex = this.inProgress.findIndex(element => element.requestId === requestId);\n        if (foundIndex >= 0) {\n            // remove from in progress\n            const queueItem = this.inProgress[foundIndex];\n            this.inProgress.splice(foundIndex, 1);\n            dlLogger(queueItem);\n            dlLogger(`Download Manager: finished for queue item ${queueItem.requestId}`);\n            // let the callback function know\n            queueItem.originalRequest.callback(jsonData, httpStatus, queueItem.originalRequest.associatedStateName);\n        }\n    }\n\n    private initiateFetchForQueueItem(item: managerRequest) {\n        dlLogger(`Download Manager: initiating fetch for queue item ${item.requestId}`);\n        dlLogger(item);\n        if ((item.originalRequest.url !== null) && (item.originalRequest.params != null) && (item.originalRequest.callback != null)) {\n            switch (item.originalRequest.type) {\n                case RequestType.POST: {\n                    apiUtil.apiFetchJSONWithPost(item);\n                    break;\n                }\n                case RequestType.GET: {\n                    apiUtil.apiFetchJSONWithGet(item);\n                    break;\n                }\n                case RequestType.DELETE: {\n                    apiUtil.apiFetchJSONWithDelete(item);\n                    break;\n                }\n                case RequestType.PUT: {\n                    apiUtil.apiFetchJSONWithPut(item);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport default DownloadManager;\n","import {stateEventType, stateValue} from \"./StateManager\";\nimport {equalityFunction} from \"../util/EqualityFunctions\";\nimport {jsonRequest, RequestType} from \"../network/Types\";\nimport DownloadManager from \"../network/DownloadManager\";\nimport debug from 'debug';\nimport AsynchronousStateManager from \"./AsynchronousStateManager\";\nimport StateChangedDelegate from \"./StateChangedDelegate\";\nimport {StateChangeInformer} from \"./StateChangeInformer\";\nimport StateChangeListener from \"./StateChangeListener\";\n\n\nconst apiSMLogger = debug('state-manager-api');\n\ntype ApiConfig = {\n    stateName: string,\n    serverURL: string,\n    api: string\n    isActive: boolean,\n    idField?:string\n\n}\n\nexport class RESTApiStateManager implements AsynchronousStateManager {\n    private static _instance: RESTApiStateManager;\n    protected configuration: ApiConfig[] = [];\n    protected bHasCompletedRun: boolean[];\n    protected delegate: StateChangeInformer;\n\n    protected constructor() {\n        this.delegate = new StateChangedDelegate('restapi');\n        this.emitEvents();\n        this.bHasCompletedRun = [];\n\n\n        this.callbackForAddItem = this.callbackForAddItem.bind(this);\n        this.callbackForRemoveItem = this.callbackForRemoveItem.bind(this);\n        this.callbackForUpdateItem = this.callbackForUpdateItem.bind(this);\n        this.callbackForGetItems = this.callbackForGetItems.bind(this);\n    }\n\n    public static getInstance() {\n        if (!(RESTApiStateManager._instance)) {\n            RESTApiStateManager._instance = new RESTApiStateManager();\n        }\n        return RESTApiStateManager._instance;\n    }\n\n    getConfiguredStateNames(): string[] {\n        let results: string[] = [];\n        this.configuration.forEach((config) => {\n            results.push(config.stateName);\n        });\n        return results;\n    }\n\n    hasCompletedRun(stateName: string): boolean {\n        let result = false;\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            result = this.bHasCompletedRun[foundIndex];\n        }\n        return result;\n    }\n\n    setCompletedRun(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = true;\n        }\n    }\n\n    forceResetForGet(stateName: string): void {\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === stateName);\n        if (foundIndex >= 0) {\n            this.bHasCompletedRun[foundIndex] = false;\n        }\n    }\n\n    public initialise(config: ApiConfig[]) {\n        this.configuration = config;\n        let runsComplete: boolean[] = [];\n        this.configuration.forEach((configItem) => {\n            runsComplete.push(false);\n        });\n        this.bHasCompletedRun = runsComplete;\n    }\n\n    _addNewNamedStateToStorage(state: stateValue): void { /* assume model on the other end exists */\n    }\n\n    _getState(name: string): stateValue {\n        apiSMLogger(`Getting All ${name}`);\n        if (this.hasCompletedRun(name)) {\n            apiSMLogger(`Getting All ${name} - not done - previously retrieved`);\n        } else {\n            let config: ApiConfig = this.getConfigurationForStateName(name);\n            if (config.isActive) {\n                const jsonRequest: jsonRequest = {\n                    url: config.serverURL + config.api,\n                    type: RequestType.GET,\n                    params: {},\n                    callback: this.callbackForGetItems,\n                    associatedStateName: name\n                };\n                DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n            } else {\n                apiSMLogger(`No configuration for state ${name}`);\n            }\n        }\n        let state: stateValue = {name: name, value: []};\n        return state;\n    }\n\n    _ensureStatePresent(name: string): void { /* assume state exists */\n    }\n\n    _replaceNamedStateInStorage(state: stateValue): void { /* not going to replace all state */\n    }\n\n    _saveState(name: string, stateObj: any): void { /* not going to replace all state */\n    }\n\n    _addItemToState(name: string, stateObj: any, isPersisted: boolean = false): void {\n        if (isPersisted) return; // dont add complete objects to the state - they are already processed\n        apiSMLogger(`Adding item to ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.POST,\n                params: stateObj,\n                callback: this.callbackForAddItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _removeItemFromState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont remove complete objects to the state - they are already processed\n        apiSMLogger(`Removing item from ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        let identifier = stateObj.id;\n        if (config.idField) {\n            identifier = stateObj[config.idField];\n        }\n\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.DELETE,\n                params: {\n                    id: identifier\n                },\n                callback: this.callbackForRemoveItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    _updateItemInState(name: string, stateObj: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): void {\n        if (isPersisted) return; // dont update complete objects to the state - they are already processed\n        apiSMLogger(`Updating item in ${name}`);\n        apiSMLogger(stateObj);\n        let config: ApiConfig = this.getConfigurationForStateName(name);\n        if (config.isActive) {\n            const jsonRequest: jsonRequest = {\n                url: config.serverURL + config.api,\n                type: RequestType.PUT,\n                params: stateObj,\n                callback: this.callbackForUpdateItem,\n                associatedStateName: name\n            };\n            DownloadManager.getInstance().addApiRequest(jsonRequest, true);\n\n        } else {\n            apiSMLogger(`No configuration for state ${name}`);\n        }\n    }\n\n    addChangeListenerForName(name: string, listener: StateChangeListener): void {\n        this.delegate.addChangeListenerForName(name, listener);\n    }\n\n    addNewItemToState(name: string, item: any, isPersisted: boolean): void {\n        this._addItemToState(name, item, isPersisted);\n    }\n\n    emitEvents(): void {\n        this.delegate.emitEvents();\n    }\n\n    findItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): any {\n        throw Error(\"not implemented\");\n    }\n\n    getStateByName(name: string): any {\n        this._getState(name);\n    }\n\n    informChangeListenersForStateWithName(name: string, stateObjValue: any, eventType: stateEventType, previousObjValue: any): void {\n        this.delegate.informChangeListenersForStateWithName(name, stateObjValue, eventType, previousObjValue);\n    }\n\n    isItemInState(name: string, item: any, testForEqualityFunction: equalityFunction): boolean {\n        return true;\n    }\n\n    removeItemFromState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        apiSMLogger(`Removing item from state ${name} is persisted ${isPersisted}`);\n        apiSMLogger(item);\n        this._removeItemFromState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    setStateByName(name: string, stateObjectForName: any, informListeners: boolean): void {\n    }\n\n    suppressEvents(): void {\n        this.delegate.suppressEvents();\n    }\n\n    updateItemInState(name: string, item: any, testForEqualityFunction: equalityFunction, isPersisted: boolean): boolean {\n        this._updateItemInState(name, item, testForEqualityFunction, isPersisted);\n        return true;\n    }\n\n    protected getConfigurationForStateName(name: string) {\n        let config: ApiConfig = {\n            stateName: name,\n            serverURL: '',\n            api: '',\n            isActive: false\n        }\n        let foundIndex = this.configuration.findIndex((config) => config.stateName === name);\n        if (foundIndex >= 0) {\n            config = this.configuration[foundIndex];\n        }\n        return config;\n    }\n\n    private callbackForRemoveItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for remove item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForUpdateItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for update item for state ${associatedStateName} with status ${status} - not forwarded`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n        }\n    }\n\n    private callbackForGetItems(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for get items for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.setCompletedRun(associatedStateName);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.StateChanged, null);\n        }\n    }\n\n    private callbackForAddItem(data: any, status: number, associatedStateName: string) {\n        apiSMLogger(`callback for add item for state ${associatedStateName} with status ${status} - FORWARDING`);\n        if (status >= 200 && status <= 299) { // do we have any data?\n            apiSMLogger(data);\n            this.delegate.informChangeListenersForStateWithName(associatedStateName, data, stateEventType.ItemAdded, null);\n        }\n    }\n}","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {ValidationRule} from \"../ui-framework/form/validation/ValidationTypeDefs\";\n\nexport enum FieldType {\n    id = 'Id',\n    uuid = 'UUID',\n    text = 'Text',\n    integer = 'Integer',\n    float = 'Number',\n    date = 'Date',\n    time = 'Time',\n    shortTime = 'Short Time',\n    datetime = 'Datetime',\n    email = 'Email',\n    password = 'Password',\n    boolean = 'True/False',\n    userId = 'User',\n    choice = 'Choice',\n    limitedChoice = 'Limited Choice',\n    largeText = 'TextArea',\n    collection = 'Collection',\n    duration = 'Duration'\n}\n\nexport interface FieldValueGenerator {\n    generate(field:FieldDefinition,isCreate:boolean):string;\n}\n\n\n\n\nexport type FieldDefinition = {\n    id:string,\n    isKey:boolean,\n    idType: KeyType,\n    type: FieldType,\n    displayName:string,\n    mandatory:boolean,\n    displayOnly?:boolean,\n    description?:string,\n    collectionOfDataObjectId?:string,\n    generator?:{\n        onCreation:boolean,\n        onModify:boolean,\n        generator:FieldValueGenerator\n    },\n    dataSource?:FieldValueOptions\n}\n\nexport type DataObjectDefinition = {\n    id:string,\n    displayName:string,\n    fields:FieldDefinition[],\n    rules?:ValidationRule\n}\n\n\n\n","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../Controller\";\nimport {FieldFormatter, FieldRenderer, FieldValidator, ValidationResponse} from \"../ui-framework/form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"./DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ui-framework/ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class BasicFieldOperations implements FieldFormatter, FieldRenderer, FieldValidator, FieldValueGenerator {\n    private previousFieldValues: FieldNameValue[];\n\n    private static dateRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}$/;\n    private static emailRegex: RegExp = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+([^<>()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/;\n    private static shortTimeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n    private static timeRegex: RegExp = /^([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static dateTimeRegex: RegExp = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}\\s([01]\\d|2[0-3]):?([0-5]\\d):?([0-5]\\d)$/;\n    private static basicPasswordRegex: RegExp = /^[a-zA-Z0-9]{8,15}$/;\n    private static integerRegex: RegExp = /^[+-]?\\d+$/;\n    private static floatRegexp: RegExp = /^[+-]?\\d+(\\.\\d+)?$/;\n    private static booleanRegexp: RegExp = /^true|false$/;\n    private static durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n\n    public constructor() {\n        this.previousFieldValues = [];\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {}\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        switch (field.type) { // only need to change dates\n            case (FieldType.date): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY').format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.datetime): {\n                //convert to underlying number format\n                result = moment(currentValue, 'DD/MM/YYYY HH:mm:ss').format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.boolean): {\n                result = (currentValue.toLowerCase() === 'true');\n                break;\n            }\n            case (FieldType.id): {\n                if (field.idType === KeyType.number) {\n                    result = parseInt(currentValue);\n                }\n                break;\n            }\n            case (FieldType.float): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n            case (FieldType.integer): {\n                let parsed = parseFloat(currentValue);\n                if (!isNaN(parsed)) {\n                    result = parsed;\n                }\n                break;\n            }\n\n        }\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: true,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            // do we have any content?\n            if ((!currentValue) || (currentValue.trim().length === 0)) {\n                response.isValid = false;\n                response.message = `${field.displayName} is required. Please enter a valid value.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n            // boolean is a special case, and must be true\n            if (field.type === FieldType.boolean) {\n                if (currentValue.trim().toLowerCase() !== 'true') {\n                    response.isValid = false;\n                    response.message = `${field.displayName} is required and must be selected.`;\n                    vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                    return response;\n                }\n            }\n        }\n\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        if (currentValue) {\n            switch (field.type) {\n                case (FieldType.datetime): {\n                    response.isValid = BasicFieldOperations.dateTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY hh:mm`;\n\n                    }\n                    break;\n                }\n                case (FieldType.date): {\n                    response.isValid = BasicFieldOperations.dateRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be DD/MM/YYYY`;\n\n                    }\n                    break;\n                }\n                case (FieldType.float): {\n                    response.isValid = BasicFieldOperations.floatRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 00.00`;\n                    }\n                    break;\n                }\n                case (FieldType.id): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.email): {\n                    response.isValid = BasicFieldOperations.emailRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an email address`;\n                    }\n                    break;\n                }\n                case (FieldType.integer): {\n                    response.isValid = BasicFieldOperations.integerRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be an integer`;\n                    }\n                    break;\n                }\n                case (FieldType.text): {\n                    break;\n                }\n                case (FieldType.password): {\n                    response.isValid = BasicFieldOperations.basicPasswordRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 8 to 15 letters and digits only`;\n                    }\n                    break;\n                }\n                case (FieldType.time): {\n                    response.isValid = BasicFieldOperations.timeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.shortTime): {\n                    response.isValid = BasicFieldOperations.shortTimeRegex.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be 24 hour time format HH:MM`;\n                    }\n                    break;\n                }\n                case (FieldType.duration): {\n                    response.isValid = BasicFieldOperations.durationRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be in the format MM:SS or 999:MM:SS`;\n                    }\n                    break;\n                }\n                case (FieldType.boolean): {\n                    response.isValid = BasicFieldOperations.booleanRegexp.test(currentValue);\n                    if (!response.isValid) {\n                        response.message = `${field.displayName} must be true or false`;\n                    }\n                    break;\n                }\n            }\n        }\n\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    private setPreviousValue(field: FieldDefinition, newValue: string) {\n        rlogger(`Storing previous value for field ${field.displayName} with  new value ${newValue}`);\n        let fieldValue: FieldNameValue;\n\n        let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        if (index >= 0) {\n            //we have a previous value\n            fieldValue = this.previousFieldValues[index];\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - old value was ${fieldValue}`);\n            fieldValue.value = newValue;\n        } else {\n            // create a new record of the value\n            fieldValue = {\n                id: field.id,\n                value: newValue\n            }\n            rlogger(`Storing previous value for field ${field.displayName} with new value ${newValue} - NO previous`);\n            this.previousFieldValues.push(fieldValue);\n        }\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        // ensure we don't end up in an endless loop\n        // if the value hasn't changed return null\n        // let index = this.previousFieldValues.findIndex((fieldValue) => fieldValue.id === field.id);\n        // if (index >= 0) {\n        //     //we have a previous value\n        //     let fieldValue: FieldNameValue = this.previousFieldValues[index];\n        //     rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - previous value ${fieldValue.value}`);\n        //     if (fieldValue.value === currentValue) return null;\n        // }\n        // either not yet seen or value has changed from previous\n        if (currentValue) { // only attempt to render non-empty dates\n            let newValue: string = currentValue;\n\n            switch (field.type) {\n                case (FieldType.date): {\n                    newValue = moment(currentValue, 'YYYYMMDD').format('DD/MM/YYYY');\n                    break;\n                }\n                case (FieldType.datetime): {\n                    newValue = moment(currentValue, 'YYYYMMDDHHmmss').format('DD/MM/YYYY HH:mm:ss');\n                    break;\n                }\n            }\n\n            // store the previous value\n            this.setPreviousValue(field, newValue);\n            rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue} - rendered to ${newValue}`);\n            return newValue;\n        } else {\n            // empty value, no rendering required\n            rlogger(`Rendering value for field ${field.displayName} with new value is empty - no rendering required`);\n\n            return null;\n        }\n    }\n\n    private generateValue(field: FieldDefinition): string {\n        let result = '';\n        switch (field.type) {\n            case (FieldType.datetime): {\n                result = moment().format('YYYYMMDDHHmmss');\n                break;\n            }\n            case (FieldType.date): {\n                result = moment().format('YYYYMMDD');\n                break;\n            }\n            case (FieldType.float): {\n                result = '0.0';\n                break;\n            }\n            case (FieldType.id): {\n                result = '-1';\n                break;\n            }\n            case (FieldType.email): {\n                result = 'me@me.com';\n                break;\n            }\n            case (FieldType.integer): {\n                result = '0';\n                break;\n            }\n            case (FieldType.text): {\n                result = '';\n                break;\n            }\n            case (FieldType.password): {\n                result = '';\n                break;\n            }\n            case (FieldType.time): {\n                result = '00:00:00';\n                break;\n            }\n            case (FieldType.shortTime): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.duration): {\n                result = '00:00';\n                break;\n            }\n            case (FieldType.boolean): {\n                result = 'false';\n                break;\n            }\n            case (FieldType.uuid): {\n                result = v4();\n                break;\n            }\n            case (FieldType.userId): {\n                result = `${Controller.getInstance().getLoggedInUsername()}`;\n                break;\n            }\n        }\n        return result;\n    }\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        let result = '';\n        // are we generating the field?\n        if (field.generator) {\n            // are we only generating on create\n            if (field.generator.onCreation && isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on creation ${result}`);\n            }\n            // or if we are modifying and should also be modifying the value\n            if (field.generator.onModify && !isCreate) {\n                result = this.generateValue(field);\n                glogger(`Generating value for field ${field.displayName} with on modify ${result}`);\n            }\n        }\n        return result;\n    }\n\n}","import {KeyType} from \"../ui-framework/ConfigurationTypes\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"./CommonTypes\";\nimport {DisplayOrder} from \"../ui-framework/form/FormUITypeDefs\";\n\nexport const FIELD_ID:string = 'id';\nexport const FIELD_CreatedBy:string = 'createdBy';\nexport const FIELD_ModifiedBy:string = 'modifiedBy';\nexport const FIELD_CreatedOn:string = 'createdOn';\nexport const FIELD_ModifiedOn:string = 'modifiedOn';\n\nexport const FIELD_CreatedBy_Desc:string = 'Created By';\nexport const FIELD_ModifiedBy_Desc:string = 'Last Modified By';\nexport const FIELD_CreatedOn_Desc:string = 'Created On';\nexport const FIELD_ModifiedOn_Desc:string = 'Last Modified On';\n\nexport class BasicObjectDefinitionFactory {\n\n    private static _instance: BasicObjectDefinitionFactory;\n\n    public static getInstance(): BasicObjectDefinitionFactory {\n        if (!(BasicObjectDefinitionFactory._instance)) {\n            BasicObjectDefinitionFactory._instance = new BasicObjectDefinitionFactory();\n        }\n        return BasicObjectDefinitionFactory._instance;\n    }\n\n    private constructor() {}\n\n    public generateStartingDisplayOrder(dataObjDef: DataObjectDefinition):DisplayOrder[] {\n        let result:DisplayOrder[] = [];\n\n        dataObjDef.fields.forEach((fieldDef,index) => {\n            let order: DisplayOrder = {\n                fieldId: fieldDef.id,\n                displayOrder: index\n            }\n            // is this the created or modified date\n            if (fieldDef.id === FIELD_CreatedOn) {\n                order.displayOrder += 100;\n            }\n            if (fieldDef.id === FIELD_ModifiedOn) {\n                order.displayOrder += 101;\n            }\n            if (fieldDef.type === FieldType.userId) {\n                order.displayOrder += 100;\n            }\n            result.push(order);\n        });\n        return result;\n    }\n\n    public createBasicObjectDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        let objDef:DataObjectDefinition = {\n            id:id,\n            displayName:displayName,\n            fields:[]\n        }\n        let ops = new BasicFieldOperations();\n\n        // do we need an id field?\n        if (hasDataId) {\n            let fieldType = FieldType.id;\n            if (dataIdIsUUID) {\n                fieldType = FieldType.uuid;\n            }\n            let fieldDef:FieldDefinition = {\n                id:idFieldName,\n                isKey:true,\n                idType: KeyType.number,\n                type: fieldType,\n                displayName:'Id',\n                mandatory:true,\n                generator: {\n                    generator:ops,\n                    onModify:false,\n                    onCreation:true\n                }\n            }\n            objDef.fields.push(fieldDef);\n        }\n\n        // add fields for created and modified\n        if (createModifierFields) {\n            this.addCreatedDateToArray(objDef.fields);\n            this.addCreatedByToArray(objDef.fields);\n            this.addModifiedByToArray(objDef.fields);\n            this.addModifiedDateToArray(objDef.fields);\n        }\n\n        return objDef;\n    }\n\n    private addCreatedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_CreatedOn,FIELD_CreatedOn_Desc,FieldType.datetime,true,FIELD_CreatedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedDateToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedOn,FIELD_ModifiedOn_Desc,FieldType.datetime,true,FIELD_ModifiedOn_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addCreatedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addNumericFieldToArray(fields,FIELD_CreatedBy,FIELD_CreatedBy_Desc,FieldType.userId,true,FIELD_CreatedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:false\n        }\n        fieldDef.displayOnly = true;\n    }\n    private addModifiedByToArray(fields:FieldDefinition[]) {\n        let fieldDef = this.addStringFieldToArray(fields,FIELD_ModifiedBy,FIELD_ModifiedBy_Desc,FieldType.userId,true,FIELD_ModifiedBy_Desc);\n        // add generator\n        fieldDef.generator = {\n            generator: new BasicFieldOperations(),\n            onCreation:true,\n            onModify:true\n        }\n        fieldDef.displayOnly = true;\n    }\n\n    private addFieldToArray(fields:FieldDefinition[],keyType:KeyType, id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        let fieldDef:FieldDefinition = {\n            id:id,\n            isKey:false,\n            idType: keyType,\n            type: type,\n            displayName:displayName,\n            mandatory:isMandatory,\n            displayOnly:false,\n        }\n\n        if (isMandatory) {\n            // add generator\n            fieldDef.generator = {\n                generator: new BasicFieldOperations(),\n                onCreation:true,\n                onModify:false\n            }\n        }\n\n\n        if (description) fieldDef.description = description;\n        if (datasource) fieldDef.dataSource = datasource;\n\n        fields.push(fieldDef);\n        return fieldDef;\n    }\n\n    private addStringFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    private addNumericFieldToArray(fields:FieldDefinition[],id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addFieldToArray(fields,KeyType.string, id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addStringFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addStringFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n    public addNumericFieldToObjDefinition(objDef:DataObjectDefinition,id:string, displayName:string, type:FieldType, isMandatory:boolean = false,description:string|null = null,datasource:FieldValueOptions|null = null):FieldDefinition {\n        return this.addNumericFieldToArray(objDef.fields,id,displayName,type,isMandatory,description,datasource);\n    }\n\n}","import {DataObjectDefinition, FieldType} from \"./DataObjectTypeDefs\";\nimport {BasicObjectDefinitionFactory, FIELD_ID} from \"./BasicObjectDefinitionFactory\";\nimport debug from \"debug\";\nimport {BasicFieldOperations} from \"./BasicFieldOperations\";\nimport moment from \"moment\";\n\nconst logger = debug('object-definition-registry');\n\nexport class ObjectDefinitionRegistry {\n    private static _instance: ObjectDefinitionRegistry;\n\n    public static getInstance(): ObjectDefinitionRegistry {\n        if (!(ObjectDefinitionRegistry._instance)) {\n            ObjectDefinitionRegistry._instance = new ObjectDefinitionRegistry();\n        }\n        return ObjectDefinitionRegistry._instance;\n    }\n\n    protected definitions:DataObjectDefinition[];\n\n    private constructor() {\n        this.definitions = [];\n    }\n\n    public findDefinition(id:string):DataObjectDefinition|null {\n        let result:DataObjectDefinition|null = null;\n        const index = this.definitions.findIndex((definition) => definition.id === id);\n        if (index >= 0) {\n            result = this.definitions[index];\n        }\n        return result;\n    }\n\n    public addDefinition(id:string, displayName:string, hasDataId:boolean, dataIdIsUUID:boolean,createModifierFields:boolean = true,idFieldName:string = FIELD_ID):DataObjectDefinition {\n        logger(`Adding definition for ${id} with name ${displayName}`);\n        let result:DataObjectDefinition|null = this.findDefinition(id);\n        if (result) {\n            return result;\n        }\n        else {\n            let definition = BasicObjectDefinitionFactory.getInstance().createBasicObjectDefinition(id,displayName,hasDataId,dataIdIsUUID,createModifierFields,idFieldName);\n            this.definitions.push(definition);\n            return definition;\n        }\n    }\n\n    public createInstanceFromDef(definition:DataObjectDefinition):any {\n        logger(`Creating instance for definition ${definition.displayName}`);\n        let result: any = {};\n        const fieldOps = new BasicFieldOperations();\n\n        definition.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n\n                switch(fieldDef.type) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        break;\n                    }\n                    default: {\n                        fieldValue = fieldOps.formatValue(fieldDef,fieldValue);\n                        break;\n                    }\n                }\n                                \n                logger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                result[fieldDef.id] = fieldValue;\n            }\n            if (fieldDef.type === FieldType.collection) {\n                result[fieldDef.id] = [];\n            }\n        });\n        return result;\n    }\n\n\n    public createInstance(id:string):any {\n        logger(`Creating instance for definition ${id}`);\n        let result:any = {};\n\n        const definition:DataObjectDefinition|null  = this.findDefinition(id);\n\n        if (definition) {\n            result = this.createInstanceFromDef(definition);\n        }\n        return result;\n    }\n}","import {FieldValueOptions, FieldValueOptionsListener, ValueOption} from \"../../model/CommonTypes\";\n\nexport class SimpleValueDataSource implements FieldValueOptions { // static value list\n    private options:ValueOption[];\n    private listeners:FieldValueOptionsListener[];\n\n    constructor(options:ValueOption[]) {\n        this.options = options;\n        this.listeners = [];\n    }\n\n    public addValueOption(name:string,value:string) {\n        this.options.push({name,value});\n        this.listeners.forEach((listener) => listener.optionsChanged(this.options));\n    }\n\n    addListener(listener: FieldValueOptionsListener): void {\n        this.listeners.push(listener);\n    }\n\n    getOptions(): ValueOption[] {\n        return this.options;\n    }\n\n}","import debug from 'debug';\nimport MemoryBufferStateManager from \"./state/MemoryBufferStateManager\";\nimport StateChangeListener from \"./state/StateChangeListener\";\nimport {StateManager} from \"./state/StateManager\";\nimport SocketManager from \"./socket/SocketManager\";\nimport AsyncStateManagerWrapper from \"./state/AsyncStateManagerWrapper\";\nimport {AggregateStateManager} from \"./state/AggregateStateManager\";\nimport SocketListenerDelegate from \"./SocketListenerDelegate\";\nimport {ChatManager} from \"./socket/ChatManager\";\nimport {NotificationController} from \"./socket/NotificationController\";\nimport {API_Config, STATE_NAMES} from \"./AppTypes\";\nimport {RESTApiStateManager} from \"./state/RESTApiStateManager\";\nimport {DataObjectDefinition, FieldDefinition, FieldType} from \"./model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"./model/ObjectDefinitionRegistry\";\nimport {BasicObjectDefinitionFactory} from \"./model/BasicObjectDefinitionFactory\";\nimport {SimpleValueDataSource} from \"./ui-framework/helper/SimpleValueDataSource\";\nimport {KeyType} from \"./ui-framework/ConfigurationTypes\";\nimport {DataObjectListener} from \"./model/DataObjectListener\";\nimport {DataObjectController} from \"./model/DataObjectController\";\nimport {isSameMongo} from \"./util/EqualityFunctions\";\nimport {v4} from \"uuid\";\n\nconst cLogger = debug('controller-ts');\nconst cLoggerDetail = debug('controller-ts-detail');\n\nexport default class Controller implements StateChangeListener,DataObjectListener {\n    private static _instance: Controller;\n\n    public static getInstance(): Controller {\n        if (!(Controller._instance)) {\n            Controller._instance = new Controller();\n        }\n        return Controller._instance;\n    }\n\n    protected applicationView: any;\n    protected clientSideStorage: any;\n    protected config: any;\n    // @ts-ignore\n    protected stateManager: StateManager;\n\n\n    private constructor() {}\n\n    connectToApplication(applicationView: any, clientSideStorage: any) {\n        this.applicationView = applicationView;\n        this.clientSideStorage = clientSideStorage;\n        // setup the API calls\n        let restSM = RESTApiStateManager.getInstance();\n        restSM.initialise([\n            {\n                stateName:STATE_NAMES.users,\n                serverURL:'',\n                api:API_Config.users,\n                isActive:true\n            },\n            {\n                stateName:STATE_NAMES.exerciseTypes,\n                serverURL:'',\n                api:API_Config.exerciseTypes,\n                isActive:true,\n                idField: '_id'\n            },\n            {\n                stateName:STATE_NAMES.workouts,\n                serverURL:'',\n                api:API_Config.workouts,\n                isActive:true,\n                idField: '_id'\n            }\n        ]);\n\n\n        let aggregateSM = AggregateStateManager.getInstance();\n        let memorySM = MemoryBufferStateManager.getInstance();\n\n        let asyncSM = new AsyncStateManagerWrapper(aggregateSM, restSM);\n\n\n        aggregateSM.addStateManager(memorySM, [], false);\n        aggregateSM.addStateManager(asyncSM, [], false);\n\n        this.stateManager = aggregateSM;\n\n        // state listener\n        this.stateChanged = this.stateChanged.bind(this);\n        this.stateChangedItemAdded = this.stateChangedItemAdded.bind(this);\n        this.stateChangedItemRemoved = this.stateChangedItemRemoved.bind(this);\n        this.stateChangedItemUpdated = this.stateChangedItemUpdated.bind(this);\n\n        // data objects\n        this.setupDataObjectDefinitions();\n\n        return this;\n    }\n\n    private setupDataObjectDefinitions() {\n        // create the object definitions for the exercise type and workout\n        let exerciseTypeDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.exerciseTypes,'Exercise', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"name\", \"Name\", FieldType.text, true, \"Exercise name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"type\", \"Type\", FieldType.limitedChoice, true, \"Choose cardio or strength\",\n            new SimpleValueDataSource([\n                {name: 'Cardio', value: 'cardio'},\n                {name: 'Strength', value: 'strength'}\n            ]));\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"duration\", \"Duration\", FieldType.duration, true, \"Exercise time\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"sets\", \"Sets\", FieldType.integer, false, \"Number of sets\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"reps\", \"Repetitions\", FieldType.integer, false, \"Number of reps\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"weight\", \"Weight\", FieldType.float, false, \"Weight used\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(exerciseTypeDefinition, \"distance\", \"Distance\", FieldType.float, false, \"Distance travelled\");\n\n        cLogger(`Exercise type data object definition`);\n        cLogger(exerciseTypeDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('exerciseType'));\n\n        let workoutDefinition:DataObjectDefinition = ObjectDefinitionRegistry.getInstance().addDefinition(STATE_NAMES.workouts,'Workout', true, true, true, '_id');\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"name\", \"Name\", FieldType.text, false, \"Give the workout a name\");\n        BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"completed\", \"Completed\", FieldType.boolean, true, \"Have completed the workout\");\n        let exercisesFieldDefinition:FieldDefinition = BasicObjectDefinitionFactory.getInstance().addStringFieldToObjDefinition(workoutDefinition, \"exercises\", \"Exercises\", FieldType.collection, true, \"Exercises in this workout\");\n        exercisesFieldDefinition.idType = KeyType.collection;\n        exercisesFieldDefinition.collectionOfDataObjectId = exerciseTypeDefinition.id;\n\n        cLogger(`Workout data object definition`);\n        cLogger(workoutDefinition);\n        cLoggerDetail(ObjectDefinitionRegistry.getInstance().findDefinition('workout'));\n\n\n    }\n\n    /*\n        Get the base data for the application (users, entries)\n    */\n    public onDocumentLoaded(): void {\n        cLogger('Initialising data state');\n        // listen for socket events\n        let socketListerDelegate = new SocketListenerDelegate();\n        SocketManager.getInstance().setListener(socketListerDelegate);\n\n        // now that we have all the user we can setup the chat system but only if we are logged in\n        cLogger(`Setting up chat system for user ${this.getLoggedInUserId()}: ${this.getLoggedInUsername()}`);\n        if (this.getLoggedInUserId().trim().length > 0) {\n            // setup the chat system\n            let chatManager = ChatManager.getInstance(); // this connects the manager to the socket system\n\n            // setup the chat notification system\n            NotificationController.getInstance();\n            chatManager.setCurrentUser(this.getLoggedInUsername());\n\n            // let the application view know about message counts\n            chatManager.setUnreadCountListener(this.applicationView);\n\n            chatManager.login();\n            // load the users\n            this.getStateManager().getStateByName(STATE_NAMES.users);\n            this.getStateManager().getStateByName(STATE_NAMES.exerciseTypes);\n            this.getStateManager().getStateByName(STATE_NAMES.workouts);\n        }\n\n    }\n\n    public getStateManager(): StateManager {\n        return this.stateManager;\n    }\n\n    public getListenerName(): string {\n        return 'Controller';\n    }\n\n    public isLoggedIn(): boolean {\n        let isLoggedIn = false;\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                isLoggedIn = true;\n            }\n        } catch (error) {\n        }\n        return isLoggedIn;\n    }\n\n    public getLoggedInUserId(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser._id;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user id is ${result}`);\n        return result;\n    }\n\n    public getLoggedInUsername(): string {\n        let result = '';\n        try {\n            // @ts-ignore\n            if (loggedInUser) {\n                // @ts-ignore\n                result = loggedInUser.username;\n            }\n        } catch (error) {\n        }\n        cLoggerDetail(`Logged in user is ${result}`);\n        return result;\n    }\n\n    public handleMessage(message: string): void {\n        cLogger(message);\n    }\n\n    public getCurrentUser(): string {\n        return this.getLoggedInUserId();\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {}\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n    stateChanged(managerName: string, name: string, values: any) {}\n\n\n    /*\n    *\n    * Simple Application state (URL, logged in user)\n    *\n     */\n    private getServerAPIURL(): string {\n        let result = \"\";\n        // @ts-ignore\n        if ((window.ENV) && (window.ENV.serverURL)) {\n            // @ts-ignore\n            result = window.ENV.serverURL;\n        }\n        return result;\n    }\n\n\n    handleShowChat(roomName:string|null) {\n        this.applicationView.handleShowChat(roomName);\n    }\n\n    create(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling create new exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.addNewItemToState(typeName,dataObj,false);\n                break;\n            }\n        }\n    }\n\n    delete(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling delete exercise type - already managed by stateful collection view`);\n                cLoggerDetail(dataObj);\n                break;\n            }\n        }\n    }\n\n    update(controller: DataObjectController, typeName: string, dataObj: any): void {\n        switch(typeName) {\n            case STATE_NAMES.exerciseTypes: {\n                cLogger(`Handling update exercise type`);\n                cLoggerDetail(dataObj);\n                this.stateManager.updateItemInState(typeName,dataObj,isSameMongo,false);\n                break;\n            }\n        }\n    }\n\n\n    addExerciseToCurrentWorkout(exerciseType:any):void {\n        let copyOfExercise = {...exerciseType};\n        copyOfExercise._id = v4(); // update the id to be unique for the workout\n        this.applicationView.addingExerciseToCurrentWorkout(copyOfExercise);\n    }\n\n    addWorkoutExercisesToCurrentWorkout(workout:any):void {\n        if (workout.exercises) {\n            workout.exercises.forEach((exercise:any) => {\n                this.addExerciseToCurrentWorkout(exercise);\n            });\n        }\n    }\n\n}\n\n\n","import {ViewListener} from \"../interface/ViewListener\";\nimport {View} from \"../interface/View\";\n\nexport class ViewListenerForwarder {\n    protected viewListeners: ViewListener[];\n    protected suppressEventEmits: boolean = false;\n\n    public constructor() {\n        this.viewListeners = [];\n    }\n\n    public addListener(listener: ViewListener) {\n        this.viewListeners.push(listener);\n    }\n\n    public suppressEvents() {\n        this.suppressEventEmits = true;\n    }\n\n    public emitEvents() {\n        this.suppressEventEmits = false;\n    }\n    itemDeleted(view: View, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDeleted(view, selectedItem));\n        }\n    }\n    documentLoaded(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.documentLoaded(view));\n        }\n    }\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemAction(view, actionName, selectedItem));\n        }\n    }\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => {\n                if (!(listener.canDeleteItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n\n    hideRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.hideRequested(view));\n        }\n    }\n\n    showRequested(view: View): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.showRequested(view));\n        }\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.viewListeners.forEach((listener) => listener.itemDropped(view, droppedItem));\n        }\n    }\n}\n","import {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    ViewDOMConfig\n} from \"../../ConfigurationTypes\";\nimport {View} from \"../interface/View\";\nimport debug from \"debug\";\nimport {ViewListenerForwarder} from \"../delegate/ViewListenerForwarder\";\nimport {ViewListener} from \"../interface/ViewListener\";\n\nconst avLogger = debug('abstract-view-ts');\nconst avLoggerDetails = debug('abstract-view-ts-detail');\n\n\nexport abstract class AbstractView implements View {\n\n    public static DATA_SOURCE = 'data-source';\n\n\n    protected uiConfig: ViewDOMConfig;\n\n    protected eventForwarder: ViewListenerForwarder;\n    protected containerEl: HTMLElement | null = null;\n    protected viewEl:HTMLElement|null;\n\n\n    protected constructor(uiConfig: ViewDOMConfig) {\n        this.uiConfig = uiConfig;\n        this.viewEl = null;\n        this.eventForwarder = new ViewListenerForwarder();\n\n        this.handleDrop = this.handleDrop.bind(this);\n\n    }\n\n    getItemId(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n    getItemDescription(from: string, item: any): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        return this.uiConfig;\n    }\n\n\n    addEventListener(listener: ViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    onDocumentLoaded(): void {\n        this.viewEl = document.getElementById(this.uiConfig.resultsContainerId);\n        this.eventForwarder.documentLoaded(this);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        this.containerEl = container;\n    }\n\n\n    getName(): string {\n        return this.uiConfig.dataSourceId;\n    }\n\n\n    hasChanged(): boolean {\n        return false;\n    }\n\n    getDataSourceKeyId(): string {\n        return AbstractView.DATA_SOURCE;\n    }\n\n    abstract hidden(): void\n    abstract show(): void;\n    abstract render(): void;\n\n    public handleDrop(event: Event): void {\n        avLogger(`view ${this.getName()}: drop event`);\n        avLoggerDetails(event.target);\n        // @ts-ignore\n        const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n        const draggedObject = JSON.parse(draggedObjectJSON);\n        avLoggerDetails(draggedObject);\n\n        // check to see if we accept the dropped type and source\n        const droppedObjectType = draggedObject[DRAGGABLE_TYPE];\n        const droppedObjectFrom = draggedObject[DRAGGABLE_FROM];\n        avLogger(`view ${this.getName()}: drop event from ${droppedObjectFrom} with type ${droppedObjectType}`);\n        if (this.uiConfig.drop) {\n            const acceptType = (this.uiConfig.drop.acceptTypes.findIndex((objectType) => objectType === droppedObjectType) >= 0);\n            let acceptFrom = true;\n            if (acceptType) {\n                if (this.uiConfig.drop.acceptFrom) {\n                    acceptFrom = (this.uiConfig.drop.acceptFrom.findIndex((from) => from === droppedObjectFrom) >= 0);\n                }\n                avLoggerDetails(`view ${this.getName()}: accepted type? ${acceptType} and from? ${acceptFrom}`);\n                if (acceptType && acceptFrom) {\n                    this.eventForwarder.itemDropped(this, draggedObject);\n                }\n            }\n        }\n    }\n}\n","import {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {ViewListenerForwarder} from \"./ViewListenerForwarder\";\n\nexport class CollectionViewListenerForwarder extends ViewListenerForwarder implements CollectionViewListener {\n    protected collectionViewListeners: CollectionViewListener[];\n\n\n    public constructor() {\n        super();\n        this.collectionViewListeners = [];\n    }\n\n    public addListener(listener: CollectionViewListener) {\n        super.addListener(listener);\n        this.collectionViewListeners.push(listener);\n    }\n\n\n\n\n    itemDragStarted(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDragStarted(view, selectedItem));\n        }\n    }\n\n    itemSelected(view: CollectionView, selectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemSelected(view, selectedItem));\n        }\n    }\n\n    itemDeselected(view: CollectionView, deselectedItem: any): void {\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => listener.itemDeselected(view, deselectedItem));\n        }\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        let result = true; // return false if cancelling delete\n        if (!this.suppressEventEmits) {\n            this.collectionViewListeners.forEach((listener) => {\n                if (!(listener.canSelectItem(view, selectedItem))) {\n                    result = false;\n                }\n            });\n        }\n        return result;\n    }\n}","export enum AlertType {\n    cancelled,\n    confirmed\n}\n\nexport type AlertEvent = {\n    outcome: AlertType,\n    context?: any\n}\n\nexport interface AlertListener {\n    completed(event:AlertEvent):void;\n}","import {AlertListener, AlertType} from \"./AlertListener\";\nimport debug from 'debug';\n\nconst ALERT_MODAL_ID = 'alert';\nconst ALERT_TITLE = 'alert-title';\nconst ALERT_CONTENT = 'alert-content';\nconst ALERT_CANCEL = 'alert-cancel';\nconst ALERT_CONFRIM = 'alert-confirm';\n\nconst ALERT_hideClass = \"d-none\";\nconst ALERT_showClass = \"d-block\";\n\nconst logger = debug('alert');\n\nexport class AlertManager {\n    private static _instance: AlertManager;\n\n    public static getInstance(): AlertManager {\n        if (!(AlertManager._instance)) {\n            AlertManager._instance = new AlertManager();\n        }\n        return AlertManager._instance;\n    }\n\n    private alertDiv:HTMLDivElement;\n    private alertTitle:HTMLHeadingElement;\n    private alertContent:HTMLParagraphElement;\n    private cancelButton:HTMLButtonElement;\n    private confirmButton:HTMLButtonElement;\n\n    private constructor() {\n        this.alertDiv = <HTMLDivElement>document.getElementById(ALERT_MODAL_ID);\n        this.alertTitle = <HTMLHeadingElement>document.getElementById(ALERT_TITLE);\n        this.alertContent = <HTMLParagraphElement>document.getElementById(ALERT_CONTENT);\n        this.cancelButton = <HTMLButtonElement>document.getElementById(ALERT_CANCEL);\n        this.confirmButton = <HTMLButtonElement>document.getElementById(ALERT_CONFRIM);\n    }\n\n    public startAlert(listener:AlertListener, title:string, content:string, context?:any) {\n        this.alertTitle.innerHTML = title;\n        this.alertContent.innerHTML = content;\n        // @ts-ignore\n        this.alertDiv.classList.remove(ALERT_hideClass);\n        // @ts-ignore\n        this.alertDiv.classList.add(ALERT_showClass);\n\n        const confirmHandler = (event:MouseEvent) => {\n            logger(`Handling confirm event from alert`);\n            listener.completed({outcome: AlertType.confirmed, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',confirmHandler);\n        }\n\n        const cancelHandler = (event:MouseEvent) => {\n            logger(`Handling cancel event from alert`);\n            listener.completed({outcome: AlertType.cancelled, context: context});\n            // @ts-ignore\n            this.alertDiv.classList.add(ALERT_hideClass);\n            // @ts-ignore\n            this.alertDiv.classList.remove(ALERT_showClass);\n            // @ts-ignore\n            event.target.removeEventListener('click',cancelHandler);\n        }\n\n        this.confirmButton.addEventListener('click',confirmHandler);\n        this.cancelButton.addEventListener('click',cancelHandler);\n    }\n\n}","import {AbstractView} from \"../implementation/AbstractView\";\nimport {\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType\n} from \"../../ConfigurationTypes\";\nimport {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport debug from \"debug\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\n\nconst logger = debug('collection-view-event-handler-delegate');\n\nexport type ItemContext = {\n    itemId:string,\n    dataSource:string;\n}\n\n\nexport class CollectionViewEventHandlerDelegate implements CollectionViewEventDelegate{\n    protected view:CollectionView;\n    protected selectedItem:any|null = null;\n    protected eventForwarder:CollectionViewListenerForwarder;\n\n    constructor (view:CollectionView,forwarder:CollectionViewListenerForwarder) {\n        this.view = view;\n        this.eventForwarder = forwarder;\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    protected getItemContext(event:Event):ItemContext {\n        // @ts-ignore\n        const itemId = event.target.getAttribute(this.view.getCollectionUIConfig().keyId);\n        // @ts-ignore\n        const dataSource = event.target.getAttribute(AbstractView.DATA_SOURCE);\n\n        let context:ItemContext = {\n            itemId:itemId,\n            dataSource:dataSource\n        }\n\n        return context;\n    }\n\n\n    getDragData(event: DragEvent): any {\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} getting drag data from ${dataSource}`);\n\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n\n        let selectedItem = {};\n\n        selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n\n        if (selectedItem) {\n            // @ts-ignore\n            selectedItem[DRAGGABLE_TYPE] = this.view.getCollectionUIConfig().detail.drag?.type;\n            // @ts-ignore\n            selectedItem[DRAGGABLE_FROM] = this.view.getCollectionUIConfig().detail.drag?.from;\n        }\n        return selectedItem;\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        logger(`view ${this.view.getName()}: drag start`);\n        logger(event.target);\n        const data = JSON.stringify(this.getDragData(event));\n        logger(data);\n        // @ts-ignore\n        event.dataTransfer.setData(DRAGGABLE_KEY_ID, data);\n        (<CollectionViewListenerForwarder>(this.eventForwarder)).itemDragStarted(this.view, data);\n    }\n\n    eventClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} clicked from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        logger(selectedItem);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting selected from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                (<CollectionViewListenerForwarder>(this.eventForwarder)).itemSelected(this.view, selectedItem);\n            }\n        }\n    }\n\n    eventDeleteClickItem(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldDelete = this.eventForwarder.canDeleteItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource} - ${shouldDelete}`);\n            if (shouldDelete) {\n                // do we need to confirm?\n                if (this.view.getCollectionUIConfig().detail.quickDelete) {\n                    this.selectedItem = null;\n                    this.eventForwarder.itemDeleted(this.view, selectedItem);\n                } else {\n                    AlertManager.getInstance().startAlert(this, this.view.getName(), `Are you sure you want to delete this information?`, selectedItem);\n                }\n\n            }\n        }\n    }\n\n\n    eventActionClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopPropagation();\n        const context = this.getItemContext(event);\n        let itemId = context.itemId;\n        const dataSource = context.dataSource;\n        // @ts-ignore\n        const actionName = event.target.getAttribute(EXTRA_ACTION_ATTRIBUTE_NAME);\n\n\n        if (this.view.getCollectionUIConfig().keyType === KeyType.number) { // @ts-ignore\n            itemId = parseInt(itemId);\n        }\n        logger(`view ${this.view.getName()}: Item with id ${itemId} attempting delete from ${dataSource}`);\n        let compareWith = {};\n        // @ts-ignore\n        compareWith[this.view.getCollectionUIConfig().keyId] = itemId;\n        logger(compareWith);\n\n        let selectedItem = this.view.getItemInNamedCollection(this.view.getCollectionName(), compareWith);\n        if (selectedItem) {\n            const shouldSelect = (<CollectionViewListenerForwarder>(this.eventForwarder)).canSelectItem(this.view, selectedItem);\n            logger(`view ${this.view.getName()}: Item with id ${itemId} attempting action ${actionName} from ${dataSource} - ${shouldSelect}`);\n            if (shouldSelect) {\n                this.selectedItem = selectedItem;\n                logger(selectedItem);\n                this.eventForwarder.itemAction(this.view, actionName, selectedItem);\n            }\n        }\n    }\n\n    completed(event: AlertEvent): void {\n        logger(event.context);\n        if (event.outcome === AlertType.confirmed) {\n            this.selectedItem = null;\n            this.eventForwarder.itemDeleted(this.view, event.context);\n        }\n    }\n    \n}","import {CollectionView} from \"../interface/CollectionView\";\nimport {AbstractView} from \"./AbstractView\";\nimport {\n    CollectionViewDOMConfig,\n    DRAGGABLE_FROM,\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier\n} from \"../../ConfigurationTypes\";\nimport {isSame} from \"../../../util/EqualityFunctions\";\nimport debug from \"debug\";\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionViewListenerForwarder} from \"../delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../alert/AlertManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../alert/AlertListener\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {CollectionViewEventHandlerDelegate} from \"../delegate/CollectionViewEventHandlerDelegate\";\nimport {CollectionViewEventDelegate} from \"../interface/CollectionViewEventDelegate\";\n\nconst avLogger = debug('collection-view-ts');\nconst avLoggerDetails = debug('collection-view-ts-detail');\n\n\nexport abstract class AbstractCollectionView extends AbstractView implements CollectionView,CollectionViewEventHandler{\n    protected collectionName: string;\n    protected renderer: CollectionViewRenderer | null;\n    protected selectedItem: any | null;\n    protected collectionUIConfig: CollectionViewDOMConfig;\n    protected eventHandlerDelegate: CollectionViewEventDelegate\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, collectionName: string) {\n        super(uiConfig.viewConfig);\n        this.collectionUIConfig = uiConfig;\n        this.collectionName = collectionName;\n        this.renderer = null;\n        let forwarder = new CollectionViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegate(this,forwarder);\n\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n\n        // event handlers\n        this.eventStartDrag = this.eventStartDrag.bind(this);\n        this.eventActionClicked = this.eventActionClicked.bind(this);\n        this.eventClickItem = this.eventClickItem.bind(this);\n        this.eventDeleteClickItem = this.eventDeleteClickItem.bind(this);\n\n\n    }\n\n    eventStartDrag(event: DragEvent): void {\n        this.eventHandlerDelegate.eventStartDrag(event);\n    }\n    eventClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventClickItem(event);\n    }\n    eventDeleteClickItem(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventDeleteClickItem(event);\n    }\n    eventActionClicked(event: MouseEvent): void {\n        this.eventHandlerDelegate.eventActionClicked(event);\n    }\n\n    public getCollectionName(): string {\n        return this.collectionName;\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from,item);\n    }\n\n    abstract getItemDescription(from: string, item: any): string;\n\n\n    getCollectionUIConfig(): CollectionViewDOMConfig {\n        return this.collectionUIConfig;\n    }\n\n    addEventCollectionListener(listener: CollectionViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n\n    setContainedBy(container: HTMLElement): void {\n        super.setContainedBy(container);\n        if (this.uiConfig.drop) {\n            avLoggerDetails(`view ${this.getName()}: Adding dragover events to ${this.uiConfig.dataSourceId}`)\n            avLoggerDetails(container);\n            container.addEventListener('dragover', (event) => {\n                event.preventDefault();\n            });\n            container.addEventListener('drop', this.handleDrop);\n\n        }\n\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        if (this.renderer) this.renderer.onDocumentLoaded();\n    }\n\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    abstract getIdForItemInNamedCollection(name: string, item: any): string;\n    abstract getItemInNamedCollection(name: string, compareWith: any): any;\n    abstract renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void;\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSame(item1, item2);\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    public getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        return Modifier.normal;\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return 0;\n    }\n\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        return '';\n    }\n\n    updateViewForNamedCollection(name: string, newState: any): void {\n        if (this.viewEl && this.renderer) {\n            this.renderer.setDisplayElementsForCollectionInContainer(this.viewEl, name, newState);\n        }\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return true;\n    }\n\n    setRenderer(renderer: CollectionViewRenderer): void {\n        this.renderer = renderer;\n    }\n\n\n\n}\n","import StateChangeListener from \"../../../state/StateChangeListener\";\nimport {StateManager} from \"../../../state/StateManager\";\nimport {CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {AbstractCollectionView} from \"./AbstractCollectionView\";\nimport {CollectionViewListener} from \"../interface/CollectionViewListener\";\nimport {View} from \"../interface/View\";\nimport {CollectionView} from \"../interface/CollectionView\";\n\nimport debug from 'debug';\n\nconst logger = debug('ab-stateful-collection-view');\n\nexport default abstract class AbstractStatefulCollectionView extends AbstractCollectionView implements StateChangeListener,CollectionViewListener {\n\n    protected stateManager: StateManager;\n\n    protected constructor(uiConfig: CollectionViewDOMConfig, stateManager: StateManager, stateName:string) {\n        super(uiConfig,stateName);\n        this.stateManager = stateManager;\n\n        // state change listening\n        this.stateChanged = this.stateChanged.bind(this);\n\n        // setup state listener\n        this.stateManager.addChangeListenerForName(this.collectionName,this);\n    }\n\n    public getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    public onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n    public getItemInNamedCollection(name: string, compareWith: any): any {\n        return this.stateManager.findItemInState(name, compareWith, this.compareItemsForEquality);\n    }\n\n    public stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`handling state ${name} changed`);\n        logger(newValue);\n        this.updateViewForNamedCollection(name, newValue);\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        logger(`handling state ${name} new item added`);\n        logger(itemAdded);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        logger(`handling state ${name} new item removed`);\n        logger(itemRemoved);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        logger(`handling state ${name} new item updated`);\n        logger(itemNewValue);\n        if (this.stateManager && this.collectionName) this.updateViewForNamedCollection(name, this.stateManager.getStateByName(name));\n    }\n\n    render():void {\n        this.updateViewForNamedCollection(this.collectionName,this.stateManager.getStateByName(this.collectionName))\n    }\n\n    show():void {}\n    hidden():void{}\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemAction(view:View, actionName:string, selectedItem:any):void{}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        this.stateManager.removeItemFromState(this.collectionName, selectedItem, this.compareItemsForEquality, false);\n    }\n\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    getListenerName(): string {\n        return this.getName();\n    }\n\n\n\n}\n","import browserUtil from \"../../../util/BrowserUtil\";\nimport {EXTRA_ACTION_ATTRIBUTE_NAME, Modifier, CollectionViewDOMConfig} from \"../../ConfigurationTypes\";\nimport debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\n\nconst avLogger = debug('list-view-renderer');\n\nexport class ListViewRenderer implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n        const dataSourceKeyId = this.view.getDataSourceKeyId();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        childEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        childEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n            contentEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            contentEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n            textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n            textEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    badgeEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    badgeEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action,extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                            iconEl.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        action.setAttribute(dataSourceKeyId, uiConfig.viewConfig.dataSourceId);\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl,uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                    iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                deleteButtonEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        // add the key ids for selection\n        textEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n        textEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons:string[] = uiConfig.detail.icons(collectionName,item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                        iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                iconEl.setAttribute(uiConfig.keyId, resultDataKeyId);\n                                iconEl.setAttribute(dataSourceKeyId,uiConfig.viewConfig.dataSourceId);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {}\n\n}","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {isSame, isSameMongo} from '../../util/EqualityFunctions';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport BrowserStorageStateManager from \"../../state/BrowserStorageStateManager\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search');\nconst vLoggerDetail = debug('user-search-detail');\n\nclass UserSearchView extends AbstractStatefulCollectionView implements ChatUserEventListener {\n    protected loggedInUsers: string[];\n    protected localisedSM: StateManager;\n\n    static fastSearchInputId:string = 'fastSearchUserNames';\n    static dataLimit:number = 10;\n\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'recentUserSearches',\n            dataSourceId: VIEW_NAME.userSearch,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.number,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromUserSearch\n            },\n        },\n        extraActions: [\n            {\n                name: 'favourite',\n                buttonClasses: 'btn bg-info text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-plus',\n            },\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(UserSearchView.DOMConfig, stateManager,STATE_NAMES.users);\n\n        this.loggedInUsers = [];\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.updateViewForNamedCollection = this.updateViewForNamedCollection.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        this.itemDeleted = this.itemDeleted.bind(this);\n\n        // register state change listening\n        this.localisedSM = new BrowserStorageStateManager(true);\n        this.localisedSM.addChangeListenerForName(STATE_NAMES.recentUserSearches, this);\n        NotificationController.getInstance().addUserListener(this);\n\n        vLogger(this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches));\n\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        vLogger(usernames);\n        this.loggedInUsers = usernames;\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection(STATE_NAMES.recentUserSearches,{});\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        // @ts-ignore\n        const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item modifiers`);\n        vLoggerDetail(item);\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        vLogger(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add the selected user to the recent user searches\n        if (this.localisedSM.isItemInState(STATE_NAMES.recentUserSearches, {_id: ui.item.value}, isSameMongo)) return;\n\n        const recentUserSearches = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n        vLogger(`saved searches too long? ${STATE_NAMES.recentUserSearches}`);\n        if (recentUserSearches.length >= UserSearchView.dataLimit) {\n            vLogger('saved searches too long - removing first');\n            // remove the first item from recent searches\n            const item = recentUserSearches.shift();\n            this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, item, isSameMongo, true);\n        }\n        // save the searches\n        this.localisedSM.addNewItemToState(STATE_NAMES.recentUserSearches, {\n            _id: ui.item.value,\n            username: ui.item.label\n        }, true);\n    }\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        if (name === STATE_NAMES.recentUserSearches) {\n            vLogger(`Updating for recent searches`);\n            newState = this.localisedSM.getStateByName(STATE_NAMES.recentUserSearches);\n            vLogger(newState);\n            super.updateViewForNamedCollection(name, newState);\n        }\n        if (name === STATE_NAMES.users) {\n            // load the search names into the search field\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // @ts-ignore\n            const fastSearchEl = $(`#${UserSearchView.fastSearchInputId}`);\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newState.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInFavouriteList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToFavouriteList(selectedItem.username);\n        }\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[1].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in blocked list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSame(item1,item2);\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLoggerDetail(selectedItem);\n        vLogger(`Recent search user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        this.localisedSM.removeItemFromState(STATE_NAMES.recentUserSearches, selectedItem, this.compareItemsForEquality, true);\n    }\n\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n\n\n\n}\n\nexport default UserSearchView;\n","import debug from 'debug';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport {ChatLog, Invitation, Message} from \"../../socket/Types\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {isSame, isSameRoom} from \"../../util/EqualityFunctions\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\n\nconst csLogger = debug('chat-sidebar');\n\nclass ChatLogsView extends AbstractStatefulCollectionView implements ChatEventListener,CollectionViewListener {\n    protected selectedChatLog:ChatLog|null = null;\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'chatLogs',\n            dataSourceId: VIEW_NAME.chatLogs,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: 'roomName',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-dark',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'text-black fas fa-sign-out-alt',\n            },\n            badge: {\n                elementType: 'span',\n                elementClasses: 'badge badge-pill badge-primary mr-1',\n            }\n        },\n    };\n\n    constructor() {\n        super(ChatLogsView.DOMConfig,new MemoryBufferStateManager(), STATE_NAMES.chatLogs);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameRoom(item1,item2);\n    }\n\n    private updateStateManager() {\n        csLogger(`Updating state with chat manager`);\n        let newState = ChatManager.getInstance().getChatLogs();\n        csLogger(newState);\n        this.stateManager.setStateByName(STATE_NAMES.chatLogs,newState,true);\n    }\n\n    handleNewInviteReceived(invite: Invitation): boolean { return true; }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLogger(`Handling chat log updates`);\n        this.updateStateManager();\n    }\n\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n        this.updateStateManager();\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item.roomName;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.users.join(',');\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.inactive;\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === item.roomName) {\n                result = Modifier.active;\n            }\n\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        return this.getModifierForItemInNamedCollection(name, item);\n    }\n\n\n    selectChatRoom(roomName:string) {\n        let room = ChatManager.getInstance().getChatLog(roomName);\n        this.selectedChatLog = room;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n        }\n        this.updateStateManager();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        (<CollectionViewListenerForwarder>this.eventForwarder).itemSelected(this,this.selectedChatLog);\n        this.updateStateManager();\n    }\n\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        return item.numOfNewMessages;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLogger(`Deleting chat ${selectedItem.roomName}`);\n        ChatManager.getInstance().leaveChat(selectedItem.roomName);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n        this.updateStateManager();\n    }\n\n\n    hideRequested(view: View): void {\n        if (this.selectedChatLog) {\n            (<CollectionViewListenerForwarder>this.eventForwarder).itemDeselected(this,this.selectedChatLog);\n            this.selectedChatLog = null;\n        }\n    }\n\n    hidden() {\n        this.hideRequested(this);\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {\n        this.selectedChatLog = selectedItem;\n        this.updateStateManager();\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        this.selectedChatLog = null;\n        this.updateStateManager();\n    }\n    showRequested(view: View): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n}\n\nexport default ChatLogsView;\n","import {SidebarLocation, SidebarPrefs, SidebarViewConfig} from \"../ConfigurationTypes\";\nimport {View} from \"../view/interface/View\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport debug from 'debug';\nimport {CollectionView} from \"../view/interface/CollectionView\";\n\nconst sbvcLogger = debug('sidebar-container');\n\nclass SidebarViewContainer implements CollectionViewListener{\n    protected prefs:SidebarPrefs;\n    protected views:View[];\n\n    protected constructor(prefs:SidebarPrefs) {\n        this.prefs = prefs;\n        this.views = [];\n        // event handlers\n        this.eventHide = this.eventHide.bind(this);\n        this.eventShow = this.eventShow.bind(this);\n    }\n\n    public addView(view:View, config:SidebarViewConfig) {\n        sbvcLogger(`Adding view to container, with containing div of ${config.containerId}`);\n        const viewContainer = document.getElementById(config.containerId);\n        if (viewContainer) {\n            sbvcLogger(`Adding view to container, with containing div of ${config.containerId} - FOUND`);\n            view.setContainedBy(viewContainer);\n        }\n        this.views.push(view);\n        view.addEventListener(this);\n    }\n\n\n    public onDocumentLoaded() { // this should be called once at startup\n        // hide the side bar panel\n        this.eventHide(null);\n\n        // add the event listener for the close button\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        const closeButtonEl = sidePanelEl.querySelector('.close');\n        if (closeButtonEl) {\n            closeButtonEl.addEventListener('click', this.eventHide);\n        }\n\n        this.views.forEach((view) => {\n            view.onDocumentLoaded();\n        })\n    }\n\n    public eventHide(event: Event | null) {\n        if (event) event.preventDefault();\n        this.showHide('0%');\n        this.views.forEach((view) => {\n            view.hidden();\n        })\n    }\n\n    public eventShow(event: Event | null) {//414,768,1024\n        let size = this.prefs.expandedSize;\n        if (window.innerWidth < 769) {\n            size = '50%';\n        }\n        if (window.innerWidth < 415) {\n            size = '100%';\n        }\n        this.showHide(size);\n    }\n\n    private showHide(newStyleValue: string): void {\n        const sidePanelEl = document.getElementById(this.prefs.id);\n        if (sidePanelEl === null) return;\n\n        switch (this.prefs.location) {\n            case SidebarLocation.left: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.right: {\n                sidePanelEl.style.width = newStyleValue;\n                break;\n            }\n            case SidebarLocation.bottom: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n            case SidebarLocation.top: {\n                sidePanelEl.style.height = newStyleValue;\n                break;\n            }\n        }\n    }\n\n    documentLoaded(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    canDeleteItem(view: View, selectedItem: any): boolean {return true;}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemSelected(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    /*\n      Contained views can request show and hide of the sidebar container\n     */\n\n    showRequested(view: View): void {\n        this.eventShow(null);\n    }\n    hideRequested(view: View): void {\n        this.eventHide(null);\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n\n}\n\nexport default SidebarViewContainer;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass UserSearchSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'userSearchSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        recentSearches: 'userSearchZone',\n        favourites: 'favouriteUsersDropZone',\n        blocked: 'blockedUsersDropZone'\n    }\n\n    constructor() {\n        super(UserSearchSidebar.SidebarPrefs);\n    }\n}\n\nexport default UserSearchSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nclass ChatRoomsSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'chatSideBar',\n        expandedSize:'35%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        chatLogs: 'chatLogs',\n        chatLog: 'chatLogRoom'\n    }\n\n    constructor() {\n        super(ChatRoomsSidebar.SidebarPrefs);\n    }\n}\n\nexport default ChatRoomsSidebar;\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class ExerciseTypesSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'exerciseTypesSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.left\n    }\n\n    static SidebarContainers = {\n        container: 'exerciseTypesContainer',\n    }\n\n\n    constructor() {\n        super(ExerciseTypesSidebar.SidebarPrefs);\n    }\n}\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatEventListener} from \"../../socket/ChatEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport browserUtil from \"../../util/BrowserUtil\";\nimport moment from \"moment\";\nimport {ChatLog, Invitation, Message, Priority} from \"../../socket/Types\";\nimport Controller from \"../../Controller\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {\n    DRAGGABLE_KEY_ID,\n    DRAGGABLE_TYPE,\n    Modifier,\n    ViewDOMConfig\n} from \"../../ui-framework/ConfigurationTypes\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport NotificationManager from \"../../notification/NotificationManager\";\nimport { CollectionView } from '../../ui-framework/view/interface/CollectionView';\n\n\nconst csLoggerDetail = debug('chat-sidebar:detail');\n\nclass ChatLogDetailView implements View, ChatEventListener, CollectionViewListener, StateChangeListener {\n    private static newFormId: string = \"newMessage\";\n    private static commentId: string = \"message\";\n    private static submitCommentId: string = \"submitMessage\";\n    private static chatLogId: string = 'chatLog';\n    private static chatLogRoomId: string = 'chatLogRoom';\n    private static leaveChatId: string = 'leaveChat';\n    private static chatFastSearchUserNames: string = 'chatFastSearchUserNames';\n\n\n    // @ts-ignore\n    protected chatRoomDiv: HTMLElement;\n    // @ts-ignore\n    protected chatLogDiv: HTMLElement;\n    // @ts-ignore\n    protected chatForm: HTMLElement;\n    // @ts-ignore\n    protected commentEl: HTMLElement;\n    // @ts-ignore\n    protected sendMessageButton: HTMLElement;\n    // @ts-ignore\n    protected leaveChatButton: HTMLElement;\n    // @ts-ignore\n    protected fastUserSearch: HTMLElement;\n\n    protected stateManager: StateManager;\n\n    protected selectedChatLog: ChatLog | null;\n\n\n    constructor(stateManager: StateManager) {\n        this.stateManager = stateManager;\n        this.selectedChatLog = null;\n\n        // handler binding\n        this.handleAddMessage = this.handleAddMessage.bind(this);\n        this.handleChatLogsUpdated = this.handleChatLogsUpdated.bind(this);\n        this.handleChatLogUpdated = this.handleChatLogUpdated.bind(this);\n        this.handleChatStarted = this.handleChatStarted.bind(this);\n        this.handleUserDrop = this.handleUserDrop.bind(this);\n        this.leaveChat = this.leaveChat.bind(this);\n        this.eventUserSelected = this.eventUserSelected.bind(this);\n\n        NotificationController.getInstance().addListener(this);\n        this.stateManager.addChangeListenerForName(STATE_NAMES.users, this);\n    }\n\n    getListenerName(): string {\n        return 'Chat Log Details';\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasPermissionToUpdateItemInNamedCollection(name: string, item: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    hasChanged(): boolean {\n        throw new Error('Method not implemented.');\n    }\n\n    setContainedBy(container: HTMLElement): void {}\n    addEventListener(listener: CollectionViewListener): void {}\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    getDisplayValueForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        throw new Error('Method not implemented.');\n    }\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        throw new Error('Method not implemented.');\n    }\n    getBadgeValueForItemInNamedCollection(name: string, item: any): number {\n        throw new Error('Method not implemented.');\n    }\n    getBackgroundImageForItemInNamedCollection(name: string, item: any): string {\n        throw new Error('Method not implemented.');\n    }\n    updateViewForNamedCollection(name: string, newState: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with id ${selectedItem.roomName} deselected`);\n        if (this.selectedChatLog && (selectedItem.roomName === this.selectedChatLog.roomName)) {\n            this.selectedChatLog = null;\n            this.checkCanComment();\n            this.clearChatLog();\n        }\n    }\n\n\n    itemSelected(view: View, selectedItem: ChatLog): void {\n        this.selectedChatLog = selectedItem;\n        if (this.selectedChatLog) {\n            csLoggerDetail(`Chat Log with id ${selectedItem.roomName} selected`);\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        csLoggerDetail(`Chat Log with ${selectedItem.roomName} deleting`);\n        if (this.selectedChatLog && (this.selectedChatLog.roomName === selectedItem.roomName)) {\n            this.checkCanComment();\n            this.renderChatLog(this.selectedChatLog);\n        }\n    }\n\n    hideRequested(view: View): void {\n        this.selectedChatLog = null;\n        this.checkCanComment();\n        this.clearChatLog();\n    }\n\n    handleUserDrop(event: Event) {\n        csLoggerDetail('drop event on current chat room');\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            const draggedObjectJSON = event.dataTransfer.getData(DRAGGABLE_KEY_ID);\n            const draggedObject = JSON.parse(draggedObjectJSON);\n            csLoggerDetail(draggedObject);\n\n            if (draggedObject[DRAGGABLE_TYPE] === DRAGGABLE.typeUser) {\n                //add the user to the current chat if not already there\n                ChatManager.getInstance().sendInvite(draggedObject.username, this.selectedChatLog.roomName);\n                NotificationManager.getInstance().show('Chat', `Invited ${draggedObject.username} to the chat.`);\n            }\n        }\n\n    }\n\n    handleChatLogUpdated(log: ChatLog): void {\n        csLoggerDetail(`Handling chat log updates`);\n        this.checkCanComment();\n        this.renderChatLog(log);\n    }\n\n    handleAddMessage(event: Event): void {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`Handling message event`);\n        if (this.selectedChatLog) {\n            // @ts-ignore\n            if (this.commentEl && this.commentEl.value.trim().length === 0) return;\n            // @ts-ignore\n            const messageContent = this.commentEl.value.trim();\n            // @ts-ignore\n            this.commentEl.value = '';\n\n            let sentMessage: Message | null = ChatManager.getInstance().sendMessage(this.selectedChatLog.roomName, messageContent, Priority.Normal, {});\n            if (sentMessage) {\n                // add the message to our display\n                let messageEl = this.addChatMessage(sentMessage);\n                // scroll to bottom\n                browserUtil.scrollSmoothTo(messageEl);\n            }\n        }\n    }\n\n    onDocumentLoaded() {\n        // @ts-ignore\n        this.chatLogDiv = document.getElementById(ChatLogDetailView.chatLogId);\n        // @ts-ignore\n        this.commentEl = document.getElementById(ChatLogDetailView.commentId);\n        // @ts-ignore\n        this.chatForm = document.getElementById(ChatLogDetailView.newFormId);\n        // @ts-ignore\n        this.sendMessageButton = document.getElementById(ChatLogDetailView.submitCommentId);\n        // @ts-ignore\n        this.leaveChatButton = document.getElementById(ChatLogDetailView.leaveChatId);\n        // @ts-ignore\n        this.chatRoomDiv = document.getElementById(ChatLogDetailView.chatLogRoomId);\n        // @ts-ignore\n        this.fastUserSearch = document.getElementById(ChatLogDetailView.chatFastSearchUserNames);\n\n        this.chatRoomDiv.addEventListener('dragover', (event) => {\n            csLoggerDetail('Dragged over');\n            if (this.selectedChatLog) event.preventDefault();\n        });\n        this.chatRoomDiv.addEventListener('drop', this.handleUserDrop);\n\n\n        this.chatForm.addEventListener('submit', this.handleAddMessage);\n        this.leaveChatButton.addEventListener('click', this.leaveChat);\n\n        this.checkCanComment();\n\n        // fast user search\n        // @ts-ignore\n        const fastSearchEl = $(`#${ChatLogDetailView.chatFastSearchUserNames}`);\n        // @ts-ignore\n        fastSearchEl.on('autocompleteselect', this.eventUserSelected);\n    }\n\n    eventUserSelected(event: Event, ui: any) {\n        event.preventDefault();\n        event.stopPropagation();\n        csLoggerDetail(`User ${ui.item.label} with id ${ui.item.value} selected`);\n        // @ts-ignore\n        event.target.innerText = '';\n\n        // add to the chat, if one selected\n        if (this.selectedChatLog) ChatManager.getInstance().sendInvite(ui.item.label, this.selectedChatLog.roomName);\n        NotificationManager.getInstance().show('Chat', `Invited ${ui.item.label} to the chat.`);\n    }\n\n    addChatMessage(message: Message): HTMLElement {\n        let chatMessageEl = document.createElement('div');\n        browserUtil.addRemoveClasses(chatMessageEl, \"message\");\n        // are we dealing with an \"join\"/\"exit\" message?\n        if (message.from.trim().length === 0) {\n            let messageSenderEl = document.createElement('div');\n            browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n            messageSenderEl.innerText = message.message;\n            chatMessageEl.appendChild(messageSenderEl);\n        } else {\n\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(chatMessageEl, \"my-message\");\n            } else {\n                let messageSenderEl = document.createElement('div');\n                browserUtil.addRemoveClasses(messageSenderEl, 'message-sender');\n                messageSenderEl.innerText = message.from + '   ' + moment(message.created, 'YYYYMMDDHHmmss').format('DD/MM/YYYY ');\n                chatMessageEl.appendChild(messageSenderEl);\n            }\n\n            let contentEl = document.createElement('div');\n            if (message.from === ChatManager.getInstance().getCurrentUser()) {\n                browserUtil.addRemoveClasses(contentEl, \"my-message-content\");\n            } else {\n                browserUtil.addRemoveClasses(contentEl, 'message-content');\n            }\n            contentEl.innerText = message.message;\n            chatMessageEl.appendChild(contentEl);\n        }\n\n        this.chatLogDiv.appendChild(chatMessageEl);\n        return chatMessageEl;\n    }\n\n    reRenderChatMessages(chatLog: ChatLog) {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n        let messageEl: HTMLElement | null = null;\n        chatLog.messages.forEach((message: Message) => {\n            messageEl = this.addChatMessage(message);\n        });\n        // scroll to the last message (if any)\n        if (messageEl) browserUtil.scrollTo(messageEl);\n    }\n\n    renderChatLog(chatLog: ChatLog) {\n        csLoggerDetail(`Chat Log ${chatLog.roomName} rendering`);\n        if (this.selectedChatLog) {\n            if (this.selectedChatLog.roomName === chatLog.roomName) {\n                this.selectedChatLog = chatLog;\n                ChatManager.getInstance().touchChatLog(chatLog.roomName);\n                // render the chat conversation\n                this.reRenderChatMessages(chatLog);\n            }\n        }\n    }\n\n\n    handleChatLogsUpdated(): void {\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().touchChatLog(this.selectedChatLog.roomName);\n            // render the chat conversation\n            this.reRenderChatMessages(this.selectedChatLog);\n        }\n        this.checkCanComment();\n    }\n\n    handleChatStarted(log: ChatLog): void {\n        this.selectedChatLog = log;\n        this.renderChatLog(log);\n    }\n\n    private leaveChat(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        if (this.selectedChatLog) {\n            ChatManager.getInstance().leaveChat(this.selectedChatLog.roomName);\n            this.selectedChatLog = null;\n            this.clearChatLog();\n            this.checkCanComment();\n        }\n    }\n\n    private checkCanComment() {\n        if (this.selectedChatLog) {\n            if (this.commentEl) this.commentEl.removeAttribute(\"readonly\");\n            if (this.commentEl) this.commentEl.removeAttribute(\"disabled\");\n            if (this.sendMessageButton) this.sendMessageButton.removeAttribute(\"disabled\");\n            if (this.leaveChatButton) this.leaveChatButton.removeAttribute(\"disabled\");\n            if (this.fastUserSearch) this.fastUserSearch.removeAttribute(\"disabled\");\n        } else {\n            if (this.commentEl) this.commentEl.setAttribute(\"readonly\", \"true\");\n            if (this.commentEl) this.commentEl.setAttribute(\"disabled\", \"true\");\n            if (this.sendMessageButton) this.sendMessageButton.setAttribute(\"disabled\", \"true\");\n            if (this.leaveChatButton) this.leaveChatButton.setAttribute(\"disabled\", \"true\");\n            if (this.fastUserSearch) this.fastUserSearch.setAttribute(\"disabled\", \"true\");\n        }\n\n    }\n\n    private clearChatLog() {\n        browserUtil.removeAllChildren(this.chatLogDiv);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        if (name === STATE_NAMES.users) {\n            // @ts-ignore\n            const fastSearchEl = $(`#${ChatLogDetailView.ssFastSearchUserNames}`);\n            // what is my username?\n            let myUsername = Controller.getInstance().getLoggedInUsername();\n            // for each name, construct the patient details to display and the id referenced\n            const fastSearchValues: any = [];\n            newValue.forEach((item: any) => {\n                const searchValue = {\n                    label: item.username,\n                    value: item._id,\n                };\n                // @ts-ignore\n                if (myUsername !== item.username) fastSearchValues.push(searchValue); // don't search for ourselves\n            });\n            fastSearchEl.autocomplete({source: fastSearchValues});\n            fastSearchEl.autocomplete('option', {disabled: false, minLength: 1});\n        }\n    }\n\n\n\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        this.stateChanged(managerName, name, this.stateManager.getStateByName(name));\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {}\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {}\n\n    handleOfflineMessagesReceived(messages: Message[]): void {}\n    handleInvitationDeclined(room: string, username: string): void {}\n    handleNewInviteReceived(invite: Invitation): boolean {return true;}\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    documentLoaded(view: View): void {}\n    showRequested(view: View): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n\n    getName(): string {\n        return VIEW_NAME.chatLog;\n    }\n\n    hidden(): void {\n        this.hideRequested(this);\n    }\n\n    getDataSourceKeyId(): string {\n        return \"\";\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        // @ts-ignore\n        return undefined;\n    }\n\n    render(): void {}\n\n    show(): void {\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}\n\nexport default ChatLogDetailView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport Controller from \"../../Controller\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {View} from \"../../ui-framework/view/interface/View\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\nconst vLoggerDetail = debug('user-search-sidebar:detail');\n\nclass FavouriteUserView extends AbstractStatefulCollectionView implements ChatUserEventListener,CollectionViewListener {\n    static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'favouriteUsers',\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch],\n                acceptTypes:[DRAGGABLE.typeUser],\n            },\n            dataSourceId: VIEW_NAME.favouriteUsers,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n            drag: {\n                type: DRAGGABLE.typeUser,\n                from: DRAGGABLE.fromFavourites\n            },\n        },\n        extraActions: [\n            {\n                name: 'block',\n                buttonClasses: 'btn bg-warning text-white btn-circle btn-sm mr-1',\n                iconClasses: 'fas fa-user-slash'\n            }\n        ]\n    };\n\n    constructor(stateManager: StateManager) {\n        super(FavouriteUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        this.renderer = new ListViewRenderer(this,this);\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventCollectionListener(this);\n    }\n\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {\n        vLogger(`Received new list of users who are logged in `);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedIn(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUserLoggedOut(username: string): void {\n        vLogger(`Handle Favourite User ${username} logged in`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    handleFavouriteUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Favourite Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        // if the user is currently logged out make the item inactive\n        if (!ChatManager.getInstance().isUserLoggedIn(item.username)) {\n            result = Modifier.inactive;\n        }\n        return result;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any) {\n        let result = Modifier.normal;\n        vLoggerDetail(`Checking for item secondary modifiers ${item.username}`);\n        // if the user is in the black list then show warning and a favourite user is highlighted\n        if (NotificationController.getInstance().isFavouriteUser(item.username)) {\n            vLoggerDetail(`is favourite`);\n            result = Modifier.active;\n        }\n        if (NotificationController.getInstance().isBlockedUser(item.username)) {\n            vLoggerDetail(`is blocked`);\n            result = Modifier.warning;\n        }\n        return result;\n    }\n\n\n\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let favUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInFavouriteList(user.username)) {\n                    favUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, favUsers);\n\n    }\n\n\n    documentLoaded(view: View): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        this.updateViewForNamedCollection('',{})\n    }\n\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        // @ts-ignore\n        if (actionName === this.collectionUIConfig.extraActions[0].name) {\n            if (ChatManager.getInstance().isUserInBlockedList(selectedItem.username)) {\n                vLogger(`${selectedItem.username} already in fav list, ignoring`);\n                return;\n            }\n            ChatManager.getInstance().addUserToBlockedList(selectedItem.username);\n        }\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        vLogger(`Favourite user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromFavouriteList(selectedItem.username);\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {}\n    itemDeselected(view: View, selectedItem: any): void {}\n\n\n    itemDropped(view: View, droppedItem: any): void {\n        vLogger(`Handling item dropped ${droppedItem.username}`);\n        if (ChatManager.getInstance().isUserInFavouriteList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in fav list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToFavouriteList(droppedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        const roomName = NotificationController.getInstance().startChatWithUser(selectedItem.username);\n        Controller.getInstance().handleShowChat(roomName);\n    }\n\n    showRequested(view: View): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return true;\n    }\n\n}\n\nexport default FavouriteUserView;\n","import debug from 'debug';\nimport {StateManager} from '../../state/StateManager';\nimport {ChatUserEventListener} from \"../../socket/ChatUserEventListener\";\nimport {NotificationController} from \"../../socket/NotificationController\";\nimport {ChatManager} from \"../../socket/ChatManager\";\nimport AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {KeyType, Modifier, CollectionViewDOMConfig} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from '../../ui-framework/view/interface/View';\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\n\nconst vLogger = debug('user-search-sidebar');\n\nclass BlockedUserView extends AbstractStatefulCollectionView implements ChatUserEventListener, CollectionViewListener {\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'blockedUsers',\n            dataSourceId: VIEW_NAME.blockedUsers,\n            drop: {\n                acceptFrom:[DRAGGABLE.fromUserSearch, DRAGGABLE.fromFavourites],\n                acceptTypes:[DRAGGABLE.typeUser],\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: 'list-group-item-primary',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-info',\n            warning: 'list-group-item-danger'\n        },\n        icons: {\n            normal: 'fas fa-comment',\n            inactive: 'fas fa-comment',\n            active: 'fas fa-heart',\n            warning: 'fas fa-exclamation-circle'\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            quickDelete:true,\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-sm',\n                iconClasses: 'fas fa-trash-alt',\n            },\n        },\n    };\n\n\n    constructor(stateManager: StateManager) {\n        super(BlockedUserView.DOMConfig, stateManager, STATE_NAMES.users);\n\n        // list renderer\n        this.renderer = new ListViewRenderer(this,this);\n\n\n        // handler binding\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n        this.handleFavouriteUserLoggedIn = this.handleFavouriteUserLoggedIn.bind(this);\n        this.handleFavouriteUserLoggedOut = this.handleFavouriteUserLoggedOut.bind(this);\n        this.handleFavouriteUsersChanged = this.handleFavouriteUsersChanged.bind(this);\n        this.handleBlockedUsersChanged = this.handleBlockedUsersChanged.bind(this);\n        this.handleLoggedInUsersUpdated = this.handleLoggedInUsersUpdated.bind(this);\n\n        NotificationController.getInstance().addUserListener(this);\n    }\n\n    onDocumentLoaded() {\n        super.onDocumentLoaded();\n        this.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {return true; }\n    documentLoaded(view: View): void {}\n\n    itemDeleted(view: View, selectedItem: any): void {\n        // @ts-ignore\n        vLogger(`Blocked user ${selectedItem.username} with id ${selectedItem.id} deleted - removing`);\n        ChatManager.getInstance().removeUserFromBlockedList(selectedItem.username);\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        throw new Error('Method not implemented.');\n    }\n\n    hideRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n    showRequested(view: View): void {\n        throw new Error('Method not implemented.');\n    }\n\n\n    handleLoggedInUsersUpdated(usernames: string[]): void {}\n    handleFavouriteUserLoggedIn(username: string): void {}\n    handleFavouriteUserLoggedOut(username: string): void {}\n    handleFavouriteUsersChanged(usernames: string[]): void {}\n\n    handleBlockedUsersChanged(usernames: string[]): void {\n        vLogger(`Handle Blocked Users changed to ${usernames}`);\n        this.updateViewForNamedCollection('',{});\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.username;\n    }\n\n    getSecondaryModifierForItemInNamedCollection(name: string, item: any):Modifier{\n        return Modifier.warning;\n    }\n\n\n    getIdForItemInNamedCollection(name: string, item: any): string {\n        return item._id;\n    }\n\n    updateViewForNamedCollection(name: string, newState: any) {\n        // find the blocked users in the user list\n        let blockedUsers:any[] = [];\n        const users:any[] = this.stateManager?.getStateByName(STATE_NAMES.users);\n        if (users) {\n            users.forEach((user:any) => {\n                if (ChatManager.getInstance().isUserInBlockedList(user.username)) {\n                    blockedUsers.push(user);\n                }\n            })\n        }\n\n        super.updateViewForNamedCollection(name, blockedUsers);\n    }\n\n    itemDropped(view: View, droppedItem: any): void {\n        if (ChatManager.getInstance().isUserInBlockedList(droppedItem.username)) {\n            vLogger(`${droppedItem.username} already in blocked list, ignoring`);\n            return;\n        }\n        // add the user to the Chat Manager and we should get an event about it\n        ChatManager.getInstance().addUserToBlockedList(droppedItem.username);\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {}\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        return false;\n    }\n\n\n}\n\nexport default BlockedUserView;\n","import {Attribute, BasicButtonElement, BasicElement} from \"../ConfigurationTypes\";\nimport {FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {FieldValueOptions} from \"../../model/CommonTypes\";\n\nexport type ValidationResponse = {\n    isValid:boolean,\n    message?:string,\n    resetOnFailure:boolean\n}\n\nexport interface FieldValidator {  // is the current value valid (includes manndatory checks)\n    isValidValue(field:FieldDefinition, currentValue:string|null):ValidationResponse;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldFormatter { // final value for the field on \"saving\" the form\n    formatValue(field:FieldDefinition, currentValue:string):any;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldRenderer { // renders during user changes\n    renderValue(field:FieldDefinition, currentValue:string):string|null;\n    setSubElements(elements:HTMLInputElement[]):void;\n}\n\nexport interface FieldEditor { // allows for an \"editor\" component\n    editValue(field:FieldDefinition, currentValue:string):string;\n}\n\nexport interface ConditionalField { // a field may not be visible based on other field values\n    shouldBeVisible(field:FieldDefinition, formValues:string[]):boolean;\n}\n\nexport enum UIFieldType {\n    checkbox,\n    email,\n    hidden,\n    number,\n    password,\n    text,\n    textarea,\n    select,\n    radioGroup\n}\n\nexport type FieldLabel = {\n    label:string,\n    attributes?:Attribute[],\n    classes?:string\n}\n\nexport type DescriptionText = {\n    message:string,\n    elementType:string,\n    elementClasses:string,\n}\n\nexport type DisplayOrder = {\n    fieldId:string,\n    displayOrder:number\n}\n\nexport type FieldUIConfig = {\n    field: FieldDefinition,\n    displayOrder:number,\n    elementType: UIFieldType,\n    elementAttributes?: Attribute[],\n    elementClasses?: string,\n    subElement?:{\n        container?:BasicElement,\n        label?: FieldLabel,\n        element:BasicElement,\n    },// for radio and selection options\n    label?: FieldLabel,\n    describedBy?: DescriptionText,\n    containedBy?: BasicElement,\n    textarea?: {\n        rows: number,\n        cols: number\n    },\n    validator?: {\n        validator: FieldValidator, // on blur\n        messageDisplay: BasicElement,\n        validClasses?: string,\n        invalidClasses?: string,\n    }\n    renderer?: FieldRenderer, // on change\n    editor?: FieldEditor, // on focus\n    formatter?: FieldFormatter // used by form when saving\n    conditionalDisplay?: ConditionalField // used to determine if the is visible\n    datasource?: FieldValueOptions\n}\n\nexport type FieldGroup = {\n    containedBy?:BasicElement,\n    fields:FieldUIConfig[]\n}\n\nexport type FormUIDefinition = {\n    id:string,\n    displayName:string,\n    classes?:string,\n    unsavedChanges:BasicElement,\n    fieldGroups:FieldGroup[],\n    buttonsContainedBy?:BasicElement\n    deleteButton?:BasicButtonElement,// should be clickable\n    cancelButton:BasicButtonElement,// should be clickable\n    submitButton:BasicButtonElement  // should be clickable\n    activeSave?:string\n}\n\nexport enum FormMode {\n    unset = -1,\n    create,\n    update\n}\n\nexport type AttributeFieldMapItem = {\n    fieldId:string,\n    attributeId:string\n}\n\nexport const DATA_ID_ATTRIBUTE:string = 'data-id';\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {Form} from \"./Form\";\n\nexport enum FormEventType {\n    SHOWN = 'shown',\n    HIDDEN = 'hidden',\n    CANCELLING = 'cancelling',\n    CANCELLING_ABORTED = 'cancelling-aborted',\n    CANCELLED = 'cancelled',\n    SAVING = 'saving',\n    SAVE_ABORTED = 'save-aborted',\n    SAVED = 'saved',\n    DELETING = 'deleting',\n    DELETE_ABORTED = 'delete-aborted',\n    DELETED = 'deleted',\n    CREATING = 'creating',\n    MODIFYING = 'modifying',\n    RESETTING = 'reset',\n}\n\n\nexport type FormEvent = {\n    target:Form,\n    formId:string,\n    eventType:FormEventType,\n}\n\nexport interface FormListener {\n    formChanged(event:FormEvent,formValues?:any):boolean; // return true to cancel the action\n}","export enum ComparisonType {\n    equals,\n    lessThan,\n    lessThanEqual,\n    greaterThan,\n    greaterThanEqual,\n    isNull,\n    isNotNull,\n    hasValue\n};\n\nexport enum ConditionResponse {\n    show,\n    hide,\n    invalid,\n    valid\n}\n\nexport type ValidationCondition = {\n    comparison: ComparisonType,\n    sourceDataFieldId?:string,\n    values?:string\n}\n\nexport type ValidationRule = {\n    targetDataFieldId:string,\n    response: ConditionResponse,\n    conditions: ValidationCondition[]\n}\n","import {ComparisonType, ConditionResponse, ValidationRule} from \"./ValidationTypeDefs\";\nimport {Form} from \"../Form\";\nimport {Field} from \"../field/Field\";\nimport debug from 'debug';\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nconst logger = debug('validation-manager');\nconst flogger = debug('validation-manager-rule-failure');\n\n\nexport type RuleCheck = {\n    ruleFailed: boolean,\n    message?: string\n}\n\nexport type RuleResponse = {\n    field: Field,\n    ruleFailed: boolean,\n    response: ConditionResponse,\n    message?: string\n}\n\n\ntype _ValueCondition = {\n    values: string,\n    comparison: ComparisonType\n};\n\ntype _FieldCondition = {\n    sourceField: Field,\n    comparison: ComparisonType,\n    values?: string,\n};\n\ntype _ValidationRule = {\n    targetField: Field,\n    response: ConditionResponse,\n    fieldConditions: _FieldCondition[],\n    valueConditions: _ValueCondition[],\n}\n\ntype FormRuleSet = {\n    form: Form,\n    rules: _ValidationRule[]\n}\n\nexport class ValidationManager implements FieldListener {\n\n    private static _instance: ValidationManager;\n\n    public static getInstance(): ValidationManager {\n        if (!(ValidationManager._instance)) {\n            ValidationManager._instance = new ValidationManager();\n        }\n        return ValidationManager._instance;\n    }\n\n    private formRules: FormRuleSet[];\n\n    private constructor() {\n        this.formRules = [];\n    }\n\n    public getName(): string {\n        return \"Validation Manager\";\n    }\n\n    public addRuleToForm(form: Form, rule: ValidationRule): boolean { // returns whether the rule was added\n        logger(`Adding rule on form ${form.getId()} for target field ${rule.targetDataFieldId}`);\n        /*\n         validate the rule\n         1. does the rule have a comparison field or static for each condition?\n         2. do the fields exist?\n         3. are the comparisons valid types to compare?\n        */\n        let targetField: Field | undefined = form.getFieldFromDataFieldId(rule.targetDataFieldId);\n        if (!targetField) {\n            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - NOT FOUND in form`);\n            return false;\n        }\n\n        let convertedRule: _ValidationRule = {\n            targetField: targetField,\n            response: rule.response,\n            fieldConditions: [],\n            valueConditions: []\n        }\n\n\n        rule.conditions.forEach((condition) => {\n            // do we have one of values or source field?\n            if (!(condition.values) && !(condition.sourceDataFieldId)) {\n                flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - a condition is missing both values and source field`);\n                return false;\n            }\n            // is this a target field value comparison?\n            if ((condition.values) && (condition.sourceDataFieldId)) {\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} with values ${condition.values}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                convertedRule.fieldConditions.push({\n                    sourceField: sourceField,\n                    comparison: condition.comparison,\n                    values: condition.values\n                });\n                sourceField.addFieldListener(this);\n            } else if ((condition.values) && !(condition.sourceDataFieldId)) { // is this a value comparison?\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - values ${condition.values}`);\n                // add a new value rule to the internal structure\n                convertedRule.valueConditions.push({values: condition.values, comparison: condition.comparison});\n                // @ts-ignore\n                targetField.addFieldListener(this);\n            } else if ((condition.sourceDataFieldId) && (!condition.values)) { // is this a field vs field comparison\n                logger(`Rule adding for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId}`);\n                let sourceField: Field | undefined = form.getFieldFromDataFieldId(condition.sourceDataFieldId);\n                if (!sourceField) {\n                    flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - source field ${condition.sourceDataFieldId} NOT FOUND`);\n                    return false;\n                }\n                /*\n                   are we comparing two fields that can be compared?\n                   allowed combinations are:\n                   date|datetime vs date|datetime\n                   time|short time vs time|short time\n                   boolean vs boolean\n                   integer|float vs number|float\n                   any other vs any other\n                 */\n                let sourceType = sourceField.getFieldDefinition().type;\n                // @ts-ignore\n                let targetType = targetField.getFieldDefinition().type;\n\n                switch (targetType) {\n                    case (FieldType.date):\n                    case (FieldType.datetime): {\n                        if ((sourceType !== FieldType.datetime) &&\n                            (sourceType !== FieldType.date)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is date(time), source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.time):\n                    case (FieldType.shortTime): {\n                        if ((sourceType !== FieldType.time) &&\n                            (sourceType !== FieldType.shortTime)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is time, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.boolean): {\n                        if ((sourceType !== FieldType.boolean)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is boolean, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                    case (FieldType.integer):\n                    case (FieldType.float): {\n                        if ((sourceType !== FieldType.integer) &&\n                            (sourceType !== FieldType.float)) {\n                            flogger(`Rule not added for form ${form.getId()} for target field ${rule.targetDataFieldId} - target is number, source is NOT`);\n                            return false;\n                        }\n                        break;\n                    }\n                }\n                convertedRule.fieldConditions.push({sourceField: sourceField, comparison: condition.comparison});\n                sourceField.addFieldListener(this);\n            }\n        });\n        logger(`Converted rule to `);\n        logger(convertedRule);\n\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === form.getId());\n        let formRuleSet: FormRuleSet;\n        // store the rules for later execution\n        if (index < 0) {\n            formRuleSet = {\n                form: form,\n                rules: []\n            }\n            formRuleSet.rules.push(convertedRule);\n            this.formRules.push(formRuleSet)\n        } else {\n            formRuleSet = this.formRules[index];\n            formRuleSet.rules.push(convertedRule);\n        }\n        logger(`Current set of rules for form ${form.getId()}`);\n        logger(formRuleSet);\n\n        return true;\n    }\n\n    private areTwoFieldsEqual(targetField: Field, sourceField: Field): RuleCheck {\n        if (targetField.getValue() !== sourceField.getValue()) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be equal to ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private compareTwoValuesWithTypes(targetType: FieldType, targetValue: string | null, sourceType: FieldType, sourceValue: string | null, comparison: ComparisonType): boolean {\n        if (!(targetValue) || !(sourceValue)) return false;  // no null comparisons\n\n        switch (targetType) {\n            case (FieldType.date): {\n                targetValue += ' 00:00:00';\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.datetime): {\n                if (sourceType === FieldType.date) {\n                    sourceValue += ' 00:00:00';\n                }\n                break;\n            }\n            case (FieldType.time): {\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n            case (FieldType.shortTime): {\n                targetValue += ':00';\n                if (sourceType === FieldType.shortTime) {\n                    sourceValue += ':00';\n                }\n                break;\n            }\n        }\n\n        logger(`Comparing ${targetValue} of type ${targetType} against ${sourceValue} of type ${sourceType}`);\n\n        switch (comparison) {\n            case ComparisonType.lessThan: {\n                return (targetValue < sourceValue);\n            }\n            case ComparisonType.lessThanEqual: {\n                return (targetValue <= sourceValue);\n            }\n            case ComparisonType.greaterThanEqual: {\n                return (targetValue >= sourceValue);\n            }\n            case ComparisonType.greaterThan: {\n                return (targetValue > sourceValue);\n            }\n            case ComparisonType.equals: {\n                return (targetValue === sourceValue);\n            }\n        }\n        return false;\n    }\n\n    private isTargetLessThanSource(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.lessThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be less than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetLessThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetLessThanSource(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be less than or equal to ${sourceField.getName()}`,\n                };\n\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n    private isTargetGreaterThan(targetField: Field, sourceField: Field): RuleCheck {\n        let sourceType: FieldType = sourceField.getFieldDefinition().type;\n        let targetType: FieldType = targetField.getFieldDefinition().type;\n        let sourceValue = sourceField.getValue();\n        let targetValue = targetField.getValue();\n\n        if (!this.compareTwoValuesWithTypes(targetType, targetValue, sourceType, sourceValue, ComparisonType.greaterThan)) {\n            return {\n                ruleFailed: true,\n                message: `${targetField.getName()} must be greater than ${sourceField.getName()}`,\n            };\n        }\n        return {ruleFailed: false};\n    }\n\n    private isSourceNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((targetValue) && (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private isSourceNotNull(sourceField: Field): RuleCheck {\n        let targetValue = sourceField.getValue();\n        // @ts-ignore\n        if ((!targetValue) || (targetValue.trim().length > 0)) {\n            return {\n                ruleFailed: true,\n                message: `${sourceField.getName()} must not be empty`,\n            };\n        }\n        return {ruleFailed: false};\n\n    }\n\n    private doesFieldHaveValue(field: Field, values: string): RuleCheck {\n        let targetValue = field.getValue();\n        logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue}`);\n        if (targetValue) {\n            // split the values by commas\n            let splits:string[] = values.split(',');\n            let foundInValue:boolean = false;\n            splits.forEach((split) => {\n                if (targetValue === split) {\n                    logger(`does field ${field.getId()} have value from ${values} - current value is ${targetValue} - found in value(s)`);\n                    foundInValue = true;\n                }\n            });\n            if (foundInValue) {\n                return {ruleFailed:false};\n            }\n        }\n        return {\n            ruleFailed: true,\n            message: `${field.getName()} must be have a value in ${values}`,\n        };\n    }\n\n    private doesSourceFieldHaveValue(field: Field, values: string): RuleCheck {\n        return this.doesFieldHaveValue(field,values);\n    }\n\n    private isTargetGreaterThanEqualSource(targetField: Field, sourceField: Field): RuleCheck {\n        let check: RuleCheck = this.areTwoFieldsEqual(targetField, sourceField);\n        if (check.ruleFailed) {\n            check = this.isTargetGreaterThan(targetField, sourceField);\n            if (check.ruleFailed) {\n                return {\n                    ruleFailed: true,\n                    message: `${targetField.getName()} must be greater than or equal to ${sourceField.getName()}`,\n                };\n            }\n        }\n        return {ruleFailed: false};\n    }\n\n\n    private compareFields(targetField: Field, sourceField: Field, comparison: ComparisonType, value: string): RuleCheck {\n        switch (comparison) {\n            case ComparisonType.equals: {\n                return this.areTwoFieldsEqual(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThan: {\n                return this.isTargetLessThanSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.lessThanEqual: {\n                return this.isTargetLessThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThan: {\n                return this.isTargetGreaterThan(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.greaterThanEqual: {\n                return this.isTargetGreaterThanEqualSource(targetField, sourceField);\n                break;\n            }\n            case ComparisonType.isNull: {\n                return this.isSourceNull(sourceField);\n                break;\n            }\n            case ComparisonType.isNotNull: {\n                return this.isSourceNotNull(sourceField);\n                break;\n            }\n            case ComparisonType.hasValue: {\n                return this.doesSourceFieldHaveValue(sourceField, value);\n                break;\n            }\n        }\n    }\n\n    private executeRule(rule: _ValidationRule): RuleResponse {\n        let response: RuleResponse = {\n            field: rule.targetField,\n            ruleFailed: false,\n            response: rule.response,\n        }\n        // run each field comparison\n        logger(`Executing rule for target ${rule.targetField.getId()}`);\n        logger(rule);\n        rule.fieldConditions.every((condition) => {\n            logger('field condition rule');\n            logger(condition);\n            let values = (condition.values) ? condition.values : '';\n            let ruleCheck: RuleCheck = this.compareFields(rule.targetField, condition.sourceField, condition.comparison, values);\n            if (ruleCheck.ruleFailed) {\n                flogger('field condition rule FAILED');\n                response.ruleFailed = true;\n                // only need messages for invalid responses\n                response.message = ruleCheck.message;\n                return false;\n            }\n            flogger('field condition rule PASSED');\n            return true;\n        });\n        // run each value comparison if we haven't already failed\n        if (!response.ruleFailed) {\n            rule.valueConditions.forEach((condition) => {\n                logger('value condition rule');\n                logger(condition);\n                let ruleCheck: RuleCheck = this.compareFields(rule.targetField, rule.targetField, ComparisonType.hasValue, condition.values);\n                if (ruleCheck.ruleFailed) {\n                    flogger('value condition rule FAILED');\n                    response.ruleFailed = true;\n                    response.message = ruleCheck.message;\n                    return false;\n                }\n                flogger('value condition rule PASSED');\n                return true;\n            });\n        }\n        return response;\n    }\n\n    private getRulesForFieldChange(formId: string, dataFieldId: string,includeSourceFields:boolean): _ValidationRule[] {\n        let rules: _ValidationRule[] = [];\n        // lets go through the rules for the form\n        logger(`Finding rules for form ${formId} and data field ${dataFieldId}`);\n        let index = this.formRules.findIndex((formRule) => formRule.form.getId() === formId);\n        if (index >= 0) {\n            const ruleSet: FormRuleSet = this.formRules[index];\n\n            // the dataFieldId could be the target or one of the sources\n            ruleSet.rules.forEach((rule) => {\n                if (rule.targetField.getId() === dataFieldId) {\n                    logger(`Found rule where data field ${dataFieldId} is target`);\n                    if (rule.targetField.isValid()) {\n                        rules.push(rule);\n                    }\n                    else {\n                        flogger(`Found rule where data field ${dataFieldId} is target but value is not currently valid`);\n                    }\n                } else {\n                    if (includeSourceFields) {\n                        rule.fieldConditions.every((value: { sourceField: Field, comparison: ComparisonType }) => {\n                            if (value.sourceField.getId() === dataFieldId) {\n                                logger(`Found rule where data field ${dataFieldId} is source`);\n                                if (value.sourceField.isValid()) {\n                                    rules.push(rule);\n                                } else {\n                                    flogger(`Found rule where data field ${dataFieldId} is source but value is not currently valid`);\n                                }\n                                return false;\n                            }\n                            return true;\n                        });\n                    }\n                }\n            });\n        }\n        return rules;\n    }\n\n    public failedValidation(formId: string, field: FieldDefinition, currentValue: string, message: string): void {\n    } // ignored, we might be causing\n\n    public applyRulesToTargetField(formId:string, field:FieldDefinition,onlyRulesOfType:ConditionResponse|null) : RuleCheck {\n        logger(`Checking rules for form ${formId}, data field ${field.id} of type ${onlyRulesOfType}`);\n        // which rules apply?\n        let rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,false);\n\n        let result:RuleCheck = {\n            ruleFailed:false\n        }\n\n        // get the rules for the field, filtered by the condition response type\n        if (onlyRulesOfType) {\n            let ruleSubset:_ValidationRule[] = [];\n            rules.forEach((rule) => {\n               if (rule.response === onlyRulesOfType) {\n                   ruleSubset.push(rule);\n               }\n            });\n            rules = ruleSubset;\n        }\n\n\n\n        rules.forEach((rule) => { // we only want rules that make a field hidden\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                flogger(`Rule failed for form ${formId} with field ${field.displayName} with message ${response.message}`);\n                result.ruleFailed = true;\n                result.message = response.message;\n            }\n        });\n        return result;\n    }\n\n    public valueChanged(formId: string, field: FieldDefinition, newValue: string | null): void {\n        logger(`Handling field change - form ${formId}, data field ${field.id}, value ${newValue}`);\n        // a field we are listening to has changed\n        // which rules apply?\n        const rules: _ValidationRule[] = this.getRulesForFieldChange(formId, field.id,true);\n        // execute each rule and collect the responses\n        let failedResponses: RuleResponse[] = [];\n\n        rules.forEach((rule) => {\n            let response: RuleResponse = this.executeRule(rule);\n            if (response.ruleFailed) {\n                failedResponses.push(response);\n            }\n        });\n\n        logger(`Have ${failedResponses.length} failed rules - applying each`);\n        // for each failed response let the target field know based on the response type\n        failedResponses.forEach((response) => {\n            switch (response.response) {\n                case ConditionResponse.hide: {\n                    logger(`Apply hide ${response.field.getId()}`);\n                    response.field.hide();\n                    break;\n                }\n                case ConditionResponse.show: {\n                    logger(`Apply show ${response.field.getId()}`);\n                    response.field.show();\n                    break;\n                }\n                case ConditionResponse.invalid: {\n                    logger(`Apply invalid ${response.field.getId()}`);\n                    if (response.message) response.field.setInvalid(response.message);\n                    break;\n                }\n                case ConditionResponse.valid: {\n                    logger(`Apply valid ${response.field.getId()}`);\n                    response.field.setValid();\n                    break;\n                }\n            }\n        })\n    }\n\n\n}","import {Form} from \"./Form\";\nimport {FormEvent, FormEventType, FormListener} from \"./FormListener\";\nimport {FieldListener} from \"./field/FieldListener\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {AttributeFieldMapItem, DisplayOrder, FieldUIConfig, FormUIDefinition} from \"./FormUITypeDefs\";\nimport {Field} from \"./field/Field\";\n\nimport debug from 'debug';\nimport {RuleCheck, ValidationManager} from \"./validation/ValidationManager\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\nimport {ConditionResponse} from \"./validation/ValidationTypeDefs\";\nimport {v4} from \"uuid\";\n\nconst logger = debug('abstract-form');\nconst dlogger = debug('abstract-form-detail');\nconst vlogger = debug('abstract-form-detail-validation');\n\n\nexport abstract class AbstractForm implements Form,FormListener,AlertListener,FieldListener{\n    protected formListeners: FormListener[] = [];\n    protected fieldListeners: FieldListener[] = [];\n    protected currentDataObj: any;\n    protected dataObjDef: DataObjectDefinition;\n    protected containerEl: HTMLElement|null;\n    protected uiDef: FormUIDefinition | null = null;\n    protected isVisible: boolean = false;\n    protected fields:Field[] = [];\n    protected map:AttributeFieldMapItem[];\n    protected isInitialised:boolean = false;\n    protected hasChangedBoolean:boolean = false;\n    protected isDisplayOnly:boolean = false;\n    protected id:string;\n\n\n    protected constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        this.containerEl = document.getElementById(containerId);\n        if (!(this.containerEl)) throw new Error (`container ${containerId} for form ${dataObjDef.id} does not exist`);\n\n        this.map = [];\n        this.dataObjDef = dataObjDef;\n        this.currentDataObj = {};\n        this.id = v4();\n        // sub-classes need to create the form and it's fields\n\n        // listen to ourselves\n        this.addFormListener(this);\n    }\n\n    public hasChanged():boolean {\n        return this.hasChangedBoolean;\n    }\n\n    getName(): string {\n        return  this.dataObjDef.displayName;\n    }\n\n    valueChanged(formId: String, field: FieldDefinition, newValue: string | null): void {\n        this.hasChangedBoolean = true;\n        this.setUnsavedMessage();\n        logger(`Form has changed`);\n    }\n\n    failedValidation(formId: String, field: FieldDefinition, currentValue: string, message: string): void {\n        this.hasChangedBoolean = true;\n        logger(`Form has changed`);\n    }\n\n    /* methods to be implemented in the subclass */\n    protected abstract _startUpdate():void;\n    protected abstract _startCreate():void;\n    protected abstract _reset():void;\n    protected abstract _visible():void;\n    protected abstract _hidden():void;\n    protected abstract _initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean):void;\n    protected abstract _displayOnly():void;\n    protected abstract _isSameObjectAsDisplayed(dataObj:any):boolean;\n\n    protected abstract setFieldValueToDataObject(dataObj:any,field:Field,currentValue:string|null):void;\n    public abstract getFormattedDataObject(): any;\n    protected abstract _saveFinishedOrAborted():void;\n    protected abstract _saveIsActive():void;\n\n\n    public initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): void {\n        if (this.isInitialised) return;\n        this.isInitialised = true;\n        this._initialise(displayOrder,hasDeleteButton,hideModifierFields);\n    }\n\n\n    public addFieldListener(listener: FieldListener): void {\n        this.fieldListeners.push(listener);\n    }\n\n    public addFormListener(listener: FormListener): void {\n        this.formListeners.push(listener);\n    }\n\n    protected abstract clearUnsavedMessage():void;\n\n    protected abstract setUnsavedMessage():void;\n\n\n\n    protected informFormListeners(formEvent: FormEvent, dataObj?: any) {\n        this.formListeners.forEach((listener) => listener.formChanged(formEvent, dataObj));\n    }\n\n    protected findFieldUiConfig(fieldDef:FieldDefinition):FieldUIConfig|null|undefined {\n        dlogger(`Finding field UI Config for field ${fieldDef.displayName}`);\n        let result:FieldUIConfig|null|undefined = null;\n        if (this.uiDef) {\n            let index = 0;\n            while (index < this.uiDef.fieldGroups.length) {\n                const fieldGroup = this.uiDef.fieldGroups[index];\n                result = fieldGroup.fields.find((uiConfig) => uiConfig.field.id === fieldDef.id);\n                if (result) {\n                    dlogger(`Finding field UI Config for field ${fieldDef.displayName} - Found`);\n                    break;\n                }\n                index ++;\n            }\n        }\n        return result;\n    }\n\n\n    public reset(): void {\n        logger(`Resetting form`);\n        this.clearUnsavedMessage();\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n\n        // inform the listeners\n        if (this.uiDef) {\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: FormEventType.RESETTING\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.currentDataObj = {};\n        this._reset();\n        // reset all the fields\n        this.fields.forEach((field) => {\n            field.reset();\n        });\n        this.hasChangedBoolean = false;\n    }\n\n    public setIsVisible(isVisible: boolean): void {\n        logger(`Changing visibility to ${isVisible}`);\n        this.isVisible = isVisible;\n        if (this.uiDef) {\n            let eventType = FormEventType.HIDDEN;\n            if (this.isVisible) {\n                this._visible();\n                eventType = FormEventType.SHOWN;\n            }\n            else {\n                this._hidden();\n            }\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        if (isVisible && !this.isDisplayOnly) this.checkFormValidationOnDisplay();\n        if (isVisible && this.isDisplayOnly) this.checkForVisualValidationForDisplayOnly();\n    }\n\n    protected checkForVisualValidationForDisplayOnly() {\n        logger(`Checking display validation for display only`);\n        this.fields.forEach((field) => {\n            field.show();\n            // @ts-ignore\n            let response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.hide);\n            if (response.ruleFailed) {\n                // @ts-ignore\n                field.hide();\n                vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n            }\n\n        });\n    }\n\n    protected checkFormValidationOnDisplay() {\n        logger(`Checking display validation`);\n\n        this.fields.forEach((field) => {\n            field.show();\n            const currentValue = field.getValue();\n            if (!field.isValid()) {\n                logger(`Field ${field.getId()} is invalid`);\n                field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n            } else {\n                // does the field fulfil any rules from the Validation manager\n                // @ts-ignore\n                let response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.setInvalid(response.message);\n                    vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                }\n                // @ts-ignore\n                response = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.hide);\n                if (response.ruleFailed) {\n                    // @ts-ignore\n                    field.hide();\n                    vlogger(`Field ${field.getId()} is hidden from validation manager with message ${response.message}`);\n                }\n            }\n        });\n\n    }\n\n    public startCreateNew(): any {\n        this.clearUnsavedMessage();\n        logger(`Starting create new`);\n        this.reset();\n        this.currentDataObj = {};\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        if (this.uiDef) {\n            let eventType = FormEventType.CREATING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startCreate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n        return this.currentDataObj;\n    }\n\n\n    public startUpdate(objectToEdit: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting modify existing on `);\n        this.isDisplayOnly = false;\n        this.hasChangedBoolean = false;\n        logger(objectToEdit);\n        this.currentDataObj = {...objectToEdit}; // take a copy\n\n        if (this.uiDef) {\n            let eventType = FormEventType.MODIFYING;\n            // inform the listeners\n            let formEvent: FormEvent = {\n                formId: this.id,\n                target: this,\n                eventType: eventType\n            }\n            this._startUpdate();\n            this.informFormListeners(formEvent, this.currentDataObj);\n        }\n        this.clearReadOnly();\n    }\n\n    displayOnly(objectToView: any): void {\n        this.clearUnsavedMessage();\n        logger(`Starting display only `);\n        logger(objectToView);\n        this.isDisplayOnly = true;\n        this.hasChangedBoolean = false;\n        this.currentDataObj = {...objectToView}; // take a copy\n\n        if (this.uiDef) {\n            this._displayOnly();\n        }\n        this.setReadOnly();\n    }\n\n\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        let shouldCancelChange = false;\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                if (this.hasChangedBoolean && !this.isDisplayOnly) {\n                    if (this.uiDef) {\n                        AlertManager.getInstance().startAlert(this, this.uiDef.displayName, `Lose any unsaved changes?`, FormEventType.CANCELLING);\n                    }\n                }\n                else {\n                    if (this.uiDef) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent, this.currentDataObj);\n                    }\n                }\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                // user cancelled the form, will become invisible\n                this.isDisplayOnly = true;\n                this.reset(); // reset the form state\n                this.setReadOnly();\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                if (this.uiDef) {\n                    AlertManager.getInstance().startAlert(this, this.uiDef.displayName,`Are you sure you want to delete this information?`,FormEventType.DELETING);\n                }\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                // user is deleting the object, will become invisible\n                this.reset();\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                this._saveFinishedOrAborted();\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                this._saveFinishedOrAborted();\n                logger(`Form is saved with data`);\n                logger(formValues);\n                this.isDisplayOnly = false;\n                this.hasChangedBoolean = false;\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving, checking validation and storing values`);\n                this._saveIsActive();\n                if (this.uiDef) {\n                    let allFieldsValid: boolean = true;\n\n                    // user attempting to save the form, lets check the field validation\n                    this.fields.forEach((field) => {\n                        const currentValue = field.getValue();\n                        if (!field.isValid()) {\n                            vlogger(`Field ${field.getId()} is invalid`);\n                            field.setInvalid(`${field.getName()} has an invalid format or is required.`);\n                            allFieldsValid = false;\n                        } else {\n                            // does the field fulfil any rules from the Validation manager\n                            // @ts-ignore\n                            const response: RuleCheck = ValidationManager.getInstance().applyRulesToTargetField(this.id, field.getFieldDefinition(),ConditionResponse.invalid);\n                            if (response.ruleFailed) {\n                                // @ts-ignore\n                                field.setInvalid(response.message);\n                                vlogger(`Field ${field.getId()} is invalid from validation manager with message ${response.message}`);\n                                allFieldsValid = false;\n                            } else {\n                                this.setFieldValueToDataObject(this.currentDataObj, field, currentValue);\n                            }\n                        }\n                    });\n\n                    // is every field valid?\n                    if (!allFieldsValid) {\n                        logger(`Form is saving, checking validation - FAILED`);\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                        shouldCancelChange = true;\n                    } else {\n                        logger(`formatted data object is`);\n                        const formattedDataObject = this.getFormattedDataObject();\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.SAVED\n                        }\n                        this.informFormListeners(formEvent, formattedDataObject);\n                    }\n                    break;\n                }\n            }\n        }\n        return shouldCancelChange;\n    }\n\n\n    getId(): string {\n        return this.id;\n    }\n\n    getFieldFromDataFieldId(dataFieldId:string): Field | undefined {\n        let result:Field|undefined = undefined;\n        dlogger(`Finding field for attribute ${dataFieldId} `);\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === dataFieldId);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId}`);\n            // find the field with that id\n           result = this.fields.find((field) => field.getId() === mapItem.attributeId);\n        }\n\n        return result;\n    }\n\n    completed(event:AlertEvent): void {\n        logger(`Handling alert completed`);\n        logger(event);\n        if (event.context && this.uiDef) {\n            switch(event.context) {\n                case (FormEventType.CANCELLING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.CANCELLING_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n                case (FormEventType.DELETING): {\n                    if (event.outcome === AlertType.confirmed) {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    else {\n                        let formEvent: FormEvent = {\n                            formId: this.id,\n                            target: this,\n                            eventType: FormEventType.DELETE_ABORTED\n                        }\n                        this.informFormListeners(formEvent,this.currentDataObj);\n                    }\n                    break;\n                }\n            }\n\n        }\n    }\n\n    clearReadOnly(): void {\n        this.fields.forEach((field) => {\n           field.clearReadOnly();\n        });\n    }\n\n\n    setReadOnly(): void {\n        this.fields.forEach((field) => {\n            field.setReadOnly();\n        });\n    }\n\n\n    isDisplayingItem(dataObj: any): boolean {\n        if (this.currentDataObj) {\n            return this._isSameObjectAsDisplayed(dataObj);\n        }\n        return false;\n    }\n\n    isReadOnly(): boolean {\n        return this.isDisplayOnly;\n    }\n\n\n\n\n\n}","import moment from \"moment\";\nimport {v4} from 'uuid';\nimport Controller from \"../../Controller\";\nimport {FieldFormatter, FieldValidator, ValidationResponse} from \"../form/FormUITypeDefs\";\nimport {FieldDefinition, FieldType, FieldValueGenerator} from \"../../model/DataObjectTypeDefs\";\nimport debug from 'debug';\nimport {KeyType} from \"../ConfigurationTypes\";\n\nconst flogger = debug('basic-field-operations-formatter');\nconst vlogger = debug('basic-field-operations-validator');\nconst glogger = debug('basic-field-operations-generator');\nconst rlogger = debug('basic-field-operations-renderer');\n\ntype FieldNameValue = {\n    id: string,\n    value: string\n}\n\nexport class RBGFieldOperations implements FieldFormatter, FieldValidator, FieldValueGenerator {\n    private radioButtons:HTMLInputElement[] = [];\n\n    public constructor() {}\n\n\n\n\n    // called when saving, change to final values\n    formatValue(field: FieldDefinition, currentValue: string): any {\n        flogger(`Handling format value for RBG ${field.displayName} with value ${currentValue}`);\n        let result:any = currentValue;\n        // find the current selected radio button\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.checked) {\n                result = radioButton.value;\n                if (field.idType === KeyType.number) {\n                    result = parseInt(result);\n                }\n            }\n        });\n\n        flogger(`Handling format value for field ${field.displayName} with value ${currentValue} - result is ${result}`);\n        return result;\n    }\n\n    isValidValue(field: FieldDefinition, currentValue: string | null): ValidationResponse {\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue}`);\n        let response: ValidationResponse = {\n            isValid: false,\n            resetOnFailure: false\n        }\n\n        // basics first, is the field mandatory?\n        if (field.mandatory) {\n            this.radioButtons.forEach((radioButton) => {\n                if (radioButton.checked) {\n                    response.isValid = true;\n                }\n            });\n            if (!response.isValid) {\n                response.message = `${field.displayName} is required. Please select one of the values.`;\n                vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n                return response;\n            }\n        }\n        else {\n            response.isValid = true;\n        }\n        // ok, so we have some content, we need to check if the value is a valid format with regular expressions\n        vlogger(`Handling is valid value for field ${field.displayName} with value ${currentValue} - is valid is ${response.isValid} with message ${response.message}`);\n        return response;\n    }\n\n    renderValue(field: FieldDefinition, currentValue: string): string | null {\n        rlogger(`Rendering value for field ${field.displayName} with new value ${currentValue}`);\n        this.radioButtons.forEach((radioButton) => {\n            if (radioButton.value === currentValue) radioButton.checked = true;\n        });\n        return null;\n    }\n\n\n    generate(field: FieldDefinition, isCreate: boolean): string {\n        return '';\n    }\n\n    setSubElements(elements: HTMLInputElement[]): void {\n        this.radioButtons = elements;\n    }\n\n\n\n}","import {BasicFieldOperations} from \"../../model/BasicFieldOperations\";\nimport {DataObjectDefinition, FieldType} from \"../../model/DataObjectTypeDefs\";\nimport {DisplayOrder, FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../form/FormUITypeDefs\";\n\nimport debug from 'debug';\nimport {RBGFieldOperations} from \"./RBGFieldOperations\";\nimport {FIELD_CreatedOn, FIELD_ModifiedOn} from \"../../model/BasicObjectDefinitionFactory\";\n\nconst logger = debug('bootstrap-form-config-helper');\n\nexport class BootstrapFormConfigHelper {\n\n    private static _instance: BootstrapFormConfigHelper;\n\n    public static getInstance(): BootstrapFormConfigHelper {\n        if (!(BootstrapFormConfigHelper._instance)) {\n            BootstrapFormConfigHelper._instance = new BootstrapFormConfigHelper();\n        }\n        return BootstrapFormConfigHelper._instance;\n    }\n\n    private constructor() {\n    }\n\n\n\n    public generateFormConfig(dataObjDef: DataObjectDefinition,displayOrders:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): FormUIDefinition {\n        let fieldOperations: BasicFieldOperations = new BasicFieldOperations();\n        let rbgFieldOperation:RBGFieldOperations = new RBGFieldOperations();\n\n        // create the Field UI config for each field\n        let fieldUIConfigs: FieldUIConfig[] = [];\n        dataObjDef.fields.forEach((fieldDef,index) => {\n\n            let fieldType: UIFieldType = UIFieldType.text;\n            switch (fieldDef.type) {\n                case (FieldType.time):\n                case (FieldType.text):\n                case (FieldType.date):\n                case (FieldType.shortTime):\n                case (FieldType.duration):{\n                    break;\n                }\n                case (FieldType.datetime): {\n                    // is this the created or modified date\n                    if (hideModifierFields) {\n                        if (fieldDef.id === FIELD_CreatedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                        if (fieldDef.id === FIELD_ModifiedOn) {\n                            fieldType = UIFieldType.hidden;\n                        }\n                    }\n                    break;\n                }\n                case (FieldType.userId): {\n                    if (hideModifierFields) {\n                        fieldType = UIFieldType.hidden;\n                    }\n                    else {\n                        fieldType = UIFieldType.text;\n                    }\n                    break;\n                }\n                case (FieldType.uuid):\n                case (FieldType.id): {\n                    fieldType = UIFieldType.hidden;\n                    break;\n                }\n                case (FieldType.integer):\n                case (FieldType.float): {\n                    fieldType = UIFieldType.number;\n                    break;\n                }\n                case (FieldType.email): {\n                    fieldType = UIFieldType.email;\n                    break;\n                }\n                case (FieldType.password): {\n                    fieldType = UIFieldType.password;\n                    break;\n                }\n                case (FieldType.boolean): {\n                    fieldType = UIFieldType.checkbox;\n                    break;\n                }\n                case (FieldType.largeText): {\n                    fieldType = UIFieldType.textarea;\n                    break;\n                }\n                case (FieldType.choice): {\n                    fieldType = UIFieldType.select;\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    fieldType = UIFieldType.radioGroup;\n                    break;\n                }\n            }\n\n            // see if the field was supplied with a display order\n            const displayOrder:DisplayOrder|undefined = displayOrders.find((value) => value.fieldId === fieldDef.id);\n            let displayOrderValue:number = index;\n            if (displayOrder) {\n                displayOrderValue = displayOrder.displayOrder;\n            }\n\n            // construct the field ui config\n            let fieldUIConfig: FieldUIConfig = {\n                field: fieldDef,\n                displayOrder:displayOrderValue,\n                elementType: fieldType,\n                elementClasses: 'form-control col-sm-9',\n                renderer: fieldOperations,\n                formatter: fieldOperations,\n            }\n\n            if ((fieldDef.type !== FieldType.id) && (fieldDef.type !== FieldType.uuid) && (fieldType !== UIFieldType.hidden)) { // no labels, descriptions, container for id,uuid\n                fieldUIConfig.containedBy = {\n                    elementType: 'div',\n                    elementClasses: 'form-group row'\n                };\n\n                fieldUIConfig.label = {\n                    label: fieldDef.displayName,\n                    classes: 'col-md-12 col-lg-3 col-form-label'\n                };\n                if (fieldDef.description) { // descriptions if the field has one\n                    fieldUIConfig.describedBy = {\n                        message: fieldDef.description,\n                        elementType: 'small',\n                        elementClasses: 'text-muted col-md-12 col-lg-9 offset-lg-3 mt-1'\n                    }\n                }\n                if (!fieldDef.displayOnly) { // no validator for readonly items\n                    fieldUIConfig.validator = {\n                            validator: fieldOperations,\n                            messageDisplay: {\n                            elementType: 'div',\n                            elementClasses: 'invalid-feedback col-md-12 col-lg-9 offset-lg-3'\n                        },\n                        validClasses: 'is-valid',\n                        invalidClasses: 'is-invalid',\n                    };\n                }\n            }\n\n            // text areas\n            if (fieldDef.type === FieldType.largeText) {\n                fieldUIConfig.textarea = {\n                    rows: 5,\n                    cols: 20\n                }\n            }\n            // select\n            if (fieldDef.type === FieldType.choice) { // subelements are options, with no classes, no labels, and no other container\n                fieldUIConfig.subElement = {\n                    element: {elementType: 'option', elementClasses: ''},\n                };\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n            // radio button group\n            if (fieldDef.type === FieldType.limitedChoice) {\n                fieldUIConfig.subElement = {\n                    element: {\n                        elementType: 'input',\n                        elementClasses: 'form-check-input',\n                        elementAttributes: [{name: 'type', value: 'radio'}]\n                    },\n                    container: {\n                        elementType: 'div',\n                        elementClasses: 'form-check form-check-inline'\n                    },\n                    label: {\n                        label: 'label',\n                        classes: 'form-check-label',\n                    },\n                }\n                fieldUIConfig.renderer = rbgFieldOperation;\n                if (fieldUIConfig.validator) fieldUIConfig.validator.validator = rbgFieldOperation;\n                fieldUIConfig.formatter = rbgFieldOperation;\n\n                fieldUIConfig.datasource = fieldDef.dataSource;\n            }\n\n\n            fieldUIConfigs.push(fieldUIConfig);\n        });\n        // create a form with a single group and button container with Bootstrap styles\n        const fieldGroup: FieldGroup = {\n            containedBy: {\n                elementType: 'div',\n                elementClasses: 'col-sm-12',\n            },\n            fields: fieldUIConfigs\n        }\n\n        const formConfig: FormUIDefinition = {\n            id: dataObjDef.id,\n            displayName: dataObjDef.displayName,\n            fieldGroups: [fieldGroup],\n            unsavedChanges: {\n                elementType: 'div',\n                elementClasses: 'invalid-feedback text-right col-md-12 col-lg-9 offset-lg-3',\n                elementAttributes: [{name:'style',value:'display:block'}],\n                innerHTML: `Pending changes to ${dataObjDef.displayName}`,\n            },\n            buttonsContainedBy: {\n                elementType: 'div',\n                elementClasses: 'd-flex w-100 justify-space-between',\n            },\n            cancelButton: {\n                buttonText: 'Cancel  ',\n                buttonClasses: 'btn-info rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-ban'\n            },\n            submitButton: {\n                buttonText: 'Save  ',\n                buttonClasses: 'btn-primary rounded p-1 mt-2 w-100',\n                iconClasses: 'fas fa-save'\n            },\n            activeSave:'<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>&nbsp;',\n        }\n        // sort the fields into display order\n\n        formConfig.fieldGroups.forEach((group) => {\n            group.fields.sort((a,b) => { return (a.displayOrder - b.displayOrder);})\n\n        });\n\n        if (hasDeleteButton) {\n            formConfig.deleteButton = {\n                buttonText: 'Delete  ',\n                buttonClasses: 'btn-warning rounded p-1 mr-2 mt-2 w-100',\n                iconClasses: 'fas fa-trash-alt'\n            };\n\n        }\n\n\n        logger(formConfig);\n        return formConfig;\n    }\n}","import {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class ValidationEventHandler {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    public setValidationStatusAndMessage(fieldElement:HTMLElement,isValid:boolean, value:string, message:string|undefined = undefined,resetOnFailure:boolean = false) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            let validationElementTarget = fieldElement; // we are providing user feedback on the field element, unless...\n            if (this.subElements) { // sub elements change the validation target\n                this.fieldConfig.validator.validator.setSubElements(this.subElements);\n                if (this.fieldConfig.subElement) { // should be targetting the parentelement\n                    let parentEl = fieldElement.parentElement;\n                    if (parentEl) {\n                        validationElementTarget = parentEl;\n                        if (this.fieldConfig.subElement.container) { // another layer up required\n                            parentEl = parentEl.parentElement;\n                            if (parentEl) {\n                                validationElementTarget = parentEl;\n                            }\n                        }\n                    }\n                }\n            }\n            const errorMessageDiv = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error`);\n            const errorMessageEl = document.getElementById(`${this.formId}.field.${this.fieldConfig.field.id}.error.message`);\n\n            // clear any previous message\n            errorMessageDiv?.setAttribute('style', 'display:none');\n            if (errorMessageEl) errorMessageEl.innerHTML = '';\n\n            if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses, false);\n            if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses);\n\n            if (!isValid) {\n                if (this.fieldConfig.validator.invalidClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.invalidClasses);\n                if (this.fieldConfig.validator.validClasses) browserUtil.addRemoveClasses(validationElementTarget, this.fieldConfig.validator.validClasses, false);\n\n                if (!message) {\n                    message = `${field.displayName} does not have a valid value.`;\n                }\n                // show the error message\n                errorMessageDiv?.setAttribute('style', 'display:block')\n                if (errorMessageEl) errorMessageEl.innerHTML = message;\n\n                if (resetOnFailure) {\n                    switch (field.type) {\n                        case (FieldType.boolean): {\n                            // @ts-ignore\n                            fieldElement.checked = false;\n                            break;\n                        }\n                        case (FieldType.integer): {\n                            // @ts-ignore\n                            fieldElement.value = '0';\n                            break;\n                        }\n                        case (FieldType.float): {\n                            // @ts-ignore\n                            fieldElement.value = '0.0';\n                            break;\n                        }\n                        default: {\n                            // @ts-ignore\n                            fieldElement.value = '';\n                            break;\n                        }\n                    }\n                }\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.failedValidation(this.formId,field, value, message));\n            }\n        }\n\n    }\n\n    processValidation(fieldElement:HTMLElement) {\n        if (this.fieldConfig.validator && fieldElement) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            // @ts-ignore\n            let value: string = fieldElement.value;\n            // checkboxes store values differently\n            if (this.fieldConfig.elementType === UIFieldType.checkbox) { // @ts-ignore\n                value = '' + fieldElement.checked;\n            }\n            if (this.subElements) {\n                value = '';\n                this.subElements.forEach((subElement) => {\n                    if (subElement.checked) {\n                        value = subElement.value;\n                    }\n\n                });\n            }\n\n            const validationResp: ValidationResponse = this.fieldConfig.validator.validator.isValidValue(field, value);\n            this.setValidationStatusAndMessage(fieldElement,validationResp.isValid,value,validationResp.message,validationResp.resetOnFailure);\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processValidation(fieldElement);\n\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class EditingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n\n    constructor(formId:string,fieldConfig:FieldUIConfig,listeners:FieldListener[]) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        if (this.fieldConfig.editor) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            const newValue: string = this.fieldConfig.editor.editValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                this.listeners.forEach((listener) => listener.valueChanged(this.formId,field, newValue));\n\n            }\n        }\n    }\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {DATA_ID_ATTRIBUTE, FieldUIConfig, UIFieldType} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {EditingEventListener} from \"../event-handlers/EditingEventListener\";\nimport {FieldValueOptionsListener, ValueOption} from \"../../../model/CommonTypes\";\nimport {FieldType} from \"../../../model/DataObjectTypeDefs\";\n\nclass DefaultFieldOptionsListener implements FieldValueOptionsListener {\n    private formId: string;\n    private parentElement: HTMLElement;\n    private fieldUIConfig: FieldUIConfig;\n\n    constructor(formId: string, parentElement: HTMLElement, fieldUIConfig: FieldUIConfig) {\n        this.formId = formId;\n        this.parentElement = parentElement;\n        this.fieldUIConfig = fieldUIConfig;\n    }\n\n    optionsChanged(newOptions: ValueOption[]): void {\n        browserUtil.removeAllChildren(this.parentElement);\n        let subEls: HTMLElement[] = FieldInputElementFactory.createSubElements(this.formId, this.parentElement, this.fieldUIConfig, newOptions);\n\n    }\n\n}\n\nexport class FieldInputElementFactory {\n\n    private static _instance: FieldInputElementFactory;\n\n    public static getInstance(): FieldInputElementFactory {\n        if (!(FieldInputElementFactory._instance)) {\n            FieldInputElementFactory._instance = new FieldInputElementFactory();\n        }\n        return FieldInputElementFactory._instance;\n    }\n\n    private constructor() {\n    }\n\n    public static initialiseFieldElementAndEventHandlers(fieldElement: HTMLElement, formId: string, fieldConfig: FieldUIConfig, listeners: FieldListener[], subElements:HTMLInputElement[]|null = null):void {\n        fieldElement.setAttribute('id', `${formId}.field.${fieldConfig.field.id}`);\n        fieldElement.setAttribute(DATA_ID_ATTRIBUTE, fieldConfig.field.id);\n        fieldElement.setAttribute('name', fieldConfig.field.id);\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(fieldElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(fieldElement, fieldConfig.elementClasses);\n\n        // readonly field?\n        if (fieldConfig.field.displayOnly) {\n            browserUtil.addAttributes(fieldElement, [{name: 'disabled', value: 'true'}, {\n                name: 'readonly',\n                value: 'true'\n            }])\n        }\n        /*\n        setup event handlers\n        */\n        if (fieldConfig.validator) { // is the value in the field valid\n            const eventHandler = new ValidationEventHandler(formId, fieldConfig, listeners,subElements);\n            if (subElements) { // event for the subelements\n                subElements.forEach((subElement) => {\n                   subElement.addEventListener('blur',eventHandler);\n                });\n\n            }\n            else {\n                fieldElement.addEventListener('blur', eventHandler);\n            }\n\n        }\n\n        if (fieldConfig.editor) { // render the value when the field gains focus\n            fieldElement.addEventListener('focus', new EditingEventListener(formId, fieldConfig, listeners));\n        } // care for endless loops here, renderer needs to return null if no changes\n\n        // date picker for date fields\n        if (fieldConfig.field.type === FieldType.date) {\n            $(fieldElement).datepicker( );\n            $(fieldElement).datepicker( \"option\", \"dateFormat\",'dd/mm/yy' );\n        }\n\n    }\n\n\n    public static createFieldComponentsAndContainer(fieldElement: HTMLElement, formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): void {\n\n        // if the field has a validator, then we need a div for error messages\n        let errorMessageDivEl: HTMLElement | null = null;\n\n        if (fieldConfig.validator) {\n            errorMessageDivEl = document.createElement('div');\n            errorMessageDivEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error`);\n            errorMessageDivEl.setAttribute('style', 'display: none'); // default to not visible\n            browserUtil.addRemoveClasses(errorMessageDivEl, fieldConfig.validator.messageDisplay.elementClasses);\n            let messageEl = document.createElement(fieldConfig.validator.messageDisplay.elementType);\n            if (messageEl) {\n                messageEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.error.message`);\n                if (fieldConfig.validator.messageDisplay.elementAttributes) browserUtil.addAttributes(messageEl, fieldConfig.validator.messageDisplay.elementAttributes);\n                errorMessageDivEl.appendChild(messageEl);\n            }\n        }\n\n\n        // ok, so is the field contained?\n        if (fieldConfig.containedBy) {\n            // we need to create a container for the field and option label and description text\n            let containedByEl = document.createElement(fieldConfig.containedBy.elementType);\n            if (containedByEl) {\n                browserUtil.addRemoveClasses(containedByEl, fieldConfig.containedBy.elementClasses);\n                containedByEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.container`);\n\n                if (fieldConfig.containedBy.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.containedBy.elementAttributes);\n                // do we have a label also?\n                if (fieldConfig.label) {\n                    let labelEl: HTMLLabelElement = document.createElement('label');\n                    labelEl.setAttribute('for', `${formId}.field.${fieldConfig.field.id}`);\n                    labelEl.innerHTML = fieldConfig.field.displayName;\n                    if (fieldConfig.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.label.attributes);\n                    if (fieldConfig.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.label.classes);\n                    containedByEl.appendChild(labelEl);\n                }\n                if (fieldConfig.describedBy) {\n                    let descEl: HTMLElement = document.createElement(fieldConfig.describedBy.elementType);\n                    if (descEl) {\n                        // link the field and the description\n                        descEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.field.description) descEl.innerHTML = fieldConfig.field.description;\n                        fieldElement.setAttribute('aria-describedby', `${formId}.field.${fieldConfig.field.id}.desc`);\n                        if (fieldConfig.describedBy.elementClasses) browserUtil.addRemoveClasses(descEl, fieldConfig.describedBy.elementClasses);\n                        containedByEl.appendChild(fieldElement);\n                        containedByEl.appendChild(descEl);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    } else { // description failure, add the field\n                        containedByEl.appendChild(fieldElement);\n                        if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                    }\n                } else { // no description, add field to container\n                    containedByEl.appendChild(fieldElement);\n                    if (errorMessageDivEl) containedByEl.appendChild(errorMessageDivEl);\n                }\n                containerEl.appendChild(containedByEl);\n            } else { // errors should keep making something!\n                containerEl.appendChild(fieldElement);\n                if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n            }\n        } else {\n            containerEl.appendChild(fieldElement);\n            if (errorMessageDivEl) containerEl.appendChild(errorMessageDivEl);\n        }\n\n    }\n\n    public createInputFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLInputElement { // return the input element\n        let fieldElement: HTMLInputElement = document.createElement('input');\n\n        switch (fieldConfig.elementType) {\n            case UIFieldType.checkbox: {\n                fieldElement.setAttribute('type', 'checkbox');\n                fieldElement.setAttribute('value', fieldConfig.field.id);\n                break;\n            }\n            case UIFieldType.email: {\n                fieldElement.setAttribute('type', 'email');\n                break;\n            }\n            case UIFieldType.hidden: {\n                fieldElement.setAttribute('type', 'hidden');\n                break;\n            }\n            case UIFieldType.number: {\n                fieldElement.setAttribute('type', 'number');\n                break;\n            }\n            case UIFieldType.password: {\n                fieldElement.setAttribute('type', 'password');\n                break;\n            }\n            case UIFieldType.text: {\n                fieldElement.setAttribute('type', 'text');\n                break;\n            }\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createTAFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLTextAreaElement { // return the input element\n        let fieldElement: HTMLTextAreaElement = document.createElement('textarea');\n        if (fieldConfig.textarea) {\n            fieldElement.setAttribute('rows', `${fieldConfig.textarea.rows}`);\n            fieldElement.setAttribute('cols', `${fieldConfig.textarea.cols}`);\n        }\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public static createSubElements(formId: string, parentEl: HTMLElement, fieldConfig: FieldUIConfig, valueOptions: ValueOption[]): HTMLElement[] {\n        let results: HTMLElement[] = [];\n\n        valueOptions.forEach((valueOption, index) => {\n            if (fieldConfig.subElement) {\n                let containerEl: HTMLElement = parentEl;\n                // is there a container?\n                if (fieldConfig.subElement.container) {\n                    containerEl = document.createElement(fieldConfig.subElement.container.elementType);\n                    browserUtil.addRemoveClasses(containerEl, fieldConfig.subElement.container.elementClasses);\n                    if (fieldConfig.subElement.container.elementAttributes) browserUtil.addAttributes(containerEl, fieldConfig.subElement.container.elementAttributes);\n                    parentEl.appendChild(containerEl);\n                }\n                let valueEl: HTMLElement = document.createElement(fieldConfig.subElement.element.elementType);\n                valueEl.setAttribute('value', valueOption.value);\n                valueEl.setAttribute('id', `${formId}.field.${fieldConfig.field.id}.${index}`);\n                valueEl.setAttribute('name', `${formId}.field.${fieldConfig.field.id}`);\n\n                browserUtil.addRemoveClasses(valueEl, fieldConfig.subElement.element.elementClasses);\n                if (fieldConfig.subElement.element.elementAttributes) browserUtil.addAttributes(valueEl, fieldConfig.subElement.element.elementAttributes);\n\n                containerEl.appendChild(valueEl);\n\n                if (fieldConfig.subElement.label) {\n                    let labelEl = document.createElement('label');\n                    if (fieldConfig.subElement.label.classes) browserUtil.addRemoveClasses(labelEl, fieldConfig.subElement.label.classes);\n                    if (fieldConfig.subElement.label.attributes) browserUtil.addAttributes(labelEl, fieldConfig.subElement.label.attributes);\n                    labelEl.innerHTML = valueOption.name;\n                    containerEl.appendChild(labelEl);\n                } else {\n                    valueEl.innerHTML = valueOption.name;\n                }\n                results.push(valueEl);\n            }\n        });\n        return results;\n    }\n\n    public createSelectFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]): HTMLSelectElement { // return the input element\n        let fieldElement: HTMLSelectElement = document.createElement('select');\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            FieldInputElementFactory.createSubElements(formId, fieldElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, fieldElement, fieldConfig));\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(fieldElement, formId, fieldConfig, listeners);\n        FieldInputElementFactory.createFieldComponentsAndContainer(fieldElement, formId, containerEl, fieldConfig, listeners);\n        return fieldElement;\n    }\n\n    public createRadioGroupFormFieldComponentElement(formId: string, containerEl: HTMLElement, fieldConfig: FieldUIConfig, listeners: FieldListener[]):\n        {\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n        }\n    {\n        // create a div for each option in the source\n        // create the div for the radio group\n        let radioGroupElement: HTMLDivElement = document.createElement('div');\n        if (fieldConfig.elementAttributes) browserUtil.addAttributes(radioGroupElement, fieldConfig.elementAttributes);\n        if (fieldConfig.elementClasses) browserUtil.addRemoveClasses(radioGroupElement, fieldConfig.elementClasses);\n\n        let subElements:HTMLInputElement[] = [];\n        // create the options from the data source\n        if (fieldConfig.datasource) {\n            // we should get the radio buttons back\n            subElements = <HTMLInputElement[]>FieldInputElementFactory.createSubElements(formId, radioGroupElement, fieldConfig, fieldConfig.datasource.getOptions());\n            // listen for data source changes\n            fieldConfig.datasource.addListener(new DefaultFieldOptionsListener(formId, radioGroupElement, fieldConfig));\n            // setup the subelements for the validator, formatter, and renderer\n            if (fieldConfig.validator) fieldConfig.validator.validator.setSubElements(subElements);\n            if (fieldConfig.renderer) fieldConfig.renderer.setSubElements(subElements);\n            if (fieldConfig.formatter) fieldConfig.formatter.setSubElements(subElements);\n        }\n\n        FieldInputElementFactory.initialiseFieldElementAndEventHandlers(radioGroupElement, formId, fieldConfig, listeners,subElements);\n        FieldInputElementFactory.createFieldComponentsAndContainer(radioGroupElement, formId, containerEl, fieldConfig, listeners);\n        return {\n            container:radioGroupElement,\n            radioButtons:subElements\n        };\n\n    }\n\n}","import browserUtil from \"../../../util/BrowserUtil\";\nimport {FieldInputElementFactory} from \"./FieldInputElementFactory\";\nimport {BasicButtonElement} from \"../../ConfigurationTypes\";\nimport {Form} from \"../Form\";\nimport {FieldGroup, FieldUIConfig, FormUIDefinition, UIFieldType} from \"../FormUITypeDefs\";\nimport {FormEvent, FormEventType, FormListener} from \"../FormListener\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport type FormFactoryResponse = {\n    form: HTMLFormElement,\n    unsavedMessage: HTMLElement,\n    fields: HTMLInputElement[],\n    textFields:HTMLTextAreaElement[],\n    selectFields:HTMLSelectElement[],\n    radioButtonGroups: {\n        container:HTMLElement,\n        radioButtons:HTMLInputElement[]\n    }[],\n    deleteButton?: HTMLButtonElement,\n    cancelButton: HTMLButtonElement,\n    submitButton: HTMLButtonElement,\n}\n\nexport class FormElementFactory {\n\n    private static _instance: FormElementFactory;\n\n    public static getInstance(): FormElementFactory {\n        if (!(FormElementFactory._instance)) {\n            FormElementFactory._instance = new FormElementFactory();\n        }\n        return FormElementFactory._instance;\n    }\n\n    private constructor() {}\n\n    private createFormButton(form:Form,formConfig:FormUIDefinition,formListeners:FormListener[],buttonDef:BasicButtonElement,eventType:FormEventType):HTMLButtonElement {\n        let buttonEl:HTMLButtonElement = document.createElement('button');\n        browserUtil.addRemoveClasses(buttonEl,buttonDef.buttonClasses);\n        buttonEl.setAttribute('id',`${formConfig.id}.${eventType}`);\n        if (buttonDef.buttonText) {\n            buttonEl.innerText = buttonDef.buttonText;\n        }\n        if (buttonDef.iconClasses) {\n            let iconEl = document.createElement('i');\n            if (iconEl) {\n                browserUtil.addRemoveClasses(iconEl,buttonDef.iconClasses);\n                buttonEl.appendChild(iconEl);\n            }\n        }\n        /* setup the event handler for the button */\n        buttonEl.addEventListener('click',(event) => {\n            event.preventDefault();\n            event.stopPropagation();\n            let formEvent:FormEvent = {\n                target:form,\n                formId:formConfig.id,\n                eventType:eventType\n            }\n            formListeners.forEach((listener) => listener.formChanged(formEvent));\n        });\n        return buttonEl;\n    }\n\n    public createFormElements(form:Form, formListeners:FormListener[],formConfig:FormUIDefinition,fieldListeners:FieldListener[]):FormFactoryResponse {\n        let formEl:HTMLFormElement = document.createElement('form');\n        formEl.setAttribute('id',formConfig.id);\n        formEl.setAttribute('name',formConfig.displayName);\n\n        if (formConfig.classes) browserUtil.addRemoveClasses(formEl,formConfig.classes);\n        // create each of the fields and collect them\n        let formInputElements:HTMLInputElement[] = [];\n        let formTAElements:HTMLTextAreaElement[] = [];\n        let formRBGElements:{\n            container:HTMLElement,\n            radioButtons:HTMLInputElement[]\n            }[] = [];\n        let formSelectElements:HTMLSelectElement[] = [];\n\n        let unsavedMessage:HTMLElement = document.createElement(formConfig.unsavedChanges.elementType);\n        browserUtil.addRemoveClasses(unsavedMessage,formConfig.unsavedChanges.elementClasses);\n        if (formConfig.unsavedChanges.elementAttributes) browserUtil.addAttributes(unsavedMessage,formConfig.unsavedChanges.elementAttributes);\n\n        formEl.appendChild(unsavedMessage);\n\n        formConfig.fieldGroups.forEach((group:FieldGroup) => {\n            // if the group has a container make that, otherwise the form is the container\n            let containerEl = formEl;\n            if (group.containedBy) {\n                // @ts-ignore\n                containerEl = document.createElement(group.containedBy.elementType);\n                if (containerEl) {\n                    if (group.containedBy.elementAttributes) browserUtil.addAttributes(containerEl,group.containedBy.elementAttributes);\n                    if (group.containedBy.elementClasses) browserUtil.addRemoveClasses(containerEl,group.containedBy.elementClasses);\n                    formEl.appendChild(containerEl);\n                }\n            }\n            group.fields.forEach((field:FieldUIConfig) => {\n                switch (field.elementType) {\n                    case (UIFieldType.textarea): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createTAFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formTAElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.select): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createSelectFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formSelectElements.push(fieldEl);\n                        break;\n                    }\n                    case (UIFieldType.radioGroup): {\n                        const fieldEl = FieldInputElementFactory.getInstance().createRadioGroupFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formRBGElements.push(fieldEl);\n                        break;\n                    }\n                    default: {\n                        const fieldEl = FieldInputElementFactory.getInstance().createInputFormFieldComponentElement(formConfig.id,containerEl,field,fieldListeners);\n                        formInputElements.push(fieldEl);\n                    }\n                }\n            });\n        });\n\n        /* setup the buttons */\n        let buttonContainer:HTMLElement = formEl;\n\n        if (formConfig.buttonsContainedBy) {\n            buttonContainer = document.createElement(formConfig.buttonsContainedBy.elementType);\n            if (buttonContainer) {\n                if (formConfig.buttonsContainedBy.elementAttributes) browserUtil.addAttributes(buttonContainer,formConfig.buttonsContainedBy.elementAttributes);\n                browserUtil.addRemoveClasses(buttonContainer,formConfig.buttonsContainedBy.elementClasses);\n                formEl.appendChild(buttonContainer);\n            }\n            else {\n                buttonContainer = formEl; // couldn't create the button container, use the form\n            }\n        }\n\n        let deleteButtonEl:HTMLButtonElement|undefined = undefined;\n        if (formConfig.deleteButton) {\n            deleteButtonEl = this.createFormButton(form,formConfig,formListeners,formConfig.deleteButton,FormEventType.DELETING);\n            buttonContainer.appendChild(deleteButtonEl);\n        }\n\n        let cancelButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.cancelButton,FormEventType.CANCELLING);\n        buttonContainer.appendChild(cancelButtonEl);\n\n        let submitButtonEl:HTMLButtonElement = this.createFormButton(form,formConfig,formListeners,formConfig.submitButton,FormEventType.SAVING);\n        buttonContainer.appendChild(submitButtonEl);\n\n        let result:FormFactoryResponse = {\n            form: formEl,\n            unsavedMessage:unsavedMessage,\n            fields: formInputElements,\n            selectFields:formSelectElements,\n            radioButtonGroups:formRBGElements,\n            textFields:formTAElements,\n            deleteButton:deleteButtonEl,\n            cancelButton:cancelButtonEl,\n            submitButton:submitButtonEl\n        }\n\n        return result;\n    }\n}","import {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldListener} from \"../field/FieldListener\";\n\nexport class RenderingEventListener {\n    private formId:string;\n    private fieldConfig:FieldUIConfig;\n    private listeners:FieldListener[];\n    private subElements:HTMLInputElement[]|null;\n\n    constructor(formId:string, fieldConfig:FieldUIConfig,listeners:FieldListener[],subElements:HTMLInputElement[]|null = null) {\n        this.formId = formId;\n        this.fieldConfig = fieldConfig;\n        this.listeners = listeners;\n        this.subElements = subElements;\n        this.handleEvent = this.handleEvent.bind(this);\n    }\n\n    processRendering(fieldElement:HTMLInputElement):string{\n        let newValue:string|null = '';\n        if (this.fieldConfig.renderer) {\n            const field: FieldDefinition = this.fieldConfig.field;\n            const value: string = fieldElement.value;\n            if (this.subElements) this.fieldConfig.renderer.setSubElements(this.subElements);\n            newValue = this.fieldConfig.renderer.renderValue(field, value);\n            if (newValue) {\n                fieldElement.value = newValue;\n                // @ts-ignore\n                this.listeners.forEach((listener) => listener.valueChanged(field, newValue));\n            }\n        }\n        if (newValue) {\n            return newValue;\n        }\n        else {\n            return '';\n        }\n    }\n\n    handleEvent(event:Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        // @ts-ignore\n        const fieldElement: HTMLInputElement = event.target;\n\n        this.processRendering(fieldElement);\n\n    }\n}","import {Field} from \"./Field\";\nimport {FieldUIConfig, FieldValidator, UIFieldType, ValidationResponse} from \"../FormUITypeDefs\";\nimport {FieldDefinition, FieldType} from \"../../../model/DataObjectTypeDefs\";\nimport {ValidationEventHandler} from \"../event-handlers/ValidationEventHandler\";\nimport {FieldListener} from \"./FieldListener\";\nimport {RenderingEventListener} from \"../event-handlers/RenderingEventListener\";\n\nimport debug from 'debug';\n\nconst logger = debug('abstract-field');\n\n\nexport class AbstractField implements Field, FieldListener {\n    protected formId: string;\n    protected config: FieldUIConfig | null = null;\n    protected definition: FieldDefinition;\n    protected element: HTMLElement;\n    protected subElements: HTMLInputElement[] = [];\n    protected validationHandler: ValidationEventHandler;\n    protected renderingHandler: RenderingEventListener;\n    protected listeners: FieldListener[] = [];\n    private hidden:boolean = false;\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[] | null = null) {\n        this.formId = formId;\n        this.config = config;\n        this.definition = fieldDef;\n        this.element = element;\n        if (subElements) this.subElements = subElements;\n        this.validationHandler = new ValidationEventHandler(formId, config, [this], subElements);\n        this.renderingHandler = new RenderingEventListener(formId, config, [this], subElements);\n\n        // listen for our own change events\n        this.handleChangeEvent = this.handleChangeEvent.bind(this);\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.addEventListener('change', this.handleChangeEvent);\n            });\n        }\n        else {\n            this.element.addEventListener('change', this.handleChangeEvent);\n        }\n\n    }\n\n    isHidden(): boolean {\n        return this.hidden;\n    }\n\n\n    protected handleChangeEvent(event: Event) {\n        logger(`Handling change event`);\n        if (this.config) {\n            let value: string | null = this.getValue();\n            logger(`Handling change event - informing listeners`);\n            this.listeners.forEach((listener) => listener.valueChanged(this.formId,this.definition, value));\n        }\n    }\n\n    addFieldListener(listener: FieldListener): void {\n        logger(`${this.getName()} - adding listener ${listener.getName()}`);\n        // don't duplicate listeners\n        let index = this.listeners.findIndex((listenerInList) => listenerInList.getName() === listener.getName());\n        if (index < 0) {\n            this.listeners.push(listener);\n        }\n        else {\n            logger(`${this.getName()} - duplicate listener ${listener.getName()} ignored`);\n        }\n\n    }\n\n    getFieldDefinition(): FieldDefinition {\n        return this.definition;\n    }\n\n    setInvalid(message: string): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,false,'',message,false);\n        // @ts-ignore\n        this.listeners.forEach((listener) => listener.failedValidation(this.formId,this.definition,this.getValue(),message));\n    }\n\n    public initialise(): void {\n    }\n\n    getValue(): string | null {\n        let result: string | null = null;\n        if (this.config && this.element) {\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    logger(`${this.definition.id} - getting value - rbg`);\n\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.checked) {\n                                logger(`${this.definition.id} - getting value - rbg - checked ${subElement.value}`);\n                                result = subElement.value;\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    result = '' + this.element.checked;\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    result = this.element.value;\n                    break;\n                }\n            }\n        }\n        logger(`${this.definition.id} - getting value - ${result}`);\n        return result;\n    }\n\n    getFormattedValue(): any | null {\n        let result: any | null = null;\n        if (this.config && this.element) {\n            // @ts-ignore\n            result = this.element.value;\n            if (this.config.elementType === UIFieldType.checkbox) { // @ts-ignore\n                result = '' + this.element.checked;\n            }\n            if (this.config.formatter) {\n                result = this.config.formatter.formatValue(this.definition, result);\n            }\n        }\n        return result;\n    }\n\n    isValid(): boolean {\n        let result = true;\n        if (this.config && this.element) {\n            if (this.config.validator) {\n                if (this.config.validator.validator) {\n                    const validator: FieldValidator = this.config.validator.validator;\n                    const response: ValidationResponse = validator.isValidValue(this.definition, this.getValue());\n                    result = response.isValid;\n                }\n            }\n        }\n        return result;\n    }\n\n    getId(): string {\n        return this.definition.id;\n    }\n\n    setValue(newValue: string): void {\n        newValue = ''+newValue;\n        if (this.element && this.config) {\n            // @ts-ignore\n            switch (this.config.elementType) {\n                case (UIFieldType.radioGroup): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            if (subElement.value === newValue) {\n                                subElement.checked = true;\n                            }\n                        });\n                    }\n                    break;\n                }\n                case (UIFieldType.checkbox): {\n                    // @ts-ignore\n                    this.element.checked = (newValue.toLowerCase() === 'true');\n                    break;\n                }\n                case (UIFieldType.select): {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    const selectEl:HTMLSelectElement = <HTMLSelectElement>this.element;\n                    let selectedIndex = -1;\n                    for (let index = 0;index < selectEl.options.length;index++) {\n                        // @ts-ignore\n                        const option:HTMLOptionElement = selectEl.options.item(index);\n                        logger(`${this.definition.id} - option value - ${option.value}`);\n                        if (option.value === newValue) {\n                            logger(`${this.definition.id} - option value - ${option.value} - SELECTED`);\n                            option.selected = true;\n                            selectedIndex = index;\n                        }\n                    }\n                    logger(`${this.definition.id} - selected index ${selectedIndex}`);\n                    selectEl.selectedIndex = selectedIndex;\n                    break;\n                }\n                default: {\n                    logger(`${this.definition.id} - setting value - ${newValue}`);\n                    // @ts-ignore\n                    this.element.value = newValue;\n                    break;\n                }\n            }\n        }\n    }\n\n    reset(): void {\n        if (this.element) {\n            switch (this.definition.type) {\n                case (FieldType.boolean): {\n                    // @ts-ignore\n                    this.element.checked = false;\n                    break;\n                }\n                case (FieldType.integer): {\n                    // @ts-ignore\n                    this.element.value = '0';\n                    break;\n                }\n                case (FieldType.float): {\n                    // @ts-ignore\n                    this.element.value = '0.0';\n                    break;\n                }\n                case (FieldType.limitedChoice): {\n                    if (this.subElements) {\n                        this.subElements.forEach((subElement) => {\n                            subElement.checked = false;\n                        });\n                    }\n                    break;\n                }\n                default: {\n                    // @ts-ignore\n                    this.element.value = '';\n                    break;\n                }\n            }\n        }\n        this.show();\n    }\n\n    clearValue():void {\n        this.reset();\n    }\n\n    validate(): void {\n        if (this.element) {\n            this.validationHandler.processValidation(this.element);\n        }\n    }\n\n    render(currentValue: string): string {\n        let result = currentValue;\n        if (this.config?.renderer) {\n            let value = this.config.renderer.renderValue(this.definition, currentValue);\n            if (value) result = value;\n        }\n        return result;\n    }\n\n    failedValidation(formId:string, field: FieldDefinition, currentValue: string, message: string): void {}\n    valueChanged(formId:string, field: FieldDefinition, newValue: string | null): void {}\n\n    getName(): string {\n        return this.definition.displayName;\n    }\n\n    hide(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.setAttribute('style','display:none');\n                }\n\n            }\n            else {\n                this.setReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n\n\n    setValid(): void {\n        this.validationHandler.setValidationStatusAndMessage(this.element,true,'');\n    }\n\n    show(): void {\n        /*\n          if we have an enclosing container (per the config) then we can hide\n          otherwise we become readonly and disabled\n         */\n        if (this.config) {\n            if (this.config.containedBy) {\n                const parentEl = this.element.parentElement;\n                if (parentEl) {\n                    parentEl.removeAttribute('style');\n                }\n\n            }\n            else {\n                this.clearReadOnly();\n            }\n        }\n        this.hidden = true;\n    }\n\n    clearReadOnly(): void {\n        if (this.definition.displayOnly) return;\n        this.element.removeAttribute('readonly');\n        this.element.removeAttribute('disabled');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.removeAttribute('readonly');\n                subElement.removeAttribute('disabled');\n            });\n        }\n\n    }\n\n    setReadOnly(): void {\n        this.element.setAttribute('readonly','true');\n        this.element.setAttribute('disabled','true');\n        // do the same for subelements\n        if (this.subElements) {\n            this.subElements.forEach((subElement) => {\n                subElement.setAttribute('readonly','true');\n                subElement.setAttribute('disabled','true');\n            });\n        }\n    }\n}\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\n\nexport class TextAreaField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLTextAreaElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\nexport class RadioButtonGroupField extends AbstractField {\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLElement, subElements: HTMLInputElement[]) {\n        super(formId, config, fieldDef, element, subElements);\n    }\n\n}","import {AbstractField} from \"./AbstractField\";\nimport {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\n\n\n\nexport class SelectField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLSelectElement) {\n        super(formId, config, fieldDef, element);\n    }\n}","import {FieldUIConfig} from \"../FormUITypeDefs\";\nimport {FieldDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {AbstractField} from \"./AbstractField\";\n\n\nexport class InputField extends AbstractField {\n\n    constructor(formId: string, config: FieldUIConfig, fieldDef: FieldDefinition, element: HTMLInputElement) {\n        super(formId, config, fieldDef, element);\n    }\n}\n\n\n","import {AttributeFieldMapItem, DATA_ID_ATTRIBUTE, DisplayOrder, FieldUIConfig, UIFieldType} from \"./FormUITypeDefs\";\nimport {AbstractForm} from \"./AbstractForm\";\nimport {BootstrapFormConfigHelper} from \"../helper/BootstrapFormConfigHelper\";\nimport {DataObjectDefinition, FieldDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {Field} from \"./field/Field\";\nimport {FormElementFactory, FormFactoryResponse} from \"./factory/FormElementFactory\";\nimport {AbstractField} from \"./field/AbstractField\";\nimport debug from 'debug';\nimport browserUtil from \"../../util/BrowserUtil\";\nimport {TextAreaField} from \"./field/TextAreaField\";\nimport {RadioButtonGroupField} from \"./field/RadioButtonGroupField\";\nimport {SelectField} from \"./field/SelectField\";\nimport {InputField} from \"./field/InputField\";\nimport {isSame} from \"../../util/EqualityFunctions\";\n\nconst logger = debug('basic-form');\nconst dlogger = debug('basic-form-detail');\n\nexport class BasicFormImplementation extends AbstractForm {\n\n    protected factoryElements: FormFactoryResponse | null = null;\n\n\n    public constructor(containerId: string, dataObjDef: DataObjectDefinition) {\n        super(containerId, dataObjDef);\n    }\n\n    protected _hidden(): void {\n        if (this.factoryElements) this.containerEl?.removeChild(this.factoryElements.form);\n    }\n\n    protected setupFieldObject(fieldEl: HTMLElement, subElements: HTMLInputElement[] = []) {\n        // get the data-id field from the field element\n        const dataId: string | null = fieldEl.getAttribute(DATA_ID_ATTRIBUTE);\n        const fieldId: string | null = fieldEl.getAttribute('id');\n        dlogger(`Converting field input element ${fieldId} with data-id of ${dataId}`);\n        if (dataId && fieldId) {\n            // find the corresponding field definition\n            const index = this.dataObjDef.fields.findIndex((value) => value.id === dataId);\n            const fieldDef: FieldDefinition | undefined = this.dataObjDef.fields.find((value) => value.id === dataId);\n            if (fieldDef) {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is`);\n                logger(fieldDef);\n\n                // find the corresponding ui definition\n                const fieldUIConfig: FieldUIConfig | null | undefined = this.findFieldUiConfig(fieldDef);\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field ui config is`);\n                logger(fieldUIConfig);\n                if (fieldUIConfig) {\n                    if (this.uiDef) {\n                        let field: Field;\n                        switch (fieldUIConfig.elementType) {\n                            case UIFieldType.textarea: {\n                                field = new TextAreaField(this.id, fieldUIConfig, fieldDef, <HTMLTextAreaElement>fieldEl);\n                                break;\n                            }\n                            case UIFieldType.radioGroup: {\n                                field = new RadioButtonGroupField(this.id, fieldUIConfig, fieldDef, fieldEl, subElements);\n                                break;\n                            }\n                            case UIFieldType.select: {\n                                field = new SelectField(this.id, fieldUIConfig, fieldDef, <HTMLSelectElement>fieldEl);\n                                break;\n                            }\n                            default: {\n                                field = new InputField(this.id, fieldUIConfig, fieldDef, <HTMLInputElement>fieldEl);\n                                break;\n                            }\n                        }\n                        this.fields.push(field);\n                        field.addFieldListener(this);\n                        this.map.push({attributeId: dataId, fieldId: fieldId});\n                    }\n                }\n            } else {\n                dlogger(`Converting field input element ${fieldId} with data-id of ${dataId} field definition is NOT FOUND`);\n\n            }\n        }\n    }\n\n    protected clearUnsavedMessage() {\n        if (this.factoryElements) this.factoryElements.unsavedMessage.innerHTML = '';\n    }\n\n    protected setUnsavedMessage() {\n        if (this.factoryElements && this.uiDef && this.uiDef.unsavedChanges.innerHTML) {\n            this.factoryElements.unsavedMessage.innerHTML = this.uiDef.unsavedChanges.innerHTML;\n        }\n        else if (this.factoryElements) {\n            this.factoryElements.unsavedMessage.innerHTML = 'Pending changes to save';\n        }\n    }\n\n    protected _initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean = false): void {\n        logger(`Initialising`);\n\n        // ok, so given a Data Object definition we are going to create the form ui config\n        this.uiDef = BootstrapFormConfigHelper.getInstance().generateFormConfig(this.dataObjDef,displayOrder,hasDeleteButton,hideModifierFields);\n        logger(this.uiDef);\n        // now we need to create all the form elements from the ui definition\n        this.factoryElements = FormElementFactory.getInstance().createFormElements(this, this.formListeners, this.uiDef, this.fieldListeners);\n        logger(this.factoryElements);\n        // create field elements for each field element, and the basic map\n        logger(`Converting field input elements to Field objects`);\n        this.factoryElements.fields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup',(event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field text area elements to Field objects`);\n        this.factoryElements.textFields.forEach((fieldEl) => {\n            fieldEl.addEventListener('keyup',(event) => {\n                dlogger(`key up in form ${this.getName()}`);\n                this.hasChangedBoolean = true;\n                this.setUnsavedMessage();\n            });\n            this.setupFieldObject(fieldEl);\n        });\n\n        logger(`Converting field select elements to Field objects`);\n        this.factoryElements.selectFields.forEach((fieldEl) => {\n            dlogger(`key up in form ${this.getName()}`);\n        });\n\n        logger(`Converting field rbg elements to Field objects`);\n        this.factoryElements.radioButtonGroups.forEach((rbg) => {\n            this.setupFieldObject(rbg.container, rbg.radioButtons);\n        });\n\n\n        logger(`field/data map is `);\n        logger(this.map);\n        logger('fields are');\n        logger(this.fields);\n    }\n\n    protected _reset(): void {\n        this.clearUnsavedMessage();\n    }\n\n    protected validateField(fieldDef: FieldDefinition) {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        if (field) field.validate();\n    }\n\n    protected renderField(fieldDef: FieldDefinition, currentValue: string): string {\n        let result:string = currentValue;\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n\n        if (field) {\n            result = field.render(result);\n        }\n        return result;\n    }\n\n\n    protected _startCreate(): void {\n        this.clearUnsavedMessage();\n\n        // we have a new object, there might be some values to generate\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onCreation) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, true);\n                dlogger(`Setting default values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) {\n                fieldValue = this.renderField(fieldDef, fieldValue);\n                this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            }\n\n            // run the validation to let the user know what is required\n            this.validateField(fieldDef);\n        });\n\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n\n    }\n\n    protected _startUpdate(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            if (fieldDef.generator && fieldDef.generator.onModify) {\n                let fieldValue = fieldDef.generator.generator.generate(fieldDef, false);\n                dlogger(`Setting default modified values for ${fieldDef.displayName} to ${fieldValue}`);\n                this.currentDataObj[fieldDef.id] = fieldValue;\n            }\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n            this.validateField(fieldDef);\n        });\n        // delete button make visible again\n        if (this.factoryElements && this.factoryElements.deleteButton) browserUtil.removeAttributes(this.factoryElements.deleteButton, ['style']);\n    }\n\n    protected _displayOnly(): void {\n        this.clearUnsavedMessage();\n\n        // we have an existing object, there might be some values to generate\n        logger(this.currentDataObj);\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            if (fieldValue) fieldValue = this.renderField(fieldDef, fieldValue);\n            this.setFieldValueFromDataObject(fieldDef, fieldValue);\n        });\n        // delete button can go\n        if (this.factoryElements && this.factoryElements.deleteButton) if (this.factoryElements) browserUtil.addAttributes(this.factoryElements.deleteButton, [{\n            name: 'style',\n            value: 'display:none'\n        }]);\n    }\n\n    protected _visible(): void {\n        if (this.factoryElements) this.containerEl?.appendChild(this.factoryElements.form);\n    }\n\n    protected setFieldValueToDataObject(dataObj: any, field: Field, currentValue: string | null): void {\n        // find the attribute id from the map\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === field.getId());\n        if (mapItem) {\n            dlogger(`Mapped field ${mapItem.fieldId} to attribute ${mapItem.attributeId} with value ${currentValue}`);\n            this.currentDataObj[mapItem.attributeId] = currentValue;\n        } else {\n            logger(`Mapped field ${field.getId()} to attribute NOT FOUND`);\n\n        }\n    }\n\n    protected setFieldValueFromDataObject(fieldDef: FieldDefinition, currentValue: string | null): void {\n        const field: Field | undefined = this.getFieldFromDataFieldId(fieldDef.id);\n        // find the field id from the map\n        if (field) {\n            if (currentValue) {\n                field.setValue(currentValue);\n            } else {\n                field.clearValue();\n            }\n        }\n    }\n\n    protected getFormattedFieldValue(fieldDef: FieldDefinition): any | null {\n        let result: any | null = null;\n\n        const mapItem: AttributeFieldMapItem | undefined = this.map.find((mapItem) => mapItem.attributeId === fieldDef.id);\n        if (mapItem) {\n            dlogger(`Mapped attribute ${mapItem.attributeId} to field ${mapItem.fieldId} with for getting formatted value`);\n            // find the field with that id\n            const field: Field | undefined = this.fields.find((field) => field.getId() === mapItem.attributeId);\n            if (field) {\n                result = field.getFormattedValue();\n            }\n        }\n        return result;\n    }\n\n    getFormattedDataObject(): any {\n        logger(`Getting current formatted data`);\n        let formattedResult: any = {};\n        this.dataObjDef.fields.forEach((fieldDef) => {\n            let fieldValue = this.currentDataObj[fieldDef.id];\n            formattedResult[fieldDef.id] = this.getFormattedFieldValue(fieldDef)\n        });\n        logger(formattedResult);\n        return formattedResult;\n    }\n\n    protected _isSameObjectAsDisplayed(dataObj: any): boolean {\n        // we can only be sure for objects with keys\n        let isSameObject = false;\n        dlogger(`is same object as current`);\n        dlogger(dataObj);\n        dlogger(this.currentDataObj);\n\n        this.dataObjDef.fields.every((field) => {\n            if (field.isKey) {\n                const currentObjId = this.getFieldFromDataFieldId(field.id)?.getValue();\n                const suppliedObjId = dataObj[field.id];\n                dlogger(`is same object id ${suppliedObjId} as current ${currentObjId}`);\n                if ((currentObjId && !suppliedObjId)||(currentObjId && !suppliedObjId)){\n                    isSameObject = false;\n                }\n                if ((currentObjId && suppliedObjId) && (currentObjId == suppliedObjId)) {\n                    isSameObject = true;\n                }\n                return false;\n            }\n            return true;\n        });\n        return isSameObject;\n    }\n\n    protected enableButtons() {\n        if (this.factoryElements && this.uiDef) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.removeAttribute('disabled');\n            }\n            this.factoryElements.cancelButton.removeAttribute('disabled');\n            this.factoryElements.submitButton.removeAttribute('disabled');\n            // @ts-ignore\n            this.factoryElements.submitButton.innerHTML = this.uiDef.submitButton.buttonText;\n        }\n    }\n\n    protected disableButtons() {\n        if (this.factoryElements) {\n            if (this.factoryElements.deleteButton) {\n                this.factoryElements.deleteButton.setAttribute('disabled','true');\n            }\n            this.factoryElements.cancelButton.setAttribute('disabled','true');\n            this.factoryElements.submitButton.setAttribute('disabled','true');\n        }\n    }\n\n\n    public clearReadOnly() {\n        super.clearReadOnly();\n        this.enableButtons();\n    }\n\n    public setReadOnly() {\n        super.setReadOnly();\n        this.disableButtons();\n    }\n\n    protected _saveFinishedOrAborted(): void {\n        dlogger(`save is finished or aborted`);\n        this.enableButtons();\n        this.clearUnsavedMessage();\n    }\n\n    protected _saveIsActive(): void {\n        dlogger(`save is active`);\n        this.disableButtons();\n        if (this.factoryElements && this.uiDef) {\n            if (this.uiDef.activeSave) {\n                dlogger(`save is active ${this.uiDef.activeSave}`);\n                // @ts-ignore\n                this.factoryElements.submitButton.innerHTML = this.uiDef.activeSave + this.uiDef.submitButton.buttonText;\n            }\n        }\n    }\n\n\n}","import {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DataObjectDefinition} from \"../../../model/DataObjectTypeDefs\";\nimport {Form} from \"../../form/Form\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {BasicFormImplementation} from \"../../form/BasicFormImplementation\";\nimport {FormEvent, FormEventType, FormListener} from \"../../form/FormListener\";\nimport debug from 'debug';\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewListener} from \"../interface/ViewListener\";\nimport {ObjectPermissionChecker} from \"../interface/ObjectPermissionChecker\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nconst logger = debug('form-detail-view-renderer')\n\nexport class FormDetailViewRenderer implements DetailViewRenderer,FormListener {\n    protected objDef: DataObjectDefinition;\n    protected form: Form | null = null;\n    protected currentItem: any;\n    protected isNewItem:boolean;\n    protected containerId: string;\n    protected forwarder:DetailViewListenerForwarder|null;\n    protected view:DetailView|null;\n    protected permissionChecker:ObjectPermissionChecker;\n\n    constructor(containerId: string, objDef: DataObjectDefinition, permissionChecker:ObjectPermissionChecker) {\n        this.containerId = containerId;\n        this.objDef = objDef;\n        this.currentItem = {};\n        this.isNewItem = false;\n        this.forwarder = null;\n        this.view = null;\n        this.permissionChecker = permissionChecker;\n    }\n\n    setEventForwarder(forwarder: DetailViewListenerForwarder): void {\n        this.forwarder = forwarder;\n    }\n\n    public setView(view:DetailView):void {\n        this.view = view;\n    }\n\n    onDocumentLoaded(): void {\n        this.form = new BasicFormImplementation(this.containerId, this.objDef);\n        this.form.addFormListener(this);\n    }\n\n    reset(): void {\n        if (this.form) this.form.reset();\n    }\n\n    initialise(displayOrder:DisplayOrder[],hasDeleteButton:boolean,hideModifierFields:boolean): void {\n        if (this.form) this.form.initialise(displayOrder,hasDeleteButton,hideModifierFields);\n    }\n\n    displayItemReadonly(dataObject: any): void {\n        this.isNewItem = false;\n        if (this.form) this.form.displayOnly(dataObject);\n    }\n\n    getName(): string {\n        return this.objDef.displayName;\n    }\n\n    setContainedBy(container: HTMLElement): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addEventListener(listener: ViewListener): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    hasChanged(): boolean {\n        let result = false;\n        if (this.form) result = this.form.hasChanged();\n        return result;\n    }\n\n    getUIConfig(): ViewDOMConfig {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    getDataSourceKeyId(): string {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public clearDisplay(): void {\n        this.isNewItem = false;\n        if (this.form) this.form.reset();\n    }\n\n    public clearReadOnly(): void {\n        if (this.form) this.form.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        if (this.form) this.form.setReadOnly();\n    }\n\n    public isReadOnly():boolean {\n        let result = false;\n        if (this.form) result = this.form.isReadOnly();\n        return result;\n    }\n\n    public createItem(): any {\n        this.currentItem = {};\n        logger(`Creating new item with form ${this.form?.getId()}`);\n        if (this.form) {\n            this.isNewItem = true;\n            this.currentItem = this.form.startCreateNew();\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n        return this.currentItem;\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n        this.isNewItem = false;\n\n        if (this.hasPermissionToUpdateItem(dataObj)) {\n            if (this.form) this.form.startUpdate(dataObj);\n        } else {\n            if (this.form) this.form.displayOnly(dataObj);\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n\n    public hidden(): void {\n        if (this.form) this.form.setIsVisible(false);\n    }\n\n    public show(): void {\n        if (this.form) this.form.setIsVisible(true);\n    }\n\n    render(): void {\n        this.displayItem(this.currentItem);\n        this.show();\n    }\n\n\n    public hasPermissionToDeleteItem(item:any): boolean {\n        return this.permissionChecker.hasPermissionToDeleteItem(item);\n    }\n\n    public hasPermissionToUpdateItem(item:any): boolean {\n        return this.permissionChecker.hasPermissionToUpdateItem(item);\n    }\n\n    public getForm() {\n        return this.form;\n    }\n\n    handleActionItem(actionName: string, selectedItem: any): void {\n\n    }\n\n    isDisplayingItem(dataObj: any): boolean {\n        let result = false;\n        if (this.currentItem) {\n            if (this.form) {\n                result = this.form.isDisplayingItem(dataObj);\n            }\n        }\n        return result;\n    }\n\n    public formChanged(event: FormEvent, formValues?: any): boolean {\n        // catch form events for user leaving the form\n        switch (event.eventType) {\n            case (FormEventType.CANCELLING): {\n                logger(`Form is cancelling`);\n                break;\n            }\n            case (FormEventType.CANCELLING_ABORTED): {\n                logger(`Form is cancelling - aborted`);\n                break;\n            }\n            case (FormEventType.CANCELLED): {\n                logger(`Form is cancelled - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.cancelled(this.view,this.currentItem);\n                break;\n            }\n            case (FormEventType.DELETING): {\n                logger(`Form is deleting`);\n                break;\n            }\n            case (FormEventType.DELETE_ABORTED): {\n                logger(`Form is deleting - aborted`);\n                break;\n            }\n            case (FormEventType.DELETED): {\n                logger(`Form is deleted - resetting`);\n                this.currentItem = formValues;\n                if (this.forwarder && this.view) this.forwarder.deletedItem(this.view,this.currentItem);\n                // user is deleting the object, will become invisible\n                break;\n            }\n            case (FormEventType.SAVE_ABORTED): {\n                logger(`Form save cancelled`);\n                break;\n            }\n            case (FormEventType.SAVED): {\n                logger(`Form is saved with data`);\n                if (this.form) {\n                    let formattedObj = this.form?.getFormattedDataObject();\n                    if (this.isNewItem) {\n                        if (this.forwarder && this.view) this.forwarder.saveNewItem(this.view,formattedObj);\n                    }\n                    else {\n                        if (this.forwarder && this.view) this.forwarder.updateItem(this.view,formattedObj);\n                    }\n                    this.isNewItem = false;\n                }\n\n                break;\n            }\n            case (FormEventType.SAVING): {\n                logger(`Form is saving`);\n                break;\n            }\n        }\n        return false;\n    }\n\n    getItemDescription(from: string, item: any): string {\n        return \"\";\n    }\n\n    getItemId(from: string, item: any): string {\n        return \"\";\n    }\n\n}","import {ObjectPermissionChecker} from \"./ui-framework/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class CreatedByPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        let result = false;\n        if (item.createdBy) {\n            result = (item.createdBy === Controller.getInstance().getLoggedInUsername());\n        }\n        return result;\n    }\n}","import {ViewListenerForwarder} from \"./ViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DetailView} from \"../interface/DetailView\";\n\nexport class DetailViewListenerForwarder extends ViewListenerForwarder implements DetailViewListener {\n    protected detailViewListeners: DetailViewListener[];\n\n\n    public constructor() {\n        super();\n        this.detailViewListeners = [];\n    }\n\n    public addListener(listener: DetailViewListener) {\n        super.addListener(listener);\n        this.detailViewListeners.push(listener);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.saveNewItem(view, dataObj));\n        }\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.updateItem(view, dataObj));\n        }\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.deletedItem(view, dataObj));\n        }\n    }\n\n    cancelled(view: DetailView, dataObj: any): void {\n        if (!this.suppressEventEmits) {\n            this.detailViewListeners.forEach((listener) => listener.cancelled(view, dataObj));\n        }\n    }\n}","import {AbstractView} from \"./AbstractView\";\nimport {DetailView} from \"../interface/DetailView\";\nimport {ViewDOMConfig} from \"../../ConfigurationTypes\";\nimport {DetailViewRenderer} from \"../interface/DetailViewRenderer\";\nimport {DetailViewListenerForwarder} from \"../delegate/DetailViewListenerForwarder\";\nimport {DetailViewListener} from \"../interface/DetailViewListener\";\nimport {DisplayOrder} from \"../../form/FormUITypeDefs\";\n\nexport class DetailViewImplementation extends AbstractView implements DetailView {\n    protected currentItem:any|null = null;\n    protected renderer:DetailViewRenderer;\n\n    constructor(uiConfig: ViewDOMConfig, renderer:DetailViewRenderer) {\n        super(uiConfig);\n        this.renderer = renderer;\n        const forwarder = new DetailViewListenerForwarder();\n        this.eventForwarder = forwarder;\n        this.renderer.setView(this);\n        this.renderer.setEventForwarder(forwarder);\n    }\n\n    addEventDetailListener(listener: DetailViewListener) {\n        this.eventForwarder.addListener(listener);\n    }\n\n    public getItemId(name:string,item:any) {\n        return '';\n    }\n\n    public getItemDescription(name:string,item:any): string {\n        return '';\n    }\n\n\n\n    public clearDisplay(): void {\n        this.renderer.reset();\n    }\n\n    public clearReadOnly(): void {\n        this.renderer.clearReadOnly();\n    }\n\n    public setReadOnly(): void {\n        this.renderer.setReadOnly();\n    }\n\n    public isReadOnly(): boolean {\n        return this.renderer.isReadOnly();\n    }\n\n    public createItem(): any {\n        return this.renderer.createItem();\n    }\n\n    public displayItem(dataObj: any): void {\n        this.currentItem = dataObj;\n\n        if (this.renderer.hasPermissionToUpdateItem(dataObj)) {\n            this.renderer.displayItem(dataObj);\n        }\n        else {\n            this.renderer.displayItemReadonly(dataObj);\n        }\n        this.show();\n    }\n\n\n    public hidden(): void {\n        this.renderer.hidden();\n    }\n    public show(): void {\n        this.renderer.show();\n    }\n\n    public render(): void {\n        this.displayItem(this.currentItem);\n    }\n\n    public onDocumentLoaded() {\n        this.renderer.onDocumentLoaded();\n        super.onDocumentLoaded();\n    }\n\n    public hasPermissionToDeleteItem(item:any): boolean {\n        return this.renderer.hasPermissionToDeleteItem(item);\n    }\n    public hasPermissionToUpdateItem(item:any): boolean {\n        return this.renderer.hasPermissionToUpdateItem(item);\n    }\n\n    public handleActionItem(actionName: string, selectedItem: any): void {\n        this.renderer.handleActionItem(actionName,selectedItem);\n    }\n\n    public isDisplayingItem(dataObj: any): boolean {\n        return this.renderer.isDisplayingItem(dataObj);\n    }\n\n    public hasChanged(): boolean {\n        return this.renderer.hasChanged();\n    }\n\n    initialise(displayOrder: DisplayOrder[],hasDeleteButton:boolean, hideModifierFields: boolean = false): void {\n        this.renderer.initialise(displayOrder,hasDeleteButton,hideModifierFields)\n    }\n}","import {DataObjectListener} from \"./DataObjectListener\";\n\nexport abstract class DataObjectController {\n    protected listeners:DataObjectListener[];\n    protected isCreatingNew:boolean = false;\n    protected typeName:string;\n\n    protected constructor(typeName:string) {\n        this.typeName = typeName;\n        this.listeners = [];\n    }\n\n    public addListener(listener:DataObjectListener) {\n        this.listeners.push(listener);\n    }\n\n    protected informListenersOfCreate(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.create(this, this.typeName,dataObj));\n    }\n\n    protected informListenersOfUpdate(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.update(this, this.typeName,dataObj));\n    }\n\n    protected informListenersOfDelete(dataObj:any) {\n        this.isCreatingNew = false;\n        this.listeners.forEach((listener) => listener.delete(this, this.typeName,dataObj));\n    }\n\n    public startNewObject():boolean {\n        let result = false;\n        if (!this.isCreatingNew) {\n            result = this._startNewObject();\n            this.isCreatingNew = result;\n        }\n        return result;\n    }\n\n    protected abstract _startNewObject():boolean; // return false, if the creation was cancelled\n\n    public isCreatingNewObject():boolean {\n        return this.isCreatingNew;\n    }\n\n}","import {CollectionView} from \"../view/interface/CollectionView\";\nimport {DetailView} from \"../view/interface/DetailView\";\nimport {CollectionViewListener} from \"../view/interface/CollectionViewListener\";\nimport {View} from \"../view/interface/View\";\nimport {DetailViewListener} from \"../view/interface/DetailViewListener\";\n\nimport debug from 'debug';\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport {AlertEvent, AlertListener, AlertType} from \"../alert/AlertListener\";\nimport {AlertManager} from \"../alert/AlertManager\";\n\nconst logger = debug('linked-controller');\nconst dlogger = debug('linked-controller-detail');\n\nclass ChildViewListenerDelegate implements DetailViewListener {\n    protected controller:DetailViewListener;\n\n    constructor(controller:DetailViewListener) {\n        this.controller = controller;\n    }\n\n    addView(view:DetailView) {\n        view.addEventListener(this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    documentLoaded(view: View): void {}\n    hideRequested(view: View): void {}\n    itemAction(view: View, actionName: string, selectedItem: any): void {}\n    itemDeleted(view: View, selectedItem: any): void {}\n    itemDropped(view: View, droppedItem: any): void {}\n    showRequested(view: View): void {}\n\n    cancelled(view: DetailView, dataObj: any): void {\n        this.controller.cancelled(view,dataObj);\n    }\n    deletedItem(view: DetailView, dataObj: any): void {\n        this.controller.deletedItem(view,dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        this.controller.saveNewItem(view,dataObj);\n    }\n\n\n    updateItem(view: DetailView, dataObj: any): void {\n        this.controller.updateItem(view,dataObj);\n    }\n}\n\nexport class ChangeDataObjectDelegate implements AlertListener {\n    protected callback:any;\n\n    constructor(callback:any) {\n        this.callback = callback;\n    }\n\n    public shouldDiscardChanges() {\n        AlertManager.getInstance().startAlert(this,'Discard Changes','There are unsaved changes.  Discard?',{});\n\n    }\n\n\n    completed(event: AlertEvent): void {\n        if (event.outcome === AlertType.confirmed) {\n            this.callback();\n        }\n    }\n\n}\n\nexport class LinkedCollectionDetailController extends DataObjectController implements CollectionViewListener,DetailViewListener{\n    protected parentView:CollectionView;\n    protected children:DetailView[] = [];\n    protected delegate:ChildViewListenerDelegate;\n\n    constructor(typeName:string, parentView:CollectionView) {\n        super(typeName);\n        logger(`Starting with parent view ${parentView.getName()}`);\n        this.parentView = parentView;\n        this.delegate = new ChildViewListenerDelegate(this);\n        this.parentView.addEventListener(this);\n    }\n\n    public addLinkedDetailView(childView:DetailView) {\n        logger(`Adding child view ${childView.getName()}`);\n        this.children.push(childView);\n        this.delegate.addView(childView); // this delegate will only pass us the unique detail view events (save, new, etc)\n    }\n\n    public initialise():void { // call when all views are ready\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Handling delete item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        return this.parentView.hasPermissionToDeleteItemInNamedCollection('',selectedItem);\n    }\n\n    documentLoaded(view: View): void {\n        logger(`Handling document loaded view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n           childView.onDocumentLoaded();\n        });\n    }\n\n    hideRequested(view: View): void {\n        // let the children know\n        logger(`Handling hide  from view ${view.getName()}`);\n        this.children.forEach((childView) => {\n            childView.hidden();\n        });\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any): void {\n        logger(`Handling item action ${actionName} from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.handleActionItem(actionName, selectedItem);\n        });\n    }\n\n    itemDeleted(view: View, selectedItem: any): void {\n        logger(`Handling item deleted from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDeselected(view: View, selectedItem: any): void {\n        logger(`Handling item deselected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            // clear the child display and set readonly\n            childView.clearDisplay();\n            childView.setReadOnly();\n        });\n    }\n\n    itemDragStarted(view: View, selectedItem: any): void { // nothing to do here\n    }\n\n    itemDropped(view: View, droppedItem: any): void { // nothing to do here\n    }\n\n    itemSelected(view: View, selectedItem: any): void {\n        logger(`Handling item selected from view ${view.getName()}`);\n        dlogger(selectedItem);\n        this.children.forEach((childView) => {\n            childView.displayItem(selectedItem);\n        });\n    }\n\n    showRequested(view: View): void {\n        logger(`Handling show from view ${view.getName()}`);\n        // let the children know\n        this.children.forEach((childView) => {\n            childView.show();\n        });\n    }\n\n    canSelectItem(view: CollectionView, selectedItem: any): boolean {\n        logger(`Handling can select item from view ${view.getName()}`);\n        dlogger(selectedItem);\n        // are we currently in the middle of creating a new object?\n        if (this.isCreatingNew) return false;\n\n        // prevent selection if the children views have modified this item\n        let canProceedWithSelection:boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithSelection = false;\n            }\n        });\n        if (!canProceedWithSelection) {\n            canProceedWithSelection = confirm(`${view.getName()} - unsaved changes.  Discard them?`);\n        }\n        return canProceedWithSelection;\n    }\n\n\n\n    cancelled(view: DetailView, dataObj: any): void {\n        logger(`Handling cancelled from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.isCreatingNew = false;\n    }\n\n    deletedItem(view: DetailView, dataObj: any): void {\n        logger(`Handling deleted from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfDelete(dataObj);\n    }\n\n    saveNewItem(view: DetailView, dataObj: any): void {\n        logger(`Handling save new from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfCreate(dataObj);\n    }\n\n    updateItem(view: DetailView, dataObj: any): void {\n        logger(`Handling update from child view ${view.getName()}`);\n        dlogger(dataObj);\n        this.informListenersOfUpdate(dataObj);\n    }\n\n    protected _startNewObject(): boolean {\n        logger(`Handling start new object`);\n        // assume the first detail view will create the object for us\n        let canProceedWithCreateNew:boolean = true;\n        this.children.forEach((childView) => {\n            if (childView.hasChanged()) {\n                dlogger(`child view ${childView.getName()} has changed - cancelling`);\n                canProceedWithCreateNew = false;\n            }\n        });\n        if (!canProceedWithCreateNew) {\n            canProceedWithCreateNew = confirm(`There are unsaved changes.  Discard them?`);\n        }\n\n        if (this.children.length > 0) {\n            logger(`Handling start new object with child view ${this.children[0].getName()}`);\n            let dataObj = this.children[0].createItem();\n            if (dataObj) {\n                canProceedWithCreateNew = true;\n                this.children[0].show();\n            }\n        }\n        return canProceedWithCreateNew;\n    }\n\n}","import {Form} from \"../../ui-framework/form/Form\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"../../ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../ui-framework/form/validation/ValidationManager\";\n\nexport class ValidationHelper {\n    private static _instance: ValidationHelper;\n\n    public static getInstance(): ValidationHelper {\n        if (!(ValidationHelper._instance)) {\n            ValidationHelper._instance = new ValidationHelper();\n        }\n        return ValidationHelper._instance;\n    }\n\n    private constructor() {}\n\n    public setupValidationForExerciseTypeDetailsForm(form:Form) {\n        let rule: ValidationRule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'reps',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'sets',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'weight',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values:'strength'\n                }\n            ]\n        }\n\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.show,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'strength'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n        rule = {\n            targetDataFieldId: 'distance',\n            response: ConditionResponse.hide,\n            conditions: [\n                {\n                    sourceDataFieldId: 'type',\n                    comparison: ComparisonType.hasValue,\n                    values: 'cardio'\n                }\n            ]\n        }\n        ValidationManager.getInstance().addRuleToForm(form, rule);\n    }\n\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewDOMConfig, EXTRA_ACTION_ATTRIBUTE_NAME, Modifier} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('list-view-renderer-with-context');\n\nexport class ListViewRendererUsingContext implements CollectionViewRenderer{\n    protected view:CollectionView;\n    protected eventHandler:CollectionViewEventHandler;\n\n    constructor(view:CollectionView,eventHandler:CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    public createDisplayElementForCollectionItem(collectionName:string, item: any): HTMLElement {\n        const canDeleteItem:boolean = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n        const uiConfig:CollectionViewDOMConfig = this.view.getCollectionUIConfig();\n\n        avLogger(`view ${this.view.getName()}: creating List item`);\n        avLogger(item);\n\n        const resultDataKeyId = this.view.getIdForItemInNamedCollection(collectionName, item);\n\n        let childEl: HTMLElement = document.createElement(uiConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, uiConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, uiConfig.resultsElementAttributes);\n        // the content may be structured\n        let textEl = childEl;\n        if (uiConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, uiConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(uiConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl,uiConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (uiConfig.detail.background) {\n                let imgEl = document.createElement(uiConfig.detail.background.elementType);\n                browserUtil.addRemoveClasses(imgEl, uiConfig.detail.background.elementClasses);\n                imgEl.setAttribute('src', this.view.getBackgroundImageForItemInNamedCollection(collectionName, item));\n                childEl.appendChild(imgEl);\n            }\n\n            let buttonsEl = document.createElement('div');\n            contentEl.appendChild(buttonsEl);\n\n            if (uiConfig.detail.badge) {\n                const badgeValue = this.view.getBadgeValueForItemInNamedCollection(collectionName, item);\n                if (badgeValue > 0) {\n                    let badgeEl: HTMLElement = document.createElement(uiConfig.detail.badge.elementType);\n                    browserUtil.addRemoveClasses(badgeEl, uiConfig.detail.badge.elementClasses);\n                    browserUtil.addAttributes(badgeEl, uiConfig.detail.badge.elementAttributes);\n                    buttonsEl.appendChild(badgeEl);\n                    badgeEl.innerHTML = `&nbsp;&nbsp;&nbsp;${badgeValue}&nbsp;&nbsp;&nbsp;`;\n                }\n            }\n\n            if (uiConfig.extraActions) {\n                uiConfig.extraActions.forEach((extraAction) => {\n                    const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                    if (hasPermissionForAction) {\n                        let action: HTMLElement = document.createElement('button');\n                        action.setAttribute('type', 'button');\n                        browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                        browserUtil.addAttributes(action,extraAction.attributes);\n                        if (extraAction.buttonText) {\n                            action.innerHTML = extraAction.buttonText;\n                        }\n                        if (extraAction.iconClasses) {\n                            let iconEl = document.createElement('i');\n                            browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                            iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                            action.appendChild(iconEl);\n                        }\n                        action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                        action.addEventListener('click', (event) => {\n                            event.preventDefault();\n                            event.stopPropagation();\n                            this.eventHandler.eventActionClicked(event);\n                        });\n                        buttonsEl.appendChild(action);\n                    }\n                });\n\n            }\n            if (uiConfig.detail.delete && canDeleteItem) {\n                let deleteButtonEl: HTMLElement = document.createElement('button');\n                deleteButtonEl.setAttribute('type', 'button');\n                browserUtil.addRemoveClasses(deleteButtonEl, uiConfig.detail.delete.buttonClasses);\n                browserUtil.addAttributes(deleteButtonEl,uiConfig.detail.delete.attributes);\n                if (uiConfig.detail.delete.buttonText) {\n                    deleteButtonEl.innerHTML = uiConfig.detail.delete.buttonText;\n                }\n                if (uiConfig.detail.delete.iconClasses) {\n                    let iconEl = document.createElement('i');\n                    browserUtil.addRemoveClasses(iconEl, uiConfig.detail.delete.iconClasses);\n                    deleteButtonEl.appendChild(iconEl);\n                }\n                deleteButtonEl.addEventListener('click', (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.eventHandler.eventDeleteClickItem(event);\n                });\n                buttonsEl.appendChild(deleteButtonEl);\n            }\n            childEl.appendChild(contentEl);\n\n            if (uiConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (uiConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n\n            }\n        }\n\n\n        // add the key ids for selection\n        this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n\n        // add icons\n        if (uiConfig.detail.icons) {\n            const icons:string[] = uiConfig.detail.icons(collectionName,item);\n            icons.forEach((icon) => {\n                let iconEl = document.createElement('i');\n                browserUtil.addRemoveClasses(iconEl, icon);\n                textEl.appendChild(iconEl);\n            });\n        }\n\n        // add modifiers for patient state\n        if (uiConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal);\n                    if (uiConfig.icons && uiConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active);\n                    if (uiConfig.icons && uiConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive);\n                    if (uiConfig.icons && uiConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, uiConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (uiConfig.icons && uiConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, uiConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (uiConfig.icons && uiConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, uiConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl:HTMLElement,collectionName:string,newState:any): void {\n        avLogger(`view ${this.view.getName()}: creating Results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // add the new children\n        newState.map((item: any, index: number) => {\n            const childEl = this.createDisplayElementForCollectionItem(collectionName, item);\n            // add draggable actions\n            avLogger(`view ${this.view.getName()}:  Adding child ${this.view.getIdForItemInNamedCollection(collectionName,item)}`);\n            containerEl.appendChild(childEl);\n\n            ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(),collectionName,item,childEl,true);\n            childEl.addEventListener('contextmenu',ContextualInformationHelper.getInstance().handleContextMenu);\n        });\n        $('[data-toggle=\"tooltip\"]').tooltip();\n    }\n\n    onDocumentLoaded(): void {}\n\n}","import {CollectionViewListenerForwarder} from \"./CollectionViewListenerForwarder\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandlerDelegate, ItemContext} from \"./CollectionViewEventHandlerDelegate\";\nimport {ContextDetails, ContextualInformationHelper} from \"../../context/ContextualInformationHelper\";\n\n\n\n\nexport class CollectionViewEventHandlerDelegateUsingContext extends CollectionViewEventHandlerDelegate{\n\n    constructor (view:CollectionView,forwarder:CollectionViewListenerForwarder) {\n        super(view,forwarder);\n    }\n\n    protected getItemContext(event:Event):ItemContext {\n\n        const contextDetail:ContextDetails|null = ContextualInformationHelper.getInstance().findContextFromEvent(event);\n\n        let context:ItemContext;\n\n        if (contextDetail) {\n            context = {\n                itemId:contextDetail.identifier,\n                dataSource:contextDetail.source\n            }\n        }\n        else {\n            context = {\n                itemId:'',\n                dataSource:this.view.getName(),\n            }\n        }\n\n\n        return context;\n    }\n\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport { CollectionView } from \"../../ui-framework/view/interface/CollectionView\";\nimport { View } from \"../../ui-framework/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../state/StateManager\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../ui-framework/context/ContextualInformationHelper\";\nimport {ListViewRendererUsingContext} from \"../../ui-framework/view/renderer/ListViewRendererUsingContext\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\n\nconst logger = debug('exercise-types-view');\n\nexport class ExerciseTypesViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exerciseTypes',\n            dataSourceId: VIEW_NAME.exerciseTypes,\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'text-black fas fa-trash-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise type.\"}]\n            },\n            drag: {\n                type: DRAGGABLE.typeExerciseType,\n                from: DRAGGABLE.fromExerciseTypes\n            }\n        },\n        extraActions: [{\n            name: 'addToWorkout',\n            buttonClasses:'btn bg-primary text-white btn-circle btn-md mr-1',\n            iconClasses:'fas fa-arrow-alt-circle-right',\n            attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'data-html',value:'true'},{name:'title',value:\"Add this <strong>exercise</strong> to the current workout.\"}]\n        }]\n    };\n\n\n    constructor(stateManager:StateManager) {\n        super(ExerciseTypesViewUsingContext.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context:ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.exerciseTypes,'Exercise Types');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'addToWorkout','Add To Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-arrow-alt-circle-right');\n    }\n\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        }\n        else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        logger(`Can Delete ${selectedItem}`);\n        logger(selectedItem[FIELD_CreatedBy]);\n        if (selectedItem[FIELD_CreatedBy]) {\n            if (selectedItem[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        logger(`Has delete permission ${item}`);\n        logger(item[FIELD_CreatedBy]);\n        if (item[FIELD_CreatedBy]) {\n            if (item[FIELD_CreatedBy] === Controller.getInstance().getLoggedInUsername()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === ExerciseTypesViewUsingContext.DOMConfig.extraActions[0].name) {\n            // add the exercise type the current workout\n            Controller.getInstance().addExerciseToCurrentWorkout(selectedItem);\n        }\n    }\n\n\n}\n\n","import SidebarViewContainer from \"../../ui-framework/container/SidebarViewContainer\";\nimport {ExerciseTypesView} from \"./ExerciseTypesView\";\nimport ExerciseTypesSidebar from \"../sidebar/ExerciseTypesSidebar\";\nimport {DataObjectDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../model/ObjectDefinitionRegistry\";\nimport {BUTTON, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {CreatedByPermissionChecker} from \"../../CreatedByPermissionChecker\";\nimport {DetailView} from \"../../ui-framework/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../ui-framework/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../ui-framework/form/Form\";\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\nimport {ComparisonType, ConditionResponse, ValidationRule} from \"../../ui-framework/form/validation/ValidationTypeDefs\";\nimport {ValidationManager} from \"../../ui-framework/form/validation/ValidationManager\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {ExerciseTypesViewUsingContext} from \"./ExerciseTypesViewUsingContext\";\n\nconst logger = debug('exercise-types-composite-view');\n\nexport class ExerciseTypesCompositeView {\n    private sideBar:SidebarViewContainer;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n    }\n\n    onDocumentLoaded() {\n        const exerciseTypes = new ExerciseTypesViewUsingContext(Controller.getInstance().getStateManager());\n        this.sideBar.addView(exerciseTypes,{containerId:ExerciseTypesSidebar.SidebarContainers.container});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.exerciseTypeDetail,exerciseTypeDefinition,new CreatedByPermissionChecker());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.exerciseTypeDetail,\n                    dataSourceId: VIEW_NAME.exerciseTypes\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.createNewExerciseType);\n            logger(`Setting up button for creating exercise types`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Asking view linker to start a new object`);\n                    viewLinker.startNewObject();\n                });\n\n            }\n\n            viewLinker.addListener(Controller.getInstance());\n        }\n    }\n\n\n}","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class WorkoutSummarySidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'workoutSummarySidebar',\n        expandedSize:'100%',\n        location: SidebarLocation.bottom\n    }\n\n    static SidebarContainers = {\n        container: 'workoutSummary',\n    }\n\n\n    constructor() {\n        super(WorkoutSummarySidebar.SidebarPrefs);\n    }\n}\n","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../../ui-framework/view/interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../../ui-framework/view/interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../../ui-framework/view/interface/CollectionViewEventHandler\";\nimport moment from \"moment\";\nimport Chart from \"chart.js/auto\";\n\nconst avLogger = debug('workout-summary-renderer');\n\nexport class WorkoutSummaryRenderer implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    private currentChart:Chart|null = null;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n    }\n\n    private generateRandomExerciseColourAndBorder(isStrength:boolean = true) : string[] {\n        let red = 0;\n        let blue = 0;\n        let green = 50;\n\n        const newColour = Math.floor(Math.random() * 100) + 155;\n        if (isStrength) red = newColour;\n        if (!isStrength) blue = newColour;\n        const transparency = 0.4;\n\n        const background = `rgba(${red},${green},${blue},${transparency})`;\n        const border = `rgb(${red},${green},${blue})`;\n\n        return [background,border];\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        return document.createElement('a');\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating workout summary`);\n        avLogger(newState);\n\n        if (this.currentChart) this.currentChart.destroy();\n\n        // okay we need to go through the last 7 workouts\n        let sevenWorkouts = newState;\n        if (newState.length > 7) {\n            sevenWorkouts = newState.slice(newState.length - 7);\n        }\n\n\n        // go through the workouts and find all the unique exercise names as data series names\n        let exerciseNames: string[] = [];\n        let exerciseBG: string[] = [];\n        let exerciseBR: string[] = [];\n        let exerciseTypes: string[] = [];\n        let labels: string[] = [];\n        sevenWorkouts.forEach((workout: any) => {\n            const label = moment(workout.createdOn, 'YYYYMMDDHHmmss').format('ddd DD/MM/YYYY HH:mm');\n            labels.push(label);\n            avLogger(`Added label ${label}`);\n\n            if (workout.exercises) {\n                workout.exercises.forEach((exercise: any) => {\n                    const exerciseName = exercise.name;\n                    // do we have this exercise already?\n                    let foundIndex = exerciseNames.findIndex((name) => name == exerciseName);\n                    if (foundIndex < 0) {\n                        avLogger(`Adding exercise ${exerciseName} of type ${exercise.type} to datasets`);\n                        exerciseNames.push(exerciseName);\n                        exerciseTypes.push(exercise.type);\n                        const colours = this.generateRandomExerciseColourAndBorder((exercise.type === 'strength'));\n                        exerciseBG.push(colours[0]);\n                        exerciseBR.push(colours[1]);\n                    }\n                })\n            }\n        });\n\n        // construct the data series, for each series (exercise), go through the workouts and create a data entry for that item\n\n        let datasets: any[] = [];\n\n        exerciseNames.forEach((name, index) => {\n            const exerciseType = exerciseTypes[index];\n            const itemBG = exerciseBG[index];\n            const itemBR = exerciseBR[index];\n\n            avLogger(`Constructing dataset ${name} of type ${exerciseType} to datasets`);\n\n            let data: number[] = [];\n            let bg: string[] = [];\n            let br: string[] = [];\n\n\n            sevenWorkouts.forEach((workout: any) => {\n                bg.push(itemBG);\n                br.push(itemBR);\n\n                // find the exercise name\n                if (workout.exercises) {\n\n                    const didntFindExercise = workout.exercises.every((exercise: any) => {\n                        if (exercise.name == name) {\n                            if (exerciseType === 'strength') {\n                                avLogger(`Found exercise ${name} with value ${exercise.weight}`);\n                                data.push(exercise.weight);\n                            } else {\n                                avLogger(`Found exercise ${name} with value ${exercise.distance}`);\n                                data.push(exercise.distance);\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                    // not found - zero value\n                    if (didntFindExercise) {\n                        data.push(0);\n                    }\n\n                } else {\n                    data.push(0);\n                }\n            });\n            let dataset = {label: name, data: data, backgroundColor: bg, borderColor: br, borderWidth: 1, order:1};\n            let lineDataSet = {label: name, data: data, backgroundColor: bg, borderColor: br, order: 0, type: 'line'};\n            avLogger(dataset);\n            datasets.push(dataset);\n            //datasets.push(lineDataSet);\n        });\n\n\n        let chartData = {\n            labels: labels,\n            datasets: datasets,\n        };\n\n        let config = {\n            type:'bar',\n            data: chartData,\n            options: {\n                responsive: true,\n                animation: true,\n                maintainAspectRatio: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            },\n\n        }\n        avLogger(chartData);\n\n        // @ts-ignore\n        this.currentChart = new Chart(<HTMLCanvasElement>containerEl, config);\n    }\n\n    onDocumentLoaded(): void {\n    }\n\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\n\nimport {WorkoutSummaryRenderer} from \"../renderer/WorkoutSummaryRenderer\";\n\n\nexport class WorkoutSummaryView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'workoutSummaryChart',\n            dataSourceId: VIEW_NAME.workoutSummary,\n        },\n        resultsElementType: 'canvas',\n        resultsClasses: '',\n        keyId: '_id',\n        keyType: KeyType.string,\n        detail: {\n            containerClasses: '',\n            textElementType: '',\n            textElementClasses: '',\n            select: false,\n        },\n    }\n\n\n    constructor() {\n        super(WorkoutSummaryView.DOMConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new WorkoutSummaryRenderer(this, this);\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return false;\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {}\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return false;\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        return false;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {}\n\n}\n\n","import SidebarViewContainer from '../../ui-framework/container/SidebarViewContainer';\nimport {SidebarLocation, SidebarPrefs} from \"../../ui-framework/ConfigurationTypes\";\n\nexport default class CurrentWorkoutSidebar extends SidebarViewContainer {\n    static SidebarPrefs:SidebarPrefs = {\n        id:'currentWorkoutSidebar',\n        expandedSize:'50%',\n        location: SidebarLocation.right\n    }\n\n    static SidebarContainers = {\n        list: 'exercises',\n        detail: 'workoutDetail'\n    }\n\n\n    constructor() {\n        super(CurrentWorkoutSidebar.SidebarPrefs);\n    }\n}\n","import {ObjectPermissionChecker} from \"./ui-framework/view/interface/ObjectPermissionChecker\";\nimport Controller from \"./Controller\";\n\nexport class DefaultPermissionChecker implements ObjectPermissionChecker {\n    hasPermissionToUpdateItem(item: any): boolean {\n        return true;\n    }\n\n    hasPermissionToDeleteItem(item: any): boolean {\n        return true;\n    }\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {CollectionViewDOMConfig, KeyType, Modifier} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport {ListViewRenderer} from \"../../ui-framework/view/renderer/ListViewRenderer\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport { CollectionView } from \"../../ui-framework/view/interface/CollectionView\";\nimport { View } from \"../../ui-framework/view/interface/View\";\nimport {FIELD_CreatedBy} from \"../../model/BasicObjectDefinitionFactory\";\n\nimport debug from 'debug';\nimport {StateManager} from \"../../state/StateManager\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\nimport {ContextualInformationHelper} from \"../../ui-framework/context/ContextualInformationHelper\";\nimport {ListViewRendererUsingContext} from \"../../ui-framework/view/renderer/ListViewRendererUsingContext\";\n\nconst logger = debug('current-workout-exercises-view');\n\nexport class CurrentWorkoutExercisesView extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CollectionViewDOMConfig = {\n        viewConfig: {\n            resultsContainerId: 'exercises',\n            dataSourceId: VIEW_NAME.exercises,\n            drop: {\n                acceptFrom: [DRAGGABLE.fromExerciseTypes],\n                acceptTypes: [DRAGGABLE.typeExerciseType]\n            }\n        },\n        resultsElementType: 'a',\n        resultsElementAttributes: [{name: 'href', value: '#'}],\n        resultsClasses: 'list-group-item my-list-item truncate-notification list-group-item-action',\n        keyId: '_id',\n        keyType: KeyType.string,\n        modifiers: {\n            normal: '',\n            inactive: 'list-group-item-light',\n            active: 'list-group-item-primary',\n            warning: ''\n        },\n        icons: {\n            normal: '',\n            inactive: '',\n            active: '',\n            warning: ''\n        },\n        detail: {\n            containerClasses: 'd-flex w-100 justify-content-between',\n            textElementType: 'span',\n            textElementClasses: 'mb-1',\n            select: true,\n            icons:(name:string,item:any) => {\n                if (item.type) {\n                    if (item.type === 'cardio') {\n                        return ['fas fa-running ml-2'];\n                    }\n                    else {\n                        return ['fas fa-dumbbell ml-2'];\n                    }\n                }\n                return [];\n            },\n            delete: {\n                buttonClasses: 'btn bg-danger text-white btn-circle btn-md',\n                iconClasses: 'fas fa-trash-alt',\n                attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"right\"},{name:'title',value:\"Delete this exercise from the workout.\"}]\n            }\n        }\n    };\n\n    constructor(stateManager:StateManager) {\n        super(CurrentWorkoutExercisesView.DOMConfig, stateManager, STATE_NAMES.exerciseTypes);\n        this.renderer = new ListViewRendererUsingContext(this, this);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n        ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.exerciseTypes,'Exercise Types');\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        buffer += '<strong>' + item.name + '</strong>: ';\n        if (item.type === 'cardio') {\n            buffer += item.distance + ' km in ' + item.duration;\n        }\n        else {\n            buffer += item.sets + ' sets of ' + item.reps + ' reps in ' + item.duration;\n        }\n        buffer += '<br/>';\n        return buffer;\n    }\n\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return true;\n    }\n\n    compareItemsForEquality(item1:any, item2:any) :boolean {\n        return isSameMongo(item1,item2);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        containerEl.innerHTML =  item.name;\n    }\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return true;\n    }\n\n    itemDropped(view: View, droppedItem: any) {\n        Controller.getInstance().addExerciseToCurrentWorkout(droppedItem);\n    }\n\n\n}\n\n","import SidebarViewContainer from \"../../ui-framework/container/SidebarViewContainer\";\nimport {DataObjectDefinition} from \"../../model/DataObjectTypeDefs\";\nimport {ObjectDefinitionRegistry} from \"../../model/ObjectDefinitionRegistry\";\nimport {BUTTON, INPUT, STATE_NAMES, VIEW_CONTAINER, VIEW_NAME} from \"../../AppTypes\";\nimport {FormDetailViewRenderer} from \"../../ui-framework/view/renderer/FormDetailViewRenderer\";\nimport {DetailView} from \"../../ui-framework/view/interface/DetailView\";\nimport {DetailViewImplementation} from \"../../ui-framework/view/implementation/DetailViewImplementation\";\nimport {LinkedCollectionDetailController} from \"../../ui-framework/helper/LinkedCollectionDetailController\";\nimport {BasicObjectDefinitionFactory} from \"../../model/BasicObjectDefinitionFactory\";\nimport {Form} from \"../../ui-framework/form/Form\";\nimport Controller from \"../../Controller\";\nimport debug from \"debug\";\nimport {StateManager} from \"../../state/StateManager\";\nimport MemoryBufferStateManager from \"../../state/MemoryBufferStateManager\";\nimport StateChangeListener from \"../../state/StateChangeListener\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {ValidationHelper} from \"../helper/ValidationHelper\";\nimport {DefaultPermissionChecker} from \"../../DefaultPermissionChecker\";\nimport {CurrentWorkoutExercisesView} from \"./CurrentWorkoutExercisesView\";\nimport {DataObjectListener} from \"../../model/DataObjectListener\";\nimport {DataObjectController} from \"../../model/DataObjectController\";\nimport moment from \"moment\";\nimport App from \"../../App\";\n\nconst logger = debug('current-workout-composite-view');\n\nexport class CurrentWorkoutCompositeView implements StateChangeListener,DataObjectListener{\n    private sideBar:SidebarViewContainer;\n    private currentWorkout:any = {};\n    private workoutDef:DataObjectDefinition|null = null;\n    private readonly stateManager:StateManager;\n    private workoutNameEl:HTMLInputElement|null = null;\n\n    constructor(sideBar:SidebarViewContainer) {\n        this.sideBar = sideBar;\n        this.stateManager = new MemoryBufferStateManager();\n        this.stateManager.addChangeListenerForName(STATE_NAMES.exerciseTypes,this);\n        Controller.getInstance().getStateManager().addChangeListenerForName(STATE_NAMES.workouts,this);\n    }\n\n    getListenerName(): string {\n        return 'Current Workout Composite View';\n    }\n\n    onDocumentLoaded() {\n        this.workoutNameEl = <HTMLInputElement|null>document.getElementById(INPUT.workoutName);\n        this.workoutNameEl?.addEventListener('blur',(event) => {\n           if (event.target) {\n               // @ts-ignore\n               this.currentWorkout.name = event.target.value;\n               this.saveWorkout();\n           }\n        });\n\n\n        this.workoutDef = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.workouts);\n        if (!this.workoutDef) throw new Error ('Workout definition not found');\n\n        const exerciseTypes = new CurrentWorkoutExercisesView(this.stateManager);\n        this.sideBar.addView(exerciseTypes,{containerId:VIEW_CONTAINER.exerciseDropZone});\n\n        const exerciseTypeDefinition:DataObjectDefinition|null = ObjectDefinitionRegistry.getInstance().findDefinition(STATE_NAMES.exerciseTypes);\n\n        if (exerciseTypeDefinition) {\n            let exerciseTypeDetailRenderer:FormDetailViewRenderer = new FormDetailViewRenderer(VIEW_CONTAINER.currentWorkoutDetail,exerciseTypeDefinition,new DefaultPermissionChecker());\n\n            let exerciseTypeDetailView:DetailView = new DetailViewImplementation(\n                {\n                    resultsContainerId: VIEW_CONTAINER.currentWorkoutDetail,\n                    dataSourceId: VIEW_NAME.exercises\n                },exerciseTypeDetailRenderer);\n            let viewLinker:LinkedCollectionDetailController = new LinkedCollectionDetailController(STATE_NAMES.exerciseTypes,exerciseTypes);\n            viewLinker.addLinkedDetailView(exerciseTypeDetailView);\n            this.sideBar.onDocumentLoaded();\n            let startingDisplayOrder = BasicObjectDefinitionFactory.getInstance().generateStartingDisplayOrder(exerciseTypeDefinition);\n            exerciseTypeDetailView.initialise(startingDisplayOrder,false,true);\n\n            const detailForm:Form|null = exerciseTypeDetailRenderer.getForm();\n            if (detailForm) {\n                logger(`Setting up validation rules for ${detailForm.getId()}`);\n                logger(detailForm);\n                ValidationHelper.getInstance().setupValidationForExerciseTypeDetailsForm(detailForm);\n            }\n\n            // setup the event handling for the create new exercise type button\n            let createExerciseType = <HTMLButtonElement>document.getElementById(BUTTON.completeWorkout);\n            logger(`Setting up button for completing the workout`);\n            logger(createExerciseType);\n            if (createExerciseType) {\n                createExerciseType.addEventListener('click',(event) => {\n                    logger(`Completing the workout`);\n                    this.currentWorkout.completed = true;\n                    this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n                    if (detailForm) {\n                        detailForm.reset();\n                        detailForm.setReadOnly();\n                    }\n                    this.saveWorkout();\n                    this.createWorkout();\n                    App.getInstance().hideAllSideBars();\n                });\n\n            }\n\n            viewLinker.addListener(this);\n        }\n\n    }\n\n    public getStateManager() {\n        return this.stateManager;\n    }\n\n\n    private createWorkout() {\n        logger(`Creating new current workout`);\n        this.currentWorkout = ObjectDefinitionRegistry.getInstance().createInstance(STATE_NAMES.workouts);\n        logger(this.currentWorkout);\n        this.currentWorkout.name = '';\n\n        if (this.workoutNameEl) this.workoutNameEl.value = '';\n        Controller.getInstance().getStateManager().addNewItemToState(STATE_NAMES.workouts,this.currentWorkout,false);\n        this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n    }\n\n    private saveWorkout() {\n        logger(`Saving current workout`);\n        logger(this.currentWorkout);\n        this.currentWorkout.createdOn = moment().format('YYYYMMDDHHmmss');\n        this.currentWorkout.modifiedOn = moment().format('YYYYMMDDHHmmss');\n\n        Controller.getInstance().getStateManager().updateItemInState(STATE_NAMES.workouts,this.currentWorkout,isSameMongo,false);\n    }\n\n    stateChanged(managerName: string, name: string, newValue: any): void {\n        logger(`${managerName},${name}`);\n        if (name === STATE_NAMES.workouts) {\n            logger(`Workouts loaded`);\n            // is there a current workout?\n            this.currentWorkout = null;\n\n            newValue.forEach((workout:any) => {\n                if (!workout.completed || (workout.completed === 'false')) {\n                    this.currentWorkout = workout;\n                }\n            });\n\n            if (this.currentWorkout) {\n                logger(`Workouts loaded found existing current workout`);\n                if (this.workoutNameEl && this.currentWorkout.name) this.workoutNameEl.value = this.currentWorkout.name;\n                this.stateManager.setStateByName(STATE_NAMES.exerciseTypes,this.currentWorkout.exercises,true);\n            }\n            else {\n                logger(`Workouts loaded no existing current workout, creating and saving`);\n                this.createWorkout();\n            }\n        }\n    }\n\n    stateChangedItemAdded(managerName: string, name: string, itemAdded: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            logger(`Added a new exercise to workout`);\n            logger(itemAdded);\n\n            this.currentWorkout.exercises.push(itemAdded);\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemRemoved(managerName: string, name: string, itemRemoved: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemRemoved._id);\n            logger(`Removing exercise to workout at index ${foundIndex}`);\n            logger(itemRemoved);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1);\n            }\n            this.saveWorkout();\n        }\n    }\n\n    stateChangedItemUpdated(managerName: string, name: string, itemUpdated: any, itemNewValue: any): void {\n        if (name === STATE_NAMES.exerciseTypes) {\n            // find the exercise in the current workout\n            let foundIndex = this.currentWorkout.exercises.findIndex((exercise:any) => exercise._id === itemNewValue._id);\n            logger(`Updating exercise to workout at index ${foundIndex}`);\n            logger(itemNewValue);\n            if (foundIndex >= 0) {\n                this.currentWorkout.exercises.splice(foundIndex,1,itemNewValue);\n            }\n            this.saveWorkout();\n        }\n\n    }\n\n    create(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Added a new exercise to workout from view`);\n        logger(dataObj);\n        this.stateManager.addNewItemToState(STATE_NAMES.exerciseTypes,dataObj,false);\n    }\n    update(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Updating exercise in workout from view`);\n        logger(dataObj);\n        this.stateManager.updateItemInState(STATE_NAMES.exerciseTypes,dataObj,isSameMongo,false);\n    }\n    delete(controller:DataObjectController,typeName:string,dataObj:any):void {\n        logger(`Deleting exercise from workout from view`);\n        logger(dataObj);\n        this.stateManager.removeItemFromState(STATE_NAMES.exerciseTypes,dataObj,isSameMongo,false);\n    }\n\n\n\n}","export function addDurations(duration1:string, duration2:string):string {\n    const durationRegexp: RegExp = /^(\\d+:)?[0-5]?\\d:[0-5]\\d$/;\n\n    // check both are valid durations\n    const duration1Valid:boolean = durationRegexp.test(duration1);\n    const duration2Valid:boolean = durationRegexp.test(duration2);\n\n    if (duration1Valid && duration2Valid) {\n\n        // split them into seconds, minutes, and hours\n        const duration1Components:string[] = duration1.split(':');\n        const duration2Components:string[] = duration2.split(':');\n\n\n        let carry = 0;\n        // add the seconds (last elements in each)\n        const duration1Seconds = parseInt(duration1Components[duration1Components.length - 1]);\n        const duration2Seconds = parseInt(duration2Components[duration2Components.length - 1]);\n\n\n\n        let sumSeconds = duration1Seconds + duration2Seconds;\n        if (sumSeconds >= 60) {\n            carry = 1;\n            sumSeconds -= 60;\n        }\n\n        const duration1Minutes = parseInt(duration1Components[duration1Components.length - 2]);\n        const duration2Minutes = parseInt(duration2Components[duration2Components.length - 2]);\n\n        let sumMinutes = duration1Minutes + duration2Minutes + carry;\n        if (sumMinutes >= 60) {\n            carry = 1;\n            sumMinutes -= 60;\n        }\n\n        // do we have hours?\n        let duration1Hours = 0;\n        if (duration1Components.length == 3) {\n            duration1Hours = parseInt(duration1Components[0]);\n        }\n        let duration2Hours = 0;\n        if (duration2Components.length == 3) {\n            duration2Hours = parseInt(duration2Components[0]);\n        }\n\n\n        let sumHours = duration1Hours + duration2Hours + carry;\n\n        return `${(sumHours > 0)?sumHours + ':':''}${(sumMinutes < 10)?'0'+sumMinutes:sumMinutes}:${(sumSeconds < 10)?'0'+sumSeconds:sumSeconds}`\n    }\n    else {\n        return '00:00';\n    }\n}","import debug from 'debug';\nimport {CollectionViewRenderer} from \"../interface/CollectionViewRenderer\";\nimport {CollectionView} from \"../interface/CollectionView\";\nimport {CollectionViewEventHandler} from \"../interface/CollectionViewEventHandler\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    Modifier,\n    RowPosition,\n    SCREEN_WIDTH_LARGE,\n    SCREEN_WIDTH_MEDIUM,\n    SCREEN_WIDTH_SMALL\n} from \"../../ConfigurationTypes\";\nimport browserUtil from \"../../../util/BrowserUtil\";\nimport {ContextualInformationHelper, TogglePlacement} from \"../../context/ContextualInformationHelper\";\n\nconst avLogger = debug('carousel-renderer');\n\nexport class CarouselViewRendererUsingContext implements CollectionViewRenderer {\n    protected view: CollectionView;\n    protected eventHandler: CollectionViewEventHandler;\n    protected config: CarouselDOMConfig;\n\n    private lastRenderedContainer:HTMLElement|null = null;\n    private lastRenderedCollectionName:string|null = null;\n    private lastRenderedCollection:any|null = null;\n    private previousWindowWidth:number = 0;\n\n    constructor(view: CollectionView, eventHandler: CollectionViewEventHandler, config: CarouselDOMConfig) {\n        this.view = view;\n        this.eventHandler = eventHandler;\n        this.config = config;\n    }\n\n    onDocumentLoaded(): void {\n        // we need to track window resizing\n        this.previousWindowWidth = window.innerWidth;\n\n        window.addEventListener('resize',(event) => {\n            const newWindowWidth = window.innerWidth;\n            let reRenderRequired:boolean = false;\n            if (newWindowWidth < this.previousWindowWidth) {\n                if (this.previousWindowWidth > SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth <= SCREEN_WIDTH_LARGE) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to large`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to medium`);\n                    }\n                }\n                if (this.previousWindowWidth > SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth <= SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                        avLogger(`window reduced and is now smaller or equal to small`);\n                    }\n                }\n            }\n            else {\n                if (this.previousWindowWidth <= SCREEN_WIDTH_SMALL) {\n                    if (newWindowWidth > SCREEN_WIDTH_SMALL) {\n                        // need to re-render carousel\n                        avLogger(`window increased and is now larger than small`);\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_MEDIUM) {\n                    if (newWindowWidth > SCREEN_WIDTH_MEDIUM) {\n                        avLogger(`window increased and is now larger than medium`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n                if (this.previousWindowWidth <= SCREEN_WIDTH_LARGE) {\n                    if (newWindowWidth > SCREEN_WIDTH_LARGE) {\n                        avLogger(`window increased and is now larger than large`);\n                        // need to re-render carousel\n                        reRenderRequired = true;\n                    }\n                }\n            }\n            this.previousWindowWidth = newWindowWidth;\n            if (this.lastRenderedContainer && this.lastRenderedCollection && this.lastRenderedCollectionName && reRenderRequired) {\n                this.setDisplayElementsForCollectionInContainer(this.lastRenderedContainer,this.lastRenderedCollectionName,this.lastRenderedCollection);\n            }\n        });\n\n\n    }\n\n    public createDisplayElementForCollectionItem(collectionName: string, item: any): HTMLElement {\n        const canDeleteItem = this.view.hasPermissionToDeleteItemInNamedCollection(collectionName,item);\n\n        avLogger(`view ${this.view.getName()}: creating carousel item`);\n        avLogger(item);\n\n        const collectionConfig = this.view.getCollectionUIConfig();\n\n\n        let childEl: HTMLElement = document.createElement(collectionConfig.resultsElementType);\n        browserUtil.addRemoveClasses(childEl, collectionConfig.resultsClasses);\n        browserUtil.addAttributes(childEl, collectionConfig.resultsElementAttributes);\n\n\n        if (collectionConfig.detail.background) {\n            let backgroundEl = document.createElement(collectionConfig.detail.background.elementType);\n            browserUtil.addRemoveClasses(backgroundEl, collectionConfig.detail.background.elementClasses);\n            browserUtil.addAttributes(backgroundEl, collectionConfig.detail.background.elementAttributes);\n            childEl.appendChild(backgroundEl);\n            this.view.renderBackgroundForItemInNamedCollection(backgroundEl, collectionName, item);\n        }\n\n\n        // the content may be structured\n        let textEl = childEl;\n        if (collectionConfig.detail.containerClasses) {\n            let contentEl: HTMLElement = document.createElement('div');\n            browserUtil.addRemoveClasses(contentEl, collectionConfig.detail.containerClasses);\n\n\n            textEl = document.createElement(collectionConfig.detail.textElementType);\n            browserUtil.addRemoveClasses(textEl, collectionConfig.detail.textElementClasses);\n\n            contentEl.appendChild(textEl);\n\n            if (collectionConfig.extraActions || collectionConfig.detail.delete) {\n                let buttonsEl = document.createElement(this.config.actionContainer.elementType);\n                browserUtil.addRemoveClasses(buttonsEl, this.config.actionContainer.elementClasses);\n\n                contentEl.appendChild(buttonsEl);\n\n\n                if (collectionConfig.extraActions) {\n                    collectionConfig.extraActions.forEach((extraAction) => {\n                        const hasPermissionForAction = this.view.hasPermissionToActionItemInNamedCollection(extraAction.name,collectionName,item);\n                        if (hasPermissionForAction) {\n\n                            let action: HTMLElement = document.createElement('button');\n                            action.setAttribute('type', 'button');\n                            browserUtil.addRemoveClasses(action, extraAction.buttonClasses);\n                            browserUtil.addAttributes(action,extraAction.attributes);\n                            if (extraAction.buttonText) {\n                                action.innerHTML = extraAction.buttonText;\n                            }\n                            if (extraAction.iconClasses) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, extraAction.iconClasses);\n                                iconEl.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n                                action.appendChild(iconEl);\n                            }\n                            action.setAttribute(EXTRA_ACTION_ATTRIBUTE_NAME, extraAction.name);\n\n                            action.addEventListener('click', (event) => {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                this.eventHandler.eventActionClicked(event);\n                            });\n                            buttonsEl.appendChild(action);\n                        }\n                    });\n                }\n                if (collectionConfig.detail.delete && collectionConfig && canDeleteItem) {\n                    let deleteButtonEl: HTMLElement = document.createElement('button');\n                    deleteButtonEl.setAttribute('type', 'button');\n                    browserUtil.addRemoveClasses(deleteButtonEl, collectionConfig.detail.delete.buttonClasses);\n                    browserUtil.addAttributes(deleteButtonEl, collectionConfig.detail.delete.attributes);\n                    if (collectionConfig.detail.delete.buttonText) {\n                        deleteButtonEl.innerHTML = collectionConfig.detail.delete.buttonText;\n                    }\n                    if (collectionConfig.detail.delete.iconClasses) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.detail.delete.iconClasses);\n                        deleteButtonEl.appendChild(iconEl);\n                    }\n                    deleteButtonEl.addEventListener('click', (event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this.eventHandler.eventDeleteClickItem(event);\n                    });\n                    buttonsEl.appendChild(deleteButtonEl);\n                }\n\n            }\n\n            childEl.appendChild(contentEl);\n\n            if (collectionConfig.detail.drag) {\n                childEl.setAttribute('draggable', 'true');\n                childEl.addEventListener('dragstart', this.eventHandler.eventStartDrag);\n            }\n            // add selection actions\n            if (collectionConfig.detail.select) {\n                childEl.addEventListener('click', this.eventHandler.eventClickItem);\n            }\n        }\n\n\n        const displayText = this.view.renderDisplayForItemInNamedCollection(textEl, collectionName, item);\n        // add icons\n\n\n        // add modifiers for patient state\n        if (collectionConfig.modifiers) {\n            const modifier = this.view.getModifierForItemInNamedCollection(collectionName, item);\n            const secondModifier = this.view.getSecondaryModifierForItemInNamedCollection(collectionName, item);\n            switch (modifier) {\n                case Modifier.normal: {\n                    avLogger(`view ${this.view.getName()}: normal item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal);\n                    if (collectionConfig.icons && collectionConfig.icons.normal) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.normal);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.normal, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                        }\n                    }\n\n                    break;\n                }\n                case Modifier.active: {\n                    avLogger(`view ${this.view.getName()}: active item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active);\n                    if (collectionConfig.icons && collectionConfig.icons.active) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.active, false);\n                            browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n                case Modifier.inactive: {\n                    avLogger(`view ${this.view.getName()}: inactive item`);\n                    browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive);\n                    if (collectionConfig.icons && collectionConfig.icons.inactive) {\n                        let iconEl = document.createElement('i');\n                        browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.inactive);\n                        textEl.appendChild(iconEl);\n                    }\n\n                    switch (secondModifier) {\n                        case Modifier.warning: {\n                            if (collectionConfig.icons && collectionConfig.icons.warning) {\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.inactive, false);\n                                browserUtil.addRemoveClasses(childEl, collectionConfig.modifiers.warning, true);\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.warning);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                        case Modifier.active: {\n                            if (collectionConfig.icons && collectionConfig.icons.active) {\n                                let iconEl = document.createElement('i');\n                                browserUtil.addRemoveClasses(iconEl, collectionConfig.icons.active);\n                                textEl.appendChild(iconEl);\n                            }\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return childEl;\n    }\n\n    public setDisplayElementsForCollectionInContainer(containerEl: HTMLElement, collectionName: string, newState: any): void {\n        avLogger(`view ${this.view.getName()}: creating carousel results`);\n        avLogger(newState);\n        // remove the previous items from list\n        browserUtil.removeAllChildren(containerEl);\n\n        // need to break the items up by row, and the last row is active (assumes increasing time order)\n        const numberOfResults = newState.length;\n\n        // number of items per row depends on view port\n        let itemsPerRow = this.config.itemsPerRow.xlarge;\n        if (window.innerWidth <= SCREEN_WIDTH_LARGE) {\n            itemsPerRow = this.config.itemsPerRow.large;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_MEDIUM) {\n           itemsPerRow = this.config.itemsPerRow.medium;\n        }\n        if (window.innerWidth <= SCREEN_WIDTH_SMALL) {\n            itemsPerRow = this.config.itemsPerRow.small;\n        }\n\n\n\n        const numberOfRows = Math.ceil(numberOfResults / itemsPerRow);\n        avLogger(`view ${this.view.getName()}: creating carousel with number of results per row of ${itemsPerRow} with rows ${numberOfRows}`);\n        for (let rowIndex = 0; rowIndex < numberOfRows; rowIndex++) {\n            // create the row\n            let rowContainerEl = document.createElement(this.config.rowContainer.elementType);\n            browserUtil.addRemoveClasses(rowContainerEl, this.config.rowContainer.elementClasses);\n            browserUtil.addAttributes(rowContainerEl, this.config.rowContainer.elementAttributes);\n            //browserUtil.addAttributes(rowContainerEl,[{name:'style',value:'display:block'}]);\n\n            let rowEl = document.createElement(this.config.row.elementType);\n            browserUtil.addRemoveClasses(rowEl, this.config.row.elementClasses);\n            browserUtil.addAttributes(rowEl, this.config.row.elementAttributes);\n            rowContainerEl.appendChild(rowEl);\n\n            // if this the active row?\n            if (((rowIndex === 0) && this.config.activeRowPosition === RowPosition.first) ||\n                ((rowIndex === (numberOfRows - 1)) && this.config.activeRowPosition === RowPosition.last)) {\n                browserUtil.addRemoveClasses(rowContainerEl, this.config.activeRow.elementClasses);\n                browserUtil.addAttributes(rowContainerEl, this.config.activeRow.elementAttributes);\n            }\n\n            let itemIndex = rowIndex * itemsPerRow;\n\n            while (itemIndex < ((rowIndex + 1) * itemsPerRow) && (itemIndex < numberOfResults)) {\n                avLogger(`rowIndex ${rowIndex} item index ${itemIndex}`);\n                const item = newState[itemIndex];\n\n\n                let itemContainerEl = rowEl;\n                if (this.config.multipleItemsPerRowContainer) {\n                    itemContainerEl = document.createElement(this.config.multipleItemsPerRowContainer.elementType);\n                    browserUtil.addRemoveClasses(itemContainerEl, this.config.multipleItemsPerRowContainer.elementClasses);\n                    browserUtil.addAttributes(itemContainerEl, this.config.multipleItemsPerRowContainer.elementAttributes);\n                    rowEl.appendChild(itemContainerEl);\n                }\n\n                const itemEl = this.createDisplayElementForCollectionItem(collectionName, item);\n                itemContainerEl.appendChild(itemEl);\n\n                ContextualInformationHelper.getInstance().addContextToElement(this.view.getName(),collectionName,item,itemEl,true,TogglePlacement.bottom);\n                itemEl.addEventListener('contextmenu',ContextualInformationHelper.getInstance().handleContextMenu);\n\n                itemIndex++;\n            }\n\n\n            containerEl.appendChild(rowContainerEl);\n\n        }\n        $('[data-toggle=\"tooltip\"]').tooltip();\n\n        this.lastRenderedContainer = containerEl;\n        this.lastRenderedCollectionName = collectionName;\n        this.lastRenderedCollection = newState;\n\n    }\n\n}","import AbstractStatefulCollectionView from \"../../ui-framework/view/implementation/AbstractStatefulCollectionView\";\nimport {\n    CarouselDOMConfig,\n    EXTRA_ACTION_ATTRIBUTE_NAME,\n    KeyType,\n    Modifier,\n    RowPosition\n} from \"../../ui-framework/ConfigurationTypes\";\nimport {DRAGGABLE, STATE_NAMES, VIEW_NAME} from \"../../AppTypes\";\nimport Controller from \"../../Controller\";\nimport {isSameMongo} from \"../../util/EqualityFunctions\";\nimport {CollectionViewListener} from \"../../ui-framework/view/interface/CollectionViewListener\";\nimport {View} from \"../../ui-framework/view/interface/View\";\n\nimport debug from 'debug';\nimport moment from \"moment\";\nimport {addDurations} from \"../../util/DurationFunctions\";\nimport {truncateString} from \"../../util/MiscFunctions\";\nimport Chart from 'chart.js/auto';\nimport App from \"../../App\";\nimport {CollectionViewListenerForwarder} from \"../../ui-framework/view/delegate/CollectionViewListenerForwarder\";\nimport {AlertManager} from \"../../ui-framework/alert/AlertManager\";\nimport {ContextDefinition, ContextualInformationHelper} from \"../../ui-framework/context/ContextualInformationHelper\";\nimport {CarouselViewRendererUsingContext} from \"../../ui-framework/view/renderer/CarouselViewRendererUsingContext\";\nimport {AlertEvent, AlertListener, AlertType} from \"../../ui-framework/alert/AlertListener\";\nimport {CollectionViewEventHandlerDelegateUsingContext} from \"../../ui-framework/view/delegate/CollectionViewEventHandlerDelegateUsingContext\";\n\nconst logger = debug('workouts-view');\n\ntype ExerciseSummary = {\n    weight:number,\n    distance:number,\n    duration:string\n}\n\ntype ChartRef = {\n    _id:string,\n    chart:Chart|null\n}\n\n\n\n\nexport class WorkoutsViewUsingContext extends AbstractStatefulCollectionView implements CollectionViewListener {\n\n    private static DOMConfig: CarouselDOMConfig = {\n        itemsPerRow: {\n            small:1,\n            medium:2,\n            large: 3,\n            xlarge: 4\n        },\n        rowContainer: {\n            elementClasses: \"carousel-item\",\n            elementType: 'div',\n        },\n        activeRow: {\n            elementType: '',\n            elementClasses: 'active',\n        },\n        activeRowPosition:RowPosition.last,\n        row: {\n            elementClasses: \"row\",\n            elementType: 'div',\n        },\n        multipleItemsPerRowContainer: {\n            elementType: 'div',\n            elementClasses: 'col-sm-12 col-md-4 col-lg-3 mb-2',\n        },\n        actionContainer: {\n            elementType:'div',\n            elementClasses:'card-footer d-flex w-100 justify-content-end'\n        },\n        collectionConfig: {\n            viewConfig: {\n                resultsContainerId: 'workouts',\n                dataSourceId: VIEW_NAME.workouts,\n                drop: {\n                    acceptTypes: [DRAGGABLE.typeExerciseType],\n                    acceptFrom: [DRAGGABLE.fromExerciseTypes]\n                }\n            },\n            resultsElementType: 'div',\n            resultsClasses: 'card',\n            keyId: '_id',\n            keyType: KeyType.string,\n            modifiers: {\n                normal:'bg-light',\n                inactive:'bg-light',\n                active:'bg-light',\n                warning:'bg-light',\n            },\n            detail: {\n                containerClasses: 'card-body',\n                textElementType: 'div',\n                textElementClasses: '',\n                select: true,\n                delete: {\n                    buttonClasses:'btn btn-danger btn-circle btn-md',\n                    iconClasses:'fas fa-trash-alt text-white',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Delete this workout\"}]\n                },\n                background: {\n                    elementType:'div',\n                    elementClasses:'',\n                },\n            },\n            extraActions: [\n                {\n                    name: 'template',\n                    buttonText: '',\n                    buttonClasses: 'btn btn-primary btn-circle btn-md mr-2',\n                    iconClasses: 'fas fa-copy',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Add the exercises from this workout to the current workout.\"}]\n\n                },\n                {\n                    name: 'continue',\n                    buttonText: '',\n                    iconClasses:'text-white fas fa-clipboard-list',\n                    buttonClasses: 'btn btn-warning btn-circle btn-md mr-2',\n                    attributes:[{name:'data-toggle',value:\"tooltip\"},{name:'data-placement',value:\"top\"},{name:'title',value:\"Continue this current workout\"}]\n                }\n            ],\n\n        },\n    }\n\n    private chartRefs:ChartRef[];\n\n\n    constructor() {\n        super(WorkoutsViewUsingContext.DOMConfig.collectionConfig, Controller.getInstance().getStateManager(), STATE_NAMES.workouts);\n        this.renderer = new CarouselViewRendererUsingContext(this, this,WorkoutsViewUsingContext.DOMConfig);\n        this.eventHandlerDelegate = new CollectionViewEventHandlerDelegateUsingContext(this,<CollectionViewListenerForwarder>this.eventForwarder);\n        this.chartRefs = [];\n\n        this.getIdForItemInNamedCollection = this.getIdForItemInNamedCollection.bind(this);\n        this.getItemId = this.getItemId.bind(this);\n\n        let context:ContextDefinition = ContextualInformationHelper.getInstance().addContextFromView(this,STATE_NAMES.workouts,'Workouts');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'template','Copy exercises to Current Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-copy');\n        ContextualInformationHelper.getInstance().addActionToContext(context,'continue','Continue Current Workout',this.eventHandlerDelegate.eventActionClicked,'fas fa-clipboard-list');\n\n    }\n\n    getItemDescription(from: string, item: any): string {\n        let buffer = '';\n        if (item.exercises) {\n            item.exercises.forEach((exercise:any) => {\n                buffer += `<strong>${exercise.name}</strong>: `;\n                if (exercise.type === 'cardio') {\n                    buffer += `${exercise.distance} km in ${exercise.duration}`;\n                }\n                else {\n                    buffer += `${exercise.sets} sets of ${exercise.reps} reps in ${exercise.duration}`;\n                }\n                buffer += `<br/>`;\n            });\n        }\n        return buffer;\n    }\n\n    canDeleteItem(view: View, selectedItem: any): boolean {\n        return (selectedItem.completed);\n    }\n\n    compareItemsForEquality(item1: any, item2: any): boolean {\n        return isSameMongo(item1, item2);\n    }\n\n    getItemId(from: string, item: any): string {\n        return this.getIdForItemInNamedCollection(from,item);\n    }\n\n    getIdForItemInNamedCollection(name: string, item: any) {\n        return item._id;\n    }\n\n\n\n\n    private calculateExerciseSummary(item:any) : ExerciseSummary {\n        let result:ExerciseSummary = {\n            weight:0,\n            distance:0,\n            duration:'00:00'\n        };\n\n        if (item.exercises) {\n            for (let index = 0;index < item.exercises.length;index++) {\n                const exercise = item.exercises[index];\n                result.weight += exercise.weight;\n                result.distance += exercise.distance;\n                result.duration = addDurations(result.duration,exercise.duration);\n            }\n        }\n        return result;\n    }\n\n    renderDisplayForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any): void {\n        let summary = this.calculateExerciseSummary(item);\n        let buffer = '';\n        buffer += `<h5 class=\"card-title\">`;\n        if (item.name) {\n            buffer+= `${item.name}</h5>`;\n            buffer += `<h6 class=\"card-subtitle\">${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h6>`;\n        }\n        else {\n            if (item.completed) {\n                buffer += `${moment(item.createdOn, 'YYYYMMDDHHmmss').format('ddd, DD/MM/YYYY HH:mm')}</h5>`;\n            } else {\n                buffer += 'Current</h5>';\n            }\n\n        }\n        buffer += `<ul class=\"list-group list-group-flush\">`;\n        buffer += `<li class=\"list-group-item\"><strong>Duration:</strong> ${summary.duration}</li>`;\n        if (summary.weight > 0)   buffer += `<li class=\"list-group-item\"><strong>Total Weight:</strong> ${summary.weight}</li>`;\n        if (summary.distance > 0) buffer += `<li class=\"list-group-item\"><strong>Total Distance: </strong> ${summary.distance}</li>`;\n        buffer += `</ul>`;\n        containerEl.innerHTML = buffer;\n    }\n\n\n    hasPermissionToDeleteItemInNamedCollection(name: string, item: any): boolean {\n        return (item.completed);\n    }\n\n    hasPermissionToActionItemInNamedCollection(actionName: string, name: string, item: any): boolean {\n        let result = false;\n        if (actionName === 'template') {\n            if ((item.completed) && (item.completed === true)) {\n                result = true;\n            }\n        }\n        if (actionName === 'continue') {\n            if (item.completed === false) {\n                result = true;\n            }\n        }\n        return result;\n    }\n\n    getModifierForItemInNamedCollection(name: string, item: any): Modifier {\n        let result = Modifier.inactive;\n        if (item.completed) {\n            if (item.completed !== true) {\n                result = Modifier.active;\n            }\n        }\n        return result;\n    }\n\n    renderBackgroundForItemInNamedCollection(containerEl: HTMLElement, name: string, item: any) {\n        /*\n        Remove a previous chart reference\n         */\n        let foundIndex = this.chartRefs.findIndex((ref:any) => ref._id === item._id);\n        if (foundIndex) {\n            //this.chartRefs[foundIndex].chart?.destroy();\n            logger(`Removing old chart reference for workout ${item._id}`);\n            this.chartRefs.splice(foundIndex,1);\n        }\n\n\n\n        logger(`Rendering chart for`);\n        logger(item);\n        // we are going to render a chart for the workout\n        if (item.exercises) {\n            const dataSourceKeyId = this.getDataSourceKeyId();\n            const resultDataKeyId = this.getIdForItemInNamedCollection(name, item);\n\n            let canvas = document.createElement('canvas');\n            //browserUtil.addAttributes(canvas,[{name:'style',value:'height:100%; width:100%'}]);\n            canvas.setAttribute(this.collectionUIConfig.keyId, resultDataKeyId);\n            canvas.setAttribute(dataSourceKeyId, this.collectionUIConfig.viewConfig.dataSourceId);\n            // chart labels are the exercise names (shortened to 10 characters)\n\n\n            let labels:string[] = [];\n            let data:any[] = [];\n            let bgColour:string[] = []\n            let brColour:string[] = [];\n\n            item.exercises.forEach((exercise: any) => {\n                labels.push(truncateString(exercise.name, 10));\n                if (exercise.type === 'cardio') {\n                    data.push(exercise.distance);\n                    bgColour.push(WorkoutsViewUsingContext.bgCardio);\n                    brColour.push(WorkoutsViewUsingContext.borderCardio);\n                }\n                else {\n                    data.push(exercise.weight);\n                    bgColour.push(WorkoutsViewUsingContext.bgStrength);\n                    brColour.push(WorkoutsViewUsingContext.borderStrength);\n                }\n            });\n            let chartData = {\n                labels: labels,\n                datasets: [{\n                    label:'Exercises',\n                    data: data,\n                    backgroundColor: bgColour,\n                    borderColor: brColour,\n                    borderWidth: 1\n                }]\n            };\n\n\n            const config = {\n                type: 'bar',\n                data: chartData,\n                options: {\n                    responsive: false,\n                    animation:false,\n                    maintainAspectRatio:false,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                },\n            };\n\n            logger(config);\n            try {\n                // @ts-ignore\n                let ref:ChartRef = {_id:item._id, chart: new Chart(canvas, config)};\n                this.chartRefs.push(ref);\n                containerEl.appendChild(canvas);\n            }\n            catch (err) {\n                console.log(err);\n            }\n\n        }\n    }\n\n    private static bgStrength = 'rgba(255, 0, 0, 0.2)';\n    private static bgCardio = 'rgba(0, 50, 255, 0.2)';\n\n    private static borderStrength ='rgb(255, 50, 0)';\n    private static borderCardio = 'rgb(0, 50 , 255)';\n\n    public itemAction(view: View, actionName: string, selectedItem: any) {\n        super.itemAction(view, actionName, selectedItem);\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[0].name) {\n            // add the current list of exercises to the current workout\n            Controller.getInstance().addWorkoutExercisesToCurrentWorkout(selectedItem);\n\n        }\n        // @ts-ignore\n        if (actionName === WorkoutsViewUsingContext.DOMConfig.collectionConfig.extraActions[1].name) {\n            // continue the current workout\n            App.getInstance().showCurrentWorkout();\n\n\n        }\n    }\n\n\n}\n\n","export function truncateString(str:string, num:number):string {\n    // If the length of str is less than or equal to num\n    // just return str--don't truncate it.\n    if (str.length <= num) {\n        return str\n    }\n    // Return str truncated with '...' concatenated to the end of str.\n    return str.slice(0, num) + '...'\n}","//localStorage.debug = 'linked-controller api-ts exercise-types-view app controller-ts controller-ts-detail api-ts socket-ts user-search user-search-detail list-view-renderer';\n//localStorage.debug = 'collection-view-ts collection-view-ts-detail form-detail-view-renderer linked-controller linked-controller-detail exercise-types-view app validation-manager-rule-failure validation-manager';\n//localStorage.debug = 'validation-manager validation-manager-rule-failure abstract-form-detail-validation';\nimport {ContextualInformationHelper} from \"./ui-framework/context/ContextualInformationHelper\";\n\nlocalStorage.debug = 'context-helper';\n\nimport debug from 'debug';\ndebug.log = console.info.bind(console);\n\nimport Controller from './Controller';\nimport UserSearchView from \"./component/view/UserSearchView\";\nimport ChatLogsView from \"./component/view/ChatLogsView\";\nimport {API_Config, NAVIGATION, STATE_NAMES} from \"./AppTypes\";\nimport {UnreadMessageCountListener} from \"./socket/UnreadMessageCountListener\";\nimport UserSearchSidebar from \"./component/sidebar/UserSearchSidebar\";\nimport ChatRoomsSidebar from \"./component/sidebar/ChatRoomsSidebar\";\nimport ExerciseTypesSidebar from \"./component/sidebar/ExerciseTypesSidebar\";\nimport ChatLogDetailView from \"./component/view/ChatLogDetailView\";\nimport FavouriteUserView from \"./component/view/FavouriteUserView\";\nimport BlockedUserView from \"./component/view/BlockedUserView\";\nimport {ExerciseTypesCompositeView} from \"./component/view/ExerciseTypesCompositeView\";\nimport WorkoutSummarySidebar from \"./component/sidebar/WorkoutSummarySidebar\";\nimport {WorkoutSummaryView} from \"./component/view/WorkoutSummaryView\";\nimport CurrentWorkoutSidebar from \"./component/sidebar/CurrentWorkoutSidebar\";\nimport {CurrentWorkoutCompositeView} from \"./component/view/CurrentWorkoutCompositeView\";\nimport {WorkoutsViewUsingContext} from \"./component/view/WorkoutsViewUsingContext\";\n\n\nconst logger = debug('app');\n\nexport default class App implements UnreadMessageCountListener {\n\n    private static _instance: App;\n\n    public static getInstance(): App {\n        if (!(App._instance)) {\n            App._instance = new App();\n        }\n        return App._instance;\n    }\n\n    // @ts-ignore\n    private exerciseTypesSidebar: ExerciseTypesSidebar;\n    // @ts-ignore\n    private userSearchSidebar: UserSearchSidebar;\n    // @ts-ignore\n    private chatSidebar: ChatRoomsSidebar;\n    // @ts-ignore\n    private workoutSummarySidebar: WorkoutSummarySidebar;\n    // @ts-ignore\n    private currentWorkoutSidebar: CurrentWorkoutSidebar;\n    // @ts-ignore\n    private currentWorkoutView: CurrentWorkoutCompositeView;\n    // @ts-ignore\n    private chatView: ChatLogsView;\n\n    // @ts-ignore\n    private thisEl: HTMLDivElement | null;\n    // @ts-ignore\n    private chatNavigationItem: HTMLAnchorElement | null;\n\n    private constructor() {\n        // event handlers\n        this.handleShowUserSearch = this.handleShowUserSearch.bind(this);\n        this.handleShowExerciseTypes = this.handleShowExerciseTypes.bind(this);\n        this.handleShowChat = this.handleShowChat.bind(this);\n        this.handleShowWorkoutSummary = this.handleShowWorkoutSummary.bind(this);\n        this.handleShowCurrentWorkout = this.handleShowCurrentWorkout.bind(this);\n\n        Controller.getInstance().connectToApplication(this, window.localStorage);\n    }\n\n    getCurrentUser() {\n        return Controller.getInstance().getLoggedInUserId();\n    }\n\n    private setupNavigationItemHandling() {\n        // @ts-ignore\n        document.getElementById(NAVIGATION.userSearchId).addEventListener('click', this.handleShowUserSearch);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.exerciseTypesId).addEventListener('click', this.handleShowExerciseTypes);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.workoutSummary).addEventListener('click', this.handleShowWorkoutSummary);\n        // @ts-ignore\n        document.getElementById(NAVIGATION.currentWorkout).addEventListener('click', this.handleShowCurrentWorkout);\n        // @ts-ignore\n        this.chatNavigationItem = document.getElementById(NAVIGATION.chatId);\n\n        // @ts-ignore\n        this.chatNavigationItem.addEventListener('click', this.handleShowChat);\n    }\n\n    private setupUserSearchViews() {\n        // add the subviews for the user search\n        this.userSearchSidebar = new UserSearchSidebar();\n        const recentSearches = new UserSearchView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(recentSearches, {containerId: UserSearchSidebar.SidebarContainers.recentSearches});\n        const favouriteUsers = new FavouriteUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(favouriteUsers, {containerId: UserSearchSidebar.SidebarContainers.favourites});\n        const blockedUsers = new BlockedUserView(Controller.getInstance().getStateManager());\n        this.userSearchSidebar.addView(blockedUsers, {containerId: UserSearchSidebar.SidebarContainers.blocked});\n        this.userSearchSidebar.onDocumentLoaded();\n    }\n\n    private setupChatViews() {\n        // add the views to the chat side bar\n        this.chatSidebar = new ChatRoomsSidebar();\n        this.chatView = new ChatLogsView();\n        this.chatSidebar.addView(this.chatView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLogs});\n\n        const chatLogView = new ChatLogDetailView(Controller.getInstance().getStateManager());\n        this.chatSidebar.addView(chatLogView, {containerId: ChatRoomsSidebar.SidebarContainers.chatLog});\n        this.chatView.addEventListener(chatLogView);\n        this.chatSidebar.onDocumentLoaded();\n    }\n\n    onDocumentLoad() {\n        logger('document loaded');\n        // @ts-ignore\n        this.thisEl = document.getElementById('root');\n\n        this.setupUserSearchViews();\n        this.setupChatViews();\n        this.setupNavigationItemHandling();\n\n        this.exerciseTypesSidebar = new ExerciseTypesSidebar();\n        new ExerciseTypesCompositeView(this.exerciseTypesSidebar).onDocumentLoaded();\n\n        //new WorkoutsView().onDocumentLoaded(); // carousel view\n        new WorkoutsViewUsingContext().onDocumentLoaded();\n\n        this.workoutSummarySidebar = new WorkoutSummarySidebar();\n        this.workoutSummarySidebar.addView(new WorkoutSummaryView(),{containerId: WorkoutSummarySidebar.SidebarContainers.container});\n        this.workoutSummarySidebar.onDocumentLoaded();\n\n        this.currentWorkoutSidebar = new CurrentWorkoutSidebar();\n        this.currentWorkoutView = new CurrentWorkoutCompositeView(this.currentWorkoutSidebar);\n        this.currentWorkoutView.onDocumentLoaded();\n\n        ContextualInformationHelper.getInstance().onDocumentLoaded();\n        Controller.getInstance().onDocumentLoaded();\n\n    }\n\n\n    hideAllSideBars() {\n        this.chatSidebar.eventHide(null);\n        this.userSearchSidebar.eventHide(null);\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventHide(null);\n    }\n\n    handleShowUserSearch(event: Event) {\n        logger('Handling Show User Search');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.userSearchSidebar.eventShow(event);\n    }\n\n    handleShowWorkoutSummary(event: Event) {\n        logger('Handling Show Workout Summary');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.hideAllSideBars();\n        this.workoutSummarySidebar.eventShow(event);\n    }\n\n    handleShowCurrentWorkout(event: Event) {\n        logger('Handling Show Current Workout');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.currentWorkoutSidebar.eventShow(event);\n    }\n\n\n    handleShowExerciseTypes(event: Event) {\n        logger('Handling Show Exercise Types');\n        event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.exerciseTypesSidebar.eventShow(event);\n    }\n\n    handleShowChat(roomName: string | null) {\n        logger('Handling Show Chat');\n        //event.preventDefault();\n        //this.hideAllSideBars();\n        // prevent anything from happening if we are not logged in\n        if (!Controller.getInstance().isLoggedIn()) {\n            // @ts-ignore\n            window.location.href = API_Config.login;\n            return;\n        }\n        this.chatSidebar.eventShow(null);\n        if (roomName) {\n            this.chatView.selectChatRoom(roomName);\n        }\n    }\n\n\n    countChanged(newCount: number): void {\n        //\n        let buffer = 'Chat <i class=\"fas fa-inbox\"></i>';\n        if (newCount > 0) {\n            buffer += ` <span class=\"badge badge-pill badge-primary\">&nbsp;${newCount}&nbsp;</span>`;\n        }\n        if (this.chatNavigationItem) this.chatNavigationItem.innerHTML = `${buffer}`;\n    }\n\n    addingExerciseToCurrentWorkout(exerciseType:any) {\n        this.exerciseTypesSidebar.eventHide(null);\n        this.currentWorkoutSidebar.eventShow(null);\n        this.currentWorkoutView.getStateManager().addNewItemToState(STATE_NAMES.exerciseTypes,exerciseType, false);\n    }\n\n    showCurrentWorkout() {\n        this.currentWorkoutSidebar.eventShow(null);\n    }\n}\n\n\n$(function() {\n    App.getInstance().onDocumentLoad();\n});","var map = {\n\t\"./af\": 2786,\n\t\"./af.js\": 2786,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 4130,\n\t\"./ar-dz.js\": 4130,\n\t\"./ar-kw\": 6135,\n\t\"./ar-kw.js\": 6135,\n\t\"./ar-ly\": 6440,\n\t\"./ar-ly.js\": 6440,\n\t\"./ar-ma\": 7702,\n\t\"./ar-ma.js\": 7702,\n\t\"./ar-sa\": 6040,\n\t\"./ar-sa.js\": 6040,\n\t\"./ar-tn\": 7100,\n\t\"./ar-tn.js\": 7100,\n\t\"./ar.js\": 867,\n\t\"./az\": 1083,\n\t\"./az.js\": 1083,\n\t\"./be\": 9808,\n\t\"./be.js\": 9808,\n\t\"./bg\": 8338,\n\t\"./bg.js\": 8338,\n\t\"./bm\": 7438,\n\t\"./bm.js\": 7438,\n\t\"./bn\": 8905,\n\t\"./bn-bd\": 6225,\n\t\"./bn-bd.js\": 6225,\n\t\"./bn.js\": 8905,\n\t\"./bo\": 1560,\n\t\"./bo.js\": 1560,\n\t\"./br\": 1278,\n\t\"./br.js\": 1278,\n\t\"./bs\": 622,\n\t\"./bs.js\": 622,\n\t\"./ca\": 2468,\n\t\"./ca.js\": 2468,\n\t\"./cs\": 5822,\n\t\"./cs.js\": 5822,\n\t\"./cv\": 877,\n\t\"./cv.js\": 877,\n\t\"./cy\": 7373,\n\t\"./cy.js\": 7373,\n\t\"./da\": 4780,\n\t\"./da.js\": 4780,\n\t\"./de\": 9740,\n\t\"./de-at\": 217,\n\t\"./de-at.js\": 217,\n\t\"./de-ch\": 894,\n\t\"./de-ch.js\": 894,\n\t\"./de.js\": 9740,\n\t\"./dv\": 5300,\n\t\"./dv.js\": 5300,\n\t\"./el\": 837,\n\t\"./el.js\": 837,\n\t\"./en-au\": 8348,\n\t\"./en-au.js\": 8348,\n\t\"./en-ca\": 7925,\n\t\"./en-ca.js\": 7925,\n\t\"./en-gb\": 2243,\n\t\"./en-gb.js\": 2243,\n\t\"./en-ie\": 6436,\n\t\"./en-ie.js\": 6436,\n\t\"./en-il\": 7207,\n\t\"./en-il.js\": 7207,\n\t\"./en-in\": 4175,\n\t\"./en-in.js\": 4175,\n\t\"./en-nz\": 6319,\n\t\"./en-nz.js\": 6319,\n\t\"./en-sg\": 1662,\n\t\"./en-sg.js\": 1662,\n\t\"./eo\": 2915,\n\t\"./eo.js\": 2915,\n\t\"./es\": 5655,\n\t\"./es-do\": 5251,\n\t\"./es-do.js\": 5251,\n\t\"./es-mx\": 6112,\n\t\"./es-mx.js\": 6112,\n\t\"./es-us\": 1146,\n\t\"./es-us.js\": 1146,\n\t\"./es.js\": 5655,\n\t\"./et\": 5603,\n\t\"./et.js\": 5603,\n\t\"./eu\": 7763,\n\t\"./eu.js\": 7763,\n\t\"./fa\": 6959,\n\t\"./fa.js\": 6959,\n\t\"./fi\": 1897,\n\t\"./fi.js\": 1897,\n\t\"./fil\": 2549,\n\t\"./fil.js\": 2549,\n\t\"./fo\": 4694,\n\t\"./fo.js\": 4694,\n\t\"./fr\": 4470,\n\t\"./fr-ca\": 3049,\n\t\"./fr-ca.js\": 3049,\n\t\"./fr-ch\": 2330,\n\t\"./fr-ch.js\": 2330,\n\t\"./fr.js\": 4470,\n\t\"./fy\": 5044,\n\t\"./fy.js\": 5044,\n\t\"./ga\": 9295,\n\t\"./ga.js\": 9295,\n\t\"./gd\": 2101,\n\t\"./gd.js\": 2101,\n\t\"./gl\": 8794,\n\t\"./gl.js\": 8794,\n\t\"./gom-deva\": 7884,\n\t\"./gom-deva.js\": 7884,\n\t\"./gom-latn\": 3168,\n\t\"./gom-latn.js\": 3168,\n\t\"./gu\": 5349,\n\t\"./gu.js\": 5349,\n\t\"./he\": 4206,\n\t\"./he.js\": 4206,\n\t\"./hi\": 94,\n\t\"./hi.js\": 94,\n\t\"./hr\": 316,\n\t\"./hr.js\": 316,\n\t\"./hu\": 2138,\n\t\"./hu.js\": 2138,\n\t\"./hy-am\": 1423,\n\t\"./hy-am.js\": 1423,\n\t\"./id\": 9218,\n\t\"./id.js\": 9218,\n\t\"./is\": 135,\n\t\"./is.js\": 135,\n\t\"./it\": 626,\n\t\"./it-ch\": 150,\n\t\"./it-ch.js\": 150,\n\t\"./it.js\": 626,\n\t\"./ja\": 9183,\n\t\"./ja.js\": 9183,\n\t\"./jv\": 4286,\n\t\"./jv.js\": 4286,\n\t\"./ka\": 2105,\n\t\"./ka.js\": 2105,\n\t\"./kk\": 7772,\n\t\"./kk.js\": 7772,\n\t\"./km\": 8758,\n\t\"./km.js\": 8758,\n\t\"./kn\": 9282,\n\t\"./kn.js\": 9282,\n\t\"./ko\": 3730,\n\t\"./ko.js\": 3730,\n\t\"./ku\": 1408,\n\t\"./ku.js\": 1408,\n\t\"./ky\": 3291,\n\t\"./ky.js\": 3291,\n\t\"./lb\": 6841,\n\t\"./lb.js\": 6841,\n\t\"./lo\": 5466,\n\t\"./lo.js\": 5466,\n\t\"./lt\": 7010,\n\t\"./lt.js\": 7010,\n\t\"./lv\": 7595,\n\t\"./lv.js\": 7595,\n\t\"./me\": 9861,\n\t\"./me.js\": 9861,\n\t\"./mi\": 5493,\n\t\"./mi.js\": 5493,\n\t\"./mk\": 5966,\n\t\"./mk.js\": 5966,\n\t\"./ml\": 7341,\n\t\"./ml.js\": 7341,\n\t\"./mn\": 5115,\n\t\"./mn.js\": 5115,\n\t\"./mr\": 370,\n\t\"./mr.js\": 370,\n\t\"./ms\": 9847,\n\t\"./ms-my\": 1237,\n\t\"./ms-my.js\": 1237,\n\t\"./ms.js\": 9847,\n\t\"./mt\": 2126,\n\t\"./mt.js\": 2126,\n\t\"./my\": 6165,\n\t\"./my.js\": 6165,\n\t\"./nb\": 4924,\n\t\"./nb.js\": 4924,\n\t\"./ne\": 6744,\n\t\"./ne.js\": 6744,\n\t\"./nl\": 3901,\n\t\"./nl-be\": 9814,\n\t\"./nl-be.js\": 9814,\n\t\"./nl.js\": 3901,\n\t\"./nn\": 3877,\n\t\"./nn.js\": 3877,\n\t\"./oc-lnc\": 2135,\n\t\"./oc-lnc.js\": 2135,\n\t\"./pa-in\": 5858,\n\t\"./pa-in.js\": 5858,\n\t\"./pl\": 4495,\n\t\"./pl.js\": 4495,\n\t\"./pt\": 9520,\n\t\"./pt-br\": 7971,\n\t\"./pt-br.js\": 7971,\n\t\"./pt.js\": 9520,\n\t\"./ro\": 6459,\n\t\"./ro.js\": 6459,\n\t\"./ru\": 1793,\n\t\"./ru.js\": 1793,\n\t\"./sd\": 950,\n\t\"./sd.js\": 950,\n\t\"./se\": 490,\n\t\"./se.js\": 490,\n\t\"./si\": 124,\n\t\"./si.js\": 124,\n\t\"./sk\": 4249,\n\t\"./sk.js\": 4249,\n\t\"./sl\": 4985,\n\t\"./sl.js\": 4985,\n\t\"./sq\": 1104,\n\t\"./sq.js\": 1104,\n\t\"./sr\": 9131,\n\t\"./sr-cyrl\": 9915,\n\t\"./sr-cyrl.js\": 9915,\n\t\"./sr.js\": 9131,\n\t\"./ss\": 5893,\n\t\"./ss.js\": 5893,\n\t\"./sv\": 8760,\n\t\"./sv.js\": 8760,\n\t\"./sw\": 1172,\n\t\"./sw.js\": 1172,\n\t\"./ta\": 7333,\n\t\"./ta.js\": 7333,\n\t\"./te\": 3110,\n\t\"./te.js\": 3110,\n\t\"./tet\": 2095,\n\t\"./tet.js\": 2095,\n\t\"./tg\": 7321,\n\t\"./tg.js\": 7321,\n\t\"./th\": 9041,\n\t\"./th.js\": 9041,\n\t\"./tk\": 9005,\n\t\"./tk.js\": 9005,\n\t\"./tl-ph\": 5768,\n\t\"./tl-ph.js\": 5768,\n\t\"./tlh\": 9444,\n\t\"./tlh.js\": 9444,\n\t\"./tr\": 2397,\n\t\"./tr.js\": 2397,\n\t\"./tzl\": 8254,\n\t\"./tzl.js\": 8254,\n\t\"./tzm\": 1106,\n\t\"./tzm-latn\": 699,\n\t\"./tzm-latn.js\": 699,\n\t\"./tzm.js\": 1106,\n\t\"./ug-cn\": 9288,\n\t\"./ug-cn.js\": 9288,\n\t\"./uk\": 7691,\n\t\"./uk.js\": 7691,\n\t\"./ur\": 3795,\n\t\"./ur.js\": 3795,\n\t\"./uz\": 6791,\n\t\"./uz-latn\": 588,\n\t\"./uz-latn.js\": 588,\n\t\"./uz.js\": 6791,\n\t\"./vi\": 5666,\n\t\"./vi.js\": 5666,\n\t\"./x-pseudo\": 4378,\n\t\"./x-pseudo.js\": 4378,\n\t\"./yo\": 5805,\n\t\"./yo.js\": 5805,\n\t\"./zh-cn\": 3839,\n\t\"./zh-cn.js\": 3839,\n\t\"./zh-hk\": 5726,\n\t\"./zh-hk.js\": 5726,\n\t\"./zh-mo\": 9807,\n\t\"./zh-mo.js\": 9807,\n\t\"./zh-tw\": 4152,\n\t\"./zh-tw.js\": 4152\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 6700;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunktemplate_feo_react_babel\"] = self[\"webpackChunktemplate_feo_react_babel\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [736], () => (__webpack_require__(8362)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","DRAGGABLE_KEY_ID","EXTRA_ACTION_ATTRIBUTE_NAME","Modifier","KeyType","SidebarLocation","RowPosition","SCREEN_WIDTH_LARGE","SCREEN_WIDTH_MEDIUM","SCREEN_WIDTH_SMALL","BrowserUtil","scrollSmoothToId","element","document","block","behavior","scrollToBottomNow","scrollToBottomSmooth","scrollSmoothTo","scrollTo","removeAllChildren","lastChild","addRemoveClasses","isAdding","classesText","classes","classValue","addAttributes","attributes","attribute","removeAttributes","allElementsFromPoint","elements","old_visibility","k","logger","debug","TogglePlacement","defaultIdentifier","ContextualInformationHelper","registry","menuDivEl","menuContentEl","this","handleContextMenu","bind","hideContextMenu","foundIndex","findIndex","context","result","source","defaultType","internalType","displayName","identifier","description","actions","ensureInRegistry","view","addTooltip","placement","bottom","$","html","parent","findContextFromElement","contexts","event","action","actionName","handler","elementDefinition","elementType","elementAttributes","name","value","elementClasses","iconClasses","icon","contextDef","browserUtil","itemEl","buildContextMenu","SOURCE","TYPE","DISPLAYNAME","IDENTIFIER","DESCRIPTION","BOOTSTRAP_TOGGLE","BOOTSTRAP_PLACEMENT","BOOTSTRAP_TOOLTIP_VALUE","BOOTSTRAP_POPOVER_VALUE","BOOTSTRAP_TOGGLE_HTML","BOOTSTRAP_TOGGLE_HTML_VALUE","BOOTSTRAP_PLACEMENT_TOP","BOOTSTRAP_PLACEMENT_BOTTOM","BOOTSTRAP_PLACEMENT_RIGHT","BOOTSTRAP_PLACEMENT_LEFT","stateEventType","smLogger","StateChangedDelegate","suppressEventEmits","suppressEvents","emitEvents","informChangeListenersForStateWithName","eventType","StateChanged","previousObjValue","stateChangeListeners","changeListenersForName","listener","ItemAdded","ItemUpdated","ItemDeleted","err","console","addChangeListenerForName","ensureListenerSetupForName","listenersNameArrayPair","listeners","AbstractStateManager","forceSaves","managerName","state","stateObjForName","getStateByName","stateValueObj","_getState","setStateByName","informListeners","_saveState","stateObjectForName","addNewItemToState","isPersisted","findItemInState","testForEqualityFunction","isItemInState","removeItemFromState","oldItem","item","updateItemInState","msManager","MemoryBufferStateManager","getInstance","_ensureStatePresent","applicationState","_addNewNamedStateToStorage","_replaceNamedStateInStorage","find","_addItemToState","_removeItemFromState","valueIndex","_updateItemInState","Priority","InviteType","sDebug","SocketManager","chatReceivers","callbackForMessage","callbackForData","callbackForLogin","callbackForLogout","callbackForJoinRoom","callbackForExitRoom","callbackForInvite","callbackForChat","callbackForQueue","callbackForUserList","callbackForDeclineInvite","addChatReceiver","setListener","io","login","username","logout","joinChat","room","type","leaveChat","sendInvite","ChatRoom","requiresAcceptDecline","subject","attachment","inviteObj","from","to","sendMessage","priority","Normal","messageObj","message","created","getUserList","sendDeclineInvite","dataObj","JSON","receiver","asyncLogger","AsyncStateManagerWrapper","stateNamesToMonitor","stateChangedItemRemoved","stateChangedItemUpdated","stateChanged","stateChangedItemAdded","getListenerName","aggLogger","AggregateStateManager","filters","mWF","manager","stateManager","managerWithFilters","sm","stateManagers","length","filter","isSame","item1","item2","isSameMongo","Decorator","STATE_NAMES","API_Config","DRAGGABLE","VIEW_NAME","VIEW_CONTAINER","BootstrapNotification","show","topOffset","duration","containerId","notificationManager","bgColorClass","containerNode","titleNode","titleTextNode","closeButtonNode","messageNode","containerEl","setTimeout","NotificationFactory","createNotification","NotificationManager","notificationNode","notificationFactory","notification","currentCount","notifications","parentEl","slLogger","SocketListenerDelegate","handleDataChangedByAnotherUser","changeUser","Controller","getStateManager","_id","user","stateObj","handleMessage","getCurrentUser","UserStatus","lsLogger","BrowserStorageStateManager","useLocalStorage","configuration","window","storage","getItem","stringifiedSaveData","savedResults","savedResultsJSON","newValue","forceResetForGet","getConfiguredStateNames","hasCompletedRun","initialise","cmLogger","ChatManager","blockedList","favouriteList","loggedInUsers","currentUsername","unreadListener","receiveLogin","receiveLogout","receiveInvitation","receiveMessage","receiveQueuedMessages","receiveQueuedInvites","receiveJoinedRoom","receivedLeftRoom","receiveUserList","blocked","index","favourite","savedLogs","localStorage","users","log","ensureChatLogExists","parseInt","moment","joinDateTime","invite","isUserInBlockedList","didChatAlreadyExist","doesChatRoomExist","happyToProceed","chatLog","push","isUserInFavouriteList","splice","receiveDecline","chatLogs","wasOffline","invites","messages","trim","declineInvite","sent","roomName","ensureChatLogExistsWithUser","lastViewed","numOfNewMessages","foundLog","v4","unreadCount","chatLogKey","blockedListKey","favouriteListKey","notLogger","NotificationController","doNotDisturb","handleChatLogUpdated","handleLoggedInUsersUpdated","handleFavouriteUserLoggedIn","handleFavouriteUserLoggedOut","handleInvitationDeclined","handleNewInviteReceived","ScoreSheet","dontDisturbMe","isBlackedListed","isFavourited","chatManager","handleChatLogsUpdated","displayMessage","handleBlockedUsersChanged","handleFavouriteUsersChanged","handleChatStarted","handleOfflineMessagesReceived","RequestType","queueType","apiLogger","ApiUtil","postFetchJSON","postParameters","method","headers","body","query","fetch","url","response","apiFetchJSONWithPost","request","error","apiFetchJSONWithGet","apiFetchJSONWithDelete","apiFetchJSONWithPut","putParameters","fetchJSON","callback","data","dlLogger","DownloadManager","callbackForQueueRequest","setBackgroundChangeListener","setPriorityChangeListener","getPriorityQueueCount","priorityQueue","getBackgroundQueueCount","backgroundQueue","addQLApiRequest","isPriority","POST","params","variables","associatedStateName","addQLMutationRequest","mutation","addApiRequest","requestId","jsonRequest","managerRequest","originalRequest","PRIORITY","priorityChangeListener","handleEventAddToQueue","BACKGROUND","backgroundChangeListener","processPriorityQueue","queueItem","inProgress","initiateFetchForQueueItem","processBackgroundQueue","processQueues","totalQueuedItems","queueId","handleEventRemoveFromQueue","apiUtil","GET","DELETE","PUT","apiSMLogger","RESTApiStateManager","callbackForAddItem","callbackForRemoveItem","callbackForUpdateItem","callbackForGetItems","results","config","bHasCompletedRun","setCompletedRun","runsComplete","getConfigurationForStateName","id","Error","stateName","serverURL","api","isActive","status","FieldType","flogger","vlogger","glogger","rlogger","BasicFieldOperations","setSubElements","formatValue","field","date","currentValue","datetime","boolean","number","float","parsed","parseFloat","isNaN","integer","isValidValue","isValid","resetOnFailure","email","text","password","time","shortTime","previousFieldValues","fieldValue","renderValue","uuid","userId","generate","generateValue","dateRegex","emailRegex","shortTimeRegex","timeRegex","dateTimeRegex","basicPasswordRegex","integerRegex","floatRegexp","booleanRegexp","durationRegexp","FIELD_CreatedOn","FIELD_ModifiedOn","FIELD_CreatedBy_Desc","FIELD_ModifiedBy_Desc","FIELD_CreatedOn_Desc","FIELD_ModifiedOn_Desc","BasicObjectDefinitionFactory","dataObjDef","order","fieldId","fieldDef","displayOrder","createModifierFields","idFieldName","objDef","fields","ops","fieldType","isKey","idType","mandatory","generator","onModify","onCreation","addStringFieldToArray","addNumericFieldToArray","isMandatory","datasource","displayOnly","addFieldToArray","string","ObjectDefinitionRegistry","definitions","definition","findDefinition","fieldOps","collection","createInstanceFromDef","SimpleValueDataSource","addListener","getOptions","cLogger","cLoggerDetail","connectToApplication","restSM","idField","aggregateSM","memorySM","asyncSM","setupDataObjectDefinitions","exerciseTypeDefinition","limitedChoice","workoutDefinition","exercisesFieldDefinition","onDocumentLoaded","socketListerDelegate","getLoggedInUserId","isLoggedIn","loggedInUser","getLoggedInUsername","getServerAPIURL","handleShowChat","create","delete","update","addExerciseToCurrentWorkout","copyOfExercise","addWorkoutExercisesToCurrentWorkout","workout","ViewListenerForwarder","itemDeleted","documentLoaded","itemAction","canDeleteItem","hideRequested","showRequested","itemDropped","avLogger","avLoggerDetails","AbstractView","handleDrop","getItemId","getItemDescription","getUIConfig","addEventListener","uiConfig","setContainedBy","getName","hasChanged","getDataSourceKeyId","draggedObjectJSON","draggedObject","droppedObjectType","droppedObjectFrom","acceptType","drop","acceptTypes","objectType","acceptFrom","DATA_SOURCE","AlertType","CollectionViewListenerForwarder","itemDragStarted","itemSelected","itemDeselected","canSelectItem","ALERT_hideClass","ALERT_showClass","AlertManager","confirmHandler","outcome","cancelHandler","CollectionViewEventHandlerDelegate","selectedItem","eventStartDrag","eventActionClicked","eventClickItem","eventDeleteClickItem","itemId","getCollectionUIConfig","dataSource","getDragData","getItemContext","keyType","compareWith","getItemInNamedCollection","detail","shouldSelect","shouldDelete","eventForwarder","completed","AbstractCollectionView","forwarder","getIdForItemInNamedCollection","addEventCollectionListener","container","renderer","renderBackgroundForItemInNamedCollection","compareItemsForEquality","getModifierForItemInNamedCollection","normal","getBadgeValueForItemInNamedCollection","getBackgroundImageForItemInNamedCollection","updateViewForNamedCollection","viewEl","hasPermissionToDeleteItemInNamedCollection","hasPermissionToUpdateItemInNamedCollection","hasPermissionToActionItemInNamedCollection","setRenderer","AbstractStatefulCollectionView","render","hidden","ListViewRenderer","collectionName","dataSourceKeyId","resultDataKeyId","childEl","textEl","contentEl","imgEl","buttonsEl","badgeValue","badgeEl","extraAction","iconEl","deleteButtonEl","eventHandler","icons","modifier","secondModifier","getSecondaryModifierForItemInNamedCollection","warning","active","inactive","newState","vLogger","vLoggerDetail","UserSearchView","fastSearchEl","renderDisplayForItemInNamedCollection","eventUserSelected","ui","localisedSM","recentUserSearches","label","myUsername","fastSearchValues","searchValue","disabled","minLength","collectionUIConfig","extraActions","fastSearchInputId","dataLimit","DOMConfig","viewConfig","resultsContainerId","dataSourceId","resultsElementType","resultsElementAttributes","resultsClasses","keyId","modifiers","containerClasses","textElementType","textElementClasses","select","quickDelete","buttonClasses","drag","csLogger","ChatLogsView","selectedChatLog","isSameRoom","updateStateManager","selectChatRoom","badge","sbvcLogger","SidebarViewContainer","eventHide","eventShow","addView","viewContainer","sidePanelEl","prefs","closeButtonEl","size","showHide","left","right","top","UserSearchSidebar","SidebarPrefs","expandedSize","location","SidebarContainers","recentSearches","favourites","ChatRoomsSidebar","ExerciseTypesSidebar","csLoggerDetail","ChatLogDetailView","handleAddMessage","handleUserDrop","getDisplayValueForItemInNamedCollection","commentEl","messageContent","sentMessage","messageEl","addChatMessage","chatMessageEl","messageSenderEl","reRenderChatMessages","renderChatLog","checkCanComment","removeAttribute","sendMessageButton","leaveChatButton","fastUserSearch","setAttribute","clearChatLog","newFormId","commentId","submitCommentId","chatLogId","chatLogRoomId","leaveChatId","chatFastSearchUserNames","FavouriteUserView","favUsers","droppedItem","BlockedUserView","blockedUsers","UIFieldType","FormMode","DATA_ID_ATTRIBUTE","FormEventType","ComparisonType","ConditionResponse","ValidationManager","form","rule","targetField","convertedRule","fieldConditions","valueConditions","condition","sourceField","comparison","values","sourceType","formRules","formRule","formRuleSet","rules","ruleFailed","targetValue","sourceValue","lessThan","lessThanEqual","greaterThanEqual","greaterThan","equals","targetType","compareTwoValuesWithTypes","check","areTwoFieldsEqual","isTargetLessThanSource","splits","foundInValue","doesFieldHaveValue","isTargetGreaterThan","isTargetLessThanEqualSource","isTargetGreaterThanEqualSource","isNull","isSourceNull","isNotNull","isSourceNotNull","hasValue","doesSourceFieldHaveValue","ruleCheck","ruleSet","getRulesForFieldChange","formId","ruleSubset","failedResponses","hide","invalid","valid","dlogger","AbstractForm","formListeners","fieldListeners","uiDef","isVisible","isInitialised","hasChangedBoolean","isDisplayOnly","valueChanged","failedValidation","hideModifierFields","fieldGroups","formEvent","target","RESETTING","HIDDEN","SHOWN","checkFormValidationOnDisplay","checkForVisualValidationForDisplayOnly","CREATING","MODIFYING","shouldCancelChange","CANCELLING","CANCELLED","CANCELLING_ABORTED","DELETING","DELETE_ABORTED","DELETED","SAVE_ABORTED","SAVED","SAVING","allFieldsValid","formattedDataObject","getId","getFieldFromDataFieldId","mapItem","map","clearReadOnly","setReadOnly","isDisplayingItem","_isSameObjectAsDisplayed","isReadOnly","RBGFieldOperations","radioButtons","radioButton","BootstrapFormConfigHelper","fieldOperations","rbgFieldOperation","fieldUIConfigs","checkbox","largeText","textarea","choice","radioGroup","displayOrders","displayOrderValue","fieldUIConfig","formatter","validator","messageDisplay","validClasses","invalidClasses","rows","cols","fieldGroup","containedBy","formConfig","unsavedChanges","innerHTML","buttonsContainedBy","cancelButton","buttonText","submitButton","activeSave","group","a","b","ValidationEventHandler","subElements","handleEvent","undefined","fieldConfig","validationElementTarget","fieldElement","subElement","errorMessageDiv","errorMessageEl","processValidation","validationResp","EditingEventListener","editor","editValue","DefaultFieldOptionsListener","optionsChanged","FieldInputElementFactory","errorMessageDivEl","containedByEl","labelEl","descEl","valueOptions","valueEl","valueOption","radioGroupElement","FormElementFactory","buttonEl","buttonDef","formEl","formInputElements","formTAElements","formRBGElements","formSelectElements","unsavedMessage","fieldEl","buttonContainer","createFormButton","cancelButtonEl","submitButtonEl","selectFields","radioButtonGroups","textFields","deleteButton","RenderingEventListener","processRendering","AbstractField","handleChangeEvent","isHidden","addFieldListener","listenerInList","getFieldDefinition","setInvalid","getValue","getFormattedValue","setValue","selectEl","selectedIndex","option","reset","clearValue","validate","setValid","TextAreaField","RadioButtonGroupField","SelectField","InputField","BasicFormImplementation","factoryElements","dataId","findFieldUiConfig","attributeId","rbg","getFormattedDataObject","formattedResult","isSameObject","currentObjId","suppliedObjId","FormDetailViewRenderer","setEventForwarder","displayItemReadonly","dataObject","hasPermissionToUpdateItem","startUpdate","setIsVisible","permissionChecker","hasPermissionToDeleteItem","handleActionItem","cancelled","deletedItem","formattedObj","saveNewItem","updateItem","CreatedByPermissionChecker","DetailViewListenerForwarder","DetailViewImplementation","currentItem","addEventDetailListener","DataObjectController","isCreatingNew","ChildViewListenerDelegate","LinkedCollectionDetailController","children","parentView","childView","canProceedWithSelection","confirm","canProceedWithCreateNew","ValidationHelper","targetDataFieldId","conditions","sourceDataFieldId","ListViewRendererUsingContext","CollectionViewEventHandlerDelegateUsingContext","contextDetail","ExerciseTypesViewUsingContext","buffer","ExerciseTypesCompositeView","exerciseTypes","exerciseTypeDetailRenderer","exerciseTypeDetailView","viewLinker","startingDisplayOrder","detailForm","createExerciseType","WorkoutSummarySidebar","WorkoutSummaryRenderer","currentChart","isStrength","red","blue","newColour","Math","sevenWorkouts","exerciseNames","exerciseBG","exerciseBR","labels","exerciseName","exercise","colours","datasets","exerciseType","itemBG","itemBR","bg","br","dataset","backgroundColor","borderColor","borderWidth","chartData","options","responsive","animation","maintainAspectRatio","scales","y","beginAtZero","WorkoutSummaryView","CurrentWorkoutSidebar","list","DefaultPermissionChecker","CurrentWorkoutExercisesView","CurrentWorkoutCompositeView","currentWorkout","workoutDef","workoutNameEl","App","exercises","itemRemoved","itemNewValue","addDurations","duration1","duration1Valid","duration2Valid","duration1Components","duration2Components","duration2","carry","sumSeconds","sumMinutes","duration1Hours","duration2Hours","sumHours","CarouselViewRendererUsingContext","lastRenderedContainer","lastRenderedCollectionName","lastRenderedCollection","previousWindowWidth","newWindowWidth","reRenderRequired","collectionConfig","backgroundEl","actionContainer","numberOfResults","itemsPerRow","numberOfRows","rowIndex","rowContainerEl","rowContainer","rowEl","row","activeRowPosition","first","last","activeRow","itemIndex","itemContainerEl","multipleItemsPerRowContainer","createDisplayElementForCollectionItem","WorkoutsViewUsingContext","weight","distance","summary","calculateExerciseSummary","chartRefs","ref","canvas","bgColour","brColour","str","chart","small","medium","large","xlarge","background","bgStrength","bgCardio","borderStrength","borderCardio","handleShowUserSearch","handleShowExerciseTypes","handleShowWorkoutSummary","handleShowCurrentWorkout","setupNavigationItemHandling","setupUserSearchViews","favouriteUsers","setupChatViews","chatLogView","onDocumentLoad","hideAllSideBars","countChanged","newCount","chatNavigationItem","addingExerciseToCurrentWorkout","showCurrentWorkout","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","call","m","O","chunkIds","fn","notFulfilled","Infinity","i","fulfilled","j","every","key","r","n","getter","__esModule","d","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","__webpack_exports__"],"sourceRoot":""}